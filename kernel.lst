
; 64tass Turbo Assembler Macro V1.54.1900 listing file
; 64tass --m65816 -D TARGET=1 --long-address --flat -b -o kernel.bin --list kernel.lst --labels=kernel.lbl src\kernel.asm
; Tue Mar 03 23:38:01 2020

;Offset	;Hex		;Monitor	;Source

;******  Command line definitions

=1					TARGET=1

;******  Processing input file: src\kernel.asm

=1					TARGET_FLASH = 1              ; The code is being assembled for Flash
=2					TARGET_RAM = 2                ; The code is being assembled for RAM

;******  Processing file: src\macros_inc.asm


;******  Return to file: src\kernel.asm


;******  Processing file: src\characters.asm

=$03					CHAR_CTRL_C = $03   ; CTRL-C
=$08					CHAR_BS = $08       ; Backspace (delete character to the left of the cursor)
=$09					CHAR_TAB = $09      ; TAB (moves cursor to next tabulated column)
=$0a					CHAR_LF = $0A       ; Line feed
=$0d					CHAR_CR = $0D       ; Carriage return
=$0f					CHAR_INS = $0F      ; Insert a space at the cursor
=$11					CHAR_UP = $11       ; Up arrow
=$1d					CHAR_RIGHT = $1D    ; Right arrow
=$20					CHAR_SP = $20       ; Space
=$91					CHAR_DOWN = $91     ; Down arrow
=$9d					CHAR_LEFT = $9D     ; Left arrow
=$7f					CHAR_DEL = $7F      ; Delete key (delete the character at the cursor)

;******  Return to file: src\kernel.asm


;******  Processing file: src\simulator_inc.asm


;******  Return to file: src\kernel.asm


;******  Processing file: src\page_00_inc.asm

=$000000				BANK0_BEGIN      = $000000 ;Start of bank 0 and Direct page
=$000000				unused_0000      = $000000 ;12 Bytes unused
=$000008				OPL2_ADDY_PTR_LO = $000008  ; THis Points towards the Instruments Database
=$000009				OPL2_ADDY_PTR_MD = $000009
=$00000a				OPL2_ADDY_PTR_HI = $00000A
=$00000c				SCREENBEGIN      = $00000C ;3 Bytes Start of screen in video RAM. This is the upper-left corrner of the current video page being written to. This may not be what's being displayed by VICKY. Update this if you change VICKY's display page.
=$00000f				COLS_VISIBLE     = $00000F ;2 Bytes Columns visible per screen line. A virtual line can be longer than displayed, up to COLS_PER_LINE long. Default = 80
=$000011				COLS_PER_LINE    = $000011 ;2 Bytes Columns in memory per screen line. A virtual line can be this long. Default=128
=$000013				LINES_VISIBLE    = $000013 ;2 Bytes The number of rows visible on the screen. Default=25
=$000015				LINES_MAX        = $000015 ;2 Bytes The number of rows in memory for the screen. Default=64
=$000017				CURSORPOS        = $000017 ;3 Bytes The next character written to the screen will be written in this location.
=$00001a				CURSORX          = $00001A ;2 Bytes This is where the blinking cursor sits. Do not edit this direectly. Call LOCATE to update the location and handle moving the cursor correctly.
=$00001c				CURSORY          = $00001C ;2 Bytes This is where the blinking cursor sits. Do not edit this direectly. Call LOCATE to update the location and handle moving the cursor correctly.
=$00001e				CURCOLOR         = $00001E ;1 Byte Color of next character to be printed to the screen.
=$00001f				COLORPOS         = $00001F ;3 Byte address of cursor's position in the color matrix
=$000022				STACKBOT         = $000022 ;2 Bytes Lowest location the stack should be allowed to write to. If SP falls below this value, the runtime should generate STACK OVERFLOW error and abort.
=$000024				STACKTOP         = $000024 ;2 Bytes Highest location the stack can occupy. If SP goes above this value, the runtime should generate STACK OVERFLOW error and abort.
=$000026				OPL2_OPERATOR    = $000026 ;
=$000027				OPL2_CHANNEL     = $000027 ;
=$000028				OPL2_REG_REGION  = $000028 ; Offset to the Group of Registers
=$00002a				OPL2_REG_OFFSET  = $00002A ; 2 Bytes (16Bits)
=$00002c				OPL2_IND_ADDY_LL = $00002C ; 2 Bytes Reserved (Only need 3)
=$00002e				OPL2_IND_ADDY_HL = $00002E ; 2 Bytes Reserved (Only need 3)
=$000030				OPL2_NOTE        = $000030 ; 1 Byte
=$000031				OPL2_OCTAVE      = $000031 ; 1 Byte
=$000032				OPL2_PARAMETER0  = $000032 ; 1 Byte - Key On/Feedback
=$000033				OPL2_PARAMETER1  = $000033 ; 1 Byte
=$000034				OPL2_PARAMETER2  = $000034 ; 1 Byte
=$000035				OPL2_PARAMETER3  = $000035 ; 1 Byte
=$000036				OPL2_LOOP        = $000036 ;
=$000036				OPL2_BLOCK       = $000036
=$000038				SDCARD_FILE_PTR  = $000038 ; 3 Bytes Pointer to Filename to open
=$00003c				SDCARD_BYTE_NUM  = $00003C ; 2Bytes
=$00003f				SDCARD_PRSNT_MNT = $00003F ; 1 Byte, Indicate that the SDCard is Present and that it is Mounted
=$000040				BM_CLEAR_SCRN_X  = $000040
=$000042				BM_CLEAR_SCRN_Y  = $000042
=$000040				RAD_STARTLINE    = $000040 ; 1 Byte
=$000041				RAD_PATTERN_IDX  = $000041 ; 1 Byte
=$000042				RAD_LINE         = $000042 ; 1 Byte
=$000043				RAD_LINENUMBER   = $000043 ; 1 Byte
=$000044				RAD_CHANNEL_NUM  = $000044 ; 1 Byte
=$000045				RAD_ISLASTCHAN   = $000045 ; 1 Byte
=$000046				RAD_Y_POINTER    = $000046 ; 2 Bytes
=$000048				RAD_TICK         = $000048
=$00004a				RAD_CHANNEL_DATA = $00004A ; 2 Bytes
=$00004c				RAD_CHANNE_EFFCT = $00004C
=$00004d				RAD_TEMP         = $00004D
=$000050				RAD_ADDR         = $000050 ; 3 bytes to avoid OPL2 errors.
=$000053				RAD_PATTRN       = $000053 ; 1 bytes - offset to patter
=$000054				RAD_PTN_DEST     = $000054 ; 3 bytes - where to write the pattern data
=$000057				RAD_CHANNEL      = $000057 ; 2 bytes - 0 to 8
=$000059				RAD_LAST_NOTE    = $000059 ; 1 if this is the last note
=$00005a				RAD_LINE_PTR     = $00005A ; 2 bytes - offset to memory location
=$000040				BMP_X_SIZE       = $000040 ; 2 Bytes
=$000042				BMP_Y_SIZE       = $000042 ; 2 Bytes
=$000044				BMP_PRSE_SRC_PTR = $000044 ; 3 Bytes
=$000048				BMP_PRSE_DST_PTR = $000048 ; 3 Bytes
=$00004c				BMP_COLOR_PALET  = $00004C ; 2 Bytes
=$00004e				SCRN_X_STRIDE    = $00004E ; 2 Bytes, Basically How many Pixel Accross in Bitmap Mode
=$000050				BMP_FILE_SIZE    = $000050 ; 4 Bytes
=$000054				BMP_POSITION_X   = $000054 ; 2 Bytes Where, the BMP will be position on the X Axis
=$000056				BMP_POSITION_Y   = $000056 ; 2 Bytes Where, the BMP will be position on the Y Axis
=$000058				BMP_PALET_CHOICE = $000058 ;
=$0000e0				MOUSE_PTR        = $0000E0
=$0000e1				MOUSE_POS_X_LO   = $0000E1
=$0000e2				MOUSE_POS_X_HI   = $0000E2
=$0000e3				MOUSE_POS_Y_LO   = $0000E3
=$0000e4				MOUSE_POS_Y_HI   = $0000E4
=$0000f0				USER_TEMP        = $0000F0 ;32 Bytes Temp space for user programs
=$000100				GAVIN_BLOCK      = $000100 ;256 Bytes Gavin reserved, overlaps debugging registers at $1F0
=$000100				MULTIPLIER_0     = $000100 ;0 Byte  Unsigned multiplier
=$000100				M0_OPERAND_A     = $000100 ;2 Bytes Operand A (ie: A x B)
=$000102				M0_OPERAND_B     = $000102 ;2 Bytes Operand B (ie: A x B)
=$000104				M0_RESULT        = $000104 ;4 Bytes Result of A x B
=$000108				MULTIPLIER_1     = $000108 ;0 Byte  Signed Multiplier
=$000108				M1_OPERAND_A     = $000108 ;2 Bytes Operand A (ie: A x B)
=$00010a				M1_OPERAND_B     = $00010A ;2 Bytes Operand B (ie: A x B)
=$00010c				M1_RESULT        = $00010C ;4 Bytes Result of A x B
=$000108				DIVIDER_0        = $000108 ;0 Byte  Unsigned divider
=$000108				D0_OPERAND_A     = $000108 ;2 Bytes Divider 0 Dividend ex: A in  A/B
=$00010a				D0_OPERAND_B     = $00010A ;2 Bytes Divider 0 Divisor ex B in A/B
=$00010c				D0_RESULT        = $00010C ;2 Bytes Quotient result of A/B ex: 7/2 = 3 r 1
=$00010e				D0_REMAINDER     = $00010E ;2 Bytes Remainder of A/B ex: 1 in 7/2=3 r 1
=$000110				DIVIDER_1        = $000110 ;0 Byte  Signed divider
=$000110				D1_OPERAND_A     = $000110 ;2 Bytes Divider 1 Dividend ex: A in  A/B
=$000112				D1_OPERAND_B     = $000112 ;2 Bytes Divider 1 Divisor ex B in A/B
=$000114				D1_RESULT        = $000114 ;2 Bytes Signed quotient result of A/B ex: 7/2 = 3 r 1
=$000116				D1_REMAINDER     = $000116 ;2 Bytes Signed remainder of A/B ex: 1 in 7/2=3 r 1
=$000120				ADDER_SIGNED_32  = $000120 ; The 32 Bit Adders takes 12Byte that are NOT RAM Location
=$000120				ADDER_A          = $000120 ; 4 bytes (32 bit) Accumulator A
=$000124				ADDER_B          = $000124 ; 4 bytes (32 bit) Accumulator B
=$000128				ADDER_R          = $000128 ; 4 bytes (32 bit) Result
=$000140				INT_CONTROLLER   = $000140 ; $000140...$00015F Interrupt Controller
=$000160				TIMER_CONTROLLER = $000160 ; $000160...$00017F Timer0/Timer1/Timer2 Block
=$000160				TIMER_CTRL_REGLL = $000160 ;
=$000161				TIMER_CTRL_REGLH = $000161 ;
=$000162				TIMER_CTRL_REGHL = $000162 ;
=$000163				TIMER_CTRL_REGHH = $000163 ;
=$000240				CPU_REGISTERS    = $000240 ; Byte
=$000240				CPUPC            = $000240 ;2 Bytes Program Counter (PC)
=$000242				CPUPBR           = $000242 ;2 Bytes Program Bank Register (K)
=$000244				CPUA             = $000244 ;2 Bytes Accumulator (A)
=$000246				CPUX             = $000246 ;2 Bytes X Register (X)
=$000248				CPUY             = $000248 ;2 Bytes Y Register (Y)
=$00024a				CPUSTACK         = $00024A ;2 Bytes Stack Pointer (S)
=$00024c				CPUDP            = $00024C ;2 Bytes Direct Page Register (D)
=$00024e				CPUDBR           = $00024E ;1 Byte  Data Bank Register (B)
=$00024f				CPUFLAGS         = $00024F ;1 Byte  Flags (P)
=$000250				MONITOR_VARS     = $000250 ; Byte  MONITOR Variables. BASIC variables may overlap this space
=$000250				MCMDADDR         = $000250 ;3 Bytes Address of the current line of text being processed by the command parser. Can be in display memory or a variable in memory. MONITOR will parse up to MTEXTLEN characters or to a null character.
=$000253				MCMP_TEXT        = $000253 ;3 Bytes Address of symbol being evaluated for COMPARE routine
=$000256				MCMP_LEN         = $000256 ;2 Bytes Length of symbol being evaluated for COMPARE routine
=$000258				MCMD             = $000258 ;3 Bytes Address of the current command/function string
=$00025b				MCMD_LEN         = $00025B ;2 Bytes Length of the current command/function string
=$00025d				MARG1            = $00025D ;4 Bytes First command argument. May be data or address, depending on command
=$000261				MARG2            = $000261 ;4 Bytes First command argument. May be data or address, depending on command. Data is 32-bit number. Address is 24-bit address and 8-bit length.
=$000265				MARG3            = $000265 ;4 Bytes First command argument. May be data or address, depending on command. Data is 32-bit number. Address is 24-bit address and 8-bit length.
=$000269				MARG4            = $000269 ;4 Bytes First command argument. May be data or address, depending on command. Data is 32-bit number. Address is 24-bit address and 8-bit length.
=$00026d				MARG5            = $00026D ;4 Bytes First command argument. May be data or address, depending on command. Data is 32-bit number. Address is 24-bit address and 8-bit length.
=$000271				MARG6            = $000271 ;4 Bytes First command argument. May be data or address, depending on command. Data is 32-bit number. Address is 24-bit address and 8-bit length.
=$000275				MARG7            = $000275 ;4 Bytes First command argument. May be data or address, depending on command. Data is 32-bit number. Address is 24-bit address and 8-bit length.
=$000279				MARG8            = $000279 ;4 Bytes First command argument. May be data or address, depending on command. Data is 32-bit number. Address is 24-bit address and 8-bit length.
=$000300				LOADFILE_VARS    = $000300 ; Byte
=$000300				LOADFILE_NAME    = $000300 ;3 Bytes (addr) Name of file to load. Address in Data Page
=$000303				LOADFILE_LEN     = $000303 ;1 Byte  Length of filename. 0=Null Terminated
=$000304				LOADPBR          = $000304 ;1 Byte  First Program Bank of loaded file ($05 segment)
=$000305				LOADPC           = $000305 ;2 Bytes Start address of loaded file ($05 segment)
=$000307				LOADDBR          = $000307 ;1 Byte  First data bank of loaded file ($06 segment)
=$000308				LOADADDR         = $000308 ;2 Bytes FIrst data address of loaded file ($06 segment)
=$00030a				LOADFILE_TYPE    = $00030A ;3 Bytes (addr) File type string in loaded data file. Actual string data will be in Bank 1. Valid values are BIN, PRG, P16
=$00030d				BLOCK_LEN        = $00030D ;2 Bytes Length of block being loaded
=$00030f				BLOCK_ADDR       = $00030F ;2 Bytes (temp) Address of block being loaded
=$000311				BLOCK_BANK       = $000311 ;1 Byte  (temp) Bank of block being loaded
=$000312				BLOCK_COUNT      = $000312 ;2 Bytes (temp) Counter of bytes read as file is loaded
=$000320				SDOS_BLOCK_BEGIN = $000320 ;
=$000324				SDOS_LOAD_ADDY   = $000324 ; 4 Bytes (Uses 3 Only)
=$000328				SDOS_FILE_SIZE   = $000328 ;
=$00032c				SDOS_BYTE_NUMBER = $00032C ; Number of Byte to Read or Write before changing the Pointer
=$000330				SDOS_REG_WR32_AD = $000330 ; 4 Bytes (Used to read and Write Values in/from CH376S)
=$000334				SDOS_BYTE_PTR    = $000334
=$000337				SDOS_FILE_REC_PTR= $000337 ; 3 byte pointer to a simple file struct
=$00033a				SDOS_LOOP        = $00033A ; variable to count file length
=$000380				SDOS_FILE_NAME   = $000380 ; // Max of 128 Chars
=$000400				SDOS_BLK_BEGIN   = $000400 ; 512 Bytes to Store SD Card Incoming or Outcoming Block
=$0006ff				SDOS_BLK_END     = $0006FF ;
=$000700				CURRUART         = $000700 ; 3-bytes: the base address of the current UART
=$000703				CHAN_OUT         = $000703 ; 1-byte: the number of the current output channel (for PUTC, etc.)
=$000704				CHAN_IN          = $000704 ; 1-byte: the number of the current input channel (for GETCH, etc.)
=$000f00				KEY_BUFFER       = $000F00 ;64 Bytes keyboard buffer
=$0080					KEY_BUFFER_SIZE  = $0080 ;128 Bytes (constant) keyboard buffer length
=$000f7f				KEY_BUFFER_END   = $000F7F ;1 Byte  Last byte of keyboard buffer
=$000f83				KEY_BUFFER_CMD   = $000F83 ;1 Byte  Indicates the Command Process Status
=$000f84				COMMAND_SIZE_STR = $000F84 ; 1 Byte
=$000f86				COMMAND_COMP_TMP = $000F86 ; 2 Bytes
=$000f87				KEYBOARD_SC_FLG  = $000F87 ;1 Bytes that indicate the Status of Left Shift, Left CTRL, Left ALT, Right Shift
=$000f88				KEYBOARD_SC_TMP  = $000F88 ;1 Byte, Interrupt Save Scan Code while Processing
=$000f89				KEYBOARD_LOCKS   = $000F89 ;1 Byte, the status of the various lock keys
=$000f8a				KEYFLAG          = $000F8A ;1 Byte, flag to indicate if CTRL-C has been pressed
=$000f8b				KEY_BUFFER_RPOS  = $000F8B ;2 Byte, position of the character to read from the KEY_BUFFER
=$000f8d				KEY_BUFFER_WPOS  = $000F8D ;2 Byte, position of the character to write to the KEY_BUFFER
=$001000				KERNEL_JMP_BEGIN = $001000 ; Reserved for the Kernel jump table
=$001fff				KERNEL_JMP_END   = $001FFF
=$002000				TEST_BEGIN       = $002000 ;28672 Bytes Test/diagnostic code for prototype.
=$007fff				TEST_END         = $007FFF ;0 Byte
=$008000				STACK_BEGIN      = $008000 ;32512 Bytes The default beginning of stack space
=$00feff				STACK_END        = $00FEFF ;0 Byte  End of stack space. Everything below this is I/O space
=$38ff00				ISR_BEGIN        = $38FF00 ; Byte  Beginning of CPU vectors in Direct page
=$38ff00				HRESET           = $38FF00 ;16 Bytes Handle RESET asserted. Reboot computer and re-initialize the kernel.
=$38ff10				HCOP             = $38FF10 ;16 Bytes Handle the COP instruction. Program use; not used by OS
=$38ff20				HBRK             = $38FF20 ;16 Bytes Handle the BRK instruction. Returns to BASIC Ready prompt.
=$38ff30				HABORT           = $38FF30 ;16 Bytes Handle ABORT asserted. Return to Ready prompt with an error message.
=$38ff40				HNMI             = $38FF40 ;32 Bytes Handle NMI
=$38ff60				HIRQ             = $38FF60 ;32 Bytes Handle IRQ
=$38ff80				Unused_FF80      = $38FF80 ;End of direct page Interrrupt handlers
=$38ffe0				VECTORS_BEGIN    = $38FFE0 ;0 Byte  Interrupt vectors
=$38ffe0				JMP_READY        = $38FFE0 ;4 Bytes Jumps to ROM READY routine. Modified whenever alternate command interpreter is loaded.
=$38ffe4				VECTOR_COP       = $38FFE4 ;2 Bytes Native COP Interrupt vector
=$38ffe6				VECTOR_BRK       = $38FFE6 ;2 Bytes Native BRK Interrupt vector
=$38ffe8				VECTOR_ABORT     = $38FFE8 ;2 Bytes Native ABORT Interrupt vector
=$38ffea				VECTOR_NMI       = $38FFEA ;2 Bytes Native NMI Interrupt vector
=$38ffec				VECTOR_RESET     = $38FFEC ;2 Bytes Unused (Native RESET vector)
=$38ffee				VECTOR_IRQ       = $38FFEE ;2 Bytes Native IRQ Vector
=$38fff0				RETURN           = $38FFF0 ;4 Bytes RETURN key handler. Points to BASIC or MONITOR subroutine to execute when RETURN is pressed.
=$38fff4				VECTOR_ECOP      = $38FFF4 ;2 Bytes Emulation mode interrupt handler
=$38fff6				VECTOR_EBRK      = $38FFF6 ;2 Bytes Emulation mode interrupt handler
=$38fff8				VECTOR_EABORT    = $38FFF8 ;2 Bytes Emulation mode interrupt handler
=$38fffa				VECTOR_ENMI      = $38FFFA ;2 Bytes Emulation mode interrupt handler
=$38fffc				VECTOR_ERESET    = $38FFFC ;2 Bytes Emulation mode interrupt handler
=$38fffe				VECTOR_EIRQ      = $38FFFE ;2 Bytes Emulation mode interrupt handler
=$400000				VECTORS_END      = $400000 ;*End of vector space
=$00ffff				BANK0_END        = $00FFFF ;End of Bank 00 and Direct page

;******  Return to file: src\kernel.asm


;******  Processing file: src\page_00_data.asm

>380000	00 a0 af			                .long $AFA000       ; SCREENBEGIN, 3 bytes, Start of screen in video RAM. This is the upper-left corrner of the current video page being written to. This may not be what's being displayed by VICKY. Update this if you change VICKY's display page.
>380003	4c 00				                .word 76            ; COLS_VISIBLE, 2 bytes, Columns visible per screen line. A virtual line can be longer than displayed, up to COLS_PER_LINE long. Default = 80
>380005	80 00				                .word 128           ; COLS_PER_LINE, 2 bytes, Columns in memory per screen line. A virtual line can be this long. Default=128
>380007	38 00				                .word 56            ; LINES_VISIBLE, 2 bytes, The number of rows visible on the screen. Default=25
>380009	40 00				                .word 64            ; LINES_MAX, 2 bytes, The number of rows in memory for the screen. Default=64
>38000b	00 a0 af			                .long $AFA000       ; CURSORPOS, 3 bytes, The next character written to the screen will be written in this location.
>38000e	00 00				                .word 0             ; CURSORX, 2 bytes, This is where the blinking cursor sits. Do not edit this direectly. Call LOCATE to update the location and handle moving the cursor correctly.
>380010	00 00				                .word 0             ; CURSORY, 2 bytes, This is where the blinking cursor sits. Do not edit this direectly. Call LOCATE to update the location and handle moving the cursor correctly.
>380012	0f				                .byte $0F           ; CURCOLOR, 2 bytes, Color of next character to be printed to the screen.
>380013	00				                .byte $00           ; CURATTR, 2 bytes, Attribute of next character to be printed to the screen.
>380014	00 80				                .word STACK_BEGIN   ; STACKBOT, 2 bytes, Lowest location the stack should be allowed to write to. If SP falls below this value, the runtime should generate STACK OVERFLOW error and abort.
>380016	ff fe				                .word STACK_END     ; STACKTOP, 2 bytes, Highest location the stack can occupy. If SP goes above this value, the runtime should generate STACK OVERFLOW error and abort.

;******  Return to file: src\kernel.asm


;******  Processing file: src\page_00_code.asm

.38ff00	18		clc		RHRESET         CLC
.38ff01	fb		xce		                XCE
.38ff02	5c 00 10 38	jmp $381000	                JML BOOT
.38ff10					RHCOP
.38ff10	c2 30		rep #$30	                REP #$30        ; set A&X long
.38ff12	8b		phb		                PHB
.38ff13	0b		phd		                PHD
.38ff14	48		pha		                PHA
.38ff15	da		phx		                PHX
.38ff16	5a		phy		                PHY
.38ff17	5c 08 10 38	jmp $381008	                JML BREAK
.38ff20					RHBRK
.38ff20	c2 30		rep #$30	                REP #$30        ; set A&X long
.38ff22	8b		phb		                PHB
.38ff23	0b		phd		                PHD
.38ff24	48		pha		                PHA
.38ff25	da		phx		                PHX
.38ff26	5a		phy		                PHY
.38ff27	5c 08 10 38	jmp $381008	                JML BREAK
.38ff30					RHABORT
.38ff30	c2 30		rep #$30	                REP #$30        ; set A&X long
.38ff32	8b		phb		                PHB
.38ff33	0b		phd		                PHD
.38ff34	48		pha		                PHA
.38ff35	da		phx		                PHX
.38ff36	5a		phy		                PHY
.38ff37	5c 08 10 38	jmp $381008	                JML BREAK
.38ff40					 RHNMI
.38ff40	c2 30		rep #$30	                REP #$30        ; set A&X long
.38ff42	8b		phb		                PHB
.38ff43	0b		phd		                PHD
.38ff44	48		pha		                PHA
.38ff45	da		phx		                PHX
.38ff46	5a		phy		                PHY
.38ff47	22 1e 12 38	jsl $38121e	                JSL NMI_HANDLER
.38ff4b	7a		ply		                PLY
.38ff4c	fa		plx		                PLX
.38ff4d	68		pla		                PLA
.38ff4e	2b		pld		                PLD
.38ff4f	ab		plb		                PLB
.38ff50	40		rti		                RTI
.38ff60					RHIRQ
.38ff60	c2 30		rep #$30	                REP #$30        ; set A&X long
.38ff62	8b		phb		                PHB
.38ff63	0b		phd		                PHD
.38ff64	48		pha		                PHA
.38ff65	da		phx		                PHX
.38ff66	5a		phy		                PHY
.38ff67	22 f0 10 38	jsl $3810f0	                JSL IRQ_HANDLER
.38ff6b	7a		ply		                PLY
.38ff6c	fa		plx		                PLX
.38ff6d	68		pla		                PLA
.38ff6e	2b		pld		                PLD
.38ff6f	ab		plb		                PLB
.38ff70	40		rti		                RTI
.38ffe0	5c 04 00 3a	jmp $3a0004	JUMP_READY      JML MONITOR    ; Kernel READY routine. Rewrite this address to jump to a custom kernel.
>38ffe4	10 ff				RVECTOR_COP     .addr HCOP     ; FFE4
>38ffe6	20 ff				RVECTOR_BRK     .addr HBRK     ; FFE6
>38ffe8	30 ff				RVECTOR_ABORT   .addr HABORT   ; FFE8
>38ffea	40 ff				RVECTOR_NMI     .addr HNMI     ; FFEA
>38ffec	00 00				                .word $0000    ; FFEC
>38ffee	60 ff				RVECTOR_IRQ     .addr HIRQ    ; FFEE
.38fff0	5c 91 0b 39	jmp $390b91	RRETURN         JML IRETURN
>38fff4	10 ff				RVECTOR_ECOP    .addr HCOP     ; FFF4
>38fff6	20 ff				RVECTOR_EBRK    .addr HBRK     ; FFF6
>38fff8	30 ff				RVECTOR_EABORT  .addr HABORT   ; FFF8
>38fffa	40 ff				RVECTOR_ENMI    .addr HNMI     ; FFFA
>38fffc	00 ff				RVECTOR_ERESET  .addr HRESET   ; FFFC
>38fffe	60 ff				RVECTOR_EIRQ    .addr HIRQ     ; FFFE

;******  Return to file: src\kernel.asm


;******  Processing file: src\Math_def.asm

=$000100				UNSIGNED_MULT_A_LO  = $000100
=$000101				UNSIGNED_MULT_A_HI  = $000101
=$000102				UNSIGNED_MULT_B_LO  = $000102
=$000103				UNSIGNED_MULT_B_HI  = $000103
=$000104				UNSIGNED_MULT_AL_LO = $000104
=$000105				UNSIGNED_MULT_AL_HI = $000105
=$000106				UNSIGNED_MULT_AH_LO = $000106
=$000107				UNSIGNED_MULT_AH_HI = $000107
=$000108				SIGNED_MULT_A_LO    = $000108
=$000109				SIGNED_MULT_A_HI    = $000109
=$00010a				SIGNED_MULT_B_LO    = $00010A
=$00010b				SIGNED_MULT_B_HI    = $00010B
=$00010c				SIGNED_MULT_AL_LO   = $00010C
=$00010d				SIGNED_MULT_AL_HI   = $00010D
=$00010e				SIGNED_MULT_AH_LO   = $00010E
=$00010f				SIGNED_MULT_AH_HI   = $00010F
=$000110				UNSIGNED_DIV_DEM_LO = $000110
=$000111				UNSIGNED_DIV_DEM_HI = $000111
=$000112				UNSIGNED_DIV_NUM_LO = $000112
=$000113				UNSIGNED_DIV_NUM_HI = $000113
=$000114				UNSIGNED_DIV_QUO_LO = $000114
=$000115				UNSIGNED_DIV_QUO_HI = $000115
=$000116				UNSIGNED_DIV_REM_LO = $000116
=$000117				UNSIGNED_DIV_REM_HI = $000117
=$000118				SIGNED_DIV_DEM_LO   = $000118
=$000119				SIGNED_DIV_DEM_HI   = $000119
=$00011a				SIGNED_DIV_NUM_LO   = $00011A
=$00011b				SIGNED_DIV_NUM_HI   = $00011B
=$00011c				SIGNED_DIV_QUO_LO   = $00011C
=$00011d				SIGNED_DIV_QUO_HI   = $00011D
=$00011e				SIGNED_DIV_REM_LO   = $00011E
=$00011f				SIGNED_DIV_REM_HI   = $00011F
=$000120				ADDER32_A_LL        = $000120
=$000121				ADDER32_A_LH        = $000121
=$000122				ADDER32_A_HL        = $000122
=$000123				ADDER32_A_HH        = $000123
=$000124				ADDER32_B_LL        = $000124
=$000125				ADDER32_B_LH        = $000125
=$000126				ADDER32_B_HL        = $000126
=$000127				ADDER32_B_HH        = $000127
=$000128				ADDER32_R_LL        = $000128
=$000129				ADDER32_R_LH        = $000129
=$00012a				ADDER32_R_HL        = $00012A
=$00012b				ADDER32_R_HH        = $00012B

;******  Return to file: src\kernel.asm


;******  Processing file: src\interrupt_def.asm

=$000140				INT_PENDING_REG0 = $000140 ;
=$000141				INT_PENDING_REG1 = $000141 ;
=$000142				INT_PENDING_REG2 = $000142 ;
=$000143				INT_PENDING_REG3 = $000143 ; FMX Model
=$000144				INT_POL_REG0     = $000144 ;
=$000145				INT_POL_REG1     = $000145 ;
=$000146				INT_POL_REG2     = $000146 ;
=$000147				INT_POL_REG7     = $000147 ; FMX Model
=$000148				INT_EDGE_REG0    = $000148 ;
=$000149				INT_EDGE_REG1    = $000149 ;
=$00014a				INT_EDGE_REG2    = $00014A ;
=$00014b				INT_EDGE_REG3    = $00014B ; FMX Model
=$00014c				INT_MASK_REG0    = $00014C ;
=$00014d				INT_MASK_REG1    = $00014D ;
=$00014e				INT_MASK_REG2    = $00014E ;
=$00014f				INT_MASK_REG3    = $00014F ; FMX Model
=$01					FNX0_INT00_SOF        = $01  ;Start of Frame @ 60FPS
=$02					FNX0_INT01_SOL        = $02  ;Start of Line (Programmable)
=$04					FNX0_INT02_TMR0       = $04  ;Timer 0 Interrupt
=$08					FNX0_INT03_TMR1       = $08  ;Timer 1 Interrupt
=$10					FNX0_INT04_TMR2       = $10  ;Timer 2 Interrupt
=$20					FNX0_INT05_RTC        = $20  ;Real-Time Clock Interrupt
=$40					FNX0_INT06_FDC        = $40  ;Floppy Disk Controller
=$80					FNX0_INT07_MOUSE      = $80  ; Mouse Interrupt (INT12 in SuperIO IOspace)
=$01					FNX1_INT00_KBD        = $01  ;Keyboard Interrupt
=$02					FNX1_INT01_SC0        = $02  ;VICKY_II (INT2) Sprite 2 Sprite Collision
=$04					FNX1_INT02_SC1        = $04  ;VICKY_II (INT3) Sprite 2 Tiles Collision
=$08					FNX1_INT03_COM2       = $08  ;Serial Port 2
=$10					FNX1_INT04_COM1       = $10  ;Serial Port 1
=$20					FNX1_INT05_MPU401     = $20  ;Midi Controller Interrupt
=$40					FNX1_INT06_LPT        = $40  ;Parallel Port
=$80					FNX1_INT07_SDCARD     = $80  ;SD Card Controller Interrupt (CH376S)
=$01					FNX2_INT00_OPL3       = $01  ;OPl3
=$02					FNX2_INT01_GABE_INT0  = $02  ;GABE (INT0) - TBD
=$04					FNX2_INT02_GABE_INT1  = $04  ;GABE (INT1) - TBD
=$08					FNX2_INT03_SDMA       = $08  ;VICKY_II (INT4)
=$10					FNX2_INT04_VDMA       = $10  ;VICKY_II (INT5)
=$20					FNX2_INT05_GABE_INT2  = $20  ;GABE (INT2) - TBD
=$40					FNX2_INT06_EXT        = $40  ;External Expansion
=$80					FNX2_INT07_SDCARD_INS = $80  ; SDCARD Insertion
=$01					FNX3_INT00_OPN2       = $01  ;OPN2
=$02					FNX3_INT01_OPM        = $02  ;OPM
=$04					FNX3_INT02_IDE        = $04  ;HDD IDE INTERRUPT
=$08					FNX3_INT03_TBD        = $08  ;TBD
=$10					FNX3_INT04_TBD        = $10  ;TBD
=$20					FNX3_INT05_TBD        = $20  ;GABE (INT2) - TBD
=$40					FNX3_INT06_TBD        = $40  ;External Expansion
=$80					FNX3_INT07_TBD        = $80  ; SDCARD Insertion

;******  Return to file: src\kernel.asm


;******  Processing file: src\dram_inc.asm

=$afa000				SCREEN_PAGE0     = $AFA000 ;8192 Bytes First page of display RAM. This is used at boot time to display the welcome screen and the BASIC or MONITOR command screens.
=$afc000				SCREEN_PAGE1     = $AFC000 ;8192 Bytes Additional page of display RAM. This can be used for page flipping or to handle multiple edit buffers.
=$b00000				SCREEN_END       = $B00000 ;End of display memory

;******  Return to file: src\kernel.asm


;******  Processing file: src\vicky_def.asm

=$af0000				MASTER_CTRL_REG_L	      = $AF0000
=$01					Mstr_Ctrl_Text_Mode_En  = $01       ; Enable the Text Mode
=$02					Mstr_Ctrl_Text_Overlay  = $02       ; Enable the Overlay of the text mode on top of Graphic Mode (the Background Color is ignored)
=$04					Mstr_Ctrl_Graph_Mode_En = $04       ; Enable the Graphic Mode
=$08					Mstr_Ctrl_Bitmap_En     = $08       ; Enable the Bitmap Module In Vicky
=$10					Mstr_Ctrl_TileMap_En    = $10       ; Enable the Tile Module in Vicky
=$20					Mstr_Ctrl_Sprite_En     = $20       ; Enable the Sprite Module in Vicky
=$40					Mstr_Ctrl_GAMMA_En      = $40       ; this Enable the GAMMA correction - The Analog and DVI have different color value, the GAMMA is great to correct the difference
=$80					Mstr_Ctrl_Disable_Vid   = $80       ; This will disable the Scanning of the Video hence giving 100% bandwith to the CPU
=$af0001				MASTER_CTRL_REG_H	      = $AF0001
=$af0002				VKY_RESERVED_00         = $AF0002
=$af0003				VKY_RESERVED_01         = $AF0003
=$01					Border_Ctrl_Enable      = $01
=$af0004				BORDER_CTRL_REG         = $AF0004 ; Bit[0] - Enable (1 by default)  Bit[4..6]: X Scroll Offset ( Will scroll Left) (Acceptable Value: 0..7)
=$af0005				BORDER_COLOR_B          = $AF0005
=$af0006				BORDER_COLOR_G          = $AF0006
=$af0007				BORDER_COLOR_R          = $AF0007
=$af0008				BORDER_X_SIZE           = $AF0008; X-  Values: 0 - 32 (Default: 32)
=$af0009				BORDER_Y_SIZE           = $AF0009; Y- Values 0 -32 (Default: 32)
=$af000d				BACKGROUND_COLOR_B      = $AF000D ; When in Graphic Mode, if a pixel is "0" then the Background pixel is chosen
=$af000e				BACKGROUND_COLOR_G      = $AF000E
=$af000f				BACKGROUND_COLOR_R      = $AF000F ;
=$af0010				VKY_TXT_CURSOR_CTRL_REG = $AF0010   ;[0]  Enable Text Mode
=$01					Vky_Cursor_Enable       = $01
=$02					Vky_Cursor_Flash_Rate0  = $02
=$04					Vky_Cursor_Flash_Rate1  = $04
=$08					Vky_Cursor_FONT_Page0   = $08       ; Pick Font Page 0 or Font Page 1
=$10					Vky_Cursor_FONT_Page1   = $10       ; Pick Font Page 0 or Font Page 1
=$af0011				VKY_TXT_START_ADD_PTR   = $AF0011   ; This is an offset to change the Starting address of the Text Mode Buffer (in x)
=$af0012				VKY_TXT_CURSOR_CHAR_REG = $AF0012
=$af0013				VKY_TXT_CURSOR_COLR_REG = $AF0013
=$af0014				VKY_TXT_CURSOR_X_REG_L  = $AF0014
=$af0015				VKY_TXT_CURSOR_X_REG_H  = $AF0015
=$af0016				VKY_TXT_CURSOR_Y_REG_L  = $AF0016
=$af0017				VKY_TXT_CURSOR_Y_REG_H  = $AF0017
=$af001b				VKY_LINE_IRQ_CTRL_REG   = $AF001B ;[0] - Enable Line 0, [1] -Enable Line 1
=$af001c				VKY_LINE0_CMP_VALUE_LO  = $AF001C ;Write Only [7:0]
=$af001d				VKY_LINE0_CMP_VALUE_HI  = $AF001D ;Write Only [3:0]
=$af001e				VKY_LINE1_CMP_VALUE_LO  = $AF001E ;Write Only [7:0]
=$af001f				VKY_LINE1_CMP_VALUE_HI  = $AF001F ;Write Only [3:0]
=$af001c				VKY_INFO_CHIP_NUM_L     = $AF001C
=$af001d				VKY_INFO_CHIP_NUM_H     = $AF001D
=$af001e				VKY_INFO_CHIP_VER_L     = $AF001E
=$af001f				VKY_INFO_CHIP_VER_H     = $AF001F
=$01					TILE_Enable             = $01
=$02					TILE_LUT0               = $02
=$04					TILE_LUT1               = $04
=$08					TILE_LUT2               = $08
=$80					TILESHEET_256x256_En    = $80   ; 0 -> Sequential, 1-> 256x256 Tile Sheet Striding
=$af0100				TL0_CONTROL_REG         = $AF0100       ; Bit[0] - Enable, Bit[3:1] - LUT Select,
=$af0101				TL0_START_ADDY_L        = $AF0101       ; Not USed right now - Starting Address to where is the MAP
=$af0102				TL0_START_ADDY_M        = $AF0102
=$af0103				TL0_START_ADDY_H        = $AF0103
=$af0104				TL0_MAP_X_STRIDE_L      = $AF0104       ; The Stride of the Map
=$af0105				TL0_MAP_X_STRIDE_H      = $AF0105
=$af0106				TL0_MAP_Y_STRIDE_L      = $AF0106       ; The Stride of the Map
=$af0107				TL0_MAP_Y_STRIDE_H      = $AF0107
=$af0108				TL1_CONTROL_REG         = $AF0108       ; Bit[0] - Enable, Bit[3:1] - LUT Select,
=$af0109				TL1_START_ADDY_L        = $AF0109       ; Not USed right now - Starting Address to where is the MAP
=$af010a				TL1_START_ADDY_M        = $AF010A
=$af010b				TL1_START_ADDY_H        = $AF010B
=$af010c				TL1_MAP_X_STRIDE_L      = $AF010C       ; The Stride of the Map
=$af010d				TL1_MAP_X_STRIDE_H      = $AF010D
=$af010e				TL1_MAP_Y_STRIDE_L      = $AF010E       ; The Stride of the Map
=$af010f				TL1_MAP_Y_STRIDE_H      = $AF010F
=$af0110				TL2_CONTROL_REG         = $AF0110       ; Bit[0] - Enable, Bit[3:1] - LUT Select,
=$af0111				TL2_START_ADDY_L        = $AF0111       ; Not USed right now - Starting Address to where is the MAP
=$af0112				TL2_START_ADDY_M        = $AF0112
=$af0113				TL2_START_ADDY_H        = $AF0113
=$af0114				TL2_MAP_X_STRIDE_L      = $AF0114       ; The Stride of the Map
=$af0115				TL2_MAP_X_STRIDE_H      = $AF0115
=$af0116				TL2_MAP_Y_STRIDE_L      = $AF0116       ; The Stride of the Map
=$af0117				TL2_MAP_Y_STRIDE_H      = $AF0117
=$af0118				TL3_CONTROL_REG         = $AF0118       ; Bit[0] - Enable, Bit[3:1] - LUT Select,
=$af0119				TL3_START_ADDY_L        = $AF0119       ; Not USed right now - Starting Address to where is the MAP
=$af011a				TL3_START_ADDY_M        = $AF011A
=$af011b				TL3_START_ADDY_H        = $AF011B
=$af011c				TL3_MAP_X_STRIDE_L      = $AF011C       ; The Stride of the Map
=$af011d				TL3_MAP_X_STRIDE_H      = $AF011D
=$af011e				TL3_MAP_Y_STRIDE_L      = $AF011E       ; The Stride of the Map
=$af011f				TL3_MAP_Y_STRIDE_H      = $AF011F
=$af0140				BM_CONTROL_REG          = $AF0140
=$af0141				BM_START_ADDY_L         = $AF0141
=$af0142				BM_START_ADDY_M         = $AF0142
=$af0143				BM_START_ADDY_H         = $AF0143
=$af0144				BM_X_SIZE_L             = $AF0144
=$af0145				BM_X_SIZE_H             = $AF0145
=$af0146				BM_Y_SIZE_L             = $AF0146
=$af0147				BM_Y_SIZE_H             = $AF0147
=$af0148				BM_RESERVED_0           = $AF0148
=$af0149				BM_RESERVED_1           = $AF0149
=$af014a				BM_RESERVED_2           = $AF014A
=$af014b				BM_RESERVED_3           = $AF014B
=$af014c				BM_RESERVED_4           = $AF014C
=$af014d				BM_RESERVED_5           = $AF014D
=$af014e				BM_RESERVED_6           = $AF014E
=$af014f				BM_RESERVED_7           = $AF014F
=$01					SPRITE_Enable             = $01
=$02					SPRITE_LUT0               = $02 ; This is the LUT that the Sprite will use
=$04					SPRITE_LUT1               = $04
=$08					SPRITE_LUT2               = $08 ; Only 4 LUT for Now, So this bit is not used.
=$10					SPRITE_DEPTH0             = $10 ; This is the Layer the Sprite will be Displayed in
=$20					SPRITE_DEPTH1             = $20
=$40					SPRITE_DEPTH2             = $40
=$af0200				SP00_CONTROL_REG        = $AF0200
=$af0201				SP00_ADDY_PTR_L         = $AF0201
=$af0202				SP00_ADDY_PTR_M         = $AF0202
=$af0203				SP00_ADDY_PTR_H         = $AF0203
=$af0204				SP00_X_POS_L            = $AF0204
=$af0205				SP00_X_POS_H            = $AF0205
=$af0206				SP00_Y_POS_L            = $AF0206
=$af0207				SP00_Y_POS_H            = $AF0207
=$af0208				SP01_CONTROL_REG        = $AF0208
=$af0209				SP01_ADDY_PTR_L         = $AF0209
=$af020a				SP01_ADDY_PTR_M         = $AF020A
=$af020b				SP01_ADDY_PTR_H         = $AF020B
=$af020c				SP01_X_POS_L            = $AF020C
=$af020d				SP01_X_POS_H            = $AF020D
=$af020e				SP01_Y_POS_L            = $AF020E
=$af020f				SP01_Y_POS_H            = $AF020F
=$af0210				SP02_CONTROL_REG        = $AF0210
=$af0211				SP02_ADDY_PTR_L         = $AF0211
=$af0212				SP02_ADDY_PTR_M         = $AF0212
=$af0213				SP02_ADDY_PTR_H         = $AF0213
=$af0214				SP02_X_POS_L            = $AF0214
=$af0215				SP02_X_POS_H            = $AF0215
=$af0216				SP02_Y_POS_L            = $AF0216
=$af0217				SP02_Y_POS_H            = $AF0217
=$af0218				SP03_CONTROL_REG        = $AF0218
=$af0219				SP03_ADDY_PTR_L         = $AF0219
=$af021a				SP03_ADDY_PTR_M         = $AF021A
=$af021b				SP03_ADDY_PTR_H         = $AF021B
=$af021c				SP03_X_POS_L            = $AF021C
=$af021d				SP03_X_POS_H            = $AF021D
=$af021e				SP03_Y_POS_L            = $AF021E
=$af021f				SP03_Y_POS_H            = $AF021F
=$af0220				SP04_CONTROL_REG        = $AF0220
=$af0221				SP04_ADDY_PTR_L         = $AF0221
=$af0222				SP04_ADDY_PTR_M         = $AF0222
=$af0223				SP04_ADDY_PTR_H         = $AF0223
=$af0224				SP04_X_POS_L            = $AF0224
=$af0225				SP04_X_POS_H            = $AF0225
=$af0226				SP04_Y_POS_L            = $AF0226
=$af0227				SP04_Y_POS_H            = $AF0227
=$af0228				SP05_CONTROL_REG        = $AF0228
=$af0229				SP05_ADDY_PTR_L         = $AF0229
=$af022a				SP05_ADDY_PTR_M         = $AF022A
=$af022b				SP05_ADDY_PTR_H         = $AF022B
=$af022c				SP05_X_POS_L            = $AF022C
=$af022d				SP05_X_POS_H            = $AF022D
=$af022e				SP05_Y_POS_L            = $AF022E
=$af022f				SP05_Y_POS_H            = $AF022F
=$af0230				SP06_CONTROL_REG        = $AF0230
=$af0231				SP06_ADDY_PTR_L         = $AF0231
=$af0232				SP06_ADDY_PTR_M         = $AF0232
=$af0233				SP06_ADDY_PTR_H         = $AF0233
=$af0234				SP06_X_POS_L            = $AF0234
=$af0235				SP06_X_POS_H            = $AF0235
=$af0236				SP06_Y_POS_L            = $AF0236
=$af0237				SP06_Y_POS_H            = $AF0237
=$af0238				SP07_CONTROL_REG        = $AF0238
=$af0239				SP07_ADDY_PTR_L         = $AF0239
=$af023a				SP07_ADDY_PTR_M         = $AF023A
=$af023b				SP07_ADDY_PTR_H         = $AF023B
=$af023c				SP07_X_POS_L            = $AF023C
=$af023d				SP07_X_POS_H            = $AF023D
=$af023e				SP07_Y_POS_L            = $AF023E
=$af023f				SP07_Y_POS_H            = $AF023F
=$af0240				SP08_CONTROL_REG        = $AF0240
=$af0241				SP08_ADDY_PTR_L         = $AF0241
=$af0242				SP08_ADDY_PTR_M         = $AF0242
=$af0243				SP08_ADDY_PTR_H         = $AF0243
=$af0244				SP08_X_POS_L            = $AF0244
=$af0245				SP08_X_POS_H            = $AF0245
=$af0246				SP08_Y_POS_L            = $AF0246
=$af0247				SP08_Y_POS_H            = $AF0247
=$af0248				SP09_CONTROL_REG        = $AF0248
=$af0249				SP09_ADDY_PTR_L         = $AF0249
=$af024a				SP09_ADDY_PTR_M         = $AF024A
=$af024b				SP09_ADDY_PTR_H         = $AF024B
=$af024c				SP09_X_POS_L            = $AF024C
=$af024d				SP09_X_POS_H            = $AF024D
=$af024e				SP09_Y_POS_L            = $AF024E
=$af024f				SP09_Y_POS_H            = $AF024F
=$af0250				SP10_CONTROL_REG        = $AF0250
=$af0251				SP10_ADDY_PTR_L         = $AF0251
=$af0252				SP10_ADDY_PTR_M         = $AF0252
=$af0253				SP10_ADDY_PTR_H         = $AF0253
=$af0254				SP10_X_POS_L            = $AF0254
=$af0255				SP10_X_POS_H            = $AF0255
=$af0256				SP10_Y_POS_L            = $AF0256
=$af0257				SP10_Y_POS_H            = $AF0257
=$af0258				SP11_CONTROL_REG        = $AF0258
=$af0259				SP11_ADDY_PTR_L         = $AF0259
=$af025a				SP11_ADDY_PTR_M         = $AF025A
=$af025b				SP11_ADDY_PTR_H         = $AF025B
=$af025c				SP11_X_POS_L            = $AF025C
=$af025d				SP11_X_POS_H            = $AF025D
=$af025e				SP11_Y_POS_L            = $AF025E
=$af025f				SP11_Y_POS_H            = $AF025F
=$af0260				SP12_CONTROL_REG        = $AF0260
=$af0261				SP12_ADDY_PTR_L         = $AF0261
=$af0262				SP12_ADDY_PTR_M         = $AF0262
=$af0263				SP12_ADDY_PTR_H         = $AF0263
=$af0264				SP12_X_POS_L            = $AF0264
=$af0265				SP12_X_POS_H            = $AF0265
=$af0266				SP12_Y_POS_L            = $AF0266
=$af0267				SP12_Y_POS_H            = $AF0267
=$af0268				SP13_CONTROL_REG        = $AF0268
=$af0269				SP13_ADDY_PTR_L         = $AF0269
=$af026a				SP13_ADDY_PTR_M         = $AF026A
=$af026b				SP13_ADDY_PTR_H         = $AF026B
=$af026c				SP13_X_POS_L            = $AF026C
=$af026d				SP13_X_POS_H            = $AF026D
=$af026e				SP13_Y_POS_L            = $AF026E
=$af026f				SP13_Y_POS_H            = $AF026F
=$af0270				SP14_CONTROL_REG        = $AF0270
=$af0271				SP14_ADDY_PTR_L         = $AF0271
=$af0272				SP14_ADDY_PTR_M         = $AF0272
=$af0273				SP14_ADDY_PTR_H         = $AF0273
=$af0274				SP14_X_POS_L            = $AF0274
=$af0275				SP14_X_POS_H            = $AF0275
=$af0276				SP14_Y_POS_L            = $AF0276
=$af0277				SP14_Y_POS_H            = $AF0277
=$af0278				SP15_CONTROL_REG        = $AF0278
=$af0279				SP15_ADDY_PTR_L         = $AF0279
=$af027a				SP15_ADDY_PTR_M         = $AF027A
=$af027b				SP15_ADDY_PTR_H         = $AF027B
=$af027c				SP15_X_POS_L            = $AF027C
=$af027d				SP15_X_POS_H            = $AF027D
=$af027e				SP15_Y_POS_L            = $AF027E
=$af027f				SP15_Y_POS_H            = $AF027F
=$af0280				SP16_CONTROL_REG        = $AF0280
=$af0281				SP16_ADDY_PTR_L         = $AF0281
=$af0282				SP16_ADDY_PTR_M         = $AF0282
=$af0283				SP16_ADDY_PTR_H         = $AF0283
=$af0284				SP16_X_POS_L            = $AF0284
=$af0285				SP16_X_POS_H            = $AF0285
=$af0286				SP16_Y_POS_L            = $AF0286
=$af0287				SP16_Y_POS_H            = $AF0287
=$af0288				SP17_CONTROL_REG        = $AF0288
=$af0289				SP17_ADDY_PTR_L         = $AF0289
=$af028a				SP17_ADDY_PTR_M         = $AF028A
=$af028b				SP17_ADDY_PTR_H         = $AF028B
=$af028c				SP17_X_POS_L            = $AF028C
=$af028d				SP17_X_POS_H            = $AF028D
=$af028e				SP17_Y_POS_L            = $AF028E
=$af028f				SP17_Y_POS_H            = $AF028F
=$af0400				VDMA_CONTROL_REG        = $AF0400
=$01					VDMA_CTRL_Enable        = $01
=$02					VDMA_CTRL_1D_2D         = $02     ; 0 - 1D (Linear) Transfer , 1 - 2D (Block) Transfer
=$04					VDMA_CTRL_TRF_Fill      = $04     ; 0 - Transfer Src -> Dst, 1 - Fill Destination with "Byte2Write"
=$08					VDMA_CTRL_Int_Enable    = $08     ; Set to 1 to Enable the Generation of Interrupt when the Transfer is over.
=$80					VDMA_CTRL_Start_TRF     = $80     ; Set to 1 To Begin Process, Need to Cleared before, you can start another
=$af0401				VDMA_BYTE_2_WRITE       = $AF0401 ; Write Only - Byte to Write in the Fill Function
=$af0401				VDMA_STATUS_REG         = $AF0401 ; Read only
=$01					VDMA_STAT_Size_Err      = $01     ; If Set to 1, Overall Size is Invalid
=$02					VDMA_STAT_Dst_Add_Err   = $02     ; If Set to 1, Destination Address Invalid
=$04					VDMA_STAT_Src_Add_Err   = $04     ; If Set to 1, Source Address Invalid
=$80					VDMA_STAT_VDMA_IPS      = $80     ; If Set to 1, VDMA Transfer in Progress (this Inhibit CPU Access to Mem)
=$af0402				VDMA_SRC_ADDY_L         = $AF0402 ; Pointer to the Source of the Data to be stransfered
=$af0403				VDMA_SRC_ADDY_M         = $AF0403 ; This needs to be within Vicky's Range ($00_0000 - $3F_0000)
=$af0404				VDMA_SRC_ADDY_H         = $AF0404
=$af0405				VDMA_DST_ADDY_L         = $AF0405 ; Destination Pointer within Vicky's video memory Range
=$af0406				VDMA_DST_ADDY_M         = $AF0406 ; ($00_0000 - $3F_0000)
=$af0407				VDMA_DST_ADDY_H         = $AF0407
=$af0408				VDMA_SIZE_L             = $AF0408 ; Maximum Value: $40:0000 (4Megs)
=$af0409				VDMA_SIZE_M             = $AF0409
=$af040a				VDMA_SIZE_H             = $AF040A
=$af040b				VDMA_IGNORED            = $AF040B
=$af0408				VDMA_X_SIZE_L           = $AF0408 ; Maximum Value: 65535
=$af0409				VDMA_X_SIZE_H           = $AF0409
=$af040a				VDMA_Y_SIZE_L           = $AF040A ; Maximum Value: 65535
=$af040b				VDMA_Y_SIZE_H           = $AF040B
=$af040c				VDMA_SRC_STRIDE_L       = $AF040C ; Always use an Even Number ( The Engine uses Even Ver of that value)
=$af040d				VDMA_SRC_STRIDE_H       = $AF040D ;
=$af040e				VDMA_DST_STRIDE_L       = $AF040E ; Always use an Even Number ( The Engine uses Even Ver of that value)
=$af040f				VDMA_DST_STRIDE_H       = $AF040F ;
=$af0500				MOUSE_PTR_GRAP0_START    = $AF0500 ; 16 x 16 = 256 Pixels (Grey Scale) 0 = Transparent, 1 = Black , 255 = White
=$af05ff				MOUSE_PTR_GRAP0_END      = $AF05FF ; Pointer 0
=$af0600				MOUSE_PTR_GRAP1_START    = $AF0600 ;
=$af06ff				MOUSE_PTR_GRAP1_END      = $AF06FF ; Pointer 1
=$af0700				MOUSE_PTR_CTRL_REG_L    = $AF0700 ; Bit[0] Enable, Bit[1] = 0  ( 0 = Pointer0, 1 = Pointer1)
=$af0701				MOUSE_PTR_CTRL_REG_H    = $AF0701 ;
=$af0702				MOUSE_PTR_X_POS_L       = $AF0702 ; X Position (0 - 639) (Can only read now) Writing will have no effect
=$af0703				MOUSE_PTR_X_POS_H       = $AF0703 ;
=$af0704				MOUSE_PTR_Y_POS_L       = $AF0704 ; Y Position (0 - 479) (Can only read now) Writing will have no effect
=$af0705				MOUSE_PTR_Y_POS_H       = $AF0705 ;
=$af0706				MOUSE_PTR_BYTE0         = $AF0706 ; Byte 0 of Mouse Packet (you must write 3 Bytes)
=$af0707				MOUSE_PTR_BYTE1         = $AF0707 ; Byte 1 of Mouse Packet (if you don't, then )
=$af0708				MOUSE_PTR_BYTE2         = $AF0708 ; Byte 2 of Mouse Packet (state Machine will be jammed in 1 state)
=$af070b				C256F_MODEL_MAJOR       = $AF070B ;
=$af070c				C256F_MODEL_MINOR       = $AF070C ;
=$af070d				FPGA_DOR                = $AF070D ;
=$af070e				FPGA_MOR                = $AF070E ;
=$af070f				FPGA_YOR                = $AF070F ;
=$af1f40				FG_CHAR_LUT_PTR         = $AF1F40
=$af1f80				BG_CHAR_LUT_PTR		      = $AF1F80
=$af2000				GRPH_LUT0_PTR		        = $AF2000
=$af2400				GRPH_LUT1_PTR		        = $AF2400
=$af2800				GRPH_LUT2_PTR		        = $AF2800
=$af2c00				GRPH_LUT3_PTR		        = $AF2C00
=$af3000				GRPH_LUT4_PTR		        = $AF3000
=$af3400				GRPH_LUT5_PTR		        = $AF3400
=$af3800				GRPH_LUT6_PTR		        = $AF3800
=$af3c00				GRPH_LUT7_PTR		        = $AF3C00
=$af4000				GAMMA_B_LUT_PTR		      = $AF4000
=$af4100				GAMMA_G_LUT_PTR		      = $AF4100
=$af4200				GAMMA_R_LUT_PTR		      = $AF4200
=$af5000				TILE_MAP0       		    = $AF5000     ;$AF5000 - $AF57FF
=$af5800				TILE_MAP1               = $AF5800     ;$AF5800 - $AF5FFF
=$af6000				TILE_MAP2               = $AF6000     ;$AF6000 - $AF67FF
=$af6800				TILE_MAP3               = $AF6800     ;$AF6800 - $AF6FFF
=$af8000				FONT_MEMORY_BANK0       = $AF8000     ;$AF8000 - $AF87FF
=$af8800				FONT_MEMORY_BANK1       = $AF8800     ;$AF8800 - $AF8FFF
=$afa000				CS_TEXT_MEM_PTR         = $AFA000
=$afc000				CS_COLOR_MEM_PTR        = $AFC000
=$afe000				BTX_START               = $AFE000     ; BEATRIX Registers
=$afffff				BTX_END                 = $AFFFFF

;******  Return to file: src\kernel.asm


;******  Processing file: src\super_io_def.asm

=$af1100				PME_STS_REG     = $AF1100
=$af1102				PME_EN_REG		  = $AF1102
=$af1104				PME_STS1_REG		= $AF1104
=$af1105				PME_STS2_REG		= $AF1105
=$af1106				PME_STS3_REG		= $AF1106
=$af1107				PME_STS4_REG		= $AF1107
=$af1108				PME_STS5_REG		= $AF1108
=$af110a				PME_EN1_REG     = $AF110A
=$af110b				PME_EN2_REG     = $AF110B
=$af110c				PME_EN3_REG     = $AF110C
=$af110d				PME_EN4_REG     = $AF110D
=$af110e				PME_EN5_REG     = $AF110E
=$af1110				SMI_STS1_REG		= $AF1110
=$af1111				SMI_STS2_REG		= $AF1111
=$af1112				SMI_STS3_REG		= $AF1112
=$af1113				SMI_STS4_REG		= $AF1113
=$af1114				SMI_STS5_REG		= $AF1114
=$af1116				SMI_EN1_REG     = $AF1116
=$af1117				SMI_EN2_REG     = $AF1117
=$af1118				SMI_EN3_REG     = $AF1118
=$af1119				SMI_EN4_REG     = $AF1119
=$af111a				SMI_EN5_REG     = $AF111A
=$af111c				MSC_ST_REG      = $AF111C
=$af111e				FORCE_DISK_CHANGE       = $AF111E
=$af111f				FLOPPY_DATA_RATE        = $AF111F
=$af1120				UART1_FIFO_CTRL_SHDW    = $AF1120
=$af1121				UART2_FIFO_CTRL_SHDW    = $AF1121
=$af1122				DEV_DISABLE_REG         = $AF1122
=$af1123				GP10_REG    		= $AF1123
=$af1124				GP11_REG    		= $AF1124
=$af1125				GP12_REG    		= $AF1125
=$af1126				GP13_REG    		= $AF1126
=$af1127				GP14_REG    		= $AF1127
=$af1128				GP15_REG    		= $AF1128
=$af1129				GP16_REG    		= $AF1129
=$af112a				GP17_REG    		= $AF112A
=$af112b				GP20_REG    		= $AF112B
=$af112c				GP21_REG    		= $AF112C
=$af112d				GP22_REG		= $AF112D
=$af112f				GP24_REG		= $AF112F
=$af1130				GP25_REG		= $AF1130
=$af1131				GP26_REG		= $AF1131
=$af1132				GP27_REG		= $AF1132
=$af1133				GP30_REG		= $AF1133
=$af1134				GP31_REG		= $AF1134
=$af1135				GP32_REG		= $AF1135
=$af1136				GP33_REG		= $AF1136
=$af1137				GP34_REG		= $AF1137
=$af1138				GP35_REG		= $AF1138
=$af1139				GP36_REG		= $AF1139
=$af113a				GP37_REG		= $AF113A
=$af113b				GP40_REG		= $AF113B
=$af113c				GP41_REG		= $AF113C
=$af113d				GP42_REG		= $AF113D
=$af113e				GP43_REG		= $AF113E
=$af113f				GP50_REG		= $AF113F
=$af1140				GP51_REG		= $AF1140
=$af1141				GP52_REG		= $AF1141
=$af1142				GP53_REG		= $AF1142
=$af1143				GP54_REG		= $AF1143
=$af1144				GP55_REG		= $AF1144
=$af1145				GP56_REG		= $AF1145
=$af1146				GP57_REG		= $AF1146
=$af1147				GP60_REG		= $AF1147
=$af1148				GP61_REG		= $AF1148
=$af114b				GP1_REG			= $AF114B
=$af114c				GP2_REG			= $AF114C
=$af114d				GP3_REG			= $AF114D
=$af114e				GP4_REG			= $AF114E
=$af114f				GP5_REG			= $AF114F
=$af1150				GP6_REG			= $AF1150
=$af1156				FAN1_REG		        = $AF1156
=$af1157				FAN2_REG            = $AF1157
=$af1158				FAN_CTRL_REG  	    = $AF1158
=$af1159				FAN1_TACH_REG       = $AF1159
=$af115a				FAN2_TACH_REG       = $AF115A
=$af115b				FAN1_PRELOAD_REG    = $AF115B
=$af115c				FAN2_PRELOAD_REG    = $AF115C
=$af115d				LED1_REG    		    = $AF115D
=$af115e				LED2_REG    		    = $AF115E
=$af115f				KEYBOARD_SCAN_CODE	= $AF115F

;******  Return to file: src\kernel.asm


;******  Processing file: src\keyboard_def.asm

=$af1064				STATUS_PORT 	= $AF1064
=$af1060				KBD_OUT_BUF 	= $AF1060
=$af1060				KBD_INPT_BUF	= $AF1060
=$af1064				KBD_CMD_BUF		= $AF1064
=$af1060				KBD_DATA_BUF	= $AF1060
=$af1060				PORT_A		    = $AF1060
=$af1061				PORT_B			= $AF1061
=$01					OUT_BUF_FULL    = $01
=$02					INPT_BUF_FULL	= $02
=$04					SYS_FLAG		= $04
=$08					CMD_DATA		= $08
=$10					KEYBD_INH       = $10
=$20					TRANS_TMOUT	    = $20
=$40					RCV_TMOUT		= $40
=$80					PARITY_EVEN		= $80
=$10					INH_KEYBOARD	= $10
=$ae					KBD_ENA			= $AE
=$ad					KBD_DIS			= $AD
=$f1					KB_MENU			= $F1
=$f4					KB_ENABLE		= $F4
=$f7					KB_MAKEBREAK    = $F7
=$fe					KB_ECHO			= $FE
=$ff					KB_RESET		= $FF
=$ed					KB_LED_CMD		= $ED
=$aa					KB_OK			= $AA
=$fa					KB_ACK			= $FA
=$ff					KB_OVERRUN		= $FF
=$fe					KB_RESEND		= $FE
=$f0					KB_BREAK		= $F0
=$10					KB_FA			= $10
=$20					KB_FE			= $20
=$40					KB_PR_LED		= $40
=$01					KB_SCROLL_LOCK  = $01
=$02					KB_NUM_LOCK     = $02
=$04					KB_CAPS_LOCK    = $04
=$80					KB_CTRL_C = $80             ; CTRL-C was pressed
=$60					KB_CREDITS = $60            ; Credits key was pressed

;******  Return to file: src\kernel.asm


;******  Processing file: src\SID_def.asm

=$afe400				SID0_V1_FREQ_LO    = $AFE400 ;SID - L - Voice 1 (Write Only) - FREQ LOW
=$afe401				SID0_V1_FREQ_HI    = $AFE401 ;SID - L - Voice 1 (Write Only) - FREQ HI
=$afe402				SID0_V1_PW_LO      = $AFE402 ;SID - L - Voice 1 (Write Only) - PW LOW
=$afe403				SID0_V1_PW_HI      = $AFE403 ;SID - L - Voice 1 (Write Only) - PW HI
=$afe404				SID0_V1_CTRL       = $AFE404 ;SID - L - Voice 1 (Write Only) - CTRL REG
=$afe405				SID0_V1_ATCK_DECY  = $AFE405 ;SID - L - Voice 1 (Write Only) - ATTACK / DECAY
=$afe406				SID0_V1_SSTN_RLSE  = $AFE406 ;SID - L - Voice 1 (Write Only) - SUSTAIN / RELEASE
=$afe407				SID0_V2_FREQ_LO    = $AFE407 ;SID - L - Voice 2 (Write Only) - FREQ LOW
=$afe408				SID0_V2_FREQ_HI    = $AFE408 ;SID - L - Voice 2 (Write Only) - FREQ HI
=$afe409				SID0_V2_PW_LO      = $AFE409 ;SID - L - Voice 2 (Write Only) - PW LOW
=$afe40a				SID0_V2_PW_HI      = $AFE40A ;SID - L - Voice 2 (Write Only) - PW HI
=$afe40b				SID0_V2_CTRL       = $AFE40B ;SID - L - Voice 2 (Write Only) - CTRL REG
=$afe40c				SID0_V2_ATCK_DECY  = $AFE40C ;SID - L - Voice 2 (Write Only) - ATTACK / DECAY
=$afe40d				SID0_V2_SSTN_RLSE  = $AFE40D ;SID - L - Voice 2 (Write Only) - SUSTAIN / RELEASE
=$afe40e				SID0_V3_FREQ_LO    = $AFE40E ;SID - L - Voice 3 (Write Only) - FREQ LOW
=$afe40f				SID0_V3_FREQ_HI    = $AFE40F ;SID - L - Voice 3 (Write Only) - FREQ HI
=$afe410				SID0_V3_PW_LO      = $AFE410 ;SID - L - Voice 3 (Write Only) - PW LOW
=$afe411				SID0_V3_PW_HI      = $AFE411 ;SID - L - Voice 3 (Write Only) - PW HI
=$afe412				SID0_V3_CTRL       = $AFE412 ;SID - L - Voice 3 (Write Only) - CTRL REG
=$afe413				SID0_V3_ATCK_DECY  = $AFE413 ;SID - L - Voice 3 (Write Only) - ATTACK / DECAY
=$afe414				SID0_V3_SSTN_RLSE  = $AFE414 ;SID - L - Voice 3 (Write Only) - SUSTAIN / RELEASE
=$afe415				SID0_FC_LO         = $AFE415 ;SID - L - Filter (Write Only) - FC LOW
=$afe416				SID0_FC_HI         = $AFE416 ;SID - L - Filter (Write Only) - FC HI
=$afe417				SID0_RES_FILT      = $AFE417 ;SID - L - Filter (Write Only) - RES / FILT
=$afe418				SID0_MODE_VOL      = $AFE418 ;SID - L - Filter (Write Only) - MODE / VOL
=$afe419				SID0_POT_X         = $AFE419 ;SID - L - Misc (Read Only) - POT X (C256 - NOT USED)
=$afe41a				SID0_POT_Y         = $AFE41A ;SID - L - Misc (Read Only) - POT Y (C256 - NOT USED)
=$afe41b				SID0_OSC3_RND      = $AFE41B ;SID - L - Misc (Read Only) - OSC3 / RANDOM
=$afe41c				SID0_ENV3          = $AFE41C ;SID - L - Misc (Read Only)  - ENV3
=$afe41d				SID0_NOT_USED0     = $AFE41D ;SID - L - NOT USED
=$afe41e				SID0_NOT_USED1     = $AFE41E ;SID - L - NOT USED
=$afe41f				SID0_NOT_USED2     = $AFE41F ;SID - L - NOT USED

;******  Return to file: src\kernel.asm


;******  Processing file: src\RTC_def.asm

=$af0800				RTC_SEC       = $AF0800 ;Seconds Register
=$af0801				RTC_SEC_ALARM = $AF0801 ;Seconds Alarm Register
=$af0802				RTC_MIN       = $AF0802 ;Minutes Register
=$af0803				RTC_MIN_ALARM = $AF0803 ;Minutes Alarm Register
=$af0804				RTC_HRS       = $AF0804 ;Hours Register
=$af0805				RTC_HRS_ALARM = $AF0805 ;Hours Alarm Register
=$af0806				RTC_DAY       = $AF0806 ;Day Register
=$af0807				RTC_DAY_ALARM = $AF0807 ;Day Alarm Register
=$af0808				RTC_DOW       = $AF0808 ;Day of Week Register
=$af0809				RTC_MONTH     = $AF0809 ;Month Register
=$af080a				RTC_YEAR      = $AF080A ;Year Register
=$af080b				RTC_RATES     = $AF080B ;Rates Register
=$af080c				RTC_ENABLE    = $AF080C ;Enables Register
=$af080d				RTC_FLAGS     = $AF080D ;Flags Register
=$af080e				RTC_CTRL      = $AF080E ;Control Register
=$af080f				RTC_CENTURY   = $AF080F ;Century Register

;******  Return to file: src\kernel.asm


;******  Processing file: src\io_def.asm

=0					CHAN_CONSOLE  = 0           ; ID for screen and keyboard access
=1					CHAN_COM1     = 1           ; ID for serial access on COM1 (external port)
=2					CHAN_COM2     = 2           ; ID for serial access on COM2 (internal port)
=3					CHAN_LPT      = 3           ; ID for parallel port
=$afe810				SDCARD_DATA   = $AFE810     ;(R/W) SDCARD (CH376S) Data PORT_A (A0 = 0)
=$afe811				SDCARD_CMD    = $AFE811     ;(R/W) SDCARD (CH376S) CMD/STATUS Port (A0 = 1)
=$afe812				SDCARD_STAT   = $AFE812     ;(R) SDCARD (Bit[0] = CD, Bit[1] = WP)
=$afe900				CODEC_DATA_LO = $AFE900     ;(W) LSB of Add/Data Reg to Control CODEC See WM8776 Spec
=$afe901				CODEC_DATA_HI = $AFE901     ;(W) MSB od Add/Data Reg to Control CODEC See WM8776 Spec
=$afe902				CODEC_WR_CTRL = $AFE902     ;(W) Bit[0] = 1 -> Start Writing the CODEC Control Register

;******  Return to file: src\kernel.asm


;******  Processing file: src\Trinity_CFP9301_def.asm

=$afe800				JOYSTICK0           = $AFE800   ;(R) Joystick 0 - J7 (next to SD Card)
=$afe801				JOYSTICK1           = $AFE801   ;(R) Joystick 1 - J8
=$afe802				JOYSTICK2           = $AFE802   ;(R) Joystick 2 - J9
=$afe803				JOYSTICK3           = $AFE803   ;(R) Joystick 3 - J10 (Next to Buzzer)
=$afe804				JOYSTICK_MODE       = $AFE804
=$01					NES_SNES_EN0        = $01       ; Enable the NES/SNES Mode on Port 0
=$02					NES_SNES_EN1        = $02       ; Enable the NES/SNES Mode on Port 1
=$04					NES_SNES_JOY        = $04       ; 0 = NES, 1 = SNES
=$40					NES_SNES_DONE       = $40       ; Poll to see if the Deserializer is done
=$80					NES_SNES_TRIG       = $80       ; Set to start the Serializer
=$afe805				REVOFPCB_C          = $AFE805   ; You should read the ASCCII for "C"
=$afe806				REVOFPCB_4          = $AFE806   ; You should read the ASCCII for "4"
=$afe807				REVOFPCB_A          = $AFE807   ; You should read the ASCCII for "A"
=$afe808				NES_SNES0_DAT_LO    = $AFE808   ; Contains the 8bits From NES and SNES
=$afe809				SNES0_DAT_HI0       = $AFE809   ; Contains the extra 4 bit from the SNES Controller
=$afe80a				NES_SNES1_DAT_LO    = $AFE80A
=$afe80b				SNES1_DAT_HI0       = $AFE80B
=$afe80c				CFP9301_REV         = $AFE80C   ; Hardware Revision of the CPLD Code
=$afe80d				DIP_USER            = $AFE80D   ; Dip Switch 3/4/5 can be user Defined
=$afe80e				DIP_BOOTMODE        = $AFE80E
=$01					BOOT_MODE0          = $01
=$02					BOOT_MODE1          = $02
=$80					HD_INSTALLED        = $80
=$00					DIP_BOOT_IDE        = $00
=$01					DIP_BOOT_SDCARD     = $01
=$02					DIP_BOOT_FLOPPY     = $02
=$03					DIP_BOOT_BASIC      = $03

;******  Return to file: src\kernel.asm


;******  Processing file: src\Unity_CFP9307_def.asm

=$afe830				IDE_DATA      = $AFE830 ; 8Bit Access here Only
=$afe831				IDE_ERROR     = $AFE831 ; Error Information register (only read when there is an error ) - Probably clears Error Bits
=$afe832				IDE_SECT_CNT  = $AFE832 ; Sector Count Register (also used to pass parameter for timeout for IDLE modus Command)
=$afe833				IDE_SECT_SRT  = $AFE833 ; Start Sector Register (0 = 256), so start @ 1
=$afe834				IDE_CLDR_LO   = $AFE834 ; Low Byte of Cylinder Numnber {7:0}
=$afe835				IDE_CLDR_HI   = $AFE835 ;  Hi Byte of Cylinder Number {9:8} (1023-0).
=$afe836				IDE_HEAD      = $AFE836 ; Head, device select, {3:0} HEad Number, 4 -> 0:Master, 1:Slave, {7:5} = 101 (legacy);
=$afe837				IDE_CMD_STAT  = $AFE837 ; Command/Status Register - Reading this will clear the Interrupt Registers
=$afe838				IDE_DATA_LO   = $AFE838 ; The 16Bits Buffer is LITTLE ENDIAN, the 65C816 is BIG ENDIAN, but UNITY does the conversion
=$afe839				IDE_DATA_HI   = $AFE839 ;

;******  Return to file: src\kernel.asm


;******  Processing file: src\GABE_Control_Registers_def.asm

=$afe880				GABE_MSTR_CTRL      = $AFE880
=$01					GABE_CTRL_PWR_LED   = $01     ; Controls the LED in the Front of the case (Next to the reset button)
=$02					GABE_CTRL_SDC_LED   = $02     ; Controls the LED in the Front of the Case (Next to SDCard)
=$10					GABE_CTRL_BUZZER    = $10     ; Controls the Buzzer
=$80					GABE_CTRL_WRM_RST   = $80     ; Warm Reset (needs to Setup other registers)
=$afe881				GABE_NOTUSED        = $AFE881 ; Reserved for future use
=$afe882				GABE_RST_AUTH0      = $AFE882 ; Must Contain the BYTE $AD for Reset to Activate
=$afe883				GABE_RST_AUTH1      = $AFE883 ; Must Contain the BYTE $DE for Reset to Activate
=$afe884				GABE_RNG_DAT_LO     = $AFE884 ; Low Part of 16Bit RNG Generator
=$afe885				GABE_RNG_DAT_HI     = $AFE885 ; Hi Part of 16Bit RNG Generator
=$afe884				GABE_RNG_SEED_LO    = $AFE884 ; Low Part of 16Bit RNG Generator
=$afe885				GABE_RNG_SEED_HI    = $AFE885 ; Hi Part of 16Bit RNG Generator
=$afe886				GABE_RNG_STAT       = $AFE886 ;
=$80					GABE_RNG_LFSR_DONE  = $80     ; indicates that Output = SEED Database
=$afe886				GABE_RNG_CTRL       = $AFE886 ;
=$01					GABE_RNG_CTRL_EN    = $01     ; Enable the LFSR BLOCK_LEN
=$02					GABE_RNG_CTRL_DV    = $02     ; After Setting the Seed Value, Toggle that Bit for it be registered
=$afe887				GABE_SYS_STAT       = $AFE887 ;
=$01					GABE_SYS_STAT_MID0  = $01     ; Machine ID -- LSB
=$02					GABE_SYS_STAT_MID1  = $02     ; Machine ID -- MSB
=$08					GABE_SYS_STAT_EXP   = $08     ; if Zero, there is an Expansion Card Preset
=$40					GABE_SYS_STAT_CPUA  = $40     ; Indicates the (8bit/16bit) Size of the Accumulator
=$80					GABE_SYS_STAT_CPUX  = $80     ; Indicates the (8bit/16bit) Size of the Accumulator

;******  Return to file: src\kernel.asm


;******  Processing file: src\basic_inc.asm

=$3a0000				BASIC = $3A0000
=3801092				MONITOR = BASIC + 4

;******  Return to file: src\kernel.asm


;******  Processing file: src\kernel_jumptable.asm

.381000	5c 00 04 39	jmp $390400	BOOT            JML IBOOT
.381004	5c e5 18 39	jmp $3918e5	RESTORE         JML IRESTORE
.381008	5c 30 0b 39	jmp $390b30	BREAK           JML IBREAK
.38100c	5c 77 0b 39	jmp $390b77	READY           JML IREADY
.381010	5c e6 18 39	jmp $3918e6	SCINIT          JML ISCINIT
.381014	5c e7 18 39	jmp $3918e7	IOINIT          JML IIOINIT
.381018	5c f4 0b 39	jmp $390bf4	PUTC            JML IPUTC
.38101c	5c dd 0b 39	jmp $390bdd	PUTS            JML IPUTS
.381020	5c 19 0d 39	jmp $390d19	PUTB            JML IPUTB
.381024	5c e8 18 39	jmp $3918e8	PUTBLOCK        JML IPUTBLOCK
.381028	5c e9 18 39	jmp $3918e9	SETLFS          JML ISETLFS
.38102c	5c ea 18 39	jmp $3918ea	SETNAM          JML ISETNAM
.381030	5c eb 18 39	jmp $3918eb	OPEN            JML IOPEN
.381034	5c ec 18 39	jmp $3918ec	CLOSE           JML ICLOSE
.381038	5c 92 0b 39	jmp $390b92	SETIN           JML ISETIN
.38103c	5c 9b 0b 39	jmp $390b9b	SETOUT          JML ISETOUT
.381040	5c ed 18 39	jmp $3918ed	GETB            JML IGETB
.381044	5c ee 18 39	jmp $3918ee	GETBLOCK        JML IGETBLOCK
.381048	5c ef 18 39	jmp $3918ef	GETCH           JML IGETCH
.38104c	5c ad 0b 39	jmp $390bad	GETCHW          JML IGETCHW
.381050	5c a4 0b 39	jmp $390ba4	GETCHE          JML IGETCHE
.381054	5c f0 18 39	jmp $3918f0	GETS            JML IGETS
.381058	5c f1 18 39	jmp $3918f1	GETLINE         JML IGETLINE
.38105c	5c f2 18 39	jmp $3918f2	GETFIELD        JML IGETFIELD
.381060	5c f3 18 39	jmp $3918f3	TRIM            JML ITRIM
.381064	5c f4 18 39	jmp $3918f4	PRINTC          JML IPRINTC
.381068	5c f5 18 39	jmp $3918f5	PRINTS          JML IPRINTS
.38106c	5c 1a 0d 39	jmp $390d1a	PRINTCR         JML IPRINTCR
.381070	5c f6 18 39	jmp $3918f6	PRINTF          JML IPRINTF
.381074	5c f7 18 39	jmp $3918f7	PRINTI          JML IPRINTI
.381078	5c 78 0e 39	jmp $390e78	PRINTH          JML IPRINTH
.38107c	5c f8 18 39	jmp $3918f8	PRINTAI         JML IPRINTAI
.381080	5c 95 0e 39	jmp $390e95	PRINTAH         JML IPRINTAH
.381084	5c 04 0e 39	jmp $390e04	LOCATE          JML ILOCATE
.381088	5c f9 18 39	jmp $3918f9	PUSHKEY         JML IPUSHKEY
.38108c	5c fa 18 39	jmp $3918fa	PUSHKEYS        JML IPUSHKEYS
.381090	5c 60 0d 39	jmp $390d60	CSRRIGHT        JML ICSRRIGHT
.381094	5c 93 0d 39	jmp $390d93	CSRLEFT         JML ICSRLEFT
.381098	5c b9 0d 39	jmp $390db9	CSRUP           JML ICSRUP
.38109c	5c df 0d 39	jmp $390ddf	CSRDOWN         JML ICSRDOWN
.3810a0	5c 4f 0d 39	jmp $390d4f	CSRHOME         JML ICSRHOME
.3810a4	5c 50 0e 39	jmp $390e50	SCROLLUP        JML ISCROLLUP
.3810a8	5c e3 0e 39	jmp $390ee3	CLRSCREEN       JML ICLRSCREEN
.3810ac	5c 46 0f 39	jmp $390f46	INITCHLUT	    JML IINITCHLUT
.3810b0	5c 60 12 39	jmp $391260	INITSUPERIO	    JML IINITSUPERIO
.3810b4	5c 5f 13 39	jmp $39135f	INITKEYBOARD    JML IINITKEYBOARD
.3810b8	5c bb 14 39	jmp $3914bb	TESTSID         JML ITESTSID
.3810bc	5c 3f 12 39	jmp $39123f	INITCURSOR      JML IINITCURSOR
.3810c0	5c f5 11 39	jmp $3911f5	INITFONTSET     JML IINITFONTSET
.3810c4	5c 75 0f 39	jmp $390f75	INITGAMMATABLE  JML IINITGAMMATABLE
.3810c8	5c 95 0f 39	jmp $390f95	INITALLLUT      JML IINITALLLUT
.3810cc	5c 57 10 39	jmp $391057	INITVKYTXTMODE  JML IINITVKYTXTMODE
.3810d0	5c 80 10 39	jmp $391080	INITVKYGRPMODE  JML IINITVKYGRPMODE
.3810d4	5c b7 10 39	jmp $3910b7	INITTILEMODE    JML IINITTILEMODE
.3810d8	5c b8 10 39	jmp $3910b8	INITSPRITE      JML IINITSPRITE
.3810dc	5c ab 15 39	jmp $3915ab	INITCODEC       JML IINITCODEC
.3810e0	5c 27 16 39	jmp $391627	RESETCODEC      JML IRESETCODEC
.3810e4	5c 95 16 39	jmp $391695	BMP_PARSER      JML IBMP_PARSER
.3810e8	5c 4a 16 39	jmp $39164a	BM_FILL_SCREEN  JML IBM_FILL_SCREEN
.3810ec	5c 3d 37 38	jmp $38373d	OPL2_TONE_TEST  JML IOPL2_TONE_TEST

;******  Return to file: src\kernel.asm


;******  Processing file: src\Interrupt_Handler.asm

.3810f0					IRQ_HANDLER
.3810f0	e2 20		sep #$20	                SEP #$20        ; set A short
.3810f2	af 40 01 00	lda $000140	                LDA @lINT_PENDING_REG0
.3810f6	c9 00		cmp #$00	                CMP #$00
.3810f8	f0 37		beq $381131	                BEQ CHECK_PENDING_REG1
.3810fa	af 40 01 00	lda $000140	                LDA @lINT_PENDING_REG0
.3810fe	29 01		and #$01	                AND #FNX0_INT00_SOF
.381100	c9 01		cmp #$01	                CMP #FNX0_INT00_SOF
.381102	d0 09		bne $38110d	                BNE SERVICE_NEXT_IRQ6
.381104	8f 40 01 00	sta $000140	                STA @lINT_PENDING_REG0
.381108	20 9b 11	jsr $38119b	                JSR SOF_INTERRUPT
.38110b	e2 20		sep #$20	                SEP #$20        ; set A short
.38110d					SERVICE_NEXT_IRQ6
.38110d	af 40 01 00	lda $000140	                LDA @lINT_PENDING_REG0
.381111	29 40		and #$40	                AND #FNX0_INT06_FDC
.381113	c9 40		cmp #$40	                CMP #FNX0_INT06_FDC
.381115	d0 09		bne $381120	                BNE SERVICE_NEXT_IRQ7
.381117	8f 40 01 00	sta $000140	                STA @lINT_PENDING_REG0
.38111b	20 e7 11	jsr $3811e7	                JSR FDC_INTERRUPT
.38111e	e2 20		sep #$20	                SEP #$20        ; set A short
.381120					SERVICE_NEXT_IRQ7
.381120	af 40 01 00	lda $000140	                LDA @lINT_PENDING_REG0
.381124	29 80		and #$80	                AND #FNX0_INT07_MOUSE
.381126	c9 80		cmp #$80	                CMP #FNX0_INT07_MOUSE
.381128	d0 07		bne $381131	                BNE CHECK_PENDING_REG1
.38112a	8f 40 01 00	sta $000140	                STA @lINT_PENDING_REG0
.38112e	20 a6 11	jsr $3811a6	                JSR MOUSE_INTERRUPT
.381131					CHECK_PENDING_REG1
.381131	e2 20		sep #$20	                SEP #$20        ; set A short
.381133	af 41 01 00	lda $000141	                LDA @lINT_PENDING_REG1
.381137	c9 00		cmp #$00	                CMP #$00
.381139	f0 5d		beq $381198	                BEQ EXIT_IRQ_HANDLE
.38113b					SERVICE_NEXT_IRQ8
.38113b	af 41 01 00	lda $000141	                LDA @lINT_PENDING_REG1
.38113f	29 01		and #$01	                AND #FNX1_INT00_KBD
.381141	c9 01		cmp #$01	                CMP #FNX1_INT00_KBD
.381143	d0 09		bne $38114e	                BNE SERVICE_NEXT_IRQ11
.381145	8f 41 01 00	sta $000141	                STA @lINT_PENDING_REG1
.381149	20 65 41	jsr $384165	                JSR KEYBOARD_INTERRUPT
.38114c	e2 20		sep #$20	                SEP #$20        ; set A short
.38114e					SERVICE_NEXT_IRQ11
.38114e	af 41 01 00	lda $000141	                LDA @lINT_PENDING_REG1
.381152	29 08		and #$08	                AND #FNX1_INT03_COM2
.381154	c9 08		cmp #$08	                CMP #FNX1_INT03_COM2
.381156	d0 09		bne $381161	                BNE SERVICE_NEXT_IRQ12
.381158	8f 41 01 00	sta $000141	                STA @lINT_PENDING_REG1
.38115c	20 f2 11	jsr $3811f2	                JSR COM2_INTERRUPT
.38115f	e2 20		sep #$20	                SEP #$20        ; set A short
.381161					SERVICE_NEXT_IRQ12
.381161	af 41 01 00	lda $000141	                LDA @lINT_PENDING_REG1
.381165	29 10		and #$10	                AND #FNX1_INT04_COM1
.381167	c9 10		cmp #$10	                CMP #FNX1_INT04_COM1
.381169	d0 09		bne $381174	                BNE SERVICE_NEXT_IRQ13
.38116b	8f 41 01 00	sta $000141	                STA @lINT_PENDING_REG1
.38116f	20 fd 11	jsr $3811fd	                JSR COM1_INTERRUPT
.381172	e2 20		sep #$20	                SEP #$20        ; set A short
.381174					SERVICE_NEXT_IRQ13
.381174	af 41 01 00	lda $000141	                LDA @lINT_PENDING_REG1
.381178	29 20		and #$20	                AND #FNX1_INT05_MPU401
.38117a	c9 20		cmp #$20	                CMP #FNX1_INT05_MPU401
.38117c	d0 09		bne $381187	                BNE SERVICE_NEXT_IRQ14
.38117e	8f 41 01 00	sta $000141	                STA @lINT_PENDING_REG1
.381182	20 08 12	jsr $381208	                JSR MPU401_INTERRUPT
.381185	e2 20		sep #$20	                SEP #$20        ; set A short
.381187					SERVICE_NEXT_IRQ14
.381187	af 41 01 00	lda $000141	                LDA @lINT_PENDING_REG1
.38118b	29 40		and #$40	                AND #FNX1_INT06_LPT
.38118d	c9 40		cmp #$40	                CMP #FNX1_INT06_LPT
.38118f	d0 07		bne $381198	                BNE EXIT_IRQ_HANDLE
.381191	8f 41 01 00	sta $000141	                STA @lINT_PENDING_REG1
.381195	20 13 12	jsr $381213	                JSR LPT1_INTERRUPT
.381198					EXIT_IRQ_HANDLE
.381198	c2 30		rep #$30	                REP #$30        ; set A&X long
.38119a	6b		rtl		                RTL
.38119b					SOF_INTERRUPT
.38119b	af 40 01 00	lda $000140	                LDA @lINT_PENDING_REG0
.38119f	29 01		and #$01	                AND #FNX0_INT00_SOF
.3811a1	8f 40 01 00	sta $000140	                STA @lINT_PENDING_REG0
.3811a5	60		rts		                RTS
.3811a6					MOUSE_INTERRUPT
.3811a6	e2 20		sep #$20	                SEP #$20        ; set A short
.3811a8	af 40 01 00	lda $000140	                LDA @lINT_PENDING_REG0
.3811ac	29 80		and #$80	                AND #FNX0_INT07_MOUSE
.3811ae	8f 40 01 00	sta $000140	                STA @lINT_PENDING_REG0
.3811b2	af 60 10 af	lda $af1060	                LDA KBD_INPT_BUF
.3811b6	a2 00 00	ldx #$0000	                LDX #$0000
.3811b9	e2 10		sep #$10	                SEP #$10        ; set X short
.3811bb	a6 e0		ldx $e0		                LDX MOUSE_PTR
.3811bd	9f 06 07 af	sta $af0706,x	                STA @lMOUSE_PTR_BYTE0, X
.3811c1	e8		inx		                INX
.3811c2	e0 03		cpx #$03	                CPX #$03
.3811c4	d0 1c		bne $3811e2	                BNE EXIT_FOR_NEXT_VALUE
.3811c6	af 02 07 af	lda $af0702	                LDA @lMOUSE_PTR_X_POS_L
.3811ca	85 e1		sta $e1		                STA MOUSE_POS_X_LO
.3811cc	af 03 07 af	lda $af0703	                LDA @lMOUSE_PTR_X_POS_H
.3811d0	85 e2		sta $e2		                STA MOUSE_POS_X_HI
.3811d2	af 04 07 af	lda $af0704	                LDA @lMOUSE_PTR_Y_POS_L
.3811d6	85 e3		sta $e3		                STA MOUSE_POS_Y_LO
.3811d8	af 05 07 af	lda $af0705	                LDA @lMOUSE_PTR_Y_POS_H
.3811dc	85 e4		sta $e4		                STA MOUSE_POS_Y_HI
.3811de	e2 20		sep #$20	                SEP #$20        ; set A short
.3811e0	a2 00		ldx #$00	                LDX #$00
.3811e2					EXIT_FOR_NEXT_VALUE
.3811e2	86 e0		stx $e0		                STX MOUSE_PTR
.3811e4	c2 10		rep #$10	                REP #$10        ; set X long
.3811e6	60		rts		                RTS
.3811e7					FDC_INTERRUPT
.3811e7	af 40 01 00	lda $000140	                LDA @lINT_PENDING_REG0
.3811eb	29 40		and #$40	                AND #FNX0_INT06_FDC
.3811ed	8f 40 01 00	sta $000140	                STA @lINT_PENDING_REG0
.3811f1	60		rts		                RTS
.3811f2					COM2_INTERRUPT
.3811f2	af 41 01 00	lda $000141	                LDA @lINT_PENDING_REG1
.3811f6	29 08		and #$08	                AND #FNX1_INT03_COM2
.3811f8	8f 41 01 00	sta $000141	                STA @lINT_PENDING_REG1
.3811fc	60		rts		                RTS
.3811fd					COM1_INTERRUPT
.3811fd	af 41 01 00	lda $000141	                LDA @lINT_PENDING_REG1
.381201	29 10		and #$10	                AND #FNX1_INT04_COM1
.381203	8f 41 01 00	sta $000141	                STA @lINT_PENDING_REG1
.381207	60		rts		                RTS
.381208					MPU401_INTERRUPT
.381208	af 41 01 00	lda $000141	                LDA @lINT_PENDING_REG1
.38120c	29 20		and #$20	                AND #FNX1_INT05_MPU401
.38120e	8f 41 01 00	sta $000141	                STA @lINT_PENDING_REG1
.381212	60		rts		                RTS
.381213					LPT1_INTERRUPT
.381213	af 41 01 00	lda $000141	                LDA @lINT_PENDING_REG1
.381217	29 40		and #$40	                AND #FNX1_INT06_LPT
.381219	8f 41 01 00	sta $000141	                STA @lINT_PENDING_REG1
.38121d	60		rts		                RTS
.38121e					NMI_HANDLER
.38121e	6b		rtl		                RTL

;******  Return to file: src\kernel.asm


;******  Processing file: src\SDOS.asm


;******  Processing file: src\ch376s_inc.asm

=$00					DEF_NULL_CHAR           = $00
=$2a					DEF_WILDCARD_CHAR       = $2A
=$5c					DEF_SEPAR_CHAR1         = $5C
=$2f					DEF_SEPAR_CHAR2         = $2F
=$06					CH_CMD_CHECK_EXIST      = $06
=$0c					CH_CMD_GET_FILE_SIZE    = $0C
=$15					CH_CMD_SET_MODE         = $15     ; Set the Controller's mode, in our Case in SDCARD
=$22					CH_CMD_GET_STATUS       = $22     ; Get Interrupt Status
=$27					CH_CMD_RD_DATA0         = $27     ;
=$2c					CH_CMD_WR_DATA          = $2C
=$2f					CH_CMD_SET_FILENAME     = $2F     ;SET_FILE_NAME
=$31					CH_CMD_DISK_MOUNT       = $31     ;DISK_MOUNT
=$32					CH_CMD_FILE_OPEN        = $32     ;FILE_OPEN
=$33					CH_CMD_FILE_ENUM_GO     = $33
=$36					CH_CMD_FILE_CLOSE       = $36     ; To be Implemented
=$39					CH_CMD_BYTE_LOCATE      = $39
=$3a					CH_CMD_BYTE_READ        = $3A
=$3b					CH_CMD_BYTE_RD_GO       = $3B
=$3c					CH_CMD_BYTE_WRITE       = $3C
=$3d					CH_CMD_BYTE_WR_GO       = $3D
=$44					CH_VAR_DISK_ROOT		= $44
=$48					CH_VAR_DSK_TOTAL_CLUS	= $48
=$4c					CH_VAR_DSK_START_LBA	= $4C
=$50					CH_VAR_DSK_DAT_START	= $50
=$54					CH_VAR_LBA_BUFFER		= $54
=$58					CH_VAR_LBA_CURRENT		= $58
=$5c					CH_VAR_FAT_DIR_LBA		= $5C
=$60					CH_VAR_START_CLUSTER	= $60
=$64					CH_VAR_CURRENT_CLUST	= $64
=$68					CH_VAR_FILE_SIZE		= $68
=$6c					CH_VAR_CURRENT_OFFSET	= $6C
=$14					CH376S_STAT_SUCCESS     = $14
=$17					CH376S_STAT_BUF_OVF     = $17
=$1d					CH376S_STAT_DSK_RD      = $1D
=$1e					CH376S_STAT_DSK_WR      = $1E
=$41					CH376S_ERR_OPEN_DIR     = $41
=$42					CH376S_ERR_MISS_FIL     = $42
=$43					CH376S_ERR_FOUND_NAME   = $43
=$82					CH376S_ERR_DISK_DSC     = $82
=$84					CH376S_ERR_LRG_SEC      = $84
=$92					CH376S_ERR_PARTTION     = $92
=$a1					CH376S_ERR_NOT_FORM     = $A1
=$b1					CH376S_ERR_DSK_FULL     = $B1
=$b2					CH376S_FDT_OVER         = $B2
=$b4					CH376S_FILE_CLOSED      = $B4
=$51					CH376S_CMD_RET_SUCCESS  = $51
=$5f					CH376S_CMD_RET_ABORT    = $5F
=$00					SDCARD_PRSNT_NO_CARD    = $00
=$01					SDCARD_PRSNT_CD         = $01
=$02					SDCARD_PRSNT_WP         = $02
=$04					SDCARD_PRSNT_MNTED      = $04  ; Card is present and Mounted1

;******  Return to file: src\SDOS.asm

.0000					fatrec
>0000					  name      .fill 8
>0008					  extension .fill 3
>000b	01				  type      .byte 1
>000c					  reserved  .fill 16
>001c	00 00				  size_l    .word 0
>001e	00 00				  size_h    .word 0
.0000					simplefilestruct
>0000					  name      .fill 8
>0008					  extension .fill 3
>000b	01				  type      .byte 1
>000c	00 00				  size_l    .word 0
>000e	00 00				  size_h    .word 0
.38121f	5c 36 14 38	jmp $381436	SDOS_CHECK_CD JML ISDOS_CHK_CD ; Check if Card is Present
.381223	5c 45 14 38	jmp $381445	SDOS_CHECK_WP JML ISDOS_CHK_WP ; Check if Card is Write Protected
.381227	5c 3f 12 38	jmp $38123f	SDOS_INIT     JML ISDOS_INIT
.38122b	5c cf 12 38	jmp $3812cf	SDOS_DIR      JML ISDOS_DIR
.38122f	5c 4c 13 38	jmp $38134c	SDOS_CHDIR    JML ISDOS_CHDIR
.381233	5c 52 14 38	jmp $381452	SDOS_LOAD     JML ISDOS_READ_FILE
.381237	5c 4d 13 38	jmp $38134d	SDOS_SAVE     JML ISDOS_SAVE
.38123b	5c 4e 13 38	jmp $38134e	SDOS_EXEC     JML ISDOS_EXEC
.38123f	48		pha		ISDOS_INIT    PHA
.381240	da		phx		              PHX
.381241	5a		phy		              PHY
.381242	08		php		              PHP
.381243	0b		phd		              PHD
.381244	48		pha		                PHA             ; begin setdp macro
.381245	08		php		                PHP
.381246	c2 20		rep #$20	                REP #$20        ; set A long
.381248	a9 20 03	lda #$0320	                LDA #SDOS_BLOCK_BEGIN         ; set DP to page 0
.38124b	5b		tcd		                TCD
.38124c	28		plp		                PLP
.38124d	68		pla		                PLA             ; end setdp macro
.38124e	e2 20		sep #$20	                SEP #$20        ; set A short
.381250	af 41 01 00	lda $000141	              LDA @lINT_PENDING_REG1    ; Read the Pending Register &
.381254	29 7f		and #$7f	              AND #~FNX1_INT07_SDCARD   ; Enable
.381256	8f 41 01 00	sta $000141	              STA @lINT_PENDING_REG1
.38125a	a9 06		lda #$06	              LDA #CH_CMD_CHECK_EXIST
.38125c	8f 11 e8 af	sta $afe811	              STA SDCARD_CMD
.381260	20 07 14	jsr $381407	              JSR DLYCMD_2_DTA
.381263	a9 a8		lda #$a8	              LDA #$A8
.381265	8f 10 e8 af	sta $afe810	              STA SDCARD_DATA
.381269					    CHK_LOOP
.381269	20 0c 14	jsr $38140c	              JSR DLYDTA_2_DTA
.38126c	20 0c 14	jsr $38140c	              JSR DLYDTA_2_DTA
.38126f	20 0c 14	jsr $38140c	              JSR DLYDTA_2_DTA
.381272	af 10 e8 af	lda $afe810	              LDA SDCARD_DATA  ; the data returned must be the complement
.381276	c9 57		cmp #$57	              CMP #~$A8;  $57
.381278	d0 ef		bne $381269	              BNE CHK_LOOP
.38127a	20 07 14	jsr $381407	              JSR DLYCMD_2_DTA
.38127d	a9 15		lda #$15	              LDA #CH_CMD_SET_MODE
.38127f	8f 11 e8 af	sta $afe811	              STA SDCARD_CMD
.381283	20 07 14	jsr $381407	              JSR DLYCMD_2_DTA
.381286	20 07 14	jsr $381407	              JSR DLYCMD_2_DTA
.381289	a9 03		lda #$03	              LDA #$03            ; Mode 3 - SDCARD
.38128b	8f 10 e8 af	sta $afe810	              STA SDCARD_DATA     ; Write the MODE and Wait for around ~10us
.38128f					    ISDOS_WAIT_FOR_MODE_SW
.38128f	20 0c 14	jsr $38140c	              JSR DLYDTA_2_DTA ; Wait 0.6us
.381292	af 10 e8 af	lda $afe810	              LDA SDCARD_DATA
.381296	c9 51		cmp #$51	              CMP #$51         ; CMD_RET_SUCCESS = 051H, CMD_RET_ABORT = 05FH
.381298	f0 06		beq $3812a0	              BEQ CHK_SET_OK
.38129a	c9 5f		cmp #$5f	              CMP #$5F
.38129c	f0 09		beq $3812a7	              BEQ CHK_SET_NOK
.38129e	d0 ef		bne $38128f	              BNE ISDOS_WAIT_FOR_MODE_SW
.3812a0					    CHK_SET_OK
.3812a0	a9 01		lda #$01	              LDA #SDCARD_PRSNT_CD
.3812a2	8d 3f 00	sta $003f	              STA SDCARD_PRSNT_MNT
.3812a5	80 07		bra $3812ae	              BRA SD_INIT_DONE
.3812a7					    CHK_SET_NOK
.3812a7	a9 00		lda #$00	              LDA #SDCARD_PRSNT_NO_CARD
.3812a9	8d 3f 00	sta $003f	              STA SDCARD_PRSNT_MNT
.3812ac	80 00		bra $3812ae	              BRA SD_INIT_DONE
.3812ae					    SD_INIT_DONE
.3812ae	2b		pld		              PLD
.3812af	28		plp		              PLP
.3812b0	7a		ply		              PLY
.3812b1	fa		plx		              PLX
.3812b2	68		pla		              PLA
.3812b3	6b		rtl		              RTL
.3812b4					ISDOS_CLEAR_FAT_REC
.3812b4	0b		phd		              PHD
.3812b5	48		pha		                PHA             ; begin setdp macro
.3812b6	08		php		                PHP
.3812b7	c2 20		rep #$20	                REP #$20        ; set A long
.3812b9	a9 20 03	lda #$0320	                LDA #SDOS_BLOCK_BEGIN         ; set DP to page 0
.3812bc	5b		tcd		                TCD
.3812bd	28		plp		                PLP
.3812be	68		pla		                PLA             ; end setdp macro
.3812bf	a0 00 00	ldy #$0000	              LDY #0
.3812c2	a9 00 00	lda #$0000	              LDA #0
.3812c5					    CLEAR_LOOP
.3812c5	97 17		sta [$0337],y	              STA [SDOS_FILE_REC_PTR],Y
.3812c7	c8		iny		              INY
.3812c8	c0 20 00	cpy #$0020	              CPY #32
.3812cb	d0 f8		bne $3812c5	              BNE CLEAR_LOOP
.3812cd	2b		pld		              PLD
.3812ce	60		rts		              RTS
.3812cf	48		pha		ISDOS_DIR     PHA
.3812d0	da		phx		              PHX
.3812d1	5a		phy		              PHY
.3812d2	0b		phd		              PHD
.3812d3	08		php		              PHP
.3812d4	48		pha		                PHA             ; begin setdp macro
.3812d5	08		php		                PHP
.3812d6	c2 20		rep #$20	                REP #$20        ; set A long
.3812d8	a9 20 03	lda #$0320	                LDA #SDOS_BLOCK_BEGIN         ; set DP to page 0
.3812db	5b		tcd		                TCD
.3812dc	28		plp		                PLP
.3812dd	68		pla		                PLA             ; end setdp macro
.3812de	e2 20		sep #$20	                SEP #$20        ; set A short
.3812e0	c2 10		rep #$10	                REP #$10        ; set X long
.3812e2	20 4f 13	jsr $38134f	              JSR ISDOS_MOUNT_CARD;     First to See if the Card is Present
.3812e5	20 b4 12	jsr $3812b4	              JSR ISDOS_CLEAR_FAT_REC
.3812e8	20 84 13	jsr $381384	              JSR SDOS_FILE_OPEN     ; Now that the file name is set, go open File
.3812eb	a2 00 00	ldx #$0000	              LDX #0 ; count the number of items displayed - limit to 38
.3812ee					    ISDOS_NEXT_ENTRY
.3812ee	a9 27		lda #$27	              LDA #CH_CMD_RD_DATA0
.3812f0	8f 11 e8 af	sta $afe811	              STA SDCARD_CMD
.3812f4	20 07 14	jsr $381407	              JSR DLYCMD_2_DTA;      ; Wait 1.5us
.3812f7	af 10 e8 af	lda $afe810	              LDA SDCARD_DATA        ;  Load Data Length - should be 32 - we don't care.
.3812fb	a0 00 00	ldy #$0000	              LDY #0
.3812fe					    FAT_REC_LOOP
.3812fe	20 0c 14	jsr $38140c	              JSR DLYDTA_2_DTA       ; Wait 0.6us
.381301	af 10 e8 af	lda $afe810	              LDA SDCARD_DATA
.381305	97 17		sta [$0337],y	              STA [SDOS_FILE_REC_PTR],Y
.381307	c8		iny		              INY
.381308	c0 20 00	cpy #$0020	              CPY #32
.38130b	d0 f1		bne $3812fe	              BNE FAT_REC_LOOP
.38130d	c2 20		rep #$20	                REP #$20        ; set A long
.38130f	a0 1c 00	ldy #$001c	              LDY #28
.381312	b7 17		lda [$0337],y	              LDA [SDOS_FILE_REC_PTR],Y
.381314	a0 0c 00	ldy #$000c	              LDY #12
.381317	97 17		sta [$0337],y	              STA [SDOS_FILE_REC_PTR],Y
.381319	a0 1e 00	ldy #$001e	              LDY #30
.38131c	b7 17		lda [$0337],y	              LDA [SDOS_FILE_REC_PTR],Y
.38131e	a0 0e 00	ldy #$000e	              LDY #14
.381321	97 17		sta [$0337],y	              STA [SDOS_FILE_REC_PTR],Y
.381323	a5 17		lda $0337	              LDA SDOS_FILE_REC_PTR
.381325	18		clc		              CLC
.381326	69 10 00	adc #$0010	              ADC #$10
.381329	85 17		sta $0337	              STA SDOS_FILE_REC_PTR
.38132b	e2 20		sep #$20	                SEP #$20        ; set A short
.38132d	e8		inx		              INX
.38132e	e0 40 00	cpx #$0040	              CPX #64
.381331	f0 10		beq $381343	              BEQ ISDOS_DIR_DONE
.381333	20 07 14	jsr $381407	              JSR DLYCMD_2_DTA;      ; Wait 1.5us
.381336	a9 33		lda #$33	              LDA #CH_CMD_FILE_ENUM_GO
.381338	8f 11 e8 af	sta $afe811	              STA SDCARD_CMD
.38133c	20 12 14	jsr $381412	              JSR SDCARD_WAIT_4_INT       ; Go Wait for Interrupt
.38133f	c9 1d		cmp #$1d	              CMP #CH376S_STAT_DSK_RD
.381341	f0 ab		beq $3812ee	              BEQ ISDOS_NEXT_ENTRY
.381343					    ISDOS_DIR_DONE
.381343	20 d5 13	jsr $3813d5	              JSR SDOS_FILE_CLOSE
.381346	28		plp		              PLP
.381347	2b		pld		              PLD
.381348	7a		ply		              PLY
.381349	fa		plx		              PLX
.38134a	68		pla		              PLA
.38134b	6b		rtl		              RTL
.38134c	00		brk #		ISDOS_CHDIR   BRK;
.38134d	00		brk #		ISDOS_SAVE    BRK;
.38134e	00		brk #		ISDOS_EXEC    BRK;
.38134f					ISDOS_MOUNT_CARD
.38134f	e2 20		sep #$20	                SEP #$20        ; set A short
.381351	c2 10		rep #$10	                REP #$10        ; set X long
.381353	a0 00 00	ldy #$0000	              LDY #$0000
.381356	a9 01		lda #$01	              LDA #$01
.381358	8d 3f 00	sta $003f	              STA SDCARD_PRSNT_MNT        ; Bit[0] = Card Present
.38135b					    TRY_MOUNT_AGAIN
.38135b	a9 31		lda #$31	              LDA #CH_CMD_DISK_MOUNT      ; If Present, go Mount it.
.38135d	8f 11 e8 af	sta $afe811	              STA SDCARD_CMD              ;
.381361	20 12 14	jsr $381412	              JSR SDCARD_WAIT_4_INT       ;
.381364	c9 14		cmp #$14	              CMP #CH376S_STAT_SUCCESS    ;
.381366	f0 09		beq $381371	              BEQ ISDOS_MOUNTED
.381368	c8		iny		              INY
.381369	c0 05 00	cpy #$0005	              CPY #$0005
.38136c	d0 ed		bne $38135b	              BNE TRY_MOUNT_AGAIN
.38136e	4c 79 13	jmp $381379	              JMP SDCARD_ERROR_MOUNT
.381371					    ISDOS_MOUNTED
.381371	ad 3f 00	lda $003f	              LDA SDCARD_PRSNT_MNT
.381374	29 fb		and #$fb	              AND #~SDCARD_PRSNT_MNTED
.381376	09 04		ora #$04	              ORA #SDCARD_PRSNT_MNTED     ; Set Bit to Indicate that is mounted
.381378	60		rts		              RTS
.381379					    SDCARD_ERROR_MOUNT
.381379	a2 6d 16	ldx #$166d	              LDX #<>sd_card_msg3         ; Print Screen the Message "Card Detected"
.38137c	00		brk #		              BRK
.38137d	60		rts		              RTS
.38137e					    ISDOS_NO_CARD
.38137e	a9 00		lda #$00	              LDA #SDCARD_PRSNT_NO_CARD
.381380	8d 3f 00	sta $003f	              STA SDCARD_PRSNT_MNT
.381383	60		rts		              RTS
.381384					SDOS_FILE_OPEN
.381384	8b		phb		              PHB
.381385	a2 00 00	ldx #$0000	              LDX #0
.381388	a0 01 00	ldy #$0001	              LDY #1
.38138b	a9 2f		lda #$2f	              LDA #'/'
.38138d	9f 80 03 00	sta $000380,x	              STA @lSDOS_FILE_NAME,X
.381391	e8		inx		              INX
.381392	48		pha		                PHA             ; begin setdbr macro
.381393	08		php		                PHP
.381394	e2 20		sep #$20	                SEP #$20        ; set A short
.381396	a9 38		lda #$38	                LDA #`sd_card_dir_string
.381398	48		pha		                PHA
.381399	ab		plb		                PLB
.38139a	28		plp		                PLP
.38139b	68		pla		                PLA             ; end setdbr macro
.38139c					    ISDOS_DIR_TRF
.38139c	b9 8a 15	lda $38158a,y	              LDA sd_card_dir_string,Y
.38139f	c9 2f		cmp #$2f	              CMP #'/'
.3813a1	f0 0c		beq $3813af	              BEQ FO_READ_SLASH
.3813a3	9f 80 03 00	sta $000380,x	              STA @lSDOS_FILE_NAME,X
.3813a7	e8		inx		              INX
.3813a8	c8		iny		              INY
.3813a9	c9 00		cmp #$00	              CMP #0
.3813ab	f0 0c		beq $3813b9	              BEQ FO_READ_END_PATH
.3813ad	80 ed		bra $38139c	              BRA ISDOS_DIR_TRF  ; path string must be 0 terminated
.3813af					    FO_READ_SLASH
.3813af	a9 00		lda #$00	              LDA #0
.3813b1	9f 80 03 00	sta $000380,x	              STA @lSDOS_FILE_NAME,X
.3813b5	e8		inx		              INX
.3813b6	c8		iny		              INY
.3813b7	a9 2f		lda #$2f	              LDA #'/'
.3813b9					    FO_READ_END_PATH
.3813b9	48		pha		              PHA
.3813ba	20 e8 13	jsr $3813e8	              JSR SDOS_SET_FILE_NAME ; Make Sure the Pointer to the File Name is properly
.3813bd	20 07 14	jsr $381407	              JSR DLYCMD_2_DTA
.3813c0	a9 32		lda #$32	              LDA #CH_CMD_FILE_OPEN ;
.3813c2	8f 11 e8 af	sta $afe811	              STA SDCARD_CMD          ; Go Request to open the File
.3813c6	20 12 14	jsr $381412	              JSR SDCARD_WAIT_4_INT   ; A Interrupt is Generated, so go polling it
.3813c9	68		pla		              PLA
.3813ca	c9 00		cmp #$00	              CMP #0
.3813cc	f0 05		beq $3813d3	              BEQ FO_DONE
.3813ce	a2 00 00	ldx #$0000	              LDX #0
.3813d1	80 c9		bra $38139c	              BRA ISDOS_DIR_TRF
.3813d3					    FO_DONE
.3813d3	ab		plb		              PLB
.3813d4	60		rts		              RTS
.3813d5					SDOS_FILE_CLOSE
.3813d5	a9 36		lda #$36	              LDA #CH_CMD_FILE_CLOSE ;
.3813d7	8f 11 e8 af	sta $afe811	              STA SDCARD_CMD          ; Go Request to open the File
.3813db	20 07 14	jsr $381407	              JSR DLYCMD_2_DTA
.3813de	a9 00		lda #$00	              LDA #$00                ; FALSE
.3813e0	8f 10 e8 af	sta $afe810	              STA SDCARD_DATA         ; Store into the Data Register of the CH376s
.3813e4	20 12 14	jsr $381412	              JSR SDCARD_WAIT_4_INT   ; A Interrupt is Generated, so go polling it
.3813e7	60		rts		              RTS
.3813e8					SDOS_SET_FILE_NAME
.3813e8	da		phx		              PHX
.3813e9	a9 2f		lda #$2f	              LDA #CH_CMD_SET_FILENAME
.3813eb	8f 11 e8 af	sta $afe811	              STA SDCARD_CMD
.3813ef	20 07 14	jsr $381407	              JSR DLYCMD_2_DTA
.3813f2	a2 00 00	ldx #$0000	              LDX #$0000
.3813f5					    SDOS_SET_FILE_LOOP
.3813f5	bf 80 03 00	lda $000380,x	              LDA @lSDOS_FILE_NAME, X   ; This is where the FileName ought to be.
.3813f9	8f 10 e8 af	sta $afe810	              STA SDCARD_DATA         ; Store into the Data Register of the CH376s
.3813fd	20 0c 14	jsr $38140c	              JSR DLYDTA_2_DTA
.381400	e8		inx		              INX
.381401	c9 00		cmp #$00	              CMP #$00              ; Check end of Line
.381403	d0 f0		bne $3813f5	              BNE SDOS_SET_FILE_LOOP
.381405	fa		plx		              PLX
.381406	60		rts		              RTS
.381407					DLYCMD_2_DTA
.381407	ea		nop		              NOP
.381408	ea		nop		              NOP
.381409	ea		nop		              NOP
.38140a	ea		nop		              NOP
.38140b	ea		nop		              NOP
.38140c					DLYDTA_2_DTA
.38140c	ea		nop		              NOP
.38140d	ea		nop		              NOP
.38140e	ea		nop		              NOP
.38140f	ea		nop		              NOP
.381410	ea		nop		              NOP
.381411	60		rts		              RTS
.381412					SDCARD_WAIT_4_INT
.381412	e2 20		sep #$20	                SEP #$20        ; set A short
.381414					    SDCARD_BUSY_INT
.381414	af 41 01 00	lda $000141	              LDA @lINT_PENDING_REG1   ; Check to See if the Pending Register for the SD_INT is Set
.381418	29 80		and #$80	              AND #FNX1_INT07_SDCARD   ;
.38141a	c9 80		cmp #$80	              CMP #FNX1_INT07_SDCARD
.38141c	d0 f6		bne $381414	              BNE SDCARD_BUSY_INT      ; Go Check again to see if it is checked
.38141e	8f 41 01 00	sta $000141	              STA @lINT_PENDING_REG1   ;Interrupt as occured, clear the Pending Register for next time.
.381422	20 07 14	jsr $381407	              JSR DLYCMD_2_DTA ;
.381425	20 07 14	jsr $381407	              JSR DLYCMD_2_DTA ;
.381428	a9 22		lda #$22	              LDA #CH_CMD_GET_STATUS
.38142a	8f 11 e8 af	sta $afe811	              STA SDCARD_CMD;
.38142e	20 07 14	jsr $381407	              JSR DLYCMD_2_DTA;   ; 1.5us Delay to get the Value Return
.381431	af 10 e8 af	lda $afe810	              LDA SDCARD_DATA;
.381435	60		rts		              RTS           ;
.381436					ISDOS_CHK_CD
.381436	e2 20		sep #$20	                SEP #$20        ; set A short
.381438	18		clc		              CLC
.381439	af 12 e8 af	lda $afe812	              LDA SDCARD_STAT;  BIT[0] = Cd, BIT[1] = WP
.38143d	29 01		and #$01	              AND #$01
.38143f	c9 01		cmp #$01	              CMP #$01
.381441	f0 01		beq $381444	              BEQ SDCD_NOT_PRST;
.381443	38		sec		              SEC
.381444					    SDCD_NOT_PRST
.381444	60		rts		              RTS
.381445					ISDOS_CHK_WP
.381445	e2 20		sep #$20	                SEP #$20        ; set A short
.381447	18		clc		              CLC
.381448	af 12 e8 af	lda $afe812	              LDA SDCARD_STAT;  BIT[0] = Cd, BIT[1] = WP
.38144c	29 02		and #$02	              AND #$02
.38144e	d0 01		bne $381451	              BNE SDCD_NOT_WP;
.381450	38		sec		              SEC
.381451					    SDCD_NOT_WP
.381451	60		rts		              RTS
.381452					ISDOS_READ_FILE
.381452	20 84 13	jsr $381384	              JSR SDOS_FILE_OPEN   ; open the file
.381455	af 10 e8 af	lda $afe810	              LDA SDCARD_DATA
.381459	c9 14		cmp #$14	              CMP #CH376S_STAT_SUCCESS ; if the file open successfully, let's go on.
.38145b	f0 03		beq $381460	              BEQ SDOS_READ_FILE_KEEP_GOING
.38145d	82 80 00	brl $3814e0	              BRL SDOS_READ_DONE
.381460					    SDOS_READ_FILE_KEEP_GOING
.381460	c2 20		rep #$20	                REP #$20        ; set A long
.381462	20 4e 15	jsr $38154e	              JSR SDOS_SET_FILE_LENGTH;
.381465	a9 00 00	lda #$0000	              LDA #$0000
.381468	8f 3c 00 00	sta $00003c	              STA @lSDCARD_BYTE_NUM; Just make sure the High Part of the Size is Zero
.38146c	8f 34 03 00	sta $000334	              STA @lSDOS_BYTE_PTR   ; Clear the Byte Pointer 32 Bytes Register
.381470	8f 36 03 00	sta $000336	              STA @lSDOS_BYTE_PTR+2 ; This is to Relocated the Pointer after you passed the 64K Boundary
.381474	e2 20		sep #$20	                SEP #$20        ; set A short
.381476					    SDOS_READ_FILE_GO_FETCH_A_NEW_64KBlock
.381476	a9 3a		lda #$3a	              LDA #CH_CMD_BYTE_READ
.381478	8f 11 e8 af	sta $afe811	              STA SDCARD_CMD;
.38147c	20 07 14	jsr $381407	              JSR DLYCMD_2_DTA;   ; 3us Delay to get the Value Return
.38147f	af 2c 03 00	lda $00032c	              LDA @lSDOS_BYTE_NUMBER
.381483	8f 10 e8 af	sta $afe810	              STA SDCARD_DATA
.381487	20 0c 14	jsr $38140c	              JSR DLYDTA_2_DTA;   ; 1.5us Delay to get the Value Return
.38148a	af 2d 03 00	lda $00032d	              LDA @lSDOS_BYTE_NUMBER+1
.38148e	8f 10 e8 af	sta $afe810	              STA SDCARD_DATA
.381492	20 12 14	jsr $381412	              JSR SDCARD_WAIT_4_INT
.381495	c9 1d		cmp #$1d	              CMP #CH376S_STAT_DSK_RD ;
.381497	f0 03		beq $38149c	              BEQ SDOS_READ_FILE_GO_FETCH_A_NEW_BLOCK
.381499	82 44 00	brl $3814e0	              BRL SDOS_READ_DONE
.38149c					    SDOS_READ_FILE_GO_FETCH_A_NEW_BLOCK
.38149c	20 5b 15	jsr $38155b	              JSR SDOS_READ_BLOCK
.38149f	a9 3b		lda #$3b	              LDA #CH_CMD_BYTE_RD_GO
.3814a1	8f 11 e8 af	sta $afe811	              STA SDCARD_CMD
.3814a5	20 12 14	jsr $381412	              JSR SDCARD_WAIT_4_INT
.3814a8	c9 1d		cmp #$1d	              CMP #CH376S_STAT_DSK_RD ;
.3814aa	d0 05		bne $3814b1	              BNE SDOS_READ_PROC_DONE
.3814ac	20 e3 14	jsr $3814e3	              JSR SDOS_ADJUST_POINTER  ; Go Adjust the Address
.3814af	80 eb		bra $38149c	              BRA SDOS_READ_FILE_GO_FETCH_A_NEW_BLOCK
.3814b1					    SDOS_READ_PROC_DONE
.3814b1	c2 20		rep #$20	                REP #$20        ; set A long
.3814b3	af 2c 03 00	lda $00032c	              LDA @lSDOS_BYTE_NUMBER  ; Load the Previously number of Byte
.3814b7	c9 ff ff	cmp #$ffff	              CMP #$FFFF
.3814ba	d0 24		bne $3814e0	              BNE SDOS_READ_DONE                  ; if it equal 64K, then the file is bigger than 64K
.3814bc	af 28 01 00	lda $000128	              LDA @lADDER_R
.3814c0	8f 20 01 00	sta $000120	              STA @lADDER_A
.3814c4	af 2a 01 00	lda $00012a	              LDA @lADDER_R+2
.3814c8	8f 22 01 00	sta $000122	              STA @lADDER_A+2
.3814cc	20 4e 15	jsr $38154e	              JSR SDOS_SET_FILE_LENGTH ;
.3814cf	20 34 15	jsr $381534	              JSR SDOS_COMPUTE_LOCATE_POINTER
.3814d2	e2 20		sep #$20	                SEP #$20        ; set A short
.3814d4	20 ff 14	jsr $3814ff	              JSR SDOS_BYTE_LOCATE    ; Apply the new location for the CH376S
.3814d7	20 12 14	jsr $381412	              JSR SDCARD_WAIT_4_INT
.3814da	c9 14		cmp #$14	              CMP #CH376S_STAT_SUCCESS ;
.3814dc	d0 d3		bne $3814b1	              BNE SDOS_READ_PROC_DONE
.3814de	80 96		bra $381476	              BRA SDOS_READ_FILE_GO_FETCH_A_NEW_64KBlock ; Let's go fetch a new block of 64K or less
.3814e0					    SDOS_READ_DONE
.3814e0	e2 20		sep #$20	                SEP #$20        ; set A short
.3814e2	6b		rtl		              RTL
.3814e3					SDOS_ADJUST_POINTER
.3814e3	c2 20		rep #$20	                REP #$20        ; set A long
.3814e5	18		clc		              CLC
.3814e6	af 38 00 00	lda $000038	              LDA SDCARD_FILE_PTR ;Load the Pointer
.3814ea	6f 3c 00 00	adc $00003c	              ADC SDCARD_BYTE_NUM
.3814ee	8f 38 00 00	sta $000038	              STA SDCARD_FILE_PTR;
.3814f2	e2 20		sep #$20	                SEP #$20        ; set A short
.3814f4	af 3a 00 00	lda $00003a	              LDA SDCARD_FILE_PTR+2;
.3814f8	69 00		adc #$00	              ADC #$00          ; This is just add up the Carry
.3814fa	8f 3a 00 00	sta $00003a	              STA SDCARD_FILE_PTR+2;
.3814fe					    SDOS_ADJ_DONE
.3814fe	60		rts		              RTS
.3814ff					SDOS_BYTE_LOCATE
.3814ff	e2 20		sep #$20	                SEP #$20        ; set A short
.381501	a9 39		lda #$39	              LDA #CH_CMD_BYTE_LOCATE
.381503	8f 11 e8 af	sta $afe811	              STA SDCARD_CMD
.381507	20 07 14	jsr $381407	              JSR DLYCMD_2_DTA
.38150a	af 34 03 00	lda $000334	              LDA @lSDOS_BYTE_PTR
.38150e	8f 10 e8 af	sta $afe810	              STA SDCARD_DATA
.381512	20 0c 14	jsr $38140c	              JSR DLYDTA_2_DTA
.381515	af 35 03 00	lda $000335	              LDA @lSDOS_BYTE_PTR+1
.381519	8f 10 e8 af	sta $afe810	              STA SDCARD_DATA
.38151d	20 0c 14	jsr $38140c	              JSR DLYDTA_2_DTA
.381520	af 36 03 00	lda $000336	              LDA @lSDOS_BYTE_PTR+2
.381524	8f 10 e8 af	sta $afe810	              STA SDCARD_DATA
.381528	20 0c 14	jsr $38140c	              JSR DLYDTA_2_DTA
.38152b	af 37 03 00	lda $000337	              LDA @lSDOS_BYTE_PTR+3
.38152f	8f 10 e8 af	sta $afe810	              STA SDCARD_DATA
.381533	60		rts		              RTS
.381534					SDOS_COMPUTE_LOCATE_POINTER
.381534	c2 20		rep #$20	                REP #$20        ; set A long
.381536	18		clc		              CLC
.381537	af 34 03 00	lda $000334	              LDA @lSDOS_BYTE_PTR ; $00330
.38153b	69 ff ff	adc #$ffff	              ADC #$FFFF
.38153e	8f 34 03 00	sta $000334	              STA @lSDOS_BYTE_PTR
.381542	af 36 03 00	lda $000336	              LDA @lSDOS_BYTE_PTR+2
.381546	69 00 00	adc #$0000	              ADC #$0000          ; this is to Add the Carry
.381549	8f 36 03 00	sta $000336	              STA @lSDOS_BYTE_PTR+2
.38154d	60		rts		              RTS
.38154e					SDOS_SET_FILE_LENGTH
.38154e	a5 0a		lda $032a	              LDA SDOS_FILE_SIZE + 2
.381550	f0 02		beq $381554	              BEQ SFL_DONE
.381552	7a		ply		              PLY ; deplete the stack to return back to the long jump
.381553	6b		rtl		              RTL
.381554					    SFL_DONE
.381554	a5 08		lda $0328	              LDA SDOS_FILE_SIZE
.381556	8f 2c 03 00	sta $00032c	              STA @lSDOS_BYTE_NUMBER
.38155a	60		rts		              RTS
.38155b					SDOS_READ_BLOCK
.38155b	0b		phd		              PHD
.38155c	48		pha		                PHA             ; begin setdp macro
.38155d	08		php		                PHP
.38155e	c2 20		rep #$20	                REP #$20        ; set A long
.381560	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.381563	5b		tcd		                TCD
.381564	28		plp		                PLP
.381565	68		pla		                PLA             ; end setdp macro
.381566	a9 27		lda #$27	              LDA #CH_CMD_RD_DATA0
.381568	8f 11 e8 af	sta $afe811	              STA SDCARD_CMD;
.38156c	20 07 14	jsr $381407	              JSR DLYCMD_2_DTA;   ; 3us Delay to get the Value Return
.38156f	af 10 e8 af	lda $afe810	              LDA SDCARD_DATA     ; Read First Byte for Number of Byte to Read
.381573	85 3c		sta $3c		              STA SDCARD_BYTE_NUM  ; Store the Number of byte to be read
.381575	20 0c 14	jsr $38140c	              JSR DLYDTA_2_DTA;   ; 3us Delay to get the Value Return
.381578	a0 00 00	ldy #$0000	              LDY #$0000
.38157b					    SDOS_READ_MORE
.38157b	af 10 e8 af	lda $afe810	              LDA SDCARD_DATA
.38157f	97 38		sta [$38],y	              STA [SDCARD_FILE_PTR], Y        ; Store Block Data Sector Begin
.381581	c8		iny		              INY
.381582	c4 3c		cpy $3c		              CPY SDCARD_BYTE_NUM
.381584	d0 f5		bne $38157b	              BNE SDOS_READ_MORE
.381586	a5 3c		lda $3c		              LDA SDCARD_BYTE_NUM  ; Reload the Number of Byte Read
.381588	2b		pld		              PLD
.381589	60		rts		              RTS
>38158a	2f 2a 00			sd_card_dir_string  .text '/*' ,$00
>38158d	00 00 00 00 00 00 00 00		                    .fill 128-3,0  ; leave space for the path
>381595	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;	...repeated 6 times (96 bytes)...
>381605	00 00 00 00 00
>38160a	4e 4f 20 53 44 43 41 52		sd_no_card_msg      .text "NO SDCARD PRESENT", $0D, $00
>381612	44 20 50 52 45 53 45 4e 54 0d 00
>38161d	45 52 52 4f 52 20 49 4e		sd_card_err0        .text "ERROR IN READIND CARD", $00
>381625	20 52 45 41 44 49 4e 44 20 43 41 52 44 00
>381633	45 52 52 4f 52 20 4c 4f		sd_card_err1        .text "ERROR LOADING FILE", $00
>38163b	41 44 49 4e 47 20 46 49 4c 45 00
>381646	4e 61 6d 65 3a 20 0d 00		sd_card_msg0        .text "Name: ", $0D,$00
>38164e	53 44 43 41 52 44 20 44		sd_card_msg1        .text "SDCARD DETECTED", $00
>381656	45 54 45 43 54 45 44 00
>38165e	53 44 43 41 52 44 20 4d		sd_card_msg2        .text "SDCARD MOUNTED", $00
>381666	4f 55 4e 54 45 44 00
>38166d	46 41 49 4c 45 44 20 54		sd_card_msg3        .text "FAILED TO MOUNT SDCARD", $0D, $00
>381675	4f 20 4d 4f 55 4e 54 20 53 44 43 41 52 44 0d 00
>381685	46 49 4c 45 20 4f 50 45		sd_card_msg4        .text "FILE OPENED", $0D, $00
>38168d	4e 45 44 0d 00
>381692	45 4e 44 20 4f 46 20 4c		sd_card_msg5        .text "END OF LINE...", $00
>38169a	49 4e 45 2e 2e 2e 00
>3816a1	46 49 4c 45 20 46 4f 55		sd_card_msg6        .text "FILE FOUND, LOADING...", $00
>3816a9	4e 44 2c 20 4c 4f 41 44 49 4e 47 2e 2e 2e 00
>3816b8	46 49 4c 45 20 4c 4f 41		sd_card_msg7        .text "FILE LOADED", $00
>3816c0	44 45 44 00

;******  Return to file: src\kernel.asm


;******  Processing file: src\OPL2_Library.asm


;******  Processing file: src\OPL2_def.asm

=$afe500				OPL2_L_BASE               = $AFE500
=$afe502				OPL2_L_TIMER1             = $AFE502 ; TIMER-1
=$afe503				OPL2_L_TIMER2             = $AFE503 ; TIMER-2
=$afe504				OPL2_L_IRQ                = $AFE504 ;
=$afe700				OPL2_S_BASE                 = $AFE700
=$afe720				OPL2_S_AM_VID_EG_KSR_MULT = $AFE720 ; $20..$35 (21 Registers)
=$afe740				OPL2_S_KSL_TL             = $AFE740;  $40..$55 (21 Registers)
=$afe760				OPL2_S_AR_DR              = $AFE760;  $60..$75 (21 Registers)
=$afe780				OPL2_S_SL_RR              = $AFE780;  $80..$95 (21 Registers)
=$afe7c0				OPL2_S_FEEDBACK           = $AFE7C0;  $C0..$C9
=$afe7e0				OPL2_S_WAVE_SELECT        = $AFE7E0;  $E0..$F5
=$80					TREMOLO    = $80
=$40					VIBRATO    = $40
=$20					SUSTAINING = $20
=$10					KSR        = $10
=$0f					MULTIPLIER = $0F
=$c0					KEY_SCALE  = $C0
=$3f					OP_LEVEL   = $3F
=$f0					ATTACK_RT  = $F0
=$0f					DECAY_RT   = $0F
=$f0					SUSTAIN_RT = $F0
=$0f					RELEASE_RT = $0F
=$0e					FEEDBACK   = $0E
=$01					ALGORITHM  = $01
=9					OPL2_NUM_CHANNELS = 9
=0					OPERATOR1 = 0
=1					OPERATOR2 = 1
=0					MODULATOR = 0
=1					CARRIER = 1
=0					FREQ_MODULATION = 0
=1					ADDITIVE_SYNTH  = 1
=$10					DRUM_BASS   = $10
=$08					DRUM_SNARE  = $08
=$04					DRUM_TOM    = $04
=$02					DRUM_CYMBAL = $02
=$01					DRUM_HI_HAT = $01
=1					NOTE_CS =   1
=2					NOTE_D =    2
=3					NOTE_DS =   3
=4					NOTE_E =    4
=5					NOTE_F =    5
=6					NOTE_FS =   6
=7					NOTE_G =    7
=8					NOTE_GS =   8
=9					NOTE_A =    9
=10					NOTE_AS =  10
=11					NOTE_B =   11
=12					NOTE_C =   12
>3816c4	6b 01 81 01 98 01 b0 01		noteFNumbers    .word  $016B, $0181, $0198, $01B0, $01CA, $01E5, $0202, $0220, $0241, $0263, $0287, $02AE
>3816cc	ca 01 e5 01 02 02 20 02 41 02 63 02 87 02 ae 02
>3816dc	00 01 02 08 09 0a 10 11		registerOffsets_operator0 .byte $00, $01, $02, $08, $09, $0A, $10, $11, $12 ;initializers for operator 1 */
>3816e4	12
>3816e5	03 04 05 0b 0c 0d 13 14		registerOffsets_operator1 .byte $03, $04, $05, $0B, $0C, $0D, $13, $14, $15 ;initializers for operator 2 */
>3816ed	15
>3816ee	10 13 14 12 15 11		drumOffsets               .byte $10, $13, $14, $12, $15, $11
>3816f4	10 08 04 02 01			drumBits                  .byte $10, $08, $04, $02, $01
>3816f9	20 40 60 80 e0 c0		instrumentBaseRegs        .byte $20, $40, $60, $80, $E0, $C0

;******  Return to file: src\OPL2_Library.asm


;******  Processing file: src\OPL2_Instruments.asm

>3816ff	00 24 4f f2 0b 00 0e 31		INSTRUMENT_ACCORDN    .text $00, $24, $4F, $F2, $0B, $00, $0E, $31, $00, $52, $0B, $00, 'ACCORDN   '
>381707	00 52 0b 00 41 43 43 4f 52 44 4e 20 20 20
>381715	00 31 43 6e 17 01 02 22		INSTRUMENT_BAGPIPE1   .text $00, $31, $43, $6E, $17, $01, $02, $22, $05, $8B, $0C, $02, 'BAGPIPE1  '
>38171d	05 8b 0c 02 42 41 47 50 49 50 45 31 20 20
>38172b	00 30 00 ff a0 03 00 a3		INSTRUMENT_BAGPIPE2   .text $00, $30, $00, $FF, $A0, $03, $00, $A3, $00, $65, $0B, $02, 'BAGPIPE2  '
>381733	00 65 0b 02 42 41 47 50 49 50 45 32 20 20
>381741	00 31 87 a1 11 00 08 16		INSTRUMENT_BANJO1     .text $00, $31, $87, $A1, $11, $00, $08, $16, $80, $7D, $43, $00, 'BANJO1    '
>381749	80 7d 43 00 42 41 4e 4a 4f 31 20 20 20 20
>381757	00 01 15 25 2f 00 0a 21		INSTRUMENT_BASS1      .text $00, $01, $15, $25, $2F, $00, $0A, $21, $80, $65, $6C, $00, 'BASS1     '
>38175f	80 65 6c 00 42 41 53 53 31 20 20 20 20 20
>38176d	00 01 1d f2 ef 00 0a 01		INSTRUMENT_BASS2      .text $00, $01, $1D, $F2, $EF, $00, $0A, $01, $00, $F5, $78, $00, 'BASS2     '
>381775	00 f5 78 00 42 41 53 53 32 20 20 20 20 20
>381783	00 c0 6d f9 01 01 0e 41		INSTRUMENT_BASSHARP   .text $00, $C0, $6D, $F9, $01, $01, $0E, $41, $00, $F2, $73, $00, 'BASSHARP  '
>38178b	00 f2 73 00 42 41 53 53 48 41 52 50 20 20
>381799	00 30 c8 d5 19 00 0c 71		INSTRUMENT_BASSOON1   .text $00, $30, $C8, $D5, $19, $00, $0C, $71, $80, $61, $1B, $00, 'BASSOON1  '
>3817a1	80 61 1b 00 42 41 53 53 4f 4f 4e 31 20 20
>3817af	00 c1 4f b1 53 03 06 e0		INSTRUMENT_BASSTRLG   .text $00, $C1, $4F, $B1, $53, $03, $06, $E0, $00, $12, $74, $03, 'BASSTRLG  '
>3817b7	00 12 74 03 42 41 53 53 54 52 4c 47 20 20
>3817c5	06 00 0b a8 4c 00 00 00		INSTRUMENT_BDRUM1     .text $06, $00, $0B, $A8, $4C, $00, $00, $00, $00, $00, $00, $00, 'BDRUM1    '
>3817cd	00 00 00 00 42 44 52 55 4d 31 20 20 20 20
>3817db	00 64 db ff 01 00 04 3e		INSTRUMENT_BELLONG    .text $00, $64, $DB, $FF, $01, $00, $04, $3E, $C0, $F3, $62, $00, 'BELLONG   '
>3817e3	c0 f3 62 00 42 45 4c 4c 4f 4e 47 20 20 20
>3817f1	00 07 4f f2 60 00 08 12		INSTRUMENT_BELLS      .text $00, $07, $4F, $F2, $60, $00, $08, $12, $00, $F2, $72, $00, 'BELLS     '
>3817f9	00 f2 72 00 42 45 4c 4c 53 20 20 20 20 20
>381807	00 64 db ff 01 00 04 3e		INSTRUMENT_BELSHORT   .text $00, $64, $DB, $FF, $01, $00, $04, $3E, $C0, $F5, $F3, $00, 'BELSHORT  '
>38180f	c0 f5 f3 00 42 45 4c 53 48 4f 52 54 20 20
>38181d	00 20 4b 7b 04 01 0e 21		INSTRUMENT_BNCEBASS   .text $00, $20, $4B, $7B, $04, $01, $0E, $21, $00, $F5, $72, $00, 'BNCEBASS  '
>381825	00 f5 72 00 42 4e 43 45 42 41 53 53 20 20
>381833	00 21 16 71 ae 00 0e 21		INSTRUMENT_BRASS1     .text $00, $21, $16, $71, $AE, $00, $0E, $21, $00, $81, $9E, $00, 'BRASS1    '
>38183b	00 81 9e 00 42 52 41 53 53 31 20 20 20 20
>381849	00 30 c5 52 11 00 00 31		INSTRUMENT_CBASSOON   .text $00, $30, $C5, $52, $11, $00, $00, $31, $80, $31, $2E, $00, 'CBASSOON  '
>381851	80 31 2e 00 43 42 41 53 53 4f 4f 4e 20 20
>38185f	00 33 87 01 10 00 08 14		INSTRUMENT_CELESTA    .text $00, $33, $87, $01, $10, $00, $08, $14, $80, $7D, $33, $00, 'CELESTA   '
>381867	80 7d 33 00 43 45 4c 45 53 54 41 20 20 20
>381875	00 32 16 73 24 00 0e 21		INSTRUMENT_CLAR1      .text $00, $32, $16, $73, $24, $00, $0E, $21, $80, $75, $57, $00, 'CLAR1     '
>38187d	80 75 57 00 43 4c 41 52 31 20 20 20 20 20
>38188b	00 31 1c 41 1b 00 0c 60		INSTRUMENT_CLAR2      .text $00, $31, $1C, $41, $1B, $00, $0C, $60, $80, $42, $3B, $00, 'CLAR2     '
>381893	80 42 3b 00 43 4c 41 52 32 20 20 20 20 20
>3818a1	00 32 9a 51 1b 00 0c 61		INSTRUMENT_CLARINET   .text $00, $32, $9A, $51, $1B, $00, $0C, $61, $82, $A2, $3B, $00, 'CLARINET  '
>3818a9	82 a2 3b 00 43 4c 41 52 49 4e 45 54 20 20
>3818b7	00 11 0d f2 01 00 0a 15		INSTRUMENT_CLAVECIN   .text $00, $11, $0D, $F2, $01, $00, $0A, $15, $0D, $F2, $B1, $00, 'CLAVECIN  '
>3818bf	0d f2 b1 00 43 4c 41 56 45 43 49 4e 20 20
>3818cd	00 00 02 f0 ff 00 06 11		INSTRUMENT_CROMORNE   .text $00, $00, $02, $F0, $FF, $00, $06, $11, $80, $F0, $FF, $00, 'CROMORNE  '
>3818d5	80 f0 ff 00 43 52 4f 4d 4f 52 4e 45 20 20
>3818e3	09 01 00 f5 b5 00 00 00		INSTRUMENT_CYMBAL1    .text $09, $01, $00, $F5, $B5, $00, $00, $00, $00, $00, $00, $00, 'CYMBAL1   '
>3818eb	00 00 00 00 43 59 4d 42 41 4c 31 20 20 20
>3818f9	00 05 8a f0 7b 00 08 01		INSTRUMENT_ELCLAV1    .text $00, $05, $8A, $F0, $7B, $00, $08, $01, $80, $F4, $7B, $00, 'ELCLAV1   '
>381901	80 f4 7b 00 45 4c 43 4c 41 56 31 20 20 20
>38190f	00 01 49 f1 53 01 06 11		INSTRUMENT_ELCLAV2    .text $00, $01, $49, $F1, $53, $01, $06, $11, $00, $F1, $74, $02, 'ELCLAV2   '
>381917	00 f1 74 02 45 4c 43 4c 41 56 32 20 20 20
>381925	00 e0 6d 57 04 01 0e 61		INSTRUMENT_ELECFL     .text $00, $E0, $6D, $57, $04, $01, $0E, $61, $00, $67, $7D, $00, 'ELECFL    '
>38192d	00 67 7d 00 45 4c 45 43 46 4c 20 20 20 20
>38193b	00 13 97 9a 12 02 0e 91		INSTRUMENT_ELECVIBE   .text $00, $13, $97, $9A, $12, $02, $0E, $91, $80, $9B, $11, $00, 'ELECVIBE  '
>381943	80 9b 11 00 45 4c 45 43 56 49 42 45 20 20
>381951	00 f1 01 97 17 00 08 21		INSTRUMENT_ELGUIT1    .text $00, $F1, $01, $97, $17, $00, $08, $21, $0D, $F1, $18, $00, 'ELGUIT1   '
>381959	0d f1 18 00 45 4c 47 55 49 54 31 20 20 20
>381967	00 13 96 ff 21 00 0a 11		INSTRUMENT_ELGUIT2    .text $00, $13, $96, $FF, $21, $00, $0A, $11, $80, $FF, $03, $00, 'ELGUIT2   '
>38196f	80 ff 03 00 45 4c 47 55 49 54 32 20 20 20
>38197d	00 07 8f 82 7d 00 0c 14		INSTRUMENT_ELGUIT3    .text $00, $07, $8F, $82, $7D, $00, $0C, $14, $80, $82, $7D, $00, 'ELGUIT3   '
>381985	80 82 7d 00 45 4c 47 55 49 54 33 20 20 20
>381993	00 05 8f da 15 00 0a 01		INSTRUMENT_ELGUIT4    .text $00, $05, $8F, $DA, $15, $00, $0A, $01, $80, $F9, $14, $02, 'ELGUIT4   '
>38199b	80 f9 14 02 45 4c 47 55 49 54 34 20 20 20
>3819a9	00 b2 cd 91 2a 02 09 b1		INSTRUMENT_ELORGAN1   .text $00, $B2, $CD, $91, $2A, $02, $09, $B1, $80, $91, $2A, $01, 'ELORGAN1  '
>3819b1	80 91 2a 01 45 4c 4f 52 47 41 4e 31 20 20
>3819bf	00 01 4f f1 50 00 06 01		INSTRUMENT_ELPIANO1   .text $00, $01, $4F, $F1, $50, $00, $06, $01, $04, $D2, $7C, $00, 'ELPIANO1  '
>3819c7	04 d2 7c 00 45 4c 50 49 41 4e 4f 31 20 20
>3819d5	00 02 22 f2 13 00 0e 02		INSTRUMENT_ELPIANO2   .text $00, $02, $22, $F2, $13, $00, $0E, $02, $00, $F5, $43, $00, 'ELPIANO2  '
>3819dd	00 f5 43 00 45 4c 50 49 41 4e 4f 32 20 20
>3819eb	00 81 63 f3 58 00 00 01		INSTRUMENT_EPIANO1A   .text $00, $81, $63, $F3, $58, $00, $00, $01, $80, $F2, $58, $00, 'EPIANO1A  '
>3819f3	80 f2 58 00 45 50 49 41 4e 4f 31 41 20 20
>381a01	00 07 1f f5 fa 00 0e 01		INSTRUMENT_EPIANO1B   .text $00, $07, $1F, $F5, $FA, $00, $0E, $01, $57, $F5, $FA, $00, 'EPIANO1B  '
>381a09	57 f5 fa 00 45 50 49 41 4e 4f 31 42 20 20
>381a17	00 21 83 74 17 00 07 a2		INSTRUMENT_FLUTE      .text $00, $21, $83, $74, $17, $00, $07, $A2, $8D, $65, $17, $00, 'FLUTE     '
>381a1f	8d 65 17 00 46 4c 55 54 45 20 20 20 20 20
>381a2d	00 a1 27 74 8f 00 02 a1		INSTRUMENT_FLUTE1     .text $00, $A1, $27, $74, $8F, $00, $02, $A1, $80, $65, $2A, $00, 'FLUTE1    '
>381a35	80 65 2a 00 46 4c 55 54 45 31 20 20 20 20
>381a43	00 e0 ec 6e 8f 00 0e 61		INSTRUMENT_FLUTE2     .text $00, $E0, $EC, $6E, $8F, $00, $0E, $61, $00, $65, $2A, $00, 'FLUTE2    '
>381a4b	00 65 2a 00 46 4c 55 54 45 32 20 20 20 20
>381a59	00 21 9f 53 5a 00 0c 21		INSTRUMENT_FRHORN1    .text $00, $21, $9F, $53, $5A, $00, $0C, $21, $80, $AA, $1A, $00, 'FRHORN1   '
>381a61	80 aa 1a 00 46 52 48 4f 52 4e 31 20 20 20
>381a6f	00 20 8e a5 8f 02 06 21		INSTRUMENT_FRHORN2    .text $00, $20, $8E, $A5, $8F, $02, $06, $21, $00, $36, $3D, $00, 'FRHORN2   '
>381a77	00 36 3d 00 46 52 48 4f 52 4e 32 20 20 20
>381a85	00 f0 18 55 ef 02 00 e0		INSTRUMENT_FSTRP1     .text $00, $F0, $18, $55, $EF, $02, $00, $E0, $80, $87, $1E, $03, 'FSTRP1    '
>381a8d	80 87 1e 03 46 53 54 52 50 31 20 20 20 20
>381a9b	00 70 16 55 2f 02 0c e0		INSTRUMENT_FSTRP2     .text $00, $70, $16, $55, $2F, $02, $0C, $E0, $80, $87, $1E, $03, 'FSTRP2    '
>381aa3	80 87 1e 03 46 53 54 52 50 32 20 20 20 20
>381ab1	00 f1 00 97 13 00 0a 25		INSTRUMENT_FUZGUIT1   .text $00, $F1, $00, $97, $13, $00, $0A, $25, $0D, $F1, $18, $01, 'FUZGUIT1  '
>381ab9	0d f1 18 01 46 55 5a 47 55 49 54 31 20 20
>381ac7	00 31 48 f1 53 00 06 32		INSTRUMENT_FUZGUIT2   .text $00, $31, $48, $F1, $53, $00, $06, $32, $00, $F2, $27, $02, 'FUZGUIT2  '
>381acf	00 f2 27 02 46 55 5a 47 55 49 54 32 20 20
>381add	00 01 11 f2 1f 00 0a 01		INSTRUMENT_GUITAR1    .text $00, $01, $11, $F2, $1F, $00, $0A, $01, $00, $F5, $88, $00, 'GUITAR1   '
>381ae5	00 f5 88 00 47 55 49 54 41 52 31 20 20 20
>381af3	00 02 29 f5 75 00 00 01		INSTRUMENT_HARP1      .text $00, $02, $29, $F5, $75, $00, $00, $01, $83, $F2, $F3, $00, 'HARP1     '
>381afb	83 f2 f3 00 48 41 52 50 31 20 20 20 20 20
>381b09	00 02 99 f5 55 00 00 01		INSTRUMENT_HARP2      .text $00, $02, $99, $F5, $55, $00, $00, $01, $80, $F6, $53, $00, 'HARP2     '
>381b11	80 f6 53 00 48 41 52 50 32 20 20 20 20 20
>381b1f	00 02 57 f5 56 00 00 01		INSTRUMENT_HARP3      .text $00, $02, $57, $F5, $56, $00, $00, $01, $80, $F6, $54, $00, 'HARP3     '
>381b27	80 f6 54 00 48 41 52 50 33 20 20 20 20 20
>381b35	00 02 29 f5 75 00 00 01		INSTRUMENT_HARPE1     .text $00, $02, $29, $F5, $75, $00, $00, $01, $03, $F2, $F3, $00, 'HARPE1    '
>381b3d	03 f2 f3 00 48 41 52 50 45 31 20 20 20 20
>381b4b	00 32 87 a1 10 00 08 16		INSTRUMENT_HARPSI1    .text $00, $32, $87, $A1, $10, $00, $08, $16, $80, $7D, $33, $00, 'HARPSI1   '
>381b53	80 7d 33 00 48 41 52 50 53 49 31 20 20 20
>381b61	00 33 87 a1 10 00 06 15		INSTRUMENT_HARPSI2    .text $00, $33, $87, $A1, $10, $00, $06, $15, $80, $7D, $43, $00, 'HARPSI2   '
>381b69	80 7d 43 00 48 41 52 50 53 49 32 20 20 20
>381b77	00 35 84 a8 10 00 08 18		INSTRUMENT_HARPSI3    .text $00, $35, $84, $A8, $10, $00, $08, $18, $80, $7D, $33, $00, 'HARPSI3   '
>381b7f	80 7d 33 00 48 41 52 50 53 49 33 20 20 20
>381b8d	00 11 0d f2 01 00 0a 15		INSTRUMENT_HARPSI4    .text $00, $11, $0D, $F2, $01, $00, $0A, $15, $0D, $F2, $B1, $00, 'HARPSI4   '
>381b95	0d f2 b1 00 48 41 52 50 53 49 34 20 20 20
>381ba3	00 36 87 8a 00 00 08 1a		INSTRUMENT_HARPSI5    .text $00, $36, $87, $8A, $00, $00, $08, $1A, $80, $7F, $33, $00, 'HARPSI5   '
>381bab	80 7f 33 00 48 41 52 50 53 49 35 20 20 20
>381bb9	00 f0 00 1e 11 01 08 e2		INSTRUMENT_HELICPTR   .text $00, $F0, $00, $1E, $11, $01, $08, $E2, $C0, $11, $11, $01, 'HELICPTR  '
>381bc1	c0 11 11 01 48 45 4c 49 43 50 54 52 20 20
>381bcf	0a 01 00 f7 b5 00 00 00		INSTRUMENT_HIHAT1     .text $0A, $01, $00, $F7, $B5, $00, $00, $00, $00, $00, $00, $00, 'HIHAT1    '
>381bd7	00 00 00 00 48 49 48 41 54 31 20 20 20 20
>381be5	0a 01 03 da 18 00 00 00		INSTRUMENT_HIHAT2     .text $0A, $01, $03, $DA, $18, $00, $00, $00, $00, $00, $00, $00, 'HIHAT2    '
>381bed	00 00 00 00 48 49 48 41 54 32 20 20 20 20
>381bfb	00 87 4d 78 42 00 0a 94		INSTRUMENT_JAVAICAN   .text $00, $87, $4D, $78, $42, $00, $0A, $94, $00, $85, $54, $00, 'JAVAICAN  '
>381c03	00 85 54 00 4a 41 56 41 49 43 41 4e 20 20
>381c11	00 03 5e 85 51 01 0e 11		INSTRUMENT_JAZZGUIT   .text $00, $03, $5E, $85, $51, $01, $0E, $11, $00, $D2, $71, $00, 'JAZZGUIT  '
>381c19	00 d2 71 00 4a 41 5a 5a 47 55 49 54 20 20
>381c27	00 00 50 f2 70 00 0e 13		INSTRUMENT_JEWSHARP   .text $00, $00, $50, $F2, $70, $00, $0E, $13, $00, $F2, $72, $00, 'JEWSHARP  '
>381c2f	00 f2 72 00 4a 45 57 53 48 41 52 50 20 20
>381c3d	00 00 02 f0 fa 01 06 11		INSTRUMENT_KEYBRD1    .text $00, $00, $02, $F0, $FA, $01, $06, $11, $80, $F2, $FA, $01, 'KEYBRD1   '
>381c45	80 f2 fa 01 4b 45 59 42 52 44 31 20 20 20
>381c53	00 01 8f f2 bd 00 08 14		INSTRUMENT_KEYBRD2    .text $00, $01, $8F, $F2, $BD, $00, $08, $14, $80, $82, $BD, $00, 'KEYBRD2   '
>381c5b	80 82 bd 00 4b 45 59 42 52 44 32 20 20 20
>381c69	00 01 00 f0 f0 00 00 e4		INSTRUMENT_KEYBRD3    .text $00, $01, $00, $F0, $F0, $00, $00, $E4, $03, $F3, $36, $00, 'KEYBRD3   '
>381c71	03 f3 36 00 4b 45 59 42 52 44 33 20 20 20
>381c7f	09 e6 00 25 b5 00 00 00		INSTRUMENT_LASER      .text $09, $E6, $00, $25, $B5, $00, $00, $00, $00, $00, $00, $00, 'LASER     '
>381c87	00 00 00 00 4c 41 53 45 52 20 20 20 20 20
>381c95	00 32 44 f8 ff 00 0e 11		INSTRUMENT_LOGDRUM1   .text $00, $32, $44, $F8, $FF, $00, $0E, $11, $00, $F5, $7F, $00, 'LOGDRUM1  '
>381c9d	00 f5 7f 00 4c 4f 47 44 52 55 4d 31 20 20
>381cab	00 05 4e da 25 00 0a 01		INSTRUMENT_MARIMBA1   .text $00, $05, $4E, $DA, $25, $00, $0A, $01, $00, $F9, $15, $00, 'MARIMBA1  '
>381cb3	00 f9 15 00 4d 41 52 49 4d 42 41 31 20 20
>381cc1	00 85 4e da 15 00 0a 81		INSTRUMENT_MARIMBA2   .text $00, $85, $4E, $DA, $15, $00, $0A, $81, $80, $F9, $13, $00, 'MARIMBA2  '
>381cc9	80 f9 13 00 4d 41 52 49 4d 42 41 32 20 20
>381cd7	00 30 00 fe 11 01 08 ae		INSTRUMENT_MDRNPHON   .text $00, $30, $00, $FE, $11, $01, $08, $AE, $C0, $F1, $19, $01, 'MDRNPHON  '
>381cdf	c0 f1 19 01 4d 44 52 4e 50 48 4f 4e 20 20
>381ced	07 0c 00 c8 b6 01 00 00		INSTRUMENT_MLTRDRUM   .text $07, $0C, $00, $C8, $B6, $01, $00, $00, $00, $00, $00, $00, 'MLTRDRUM  '
>381cf5	00 00 00 00 4d 4c 54 52 44 52 55 4d 20 20
>381d03	00 20 90 f5 9e 02 0c 11		INSTRUMENT_MOOGSYNT   .text $00, $20, $90, $F5, $9E, $02, $0C, $11, $00, $F4, $5B, $03, 'MOOGSYNT  '
>381d0b	00 f4 5b 03 4d 4f 4f 47 53 59 4e 54 20 20
>381d19	00 0e 40 d1 53 00 0e 0e		INSTRUMENT_NOISE1     .text $00, $0E, $40, $D1, $53, $00, $0E, $0E, $00, $F2, $7F, $03, 'NOISE1    '
>381d21	00 f2 7f 03 4e 4f 49 53 45 31 20 20 20 20
>381d2f	00 b1 c5 6e 17 00 02 22		INSTRUMENT_OBOE1      .text $00, $B1, $C5, $6E, $17, $00, $02, $22, $05, $8B, $0E, $00, 'OBOE1     '
>381d37	05 8b 0e 00 4f 42 4f 45 31 20 20 20 20 20
>381d45	00 65 d2 81 03 00 02 71		INSTRUMENT_ORGAN1     .text $00, $65, $D2, $81, $03, $00, $02, $71, $80, $F1, $05, $00, 'ORGAN1    '
>381d4d	80 f1 05 00 4f 52 47 41 4e 31 20 20 20 20
>381d5b	00 24 80 ff 0f 00 01 21		INSTRUMENT_ORGAN2     .text $00, $24, $80, $FF, $0F, $00, $01, $21, $80, $FF, $0F, $00, 'ORGAN2    '
>381d63	80 ff 0f 00 4f 52 47 41 4e 32 20 20 20 20
>381d71	00 03 5b f0 1f 00 0a 01		INSTRUMENT_ORGAN3     .text $00, $03, $5B, $F0, $1F, $00, $0A, $01, $80, $F0, $1F, $00, 'ORGAN3    '
>381d79	80 f0 1f 00 4f 52 47 41 4e 33 20 20 20 20
>381d87	00 03 5b f0 1f 00 0a 01		INSTRUMENT_ORGAN3A    .text $00, $03, $5B, $F0, $1F, $00, $0A, $01, $8D, $F0, $13, $00, 'ORGAN3A   '
>381d8f	8d f0 13 00 4f 52 47 41 4e 33 41 20 20 20
>381d9d	00 03 5b f0 1f 00 0a 01		INSTRUMENT_ORGAN3B    .text $00, $03, $5B, $F0, $1F, $00, $0A, $01, $92, $F0, $12, $00, 'ORGAN3B   '
>381da5	92 f0 12 00 4f 52 47 41 4e 33 42 20 20 20
>381db3	00 0c 00 f8 b5 00 01 00		INSTRUMENT_ORGNPERC   .text $00, $0C, $00, $F8, $B5, $00, $01, $00, $00, $D6, $4F, $00, 'ORGNPERC  '
>381dbb	00 d6 4f 00 4f 52 47 4e 50 45 52 43 20 20
>381dc9	00 17 4f f2 61 00 08 12		INSTRUMENT_PHONE1     .text $00, $17, $4F, $F2, $61, $00, $08, $12, $08, $F1, $B2, $00, 'PHONE1    '
>381dd1	08 f1 b2 00 50 48 4f 4e 45 31 20 20 20 20
>381ddf	00 17 4f f2 61 00 08 12		INSTRUMENT_PHONE2     .text $00, $17, $4F, $F2, $61, $00, $08, $12, $0A, $F1, $B4, $00, 'PHONE2    '
>381de7	0a f1 b4 00 50 48 4f 4e 45 32 20 20 20 20
>381df5	00 81 63 f3 58 00 00 01		INSTRUMENT_PIAN1A     .text $00, $81, $63, $F3, $58, $00, $00, $01, $80, $F2, $58, $00, 'PIAN1A    '
>381dfd	80 f2 58 00 50 49 41 4e 31 41 20 20 20 20
>381e0b	00 07 1f f5 fa 00 0e 01		INSTRUMENT_PIAN1B     .text $00, $07, $1F, $F5, $FA, $00, $0E, $01, $26, $F5, $FA, $00, 'PIAN1B    '
>381e13	26 f5 fa 00 50 49 41 4e 31 42 20 20 20 20
>381e21	00 07 1f f5 fa 00 0e 01		INSTRUMENT_PIAN1C     .text $00, $07, $1F, $F5, $FA, $00, $0E, $01, $57, $F5, $FA, $00, 'PIAN1C    '
>381e29	57 f5 fa 00 50 49 41 4e 31 43 20 20 20 20
>381e37	00 03 4f f1 53 00 06 17		INSTRUMENT_PIANO      .text $00, $03, $4F, $F1, $53, $00, $06, $17, $00, $F2, $74, $00, 'PIANO     '
>381e3f	00 f2 74 00 50 49 41 4e 4f 20 20 20 20 20
>381e4d	00 01 4f f1 53 00 06 11		INSTRUMENT_PIANO1     .text $00, $01, $4F, $F1, $53, $00, $06, $11, $00, $D2, $74, $00, 'PIANO1    '
>381e55	00 d2 74 00 50 49 41 4e 4f 31 20 20 20 20
>381e63	00 41 9d f2 51 00 06 13		INSTRUMENT_PIANO2     .text $00, $41, $9D, $F2, $51, $00, $06, $13, $00, $F2, $F1, $00, 'PIANO2    '
>381e6b	00 f2 f1 00 50 49 41 4e 4f 32 20 20 20 20
>381e79	00 01 4f f1 50 00 06 01		INSTRUMENT_PIANO3     .text $00, $01, $4F, $F1, $50, $00, $06, $01, $04, $D2, $7C, $00, 'PIANO3    '
>381e81	04 d2 7c 00 50 49 41 4e 4f 33 20 20 20 20
>381e8f	00 01 4d f1 60 00 08 11		INSTRUMENT_PIANO4     .text $00, $01, $4D, $F1, $60, $00, $08, $11, $00, $D2, $7B, $00, 'PIANO4    '
>381e97	00 d2 7b 00 50 49 41 4e 4f 34 20 20 20 20
>381ea5	00 03 4f f1 53 00 06 17		INSTRUMENT_PIANOBEL   .text $00, $03, $4F, $F1, $53, $00, $06, $17, $03, $F2, $74, $00, 'PIANOBEL  '
>381ead	03 f2 74 00 50 49 41 4e 4f 42 45 4c 20 20
>381ebb	00 01 cf f1 53 00 02 12		INSTRUMENT_PIANOF     .text $00, $01, $CF, $F1, $53, $00, $02, $12, $00, $F2, $83, $00, 'PIANOF    '
>381ec3	00 f2 83 00 50 49 41 4e 4f 46 20 20 20 20
>381ed1	00 10 00 75 93 01 00 01		INSTRUMENT_POPBASS1   .text $00, $10, $00, $75, $93, $01, $00, $01, $00, $F5, $82, $01, 'POPBASS1  '
>381ed9	00 f5 82 01 50 4f 50 42 41 53 53 31 20 20
>381ee7	07 0c 00 c7 b4 00 00 00		INSTRUMENT_RKSNARE1   .text $07, $0C, $00, $C7, $B4, $00, $00, $00, $00, $00, $00, $00, 'RKSNARE1  '
>381eef	00 00 00 00 52 4b 53 4e 41 52 45 31 20 20
>381efd	00 01 4f 71 53 00 0a 12		INSTRUMENT_SAX1       .text $00, $01, $4F, $71, $53, $00, $0A, $12, $00, $52, $7C, $00, 'SAX1      '
>381f05	00 52 7c 00 53 41 58 31 20 20 20 20 20 20
>381f13	00 07 00 f0 f0 00 0e 00		INSTRUMENT_SCRATCH    .text $00, $07, $00, $F0, $F0, $00, $0E, $00, $00, $5C, $DC, $00, 'SCRATCH   '
>381f1b	00 5c dc 00 53 43 52 41 54 43 48 20 20 20
>381f29	00 07 00 f0 f0 00 0e 00		INSTRUMENT_SCRATCH4   .text $00, $07, $00, $F0, $F0, $00, $0E, $00, $00, $5C, $DC, $00, 'SCRATCH4  '
>381f31	00 5c dc 00 53 43 52 41 54 43 48 34 20 20
>381f3f	00 06 00 f0 f0 00 0e 00		INSTRUMENT_SDRUM2     .text $00, $06, $00, $F0, $F0, $00, $0E, $00, $00, $F6, $B4, $00, 'SDRUM2    '
>381f47	00 f6 b4 00 53 44 52 55 4d 32 20 20 20 20
>381f55	00 e4 0e ff 3f 01 00 c0		INSTRUMENT_SHRTVIBE   .text $00, $E4, $0E, $FF, $3F, $01, $00, $C0, $00, $F3, $07, $00, 'SHRTVIBE  '
>381f5d	00 f3 07 00 53 48 52 54 56 49 42 45 20 20
>381f6b	00 01 40 f1 53 00 00 08		INSTRUMENT_SITAR1     .text $00, $01, $40, $F1, $53, $00, $00, $08, $40, $F1, $53, $00, 'SITAR1    '
>381f73	40 f1 53 00 53 49 54 41 52 31 20 20 20 20
>381f81	00 01 40 f1 53 00 00 08		INSTRUMENT_SITAR2     .text $00, $01, $40, $F1, $53, $00, $00, $08, $40, $F1, $53, $01, 'SITAR2    '
>381f89	40 f1 53 01 53 49 54 41 52 32 20 20 20 20
>381f97	00 61 0c 81 03 00 08 71		INSTRUMENT_SNAKEFL    .text $00, $61, $0C, $81, $03, $00, $08, $71, $80, $61, $0C, $00, 'SNAKEFL   '
>381f9f	80 61 0c 00 53 4e 41 4b 45 46 4c 20 20 20
>381fad	07 0c 00 f8 b5 00 00 00		INSTRUMENT_SNARE1     .text $07, $0C, $00, $F8, $B5, $00, $00, $00, $00, $00, $00, $00, 'SNARE1    '
>381fb5	00 00 00 00 53 4e 41 52 45 31 20 20 20 20
>381fc3	00 06 00 f0 f0 00 0e c4		INSTRUMENT_SNRSUST    .text $00, $06, $00, $F0, $F0, $00, $0E, $C4, $03, $C4, $34, $00, 'SNRSUST   '
>381fcb	03 c4 34 00 53 4e 52 53 55 53 54 20 20 20
>381fd9	00 70 1c 51 03 02 0e 20		INSTRUMENT_SOLOVLN    .text $00, $70, $1C, $51, $03, $02, $0E, $20, $00, $54, $67, $02, 'SOLOVLN   '
>381fe1	00 54 67 02 53 4f 4c 4f 56 4c 4e 20 20 20
>381fef	00 01 46 f1 83 00 06 61		INSTRUMENT_STEELGT1   .text $00, $01, $46, $F1, $83, $00, $06, $61, $03, $31, $86, $00, 'STEELGT1  '
>381ff7	03 31 86 00 53 54 45 45 4c 47 54 31 20 20
>382005	00 01 47 f1 83 00 06 61		INSTRUMENT_STEELGT2   .text $00, $01, $47, $F1, $83, $00, $06, $61, $03, $91, $86, $00, 'STEELGT2  '
>38200d	03 91 86 00 53 54 45 45 4c 47 54 32 20 20
>38201b	00 b1 8b 71 11 00 06 61		INSTRUMENT_STRINGS1   .text $00, $B1, $8B, $71, $11, $00, $06, $61, $40, $42, $15, $01, 'STRINGS1  '
>382023	40 42 15 01 53 54 52 49 4e 47 53 31 20 20
>382031	00 e1 4f b1 d3 03 06 21		INSTRUMENT_STRNLONG   .text $00, $E1, $4F, $B1, $D3, $03, $06, $21, $00, $12, $74, $01, 'STRNLONG  '
>382039	00 12 74 01 53 54 52 4e 4c 4f 4e 47 20 20
>382047	00 55 97 2a 02 00 00 12		INSTRUMENT_SYN1       .text $00, $55, $97, $2A, $02, $00, $00, $12, $80, $42, $F3, $00, 'SYN1      '
>38204f	80 42 f3 00 53 59 4e 31 20 20 20 20 20 20
>38205d	00 13 97 9a 12 00 0e 11		INSTRUMENT_SYN2       .text $00, $13, $97, $9A, $12, $00, $0E, $11, $80, $9B, $14, $00, 'SYN2      '
>382065	80 9b 14 00 53 59 4e 32 20 20 20 20 20 20
>382073	00 11 8a f1 11 00 06 01		INSTRUMENT_SYN3       .text $00, $11, $8A, $F1, $11, $00, $06, $01, $40, $F1, $B3, $00, 'SYN3      '
>38207b	40 f1 b3 00 53 59 4e 33 20 20 20 20 20 20
>382089	00 21 0d e9 3a 00 0a 22		INSTRUMENT_SYN4       .text $00, $21, $0D, $E9, $3A, $00, $0A, $22, $80, $65, $6C, $00, 'SYN4      '
>382091	80 65 6c 00 53 59 4e 34 20 20 20 20 20 20
>38209f	00 01 4f 71 53 00 06 19		INSTRUMENT_SYN5       .text $00, $01, $4F, $71, $53, $00, $06, $19, $00, $52, $7C, $00, 'SYN5      '
>3820a7	00 52 7c 00 53 59 4e 35 20 20 20 20 20 20
>3820b5	00 24 0f 41 7e 00 0a 21		INSTRUMENT_SYN6       .text $00, $24, $0F, $41, $7E, $00, $0A, $21, $00, $F1, $5E, $00, 'SYN6      '
>3820bd	00 f1 5e 00 53 59 4e 36 20 20 20 20 20 20
>3820cb	00 07 87 f0 05 00 04 01		INSTRUMENT_SYN9       .text $00, $07, $87, $F0, $05, $00, $04, $01, $80, $F0, $05, $00, 'SYN9      '
>3820d3	80 f0 05 00 53 59 4e 39 20 20 20 20 20 20
>3820e1	00 26 03 e0 f0 00 08 1e		INSTRUMENT_SYNBAL1    .text $00, $26, $03, $E0, $F0, $00, $08, $1E, $00, $FF, $31, $00, 'SYNBAL1   '
>3820e9	00 ff 31 00 53 59 4e 42 41 4c 31 20 20 20
>3820f7	00 28 03 e0 f0 00 04 13		INSTRUMENT_SYNBAL2    .text $00, $28, $03, $E0, $F0, $00, $04, $13, $00, $E8, $11, $00, 'SYNBAL2   '
>3820ff	00 e8 11 00 53 59 4e 42 41 4c 32 20 20 20
>38210d	00 30 88 d5 19 00 0c 71		INSTRUMENT_SYNBASS1   .text $00, $30, $88, $D5, $19, $00, $0C, $71, $80, $61, $1B, $00, 'SYNBASS1  '
>382115	80 61 1b 00 53 59 4e 42 41 53 53 31 20 20
>382123	00 81 86 65 01 00 0c 11		INSTRUMENT_SYNBASS2   .text $00, $81, $86, $65, $01, $00, $0C, $11, $00, $32, $74, $00, 'SYNBASS2  '
>38212b	00 32 74 00 53 59 4e 42 41 53 53 32 20 20
>382139	00 81 83 65 05 00 0a 51		INSTRUMENT_SYNBASS4   .text $00, $81, $83, $65, $05, $00, $0A, $51, $00, $32, $74, $00, 'SYNBASS4  '
>382141	00 32 74 00 53 59 4e 42 41 53 53 34 20 20
>38214f	00 06 00 f0 f0 00 0e 00		INSTRUMENT_SYNSNR1    .text $00, $06, $00, $F0, $F0, $00, $0E, $00, $00, $F8, $B6, $00, 'SYNSNR1   '
>382157	00 f8 b6 00 53 59 4e 53 4e 52 31 20 20 20
>382165	00 06 00 f0 f0 00 0e 00		INSTRUMENT_SYNSNR2    .text $00, $06, $00, $F0, $F0, $00, $0E, $00, $00, $F6, $B4, $00, 'SYNSNR2   '
>38216d	00 f6 b4 00 53 59 4e 53 4e 52 32 20 20 20
>38217b	00 8f 81 ef 01 00 04 01		INSTRUMENT_TINCAN1    .text $00, $8F, $81, $EF, $01, $00, $04, $01, $00, $98, $F1, $00, 'TINCAN1   '
>382183	00 98 f1 00 54 49 4e 43 41 4e 31 20 20 20
>382191	08 04 00 f7 b5 00 00 00		INSTRUMENT_TOM1       .text $08, $04, $00, $F7, $B5, $00, $00, $00, $00, $00, $00, $00, 'TOM1      '
>382199	00 00 00 00 54 4f 4d 31 20 20 20 20 20 20
>3821a7	08 02 00 c8 97 00 00 00		INSTRUMENT_TOM2       .text $08, $02, $00, $C8, $97, $00, $00, $00, $00, $00, $00, $00, 'TOM2      '
>3821af	00 00 00 00 54 4f 4d 32 20 20 20 20 20 20
>3821bd	00 17 4f f2 61 00 08 12		INSTRUMENT_TRAINBEL   .text $00, $17, $4F, $F2, $61, $00, $08, $12, $08, $F2, $74, $00, 'TRAINBEL  '
>3821c5	08 f2 74 00 54 52 41 49 4e 42 45 4c 20 20
>3821d3	00 26 03 e0 f0 00 08 1e		INSTRUMENT_TRIANGLE   .text $00, $26, $03, $E0, $F0, $00, $08, $1E, $00, $FF, $31, $00, 'TRIANGLE  '
>3821db	00 ff 31 00 54 52 49 41 4e 47 4c 45 20 20
>3821e9	00 b1 1c 41 1f 00 0e 61		INSTRUMENT_TROMB1     .text $00, $B1, $1C, $41, $1F, $00, $0E, $61, $80, $92, $3B, $00, 'TROMB1    '
>3821f1	80 92 3b 00 54 52 4f 4d 42 31 20 20 20 20
>3821ff	00 21 1c 53 1d 00 0c 61		INSTRUMENT_TROMB2     .text $00, $21, $1C, $53, $1D, $00, $0C, $61, $80, $52, $3B, $00, 'TROMB2    '
>382207	80 52 3b 00 54 52 4f 4d 42 32 20 20 20 20
>382215	00 31 1c 41 0b 00 0e 61		INSTRUMENT_TRUMPET1   .text $00, $31, $1C, $41, $0B, $00, $0E, $61, $80, $92, $3B, $00, 'TRUMPET1  '
>38221d	80 92 3b 00 54 52 55 4d 50 45 54 31 20 20
>38222b	00 31 1c 23 1d 00 0c 61		INSTRUMENT_TRUMPET2   .text $00, $31, $1C, $23, $1D, $00, $0C, $61, $80, $52, $3B, $00, 'TRUMPET2  '
>382233	80 52 3b 00 54 52 55 4d 50 45 54 32 20 20
>382241	00 31 1c 41 01 00 0e 61		INSTRUMENT_TRUMPET3   .text $00, $31, $1C, $41, $01, $00, $0E, $61, $80, $92, $3B, $00, 'TRUMPET3  '
>382249	80 92 3b 00 54 52 55 4d 50 45 54 33 20 20
>382257	00 31 1c 41 0b 00 0c 61		INSTRUMENT_TRUMPET4   .text $00, $31, $1C, $41, $0B, $00, $0C, $61, $80, $92, $3B, $00, 'TRUMPET4  '
>38225f	80 92 3b 00 54 52 55 4d 50 45 54 34 20 20
>38226d	00 21 19 43 8c 00 0c 21		INSTRUMENT_TUBA1      .text $00, $21, $19, $43, $8C, $00, $0C, $21, $80, $85, $2F, $00, 'TUBA1     '
>382275	80 85 2f 00 54 55 42 41 31 20 20 20 20 20
>382283	00 84 53 f5 33 00 06 a0		INSTRUMENT_VIBRA1     .text $00, $84, $53, $F5, $33, $00, $06, $A0, $80, $FD, $25, $00, 'VIBRA1    '
>38228b	80 fd 25 00 56 49 42 52 41 31 20 20 20 20
>382299	00 06 73 f6 54 00 00 81		INSTRUMENT_VIBRA2     .text $00, $06, $73, $F6, $54, $00, $00, $81, $03, $F2, $B3, $00, 'VIBRA2    '
>3822a1	03 f2 b3 00 56 49 42 52 41 32 20 20 20 20
>3822af	00 93 97 aa 12 02 0e 91		INSTRUMENT_VIBRA3     .text $00, $93, $97, $AA, $12, $02, $0E, $91, $80, $AC, $21, $00, 'VIBRA3    '
>3822b7	80 ac 21 00 56 49 42 52 41 33 20 20 20 20
>3822c5	00 31 1c 51 03 00 0e 61		INSTRUMENT_VIOLIN1    .text $00, $31, $1C, $51, $03, $00, $0E, $61, $80, $54, $67, $00, 'VIOLIN1   '
>3822cd	80 54 67 00 56 49 4f 4c 49 4e 31 20 20 20
>3822db	00 e1 88 62 29 00 0c 22		INSTRUMENT_VIOLIN2    .text $00, $E1, $88, $62, $29, $00, $0C, $22, $80, $53, $2C, $00, 'VIOLIN2   '
>3822e3	80 53 2c 00 56 49 4f 4c 49 4e 32 20 20 20
>3822f1	00 e1 88 64 29 00 06 22		INSTRUMENT_VIOLIN3    .text $00, $E1, $88, $64, $29, $00, $06, $22, $83, $53, $2C, $00, 'VIOLIN3   '
>3822f9	83 53 2c 00 56 49 4f 4c 49 4e 33 20 20 20
>382307	00 31 9c f1 f9 00 0e 31		INSTRUMENT_VLNPIZZ1   .text $00, $31, $9C, $F1, $F9, $00, $0E, $31, $80, $F7, $E6, $00, 'VLNPIZZ1  '
>38230f	80 f7 e6 00 56 4c 4e 50 49 5a 5a 31 20 20
>38231d	00 00 02 00 f0 00 0e 14		INSTRUMENT_WAVE       .text $00, $00, $02, $00, $F0, $00, $0E, $14, $80, $1B, $A2, $00, 'WAVE      '
>382325	80 1b a2 00 57 41 56 45 20 20 20 20 20 20
>382333	00 11 2d c8 2f 00 0c 31		INSTRUMENT_XYLO1      .text $00, $11, $2D, $C8, $2F, $00, $0C, $31, $00, $F5, $F5, $00, 'XYLO1     '
>38233b	00 f5 f5 00 58 59 4c 4f 31 20 20 20 20 20
>382349	06 2e 00 ff 0f 00 00 00		INSTRUMENT_XYLO2      .text $06, $2E, $00, $FF, $0F, $00, $00, $00, $00, $00, $00, $00, 'XYLO2     '
>382351	00 00 00 00 58 59 4c 4f 32 20 20 20 20 20
>38235f	00 06 00 ff f0 00 0e c4		INSTRUMENT_XYLO3      .text $00, $06, $00, $FF, $F0, $00, $0E, $C4, $00, $F8, $B5, $00, 'XYLO3     '
>382367	00 f8 b5 00 58 59 4c 4f 33 20 20 20 20 20

;******  Return to file: src\OPL2_Library.asm


;******  Processing file: src\OPL2_Midi_Drums.asm

>382375	00 3e 00 9f 0f 0f 00 30		DRUMINS_CLAP2         .text $00, $3E, $00, $9F, $0F, $0F, $00, $30, $00, $87, $FA, $00
>38237d	00 87 fa 00
>382381	00 01 00 78 97 09 00 02		DRUMINS_SCRATCH1      .text $00, $01, $00, $78, $97, $09, $00, $02, $00, $88, $98, $03
>382389	00 88 98 03
>38238d	00 01 00 78 97 09 00 02		DRUMINS_SCRATCH2      .text $00, $01, $00, $78, $97, $09, $00, $02, $00, $88, $98, $03
>382395	00 88 98 03
>382399	00 16 08 f1 fb 01 00 11		DRUMINS_RIMSHOT2      .text $00, $16, $08, $F1, $FB, $01, $00, $11, $00, $F9, $69, $00
>3823a1	00 f9 69 00
>3823a5	00 00 00 f8 6c 01 00 0e		DRUMINS_HIQ           .text $00, $00, $00, $F8, $6C, $01, $00, $0E, $80, $E8, $4A, $00
>3823ad	80 e8 4a 00
>3823b1	00 25 1b fa f2 01 00 12		DRUMINS_WOODBLOK      .text $00, $25, $1B, $FA, $F2, $01, $00, $12, $00, $F6, $9A, $00
>3823b9	00 f6 9a 00
>3823bd	00 06 03 f4 44 00 01 01		DRUMINS_GLOCK         .text $00, $06, $03, $F4, $44, $00, $01, $01, $1B, $F2, $34, $00
>3823c5	1b f2 34 00
>3823c9	00 00 00 f9 f3 05 00 01		DRUMINS_BASS_DR2      .text $00, $00, $00, $F9, $F3, $05, $00, $01, $00, $F7, $8A, $00
>3823d1	00 f7 8a 00
>3823d5	00 01 07 fa fd 05 00 01		DRUMINS_BASS_DR1      .text $00, $01, $07, $FA, $FD, $05, $00, $01, $00, $F6, $47, $00
>3823dd	00 f6 47 00
>3823e1	00 16 08 f1 fb 01 00 11		DRUMINS_RIMSHOT       .text $00, $16, $08, $F1, $FB, $01, $00, $11, $00, $F9, $69, $00
>3823e9	00 f9 69 00
>3823ed	00 24 00 ff 00 0f 00 02		DRUMINS_SNARE_AC      .text $00, $24, $00, $FF, $00, $0F, $00, $02, $00, $F7, $A9, $00
>3823f5	00 f7 a9 00
>3823f9	00 3e 00 9f 0f 0f 00 30		DRUMINS_CLAP          .text $00, $3E, $00, $9F, $0F, $0F, $00, $30, $00, $87, $FA, $00
>382401	00 87 fa 00
>382405	00 24 00 ff 00 0f 00 02		DRUMINS_SNARE_EL      .text $00, $24, $00, $FF, $00, $0F, $00, $02, $00, $F7, $A9, $00
>38240d	00 f7 a9 00
>382411	00 06 0a fa 1f 0c 00 11		DRUMINS_LO_TOMS       .text $00, $06, $0A, $FA, $1F, $0C, $00, $11, $00, $F5, $F5, $00
>382419	00 f5 f5 00
>38241d	00 2c 00 f2 fe 07 00 02		DRUMINS_HIHAT_CL      .text $00, $2C, $00, $F2, $FE, $07, $00, $02, $06, $B8, $D8, $03
>382425	06 b8 d8 03
>382429	00 06 0a fa 1f 0c 00 11		DRUMINS_HI_TOMS       .text $00, $06, $0A, $FA, $1F, $0C, $00, $11, $00, $F5, $F5, $00
>382431	00 f5 f5 00
>382435	00 2c 00 f2 fe 07 00 02		DRUMINS_HIHAT_PL      .text $00, $2C, $00, $F2, $FE, $07, $00, $02, $06, $B8, $D8, $03
>38243d	06 b8 d8 03
>382441	00 06 0a fa 1f 0c 00 11		DRUMINS_LOW_TOM       .text $00, $06, $0A, $FA, $1F, $0C, $00, $11, $00, $F5, $F5, $00
>382449	00 f5 f5 00
>38244d	00 2e 00 82 f6 05 00 04		DRUMINS_HIHAT_OP      .text $00, $2E, $00, $82, $F6, $05, $00, $04, $10, $74, $F8, $03
>382455	10 74 f8 03
>382459	00 06 0a fa 1f 0c 00 11		DRUMINS_LTOM_MID      .text $00, $06, $0A, $FA, $1F, $0C, $00, $11, $00, $F5, $F5, $00
>382461	00 f5 f5 00
>382465	00 06 0a fa 1f 0c 00 11		DRUMINS_HTOM_MID      .text $00, $06, $0A, $FA, $1F, $0C, $00, $11, $00, $F5, $F5, $00
>38246d	00 f5 f5 00
>382471	00 2c 00 9f 00 0f 02 0e		DRUMINS_CRASH         .text $00, $2C, $00, $9F, $00, $0F, $02, $0E, $05, $C5, $D4, $03
>382479	05 c5 d4 03
>38247d	00 06 0a fa 1f 0c 00 11		DRUMINS_TOM_HIGH      .text $00, $06, $0A, $FA, $1F, $0C, $00, $11, $00, $F5, $F5, $00
>382485	00 f5 f5 00
>382489	00 29 10 94 00 0f 00 04		DRUMINS_RIDE_CY       .text $00, $29, $10, $94, $00, $0F, $00, $04, $04, $F9, $44, $03
>382491	04 f9 44 03
>382495	00 2c 00 9f 00 0f 02 0e		DRUMINS_TAMBOUR       .text $00, $2C, $00, $9F, $00, $0F, $02, $0E, $05, $C5, $D4, $03
>38249d	05 c5 d4 03
>3824a1	00 29 10 94 00 0f 00 04		DRUMINS_CYMBAL        .text $00, $29, $10, $94, $00, $0F, $00, $04, $04, $F9, $44, $03
>3824a9	04 f9 44 03
>3824ad	00 2e 09 f5 f1 01 00 06		DRUMINS_TAMBOU2       .text $00, $2E, $09, $F5, $F1, $01, $00, $06, $03, $87, $F7, $03
>3824b5	03 87 f7 03
>3824b9	00 2c 00 9f 00 0f 02 0e		DRUMINS_SPLASH        .text $00, $2C, $00, $9F, $00, $0F, $02, $0E, $05, $C5, $D4, $03
>3824c1	05 c5 d4 03
>3824c5	00 37 14 f7 a1 09 01 03		DRUMINS_COWBELL       .text $00, $37, $14, $F7, $A1, $09, $01, $03, $00, $F6, $28, $00
>3824cd	00 f6 28 00
>3824d1	00 2c 00 9f 00 0f 02 0e		DRUMINS_CRASH2        .text $00, $2C, $00, $9F, $00, $0F, $02, $0E, $05, $C5, $D4, $03
>3824d9	05 c5 d4 03
>3824dd	00 80 00 ff 00 0d 01 00		DRUMINS_VIBRASLA      .text $00, $80, $00, $FF, $00, $0D, $01, $00, $00, $F5, $F7, $01
>3824e5	00 f5 f7 01
>3824e9	00 29 10 94 00 0f 00 04		DRUMINS_RIDE2         .text $00, $29, $10, $94, $00, $0F, $00, $04, $04, $F9, $44, $03
>3824f1	04 f9 44 03
>3824f5	00 25 c4 fa fa 01 00 03		DRUMINS_HI_BONGO      .text $00, $25, $C4, $FA, $FA, $01, $00, $03, $00, $99, $F9, $00
>3824fd	00 99 f9 00
>382501	00 21 03 fb fa 01 01 02		DRUMINS_LO_BONGO      .text $00, $21, $03, $FB, $FA, $01, $01, $02, $00, $A8, $F7, $00
>382509	00 a8 f7 00
>38250d	00 25 c4 fa fa 01 00 03		DRUMINS_MUTECONG      .text $00, $25, $C4, $FA, $FA, $01, $00, $03, $00, $99, $F9, $00
>382515	00 99 f9 00
>382519	00 24 18 f9 fa 0f 02 03		DRUMINS_OPENCONG      .text $00, $24, $18, $F9, $FA, $0F, $02, $03, $00, $A6, $F6, $00
>382521	00 a6 f6 00
>382525	00 24 18 f9 fa 0f 02 03		DRUMINS_LOWCONGA      .text $00, $24, $18, $F9, $FA, $0F, $02, $03, $00, $A6, $F6, $00
>38252d	00 a6 f6 00
>382531	00 05 14 f5 f5 07 02 03		DRUMINS_HI_TIMBA      .text $00, $05, $14, $F5, $F5, $07, $02, $03, $00, $F6, $36, $02
>382539	00 f6 36 02
>38253d	00 05 14 f5 f5 07 02 03		DRUMINS_LO_TIMBA      .text $00, $05, $14, $F5, $F5, $07, $02, $03, $00, $F6, $36, $02
>382545	00 f6 36 02
>382549	00 1c 0c f9 31 0f 01 15		DRUMINS_HI_AGOGO      .text $00, $1C, $0C, $F9, $31, $0F, $01, $15, $00, $96, $E8, $01
>382551	00 96 e8 01
>382555	00 1c 0c f9 31 0f 01 15		DRUMINS_LO_AGOGO      .text $00, $1C, $0C, $F9, $31, $0F, $01, $15, $00, $96, $E8, $01
>38255d	00 96 e8 01
>382561	00 0e 00 ff 01 0f 00 0e		DRUMINS_CABASA        .text $00, $0E, $00, $FF, $01, $0F, $00, $0E, $02, $79, $77, $03
>382569	02 79 77 03
>38256d	00 0e 00 ff 01 0f 00 0e		DRUMINS_MARACAS       .text $00, $0E, $00, $FF, $01, $0F, $00, $0E, $02, $79, $77, $03
>382575	02 79 77 03
>382579	00 20 15 af 07 05 01 0e		DRUMINS_S_WHISTL      .text $00, $20, $15, $AF, $07, $05, $01, $0E, $00, $A5, $2B, $02
>382581	00 a5 2b 02
>382585	00 20 18 bf 07 01 01 0e		DRUMINS_L_WHISTL      .text $00, $20, $18, $BF, $07, $01, $01, $0E, $00, $93, $3B, $02
>38258d	00 93 3b 02
>382591	00 20 00 f0 f7 0b 00 08		DRUMINS_S_GUIRO       .text $00, $20, $00, $F0, $F7, $0B, $00, $08, $01, $89, $3B, $03
>382599	01 89 3b 03
>38259d	00 20 00 f3 fa 09 00 08		DRUMINS_L_GUIRO       .text $00, $20, $00, $F3, $FA, $09, $00, $08, $0A, $53, $2B, $02
>3825a5	0a 53 2b 02
>3825a9	00 15 21 f8 9a 09 01 13		DRUMINS_CLAVES        .text $00, $15, $21, $F8, $9A, $09, $01, $13, $00, $F6, $89, $00
>3825b1	00 f6 89 00
>3825b5	00 25 1b fa f2 01 00 12		DRUMINS_HI_WDBLK      .text $00, $25, $1B, $FA, $F2, $01, $00, $12, $00, $F6, $9A, $00
>3825bd	00 f6 9a 00
>3825c1	00 25 1b fa f2 01 00 12		DRUMINS_LO_WDBLK      .text $00, $25, $1B, $FA, $F2, $01, $00, $12, $00, $F6, $9A, $00
>3825c9	00 f6 9a 00
>3825cd	00 20 01 5f 07 01 00 08		DRUMINS_MU_CUICA      .text $00, $20, $01, $5F, $07, $01, $00, $08, $00, $87, $4B, $01
>3825d5	00 87 4b 01
>3825d9	00 25 12 57 f7 01 01 03		DRUMINS_OP_CUICA      .text $00, $25, $12, $57, $F7, $01, $01, $03, $00, $78, $67, $01
>3825e1	00 78 67 01
>3825e5	00 22 2f f1 f0 07 00 27		DRUMINS_MU_TRNGL      .text $00, $22, $2F, $F1, $F0, $07, $00, $27, $02, $F8, $FC, $00
>3825ed	02 f8 fc 00
>3825f1	00 26 44 f1 f0 07 00 27		DRUMINS_OP_TRNGL      .text $00, $26, $44, $F1, $F0, $07, $00, $27, $40, $F5, $F5, $00
>3825f9	40 f5 f5 00
>3825fd	00 0e 00 ff 01 0f 00 0e		DRUMINS_SHAKER        .text $00, $0E, $00, $FF, $01, $0F, $00, $0E, $02, $79, $77, $03
>382605	02 79 77 03
>382609	00 26 44 f1 f0 07 00 27		DRUMINS_TRIANGL1      .text $00, $26, $44, $F1, $F0, $07, $00, $27, $40, $F5, $F5, $00
>382611	40 f5 f5 00
>382615	00 26 44 f1 f0 07 00 27		DRUMINS_TRIANGL2      .text $00, $26, $44, $F1, $F0, $07, $00, $27, $40, $F5, $F5, $00
>38261d	40 f5 f5 00
>382621	00 16 08 f1 fb 01 00 11		DRUMINS_RIMSHOT3      .text $00, $16, $08, $F1, $FB, $01, $00, $11, $00, $F9, $69, $00
>382629	00 f9 69 00
>38262d	00 16 08 f1 fb 01 00 11		DRUMINS_RIMSHOT4      .text $00, $16, $08, $F1, $FB, $01, $00, $11, $00, $F9, $69, $00
>382635	00 f9 69 00
>382639	00 02 1d f5 93 01 00 00		DRUMINS_TAIKO         .text $00, $02, $1D, $F5, $93, $01, $00, $00, $00, $C6, $45, $00
>382641	00 c6 45 00
=27					DRUM_NOTE_BASE = 27;
=60					NUM_MIDI_DRUMS = 60;
>382645	75 23 38 00 81 23 38 00		midiDrums     .dword DRUMINS_CLAP2, DRUMINS_SCRATCH1, DRUMINS_SCRATCH2, DRUMINS_RIMSHOT2
>38264d	8d 23 38 00 99 23 38 00
>382655	a5 23 38 00 b1 23 38 00		              .dword DRUMINS_HIQ, DRUMINS_WOODBLOK, DRUMINS_GLOCK, DRUMINS_BASS_DR2
>38265d	bd 23 38 00 c9 23 38 00
>382665	d5 23 38 00 e1 23 38 00		              .dword DRUMINS_BASS_DR1, DRUMINS_RIMSHOT,  DRUMINS_SNARE_AC, DRUMINS_CLAP
>38266d	ed 23 38 00 f9 23 38 00
>382675	05 24 38 00 11 24 38 00		              .dword DRUMINS_SNARE_EL, DRUMINS_LO_TOMS,  DRUMINS_HIHAT_CL, DRUMINS_HI_TOMS
>38267d	1d 24 38 00 29 24 38 00
>382685	35 24 38 00 41 24 38 00		              .dword DRUMINS_HIHAT_PL, DRUMINS_LOW_TOM,	DRUMINS_HIHAT_OP, DRUMINS_LTOM_MID
>38268d	4d 24 38 00 59 24 38 00
>382695	65 24 38 00 71 24 38 00		              .dword DRUMINS_HTOM_MID, DRUMINS_CRASH,    DRUMINS_TOM_HIGH, DRUMINS_RIDE_CY
>38269d	7d 24 38 00 89 24 38 00
>3826a5	95 24 38 00 a1 24 38 00		              .dword DRUMINS_TAMBOUR,  DRUMINS_CYMBAL,   DRUMINS_TAMBOU2,  DRUMINS_SPLASH
>3826ad	ad 24 38 00 b9 24 38 00
>3826b5	c5 24 38 00 d1 24 38 00		              .dword DRUMINS_COWBELL,  DRUMINS_CRASH2, 	DRUMINS_VIBRASLA, DRUMINS_RIDE2
>3826bd	dd 24 38 00 e9 24 38 00
>3826c5	f5 24 38 00 01 25 38 00		              .dword DRUMINS_HI_BONGO, DRUMINS_LO_BONGO, DRUMINS_MUTECONG, DRUMINS_OPENCONG
>3826cd	0d 25 38 00 19 25 38 00
>3826d5	25 25 38 00 31 25 38 00		              .dword DRUMINS_LOWCONGA, DRUMINS_HI_TIMBA, DRUMINS_LO_TIMBA, DRUMINS_HI_AGOGO
>3826dd	3d 25 38 00 49 25 38 00
>3826e5	55 25 38 00 61 25 38 00		              .dword DRUMINS_LO_AGOGO, DRUMINS_CABASA, DRUMINS_MARACAS,  DRUMINS_S_WHISTL
>3826ed	6d 25 38 00 79 25 38 00
>3826f5	85 25 38 00 91 25 38 00		              .dword DRUMINS_L_WHISTL, DRUMINS_S_GUIRO,  DRUMINS_L_GUIRO,  DRUMINS_CLAVES
>3826fd	9d 25 38 00 a9 25 38 00
>382705	b5 25 38 00 c1 25 38 00		              .dword DRUMINS_HI_WDBLK, DRUMINS_LO_WDBLK, DRUMINS_MU_CUICA, DRUMINS_OP_CUICA
>38270d	cd 25 38 00 d9 25 38 00
>382715	e5 25 38 00 f1 25 38 00		              .dword DRUMINS_MU_TRNGL, DRUMINS_OP_TRNGL, DRUMINS_SHAKER, DRUMINS_TRIANGL1
>38271d	fd 25 38 00 09 26 38 00
>382725	15 26 38 00 21 26 38 00		              .dword DRUMINS_TRIANGL2, DRUMINS_RIMSHOT3, DRUMINS_RIMSHOT4, DRUMINS_TAIKO
>38272d	2d 26 38 00 39 26 38 00

;******  Return to file: src\OPL2_Library.asm


;******  Processing file: src\OPL2_Midi_Instruments.asm

>382735	00 33 5a b2 50 01 00 31		MIDI_INSTRUMENT_PIANO1     .text $00, $33, $5A, $B2, $50, $01, $00, $31, $00, $B1, $F5, $01
>38273d	00 b1 f5 01
>382741	00 31 49 f2 53 07 01 11		MIDI_INSTRUMENT_PIANO2     .text $00, $31, $49, $F2, $53, $07, $01, $11, $03, $F1, $F5, $00
>382749	03 f1 f5 00
>38274d	00 31 95 d1 83 0d 01 32		MIDI_INSTRUMENT_PIANO3     .text $00, $31, $95, $D1, $83, $0D, $01, $32, $03, $C1, $F5, $00
>382755	03 c1 f5 00
>382759	00 34 9b f3 63 01 01 11		MIDI_INSTRUMENT_HONKTONK   .text $00, $34, $9B, $F3, $63, $01, $01, $11, $00, $92, $F5, $01
>382761	00 92 f5 01
>382765	00 27 28 f8 b7 01 02 91		MIDI_INSTRUMENT_EP1        .text $00, $27, $28, $F8, $B7, $01, $02, $91, $00, $F1, $F9, $00
>38276d	00 f1 f9 00
>382771	00 1a 2d f3 ee 01 01 11		MIDI_INSTRUMENT_EP2        .text $00, $1A, $2D, $F3, $EE, $01, $01, $11, $00, $F1, $F5, $00
>382779	00 f1 f5 00
>38277d	00 35 95 f2 58 0f 01 32		MIDI_INSTRUMENT_HARPSIC    .text $00, $35, $95, $F2, $58, $0F, $01, $32, $02, $81, $F6, $01
>382785	02 81 f6 01
>382789	00 31 85 c9 40 01 00 35		MIDI_INSTRUMENT_CLAVIC     .text $00, $31, $85, $C9, $40, $01, $00, $35, $00, $C2, $B9, $01
>382791	00 c2 b9 01
>382795	00 09 15 c7 64 08 00 01		MIDI_INSTRUMENT_CELESTA    .text $00, $09, $15, $C7, $64, $08, $00, $01, $05, $B2, $35, $00
>38279d	05 b2 35 00
>3827a1	00 06 03 f4 44 00 01 01		MIDI_INSTRUMENT_GLOCK      .text $00, $06, $03, $F4, $44, $00, $01, $01, $1B, $F2, $34, $00
>3827a9	1b f2 34 00
>3827ad	00 04 06 a9 24 0a 01 01		MIDI_INSTRUMENT_MUSICBOX   .text $00, $04, $06, $A9, $24, $0A, $01, $01, $01, $F5, $74, $00
>3827b5	01 f5 74 00
>3827b9	00 d4 00 f6 33 00 00 f1		MIDI_INSTRUMENT_VIBES      .text $00, $D4, $00, $F6, $33, $00, $00, $F1, $00, $61, $E3, $00
>3827c1	00 61 e3 00
>3827c5	00 d4 00 f7 e8 04 00 d1		MIDI_INSTRUMENT_MARIMBA    .text $00, $D4, $00, $F7, $E8, $04, $00, $D1, $00, $A4, $64, $00
>3827cd	00 a4 64 00
>3827d1	00 36 16 f7 f7 01 00 31		MIDI_INSTRUMENT_XYLO       .text $00, $36, $16, $F7, $F7, $01, $00, $31, $07, $B5, $F5, $00
>3827d9	07 b5 f5 00
>3827dd	00 03 1b a2 43 0b 00 00		MIDI_INSTRUMENT_TUBEBELL   .text $00, $03, $1B, $A2, $43, $0B, $00, $00, $00, $F3, $74, $00
>3827e5	00 f3 74 00
>3827e9	00 c3 8e f8 35 01 01 11		MIDI_INSTRUMENT_SANTUR     .text $00, $C3, $8E, $F8, $35, $01, $01, $11, $00, $C3, $94, $01
>3827f1	00 c3 94 01
>3827f5	00 e2 07 f4 1b 06 01 e0		MIDI_INSTRUMENT_ORGAN1     .text $00, $E2, $07, $F4, $1B, $06, $01, $E0, $00, $F4, $0D, $01
>3827fd	00 f4 0d 01
>382801	00 f2 00 f6 2c 04 00 f0		MIDI_INSTRUMENT_ORGAN2     .text $00, $F2, $00, $F6, $2C, $04, $00, $F0, $00, $F5, $0B, $01
>382809	00 f5 0b 01
>38280d	00 f1 06 b6 15 0a 00 f0		MIDI_INSTRUMENT_ORGAN3     .text $00, $F1, $06, $B6, $15, $0A, $00, $F0, $00, $BF, $07, $00
>382815	00 bf 07 00
>382819	00 22 03 79 16 08 01 e0		MIDI_INSTRUMENT_PIPEORG    .text $00, $22, $03, $79, $16, $08, $01, $E0, $00, $6D, $08, $01
>382821	00 6d 08 01
>382825	00 31 27 63 06 01 00 72		MIDI_INSTRUMENT_REEDORG    .text $00, $31, $27, $63, $06, $01, $00, $72, $00, $51, $17, $01
>38282d	00 51 17 01
>382831	00 b4 1d 53 16 0f 01 71		MIDI_INSTRUMENT_ACORDIAN   .text $00, $B4, $1D, $53, $16, $0F, $01, $71, $00, $51, $17, $01
>382839	00 51 17 01
>38283d	00 25 29 97 15 01 00 32		MIDI_INSTRUMENT_HARMONIC   .text $00, $25, $29, $97, $15, $01, $00, $32, $00, $53, $08, $01
>382845	00 53 08 01
>382849	00 24 9e 67 15 0f 00 31		MIDI_INSTRUMENT_BANDNEON   .text $00, $24, $9E, $67, $15, $0F, $00, $31, $00, $53, $06, $01
>382851	00 53 06 01
>382855	00 13 27 a3 b4 05 01 31		MIDI_INSTRUMENT_NYLONGT    .text $00, $13, $27, $A3, $B4, $05, $01, $31, $00, $D2, $F8, $00
>38285d	00 d2 f8 00
>382861	00 17 a3 f3 32 01 00 11		MIDI_INSTRUMENT_STEELGT    .text $00, $17, $A3, $F3, $32, $01, $00, $11, $00, $E2, $C7, $01
>382869	00 e2 c7 01
>38286d	00 33 24 d2 c1 0f 01 31		MIDI_INSTRUMENT_JAZZGT     .text $00, $33, $24, $D2, $C1, $0F, $01, $31, $00, $F1, $9C, $00
>382875	00 f1 9c 00
>382879	00 31 05 f8 44 01 00 32		MIDI_INSTRUMENT_CLEANGT    .text $00, $31, $05, $F8, $44, $01, $00, $32, $02, $F2, $C9, $01
>382881	02 f2 c9 01
>382885	00 21 09 9c 7b 07 00 02		MIDI_INSTRUMENT_MUTEGT     .text $00, $21, $09, $9C, $7B, $07, $00, $02, $03, $95, $FB, $00
>38288d	03 95 fb 00
>382891	00 21 84 81 98 07 01 21		MIDI_INSTRUMENT_OVERDGT    .text $00, $21, $84, $81, $98, $07, $01, $21, $04, $A1, $59, $00
>382899	04 a1 59 00
>38289d	00 b1 0c 78 43 01 00 22		MIDI_INSTRUMENT_DISTGT     .text $00, $B1, $0C, $78, $43, $01, $00, $22, $03, $91, $FC, $03
>3828a5	03 91 fc 03
>3828a9	00 00 0a 82 8c 09 00 08		MIDI_INSTRUMENT_GTHARMS    .text $00, $00, $0A, $82, $8C, $09, $00, $08, $02, $B4, $EC, $00
>3828b1	02 b4 ec 00
>3828b5	00 21 13 ab 46 01 00 21		MIDI_INSTRUMENT_ACOUBASS   .text $00, $21, $13, $AB, $46, $01, $00, $21, $00, $93, $F7, $00
>3828bd	00 93 f7 00
>3828c1	00 01 0a f9 32 01 00 22		MIDI_INSTRUMENT_FINGBASS   .text $00, $01, $0A, $F9, $32, $01, $00, $22, $04, $C1, $58, $00
>3828c9	04 c1 58 00
>3828cd	00 21 07 fa 77 0b 00 22		MIDI_INSTRUMENT_PICKBASS   .text $00, $21, $07, $FA, $77, $0B, $00, $22, $02, $C3, $6A, $00
>3828d5	02 c3 6a 00
>3828d9	00 21 17 71 57 0b 00 21		MIDI_INSTRUMENT_FRETLESS   .text $00, $21, $17, $71, $57, $0B, $00, $21, $00, $62, $87, $00
>3828e1	00 62 87 00
>3828e5	00 25 01 fa 78 07 01 12		MIDI_INSTRUMENT_SLAPBAS1   .text $00, $25, $01, $FA, $78, $07, $01, $12, $00, $F3, $97, $00
>3828ed	00 f3 97 00
>3828f1	00 21 03 fa 88 0d 00 13		MIDI_INSTRUMENT_SLAPBAS2   .text $00, $21, $03, $FA, $88, $0D, $00, $13, $00, $B3, $97, $00
>3828f9	00 b3 97 00
>3828fd	00 21 09 f5 7f 09 01 23		MIDI_INSTRUMENT_SYNBASS1   .text $00, $21, $09, $F5, $7F, $09, $01, $23, $04, $F3, $CC, $00
>382905	04 f3 cc 00
>382909	00 01 10 a3 9b 09 00 01		MIDI_INSTRUMENT_SYNBASS2   .text $00, $01, $10, $A3, $9B, $09, $00, $01, $00, $93, $AA, $00
>382911	00 93 aa 00
>382915	00 e2 19 f6 29 0d 01 e1		MIDI_INSTRUMENT_VIOLIN     .text $00, $E2, $19, $F6, $29, $0D, $01, $E1, $00, $78, $08, $01
>38291d	00 78 08 01
>382921	00 e2 1c f6 29 0d 01 e1		MIDI_INSTRUMENT_VIOLA      .text $00, $E2, $1C, $F6, $29, $0D, $01, $E1, $00, $78, $08, $01
>382929	00 78 08 01
>38292d	00 61 19 69 16 0b 01 61		MIDI_INSTRUMENT_CELLO      .text $00, $61, $19, $69, $16, $0B, $01, $61, $00, $54, $27, $01
>382935	00 54 27 01
>382939	00 71 18 82 31 0d 01 32		MIDI_INSTRUMENT_CONTRAB    .text $00, $71, $18, $82, $31, $0D, $01, $32, $00, $61, $56, $00
>382941	00 61 56 00
>382945	00 e2 23 70 06 0d 01 e1		MIDI_INSTRUMENT_TREMSTR    .text $00, $E2, $23, $70, $06, $0D, $01, $E1, $00, $75, $16, $01
>38294d	00 75 16 01
>382951	00 02 00 88 e6 08 00 61		MIDI_INSTRUMENT_PIZZ       .text $00, $02, $00, $88, $E6, $08, $00, $61, $00, $F5, $F6, $01
>382959	00 f5 f6 01
>38295d	00 12 20 f6 d5 0f 01 11		MIDI_INSTRUMENT_HARP       .text $00, $12, $20, $F6, $D5, $0F, $01, $11, $80, $F3, $E3, $00
>382965	80 f3 e3 00
>382969	00 61 0e f4 f4 01 01 00		MIDI_INSTRUMENT_TIMPANI    .text $00, $61, $0E, $F4, $F4, $01, $01, $00, $00, $B5, $F5, $00
>382971	00 b5 f5 00
>382975	00 61 1e 9c 04 0f 01 21		MIDI_INSTRUMENT_STRINGS    .text $00, $61, $1E, $9C, $04, $0F, $01, $21, $80, $71, $16, $00
>38297d	80 71 16 00
>382981	00 a2 2a c0 d6 0f 02 21		MIDI_INSTRUMENT_SLOWSTR    .text $00, $A2, $2A, $C0, $D6, $0F, $02, $21, $00, $30, $55, $01
>382989	00 30 55 01
>38298d	00 61 21 72 35 0f 01 61		MIDI_INSTRUMENT_SYNSTR1    .text $00, $61, $21, $72, $35, $0F, $01, $61, $00, $62, $36, $01
>382995	00 62 36 01
>382999	00 21 1a 72 23 0f 01 21		MIDI_INSTRUMENT_SYNSTR2    .text $00, $21, $1A, $72, $23, $0F, $01, $21, $02, $51, $07, $00
>3829a1	02 51 07 00
>3829a5	00 e1 16 97 31 09 00 61		MIDI_INSTRUMENT_CHOIR      .text $00, $E1, $16, $97, $31, $09, $00, $61, $00, $62, $39, $00
>3829ad	00 62 39 00
>3829b1	00 22 c3 79 45 01 00 21		MIDI_INSTRUMENT_OOHS       .text $00, $22, $C3, $79, $45, $01, $00, $21, $00, $66, $27, $00
>3829b9	00 66 27 00
>3829bd	00 21 de 63 55 01 01 21		MIDI_INSTRUMENT_SYNVOX     .text $00, $21, $DE, $63, $55, $01, $01, $21, $00, $73, $46, $00
>3829c5	00 73 46 00
>3829c9	00 42 05 86 f7 0a 00 50		MIDI_INSTRUMENT_ORCHIT     .text $00, $42, $05, $86, $F7, $0A, $00, $50, $00, $74, $76, $01
>3829d1	00 74 76 01
>3829d5	00 31 1c 61 02 0f 00 61		MIDI_INSTRUMENT_TRUMPET    .text $00, $31, $1C, $61, $02, $0F, $00, $61, $81, $92, $38, $00
>3829dd	81 92 38 00
>3829e1	00 71 1e 52 23 0f 00 61		MIDI_INSTRUMENT_TROMBONE   .text $00, $71, $1E, $52, $23, $0F, $00, $61, $02, $71, $19, $00
>3829e9	02 71 19 00
>3829ed	00 21 1a 76 16 0f 00 21		MIDI_INSTRUMENT_TUBA       .text $00, $21, $1A, $76, $16, $0F, $00, $21, $01, $81, $09, $00
>3829f5	01 81 09 00
>3829f9	00 25 28 89 2c 07 02 20		MIDI_INSTRUMENT_MUTETRP    .text $00, $25, $28, $89, $2C, $07, $02, $20, $00, $83, $4B, $02
>382a01	00 83 4b 02
>382a05	00 21 1f 79 16 09 00 a2		MIDI_INSTRUMENT_FRHORN     .text $00, $21, $1F, $79, $16, $09, $00, $A2, $05, $71, $59, $00
>382a0d	05 71 59 00
>382a11	00 21 19 87 16 0f 00 21		MIDI_INSTRUMENT_BRASS1     .text $00, $21, $19, $87, $16, $0F, $00, $21, $03, $82, $39, $00
>382a19	03 82 39 00
>382a1d	00 21 17 75 35 0f 00 22		MIDI_INSTRUMENT_SYNBRAS1   .text $00, $21, $17, $75, $35, $0F, $00, $22, $82, $84, $17, $00
>382a25	82 84 17 00
>382a29	00 21 22 62 58 0f 00 21		MIDI_INSTRUMENT_SYNBRAS2   .text $00, $21, $22, $62, $58, $0F, $00, $21, $02, $72, $16, $00
>382a31	02 72 16 00
>382a35	00 b1 1b 59 07 01 01 a1		MIDI_INSTRUMENT_SOPSAX     .text $00, $B1, $1B, $59, $07, $01, $01, $A1, $00, $7B, $0A, $00
>382a3d	00 7b 0a 00
>382a41	00 21 16 9f 04 0b 00 21		MIDI_INSTRUMENT_ALTOSAX    .text $00, $21, $16, $9F, $04, $0B, $00, $21, $00, $85, $0C, $01
>382a49	00 85 0c 01
>382a4d	00 21 0f a8 20 0d 00 23		MIDI_INSTRUMENT_TENSAX     .text $00, $21, $0F, $A8, $20, $0D, $00, $23, $00, $7B, $0A, $01
>382a55	00 7b 0a 01
>382a59	00 21 0f 88 04 09 00 26		MIDI_INSTRUMENT_BARISAX    .text $00, $21, $0F, $88, $04, $09, $00, $26, $00, $79, $18, $01
>382a61	00 79 18 01
>382a65	00 31 18 8f 05 01 00 32		MIDI_INSTRUMENT_OBOE       .text $00, $31, $18, $8F, $05, $01, $00, $32, $01, $73, $08, $00
>382a6d	01 73 08 00
>382a71	00 a1 0a 8c 37 01 01 24		MIDI_INSTRUMENT_ENGLHORN   .text $00, $A1, $0A, $8C, $37, $01, $01, $24, $04, $77, $0A, $00
>382a79	04 77 0a 00
>382a7d	00 31 04 a8 67 0b 00 75		MIDI_INSTRUMENT_BASSOON    .text $00, $31, $04, $A8, $67, $0B, $00, $75, $00, $51, $19, $00
>382a85	00 51 19 00
>382a89	00 a2 1f 77 26 01 01 21		MIDI_INSTRUMENT_CLARINET   .text $00, $A2, $1F, $77, $26, $01, $01, $21, $01, $74, $09, $00
>382a91	01 74 09 00
>382a95	00 e1 07 b8 94 01 01 21		MIDI_INSTRUMENT_PICCOLO    .text $00, $E1, $07, $B8, $94, $01, $01, $21, $01, $63, $28, $00
>382a9d	01 63 28 00
>382aa1	00 a1 93 87 59 01 00 e1		MIDI_INSTRUMENT_FLUTE1     .text $00, $A1, $93, $87, $59, $01, $00, $E1, $00, $65, $0A, $00
>382aa9	00 65 0a 00
>382aad	00 22 10 9f 38 01 00 61		MIDI_INSTRUMENT_RECORDER   .text $00, $22, $10, $9F, $38, $01, $00, $61, $00, $67, $29, $00
>382ab5	00 67 29 00
>382ab9	00 e2 0d 88 9a 01 01 21		MIDI_INSTRUMENT_PANFLUTE   .text $00, $E2, $0D, $88, $9A, $01, $01, $21, $00, $67, $09, $00
>382ac1	00 67 09 00
>382ac5	00 a2 10 98 94 0f 00 21		MIDI_INSTRUMENT_BOTTLEB    .text $00, $A2, $10, $98, $94, $0F, $00, $21, $01, $6A, $28, $00
>382acd	01 6a 28 00
>382ad1	00 f1 1c 86 26 0f 00 f1		MIDI_INSTRUMENT_SHAKU      .text $00, $F1, $1C, $86, $26, $0F, $00, $F1, $00, $55, $27, $00
>382ad9	00 55 27 00
>382add	00 e1 3f 9f 09 00 00 e1		MIDI_INSTRUMENT_WHISTLE    .text $00, $E1, $3F, $9F, $09, $00, $00, $E1, $00, $6F, $08, $00
>382ae5	00 6f 08 00
>382ae9	00 e2 3b f7 19 01 00 21		MIDI_INSTRUMENT_OCARINA    .text $00, $E2, $3B, $F7, $19, $01, $00, $21, $00, $7A, $07, $00
>382af1	00 7a 07 00
>382af5	00 22 1e 92 0c 0f 00 61		MIDI_INSTRUMENT_SQUARWAV   .text $00, $22, $1E, $92, $0C, $0F, $00, $61, $06, $A2, $0D, $00
>382afd	06 a2 0d 00
>382b01	00 21 15 f4 22 0f 01 21		MIDI_INSTRUMENT_SAWWAV     .text $00, $21, $15, $F4, $22, $0F, $01, $21, $00, $A3, $5F, $00
>382b09	00 a3 5f 00
>382b0d	00 f2 20 47 66 03 01 f1		MIDI_INSTRUMENT_SYNCALLI   .text $00, $F2, $20, $47, $66, $03, $01, $F1, $00, $42, $27, $00
>382b15	00 42 27 00
>382b19	00 61 19 88 28 0f 00 61		MIDI_INSTRUMENT_CHIFLEAD   .text $00, $61, $19, $88, $28, $0F, $00, $61, $05, $B2, $49, $00
>382b21	05 b2 49 00
>382b25	00 21 16 82 1b 01 00 23		MIDI_INSTRUMENT_CHARANG    .text $00, $21, $16, $82, $1B, $01, $00, $23, $00, $B2, $79, $01
>382b2d	00 b2 79 01
>382b31	00 21 00 ca 93 01 00 22		MIDI_INSTRUMENT_SOLOVOX    .text $00, $21, $00, $CA, $93, $01, $00, $22, $00, $7A, $1A, $00
>382b39	00 7a 1a 00
>382b3d	00 23 00 92 c9 08 01 22		MIDI_INSTRUMENT_FIFTHSAW   .text $00, $23, $00, $92, $C9, $08, $01, $22, $00, $82, $28, $01
>382b45	00 82 28 01
>382b49	00 21 1d f3 7b 0f 00 22		MIDI_INSTRUMENT_BASSLEAD   .text $00, $21, $1D, $F3, $7B, $0F, $00, $22, $02, $C3, $5F, $00
>382b51	02 c3 5f 00
>382b55	00 e1 00 81 25 00 01 a6		MIDI_INSTRUMENT_FANTASIA   .text $00, $E1, $00, $81, $25, $00, $01, $A6, $86, $C4, $95, $01
>382b5d	86 c4 95 01
>382b61	00 21 27 31 01 0f 00 21		MIDI_INSTRUMENT_WARMPAD    .text $00, $21, $27, $31, $01, $0F, $00, $21, $00, $44, $15, $00
>382b69	00 44 15 00
>382b6d	00 60 14 83 35 0d 02 61		MIDI_INSTRUMENT_POLYSYN    .text $00, $60, $14, $83, $35, $0D, $02, $61, $00, $D1, $06, $00
>382b75	00 d1 06 00
>382b79	00 e1 5c d3 01 01 01 62		MIDI_INSTRUMENT_SPACEVOX   .text $00, $E1, $5C, $D3, $01, $01, $01, $62, $00, $82, $37, $00
>382b81	00 82 37 00
>382b85	00 28 38 34 86 01 02 21		MIDI_INSTRUMENT_BOWEDGLS   .text $00, $28, $38, $34, $86, $01, $02, $21, $00, $41, $35, $00
>382b8d	00 41 35 00
>382b91	00 24 12 52 f3 05 01 23		MIDI_INSTRUMENT_METALPAD   .text $00, $24, $12, $52, $F3, $05, $01, $23, $02, $32, $F5, $01
>382b99	02 32 f5 01
>382b9d	00 61 1d 62 a6 0b 00 a1		MIDI_INSTRUMENT_HALOPAD    .text $00, $61, $1D, $62, $A6, $0B, $00, $A1, $00, $61, $26, $00
>382ba5	00 61 26 00
>382ba9	00 22 0f 22 d5 0b 01 21		MIDI_INSTRUMENT_SWEEPPAD   .text $00, $22, $0F, $22, $D5, $0B, $01, $21, $84, $3F, $05, $01
>382bb1	84 3f 05 01
>382bb5	00 e3 1f f9 24 01 00 31		MIDI_INSTRUMENT_ICERAIN    .text $00, $E3, $1F, $F9, $24, $01, $00, $31, $01, $D1, $F6, $00
>382bbd	01 d1 f6 00
>382bc1	00 63 00 41 55 06 01 a2		MIDI_INSTRUMENT_SOUNDTRK   .text $00, $63, $00, $41, $55, $06, $01, $A2, $00, $41, $05, $01
>382bc9	00 41 05 01
>382bcd	00 c7 25 a7 65 01 01 c1		MIDI_INSTRUMENT_CRYSTAL    .text $00, $C7, $25, $A7, $65, $01, $01, $C1, $05, $F3, $E4, $00
>382bd5	05 f3 e4 00
>382bd9	00 e3 19 f7 b7 01 01 61		MIDI_INSTRUMENT_ATMOSPH    .text $00, $E3, $19, $F7, $B7, $01, $01, $61, $00, $92, $F5, $01
>382be1	00 92 f5 01
>382be5	00 66 9b a8 44 0f 00 41		MIDI_INSTRUMENT_BRIGHT     .text $00, $66, $9B, $A8, $44, $0F, $00, $41, $04, $F2, $E4, $01
>382bed	04 f2 e4 01
>382bf1	00 61 20 22 75 0d 00 61		MIDI_INSTRUMENT_GOBLIN     .text $00, $61, $20, $22, $75, $0D, $00, $61, $00, $45, $25, $00
>382bf9	00 45 25 00
>382bfd	00 e1 21 f6 84 0f 00 e1		MIDI_INSTRUMENT_ECHODROP   .text $00, $E1, $21, $F6, $84, $0F, $00, $E1, $01, $A3, $36, $00
>382c05	01 a3 36 00
>382c09	00 e2 14 73 64 0b 01 e1		MIDI_INSTRUMENT_STARTHEM   .text $00, $E2, $14, $73, $64, $0B, $01, $E1, $01, $98, $05, $01
>382c11	01 98 05 01
>382c15	00 21 0b 72 34 09 00 24		MIDI_INSTRUMENT_SITAR      .text $00, $21, $0B, $72, $34, $09, $00, $24, $02, $A3, $F6, $01
>382c1d	02 a3 f6 01
>382c21	00 21 16 f4 53 0d 00 04		MIDI_INSTRUMENT_BANJO      .text $00, $21, $16, $F4, $53, $0D, $00, $04, $00, $F6, $F8, $00
>382c29	00 f6 f8 00
>382c2d	00 21 18 da 02 0d 00 35		MIDI_INSTRUMENT_SHAMISEN   .text $00, $21, $18, $DA, $02, $0D, $00, $35, $00, $F3, $F5, $00
>382c35	00 f3 f5 00
>382c39	00 25 0f fa 63 09 00 02		MIDI_INSTRUMENT_KOTO       .text $00, $25, $0F, $FA, $63, $09, $00, $02, $00, $94, $E5, $01
>382c41	00 94 e5 01
>382c45	00 32 07 f9 96 01 00 11		MIDI_INSTRUMENT_KALIMBA    .text $00, $32, $07, $F9, $96, $01, $00, $11, $00, $84, $44, $00
>382c4d	00 84 44 00
>382c51	00 20 0e 97 18 09 02 25		MIDI_INSTRUMENT_BAGPIPE    .text $00, $20, $0E, $97, $18, $09, $02, $25, $03, $83, $18, $01
>382c59	03 83 18 01
>382c5d	00 61 18 f6 29 01 00 62		MIDI_INSTRUMENT_FIDDLE     .text $00, $61, $18, $F6, $29, $01, $00, $62, $01, $78, $08, $01
>382c65	01 78 08 01
>382c69	00 e6 21 76 19 0b 00 61		MIDI_INSTRUMENT_SHANNAI    .text $00, $E6, $21, $76, $19, $0B, $00, $61, $03, $8E, $08, $01
>382c71	03 8e 08 01
>382c75	00 27 23 f0 d4 01 00 05		MIDI_INSTRUMENT_TINKLBEL   .text $00, $27, $23, $F0, $D4, $01, $00, $05, $09, $F2, $46, $00
>382c7d	09 f2 46 00
>382c81	00 1c 0c f9 31 0f 01 15		MIDI_INSTRUMENT_AGOGO      .text $00, $1C, $0C, $F9, $31, $0F, $01, $15, $00, $96, $E8, $01
>382c89	00 96 e8 01
>382c8d	00 02 00 75 16 06 02 01		MIDI_INSTRUMENT_STEELDRM   .text $00, $02, $00, $75, $16, $06, $02, $01, $00, $F6, $F6, $01
>382c95	00 f6 f6 01
>382c99	00 25 1b fa f2 01 00 12		MIDI_INSTRUMENT_WOODBLOK   .text $00, $25, $1B, $FA, $F2, $01, $00, $12, $00, $F6, $9A, $00
>382ca1	00 f6 9a 00
>382ca5	00 02 1d f5 93 01 00 00		MIDI_INSTRUMENT_TAIKO      .text $00, $02, $1D, $F5, $93, $01, $00, $00, $00, $C6, $45, $00
>382cad	00 c6 45 00
>382cb1	00 11 15 f5 32 05 00 10		MIDI_INSTRUMENT_MELOTOM    .text $00, $11, $15, $F5, $32, $05, $00, $10, $00, $F4, $B4, $00
>382cb9	00 f4 b4 00
>382cbd	00 22 06 fa 99 09 00 01		MIDI_INSTRUMENT_SYNDRUM    .text $00, $22, $06, $FA, $99, $09, $00, $01, $00, $D5, $25, $00
>382cc5	00 d5 25 00
>382cc9	00 2e 00 ff 00 0f 02 0e		MIDI_INSTRUMENT_REVRSCYM   .text $00, $2E, $00, $FF, $00, $0F, $02, $0E, $0E, $21, $2D, $00
>382cd1	0e 21 2d 00
>382cd5	00 30 0b 56 e4 01 01 17		MIDI_INSTRUMENT_FRETNOIS   .text $00, $30, $0B, $56, $E4, $01, $01, $17, $00, $55, $87, $02
>382cdd	00 55 87 02
>382ce1	00 24 00 ff 03 0d 00 05		MIDI_INSTRUMENT_BRTHNOIS   .text $00, $24, $00, $FF, $03, $0D, $00, $05, $08, $98, $87, $01
>382ce9	08 98 87 01
>382ced	00 0e 00 f0 00 0f 02 0a		MIDI_INSTRUMENT_SEASHORE   .text $00, $0E, $00, $F0, $00, $0F, $02, $0A, $04, $17, $04, $03
>382cf5	04 17 04 03
>382cf9	00 20 08 f6 f7 01 00 0e		MIDI_INSTRUMENT_BIRDS      .text $00, $20, $08, $F6, $F7, $01, $00, $0E, $05, $77, $F9, $02
>382d01	05 77 f9 02
>382d05	00 20 14 f1 08 01 00 2e		MIDI_INSTRUMENT_TELEPHON   .text $00, $20, $14, $F1, $08, $01, $00, $2E, $02, $F4, $08, $00
>382d0d	02 f4 08 00
>382d11	00 20 04 f2 00 03 01 23		MIDI_INSTRUMENT_HELICOPT   .text $00, $20, $04, $F2, $00, $03, $01, $23, $00, $36, $05, $01
>382d19	00 36 05 01
>382d1d	00 2e 00 ff 02 0f 00 2a		MIDI_INSTRUMENT_APPLAUSE   .text $00, $2E, $00, $FF, $02, $0F, $00, $2A, $05, $32, $55, $03
>382d25	05 32 55 03
>382d29	00 20 00 a1 ef 0f 00 10		MIDI_INSTRUMENT_GUNSHOT    .text $00, $20, $00, $A1, $EF, $0F, $00, $10, $00, $F3, $DF, $00
>382d31	00 f3 df 00
>382d35	35 27 38 00 41 27 38 00		midiInstruments .dword MIDI_INSTRUMENT_PIANO1,   MIDI_INSTRUMENT_PIANO2,   MIDI_INSTRUMENT_PIANO3,   MIDI_INSTRUMENT_HONKTONK, MIDI_INSTRUMENT_EP1,      MIDI_INSTRUMENT_EP2
>382d3d	4d 27 38 00 59 27 38 00 65 27 38 00 71 27 38 00
>382d4d	7d 27 38 00 89 27 38 00		              	.dword MIDI_INSTRUMENT_HARPSIC,  MIDI_INSTRUMENT_CLAVIC,   MIDI_INSTRUMENT_CELESTA,  MIDI_INSTRUMENT_GLOCK,    MIDI_INSTRUMENT_MUSICBOX, MIDI_INSTRUMENT_VIBES
>382d55	95 27 38 00 a1 27 38 00 ad 27 38 00 b9 27 38 00
>382d65	c5 27 38 00 d1 27 38 00		              	.dword MIDI_INSTRUMENT_MARIMBA,  MIDI_INSTRUMENT_XYLO,     MIDI_INSTRUMENT_TUBEBELL, MIDI_INSTRUMENT_SANTUR,   MIDI_INSTRUMENT_ORGAN1,   MIDI_INSTRUMENT_ORGAN2
>382d6d	dd 27 38 00 e9 27 38 00 f5 27 38 00 01 28 38 00
>382d7d	0d 28 38 00 19 28 38 00		              	.dword MIDI_INSTRUMENT_ORGAN3,   MIDI_INSTRUMENT_PIPEORG,  MIDI_INSTRUMENT_REEDORG,  MIDI_INSTRUMENT_ACORDIAN, MIDI_INSTRUMENT_HARMONIC, MIDI_INSTRUMENT_BANDNEON
>382d85	25 28 38 00 31 28 38 00 3d 28 38 00 49 28 38 00
>382d95	55 28 38 00 61 28 38 00		              	.dword MIDI_INSTRUMENT_NYLONGT,  MIDI_INSTRUMENT_STEELGT,  MIDI_INSTRUMENT_JAZZGT,   MIDI_INSTRUMENT_CLEANGT,  MIDI_INSTRUMENT_MUTEGT,   MIDI_INSTRUMENT_OVERDGT
>382d9d	6d 28 38 00 79 28 38 00 85 28 38 00 91 28 38 00
>382dad	9d 28 38 00 a9 28 38 00		              	.dword MIDI_INSTRUMENT_DISTGT,   MIDI_INSTRUMENT_GTHARMS,  MIDI_INSTRUMENT_ACOUBASS, MIDI_INSTRUMENT_FINGBASS, MIDI_INSTRUMENT_PICKBASS, MIDI_INSTRUMENT_FRETLESS
>382db5	b5 28 38 00 c1 28 38 00 cd 28 38 00 d9 28 38 00
>382dc5	e5 28 38 00 f1 28 38 00		              	.dword MIDI_INSTRUMENT_SLAPBAS1, MIDI_INSTRUMENT_SLAPBAS2, MIDI_INSTRUMENT_SYNBASS1, MIDI_INSTRUMENT_SYNBASS2, MIDI_INSTRUMENT_VIOLIN,   MIDI_INSTRUMENT_VIOLA
>382dcd	fd 28 38 00 09 29 38 00 15 29 38 00 21 29 38 00
>382ddd	2d 29 38 00 39 29 38 00		              	.dword MIDI_INSTRUMENT_CELLO,    MIDI_INSTRUMENT_CONTRAB,  MIDI_INSTRUMENT_TREMSTR,  MIDI_INSTRUMENT_PIZZ,     MIDI_INSTRUMENT_HARP,     MIDI_INSTRUMENT_TIMPANI
>382de5	45 29 38 00 51 29 38 00 5d 29 38 00 69 29 38 00
>382df5	75 29 38 00 81 29 38 00		              	.dword MIDI_INSTRUMENT_STRINGS,  MIDI_INSTRUMENT_SLOWSTR,  MIDI_INSTRUMENT_SYNSTR1,  MIDI_INSTRUMENT_SYNSTR2,  MIDI_INSTRUMENT_CHOIR,    MIDI_INSTRUMENT_OOHS
>382dfd	8d 29 38 00 99 29 38 00 a5 29 38 00 b1 29 38 00
>382e0d	bd 29 38 00 c9 29 38 00		              	.dword MIDI_INSTRUMENT_SYNVOX,   MIDI_INSTRUMENT_ORCHIT,   MIDI_INSTRUMENT_TRUMPET,  MIDI_INSTRUMENT_TROMBONE, MIDI_INSTRUMENT_TUBA,     MIDI_INSTRUMENT_MUTETRP
>382e15	d5 29 38 00 e1 29 38 00 ed 29 38 00 f9 29 38 00
>382e25	05 2a 38 00 11 2a 38 00		              	.dword MIDI_INSTRUMENT_FRHORN,   MIDI_INSTRUMENT_BRASS1,   MIDI_INSTRUMENT_SYNBRAS1, MIDI_INSTRUMENT_SYNBRAS2, MIDI_INSTRUMENT_SOPSAX,   MIDI_INSTRUMENT_ALTOSAX
>382e2d	1d 2a 38 00 29 2a 38 00 35 2a 38 00 41 2a 38 00
>382e3d	4d 2a 38 00 59 2a 38 00		              	.dword MIDI_INSTRUMENT_TENSAX,   MIDI_INSTRUMENT_BARISAX,  MIDI_INSTRUMENT_OBOE,     MIDI_INSTRUMENT_ENGLHORN, MIDI_INSTRUMENT_BASSOON,  MIDI_INSTRUMENT_CLARINET
>382e45	65 2a 38 00 71 2a 38 00 7d 2a 38 00 89 2a 38 00
>382e55	95 2a 38 00 a1 2a 38 00		              	.dword MIDI_INSTRUMENT_PICCOLO,  MIDI_INSTRUMENT_FLUTE1,   MIDI_INSTRUMENT_RECORDER, MIDI_INSTRUMENT_PANFLUTE, MIDI_INSTRUMENT_BOTTLEB,  MIDI_INSTRUMENT_SHAKU
>382e5d	ad 2a 38 00 b9 2a 38 00 c5 2a 38 00 d1 2a 38 00
>382e6d	dd 2a 38 00 e9 2a 38 00		              	.dword MIDI_INSTRUMENT_WHISTLE,  MIDI_INSTRUMENT_OCARINA,  MIDI_INSTRUMENT_SQUARWAV, MIDI_INSTRUMENT_SAWWAV,   MIDI_INSTRUMENT_SYNCALLI, MIDI_INSTRUMENT_CHIFLEAD
>382e75	f5 2a 38 00 01 2b 38 00 0d 2b 38 00 19 2b 38 00
>382e85	25 2b 38 00 31 2b 38 00		              	.dword MIDI_INSTRUMENT_CHARANG,  MIDI_INSTRUMENT_SOLOVOX,  MIDI_INSTRUMENT_FIFTHSAW, MIDI_INSTRUMENT_BASSLEAD, MIDI_INSTRUMENT_FANTASIA, MIDI_INSTRUMENT_WARMPAD
>382e8d	3d 2b 38 00 49 2b 38 00 55 2b 38 00 61 2b 38 00
>382e9d	6d 2b 38 00 79 2b 38 00		              	.dword MIDI_INSTRUMENT_POLYSYN,  MIDI_INSTRUMENT_SPACEVOX, MIDI_INSTRUMENT_BOWEDGLS, MIDI_INSTRUMENT_METALPAD, MIDI_INSTRUMENT_HALOPAD,  MIDI_INSTRUMENT_SWEEPPAD
>382ea5	85 2b 38 00 91 2b 38 00 9d 2b 38 00 a9 2b 38 00
>382eb5	b5 2b 38 00 c1 2b 38 00		              	.dword MIDI_INSTRUMENT_ICERAIN,  MIDI_INSTRUMENT_SOUNDTRK, MIDI_INSTRUMENT_CRYSTAL,  MIDI_INSTRUMENT_ATMOSPH,  MIDI_INSTRUMENT_BRIGHT,   MIDI_INSTRUMENT_GOBLIN
>382ebd	cd 2b 38 00 d9 2b 38 00 e5 2b 38 00 f1 2b 38 00
>382ecd	fd 2b 38 00 09 2c 38 00		              	.dword MIDI_INSTRUMENT_ECHODROP, MIDI_INSTRUMENT_STARTHEM, MIDI_INSTRUMENT_SITAR,    MIDI_INSTRUMENT_BANJO,    MIDI_INSTRUMENT_SHAMISEN, MIDI_INSTRUMENT_KOTO
>382ed5	15 2c 38 00 21 2c 38 00 2d 2c 38 00 39 2c 38 00
>382ee5	45 2c 38 00 51 2c 38 00		              	.dword MIDI_INSTRUMENT_KALIMBA,  MIDI_INSTRUMENT_BAGPIPE,  MIDI_INSTRUMENT_FIDDLE,   MIDI_INSTRUMENT_SHANNAI,  MIDI_INSTRUMENT_TINKLBEL, MIDI_INSTRUMENT_AGOGO
>382eed	5d 2c 38 00 69 2c 38 00 75 2c 38 00 81 2c 38 00
>382efd	8d 2c 38 00 99 2c 38 00		              	.dword MIDI_INSTRUMENT_STEELDRM, MIDI_INSTRUMENT_WOODBLOK, MIDI_INSTRUMENT_TAIKO,    MIDI_INSTRUMENT_MELOTOM,  MIDI_INSTRUMENT_SYNDRUM,  MIDI_INSTRUMENT_REVRSCYM
>382f05	a5 2c 38 00 b1 2c 38 00 bd 2c 38 00 c9 2c 38 00
>382f15	d5 2c 38 00 e1 2c 38 00		              	.dword MIDI_INSTRUMENT_FRETNOIS, MIDI_INSTRUMENT_BRTHNOIS, MIDI_INSTRUMENT_SEASHORE, MIDI_INSTRUMENT_BIRDS,    MIDI_INSTRUMENT_TELEPHON, MIDI_INSTRUMENT_HELICOPT
>382f1d	ed 2c 38 00 f9 2c 38 00 05 2d 38 00 11 2d 38 00
>382f2d	1d 2d 38 00 29 2d 38 00		              	.dword MIDI_INSTRUMENT_APPLAUSE, MIDI_INSTRUMENT_GUNSHOT

;******  Return to file: src\OPL2_Library.asm


;******  Processing file: src\OPL2_Midi_Instruments_Win31.asm

>382f35	00 01 8f f2 f4 38 00 01		MIDIW31_INSTRUMENT_PIANO1     .text $00, $01, $8F, $F2, $F4, $38, $00, $01, $0D, $F2, $F7, $00
>382f3d	0d f2 f7 00
>382f41	00 01 4b f2 f4 38 00 01		MIDIW31_INSTRUMENT_PIANO2     .text $00, $01, $4B, $F2, $F4, $38, $00, $01, $07, $F2, $F7, $00
>382f49	07 f2 f7 00
>382f4d	00 01 49 f2 f4 38 00 01		MIDIW31_INSTRUMENT_PIANO3     .text $00, $01, $49, $F2, $F4, $38, $00, $01, $07, $F2, $F6, $00
>382f55	07 f2 f6 00
>382f59	00 81 12 f2 f7 00 00 41		MIDIW31_INSTRUMENT_HONKTONK   .text $00, $81, $12, $F2, $F7, $00, $00, $41, $07, $F2, $F7, $00
>382f61	07 f2 f7 00
>382f65	00 01 57 f1 f7 00 00 01		MIDIW31_INSTRUMENT_EP1        .text $00, $01, $57, $F1, $F7, $00, $00, $01, $07, $F2, $F7, $00
>382f6d	07 f2 f7 00
>382f71	00 01 93 f1 f7 00 00 01		MIDIW31_INSTRUMENT_EP2        .text $00, $01, $93, $F1, $F7, $00, $00, $01, $07, $F2, $F7, $00
>382f79	07 f2 f7 00
>382f7d	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_HARPSIC    .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>382f85	00 00 00 00
>382f89	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_CLAVIC     .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>382f91	00 00 00 00
>382f95	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_CELESTA    .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>382f9d	00 00 00 00
>382fa1	00 07 97 f3 f2 32 00 11		MIDIW31_INSTRUMENT_GLOCK      .text $00, $07, $97, $F3, $F2, $32, $00, $11, $87, $F2, $F1, $00
>382fa9	87 f2 f1 00
>382fad	00 17 21 54 f4 32 00 01		MIDIW31_INSTRUMENT_MUSICBOX   .text $00, $17, $21, $54, $F4, $32, $00, $01, $07, $F4, $F4, $00
>382fb5	07 f4 f4 00
>382fb9	00 98 62 f3 f6 30 00 81		MIDIW31_INSTRUMENT_VIBES      .text $00, $98, $62, $F3, $F6, $30, $00, $81, $07, $F2, $F6, $00
>382fc1	07 f2 f6 00
>382fc5	00 18 23 f6 f6 00 00 01		MIDIW31_INSTRUMENT_MARIMBA    .text $00, $18, $23, $F6, $F6, $00, $00, $01, $07, $E7, $F7, $00
>382fcd	07 e7 f7 00
>382fd1	00 15 91 f6 f6 00 00 01		MIDIW31_INSTRUMENT_XYLO       .text $00, $15, $91, $F6, $F6, $00, $00, $01, $07, $F6, $F6, $00
>382fd9	07 f6 f6 00
>382fdd	00 45 59 d3 f3 00 00 81		MIDIW31_INSTRUMENT_TUBEBELL   .text $00, $45, $59, $D3, $F3, $00, $00, $81, $87, $A3, $F3, $00
>382fe5	87 a3 f3 00
>382fe9	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_SANTUR     .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>382ff1	00 00 00 00
>382ff5	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_ORGAN1     .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>382ffd	00 00 00 00
>383001	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_ORGAN2     .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>383009	00 00 00 00
>38300d	00 70 44 aa 18 34 00 b1		MIDIW31_INSTRUMENT_ORGAN3     .text $00, $70, $44, $AA, $18, $34, $00, $B1, $07, $8A, $08, $00
>383015	07 8a 08 00
>383019	00 23 93 97 23 34 01 b1		MIDIW31_INSTRUMENT_PIPEORG    .text $00, $23, $93, $97, $23, $34, $01, $B1, $07, $55, $14, $00
>383021	07 55 14 00
>383025	00 61 13 97 04 30 01 b1		MIDIW31_INSTRUMENT_REEDORG    .text $00, $61, $13, $97, $04, $30, $01, $B1, $87, $55, $04, $00
>38302d	87 55 04 00
>383031	00 24 48 98 2a 30 01 b1		MIDIW31_INSTRUMENT_ACORDIAN   .text $00, $24, $48, $98, $2A, $30, $01, $B1, $07, $46, $1A, $00
>383039	07 46 1a 00
>38303d	00 61 13 91 06 00 01 21		MIDIW31_INSTRUMENT_HARMONIC   .text $00, $61, $13, $91, $06, $00, $01, $21, $07, $61, $07, $00
>383045	07 61 07 00
>383049	00 21 13 71 06 00 00 a1		MIDIW31_INSTRUMENT_BANDNEON   .text $00, $21, $13, $71, $06, $00, $00, $A1, $90, $61, $07, $00
>383051	90 61 07 00
>383055	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_NYLONGT    .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>38305d	00 00 00 00
>383061	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_STEELGT    .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>383069	00 00 00 00
>38306d	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_JAZZGT     .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>383075	00 00 00 00
>383079	00 03 87 f6 22 36 01 21		MIDIW31_INSTRUMENT_CLEANGT    .text $00, $03, $87, $F6, $22, $36, $01, $21, $87, $F3, $F8, $00
>383081	87 f3 f8 00
>383085	00 03 47 f9 54 30 00 21		MIDIW31_INSTRUMENT_MUTEGT     .text $00, $03, $47, $F9, $54, $30, $00, $21, $07, $F6, $3A, $00
>38308d	07 f6 3a 00
>383091	00 23 4a 91 41 38 01 21		MIDIW31_INSTRUMENT_OVERDGT    .text $00, $23, $4A, $91, $41, $38, $01, $21, $0C, $84, $19, $00
>383099	0c 84 19 00
>38309d	00 23 4a 95 19 32 01 21		MIDIW31_INSTRUMENT_DISTGT     .text $00, $23, $4A, $95, $19, $32, $01, $21, $07, $94, $19, $00
>3830a5	07 94 19 00
>3830a9	00 09 a1 20 4f 00 00 84		MIDIW31_INSTRUMENT_GTHARMS    .text $00, $09, $A1, $20, $4F, $00, $00, $84, $87, $D1, $F8, $00
>3830b1	87 d1 f8 00
>3830b5	00 21 1e 94 06 00 00 a2		MIDIW31_INSTRUMENT_ACOUBASS   .text $00, $21, $1E, $94, $06, $00, $00, $A2, $07, $C3, $A6, $00
>3830bd	07 c3 a6 00
>3830c1	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_FINGBASS   .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>3830c9	00 00 00 00
>3830cd	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_PICKBASS   .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>3830d5	00 00 00 00
>3830d9	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_FRETLESS   .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>3830e1	00 00 00 00
>3830e5	00 01 8b a1 9a 38 00 21		MIDIW31_INSTRUMENT_SLAPBAS1   .text $00, $01, $8B, $A1, $9A, $38, $00, $21, $47, $F2, $DF, $00
>3830ed	47 f2 df 00
>3830f1	00 21 8b a2 16 38 00 21		MIDIW31_INSTRUMENT_SLAPBAS2   .text $00, $21, $8B, $A2, $16, $38, $00, $21, $0F, $A1, $DF, $00
>3830f9	0f a1 df 00
>3830fd	00 31 8b f4 e8 3a 00 31		MIDIW31_INSTRUMENT_SYNBASS1   .text $00, $31, $8B, $F4, $E8, $3A, $00, $31, $07, $F1, $78, $00
>383105	07 f1 78 00
>383109	00 31 12 f1 28 30 00 31		MIDIW31_INSTRUMENT_SYNBASS2   .text $00, $31, $12, $F1, $28, $30, $00, $31, $07, $F1, $18, $00
>383111	07 f1 18 00
>383115	00 31 15 dd 13 00 01 21		MIDIW31_INSTRUMENT_VIOLIN     .text $00, $31, $15, $DD, $13, $00, $01, $21, $07, $56, $26, $00
>38311d	07 56 26 00
>383121	00 31 16 dd 13 00 01 21		MIDIW31_INSTRUMENT_VIOLA      .text $00, $31, $16, $DD, $13, $00, $01, $21, $07, $66, $06, $00
>383129	07 66 06 00
>38312d	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_CELLO      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>383135	00 00 00 00
>383139	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_CONTRAB    .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>383141	00 00 00 00
>383145	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_TREMSTR    .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>38314d	00 00 00 00
>383151	00 02 1a f5 75 30 01 01		MIDIW31_INSTRUMENT_PIZZ       .text $00, $02, $1A, $F5, $75, $30, $01, $01, $87, $85, $35, $00
>383159	87 85 35 00
>38315d	00 02 1d f5 75 30 01 01		MIDIW31_INSTRUMENT_HARP       .text $00, $02, $1D, $F5, $75, $30, $01, $01, $87, $F3, $F4, $00
>383165	87 f3 f4 00
>383169	00 10 41 f5 05 32 01 11		MIDIW31_INSTRUMENT_TIMPANI    .text $00, $10, $41, $F5, $05, $32, $01, $11, $07, $F2, $C3, $00
>383171	07 f2 c3 00
>383175	00 21 9b b1 25 3c 01 a2		MIDIW31_INSTRUMENT_STRINGS    .text $00, $21, $9B, $B1, $25, $3C, $01, $A2, $08, $72, $08, $00
>38317d	08 72 08 00
>383181	00 a1 98 7f 03 00 01 21		MIDIW31_INSTRUMENT_SLOWSTR    .text $00, $A1, $98, $7F, $03, $00, $01, $21, $07, $3F, $07, $01
>383189	07 3f 07 01
>38318d	00 a1 93 c1 12 00 00 61		MIDIW31_INSTRUMENT_SYNSTR1    .text $00, $A1, $93, $C1, $12, $00, $00, $61, $07, $4F, $05, $00
>383195	07 4f 05 00
>383199	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_SYNSTR2    .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>3831a1	00 00 00 00
>3831a5	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_CHOIR      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>3831ad	00 00 00 00
>3831b1	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_OOHS       .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>3831b9	00 00 00 00
>3831bd	00 71 57 54 05 3c 00 72		MIDIW31_INSTRUMENT_SYNVOX     .text $00, $71, $57, $54, $05, $3C, $00, $72, $07, $7A, $05, $00
>3831c5	07 7a 05 00
>3831c9	00 90 00 54 63 38 00 41		MIDIW31_INSTRUMENT_ORCHIT     .text $00, $90, $00, $54, $63, $38, $00, $41, $07, $A5, $45, $00
>3831d1	07 a5 45 00
>3831d5	00 21 92 85 17 3c 00 21		MIDIW31_INSTRUMENT_TRUMPET    .text $00, $21, $92, $85, $17, $3C, $00, $21, $08, $8F, $09, $00
>3831dd	08 8f 09 00
>3831e1	00 21 94 75 17 32 00 21		MIDIW31_INSTRUMENT_TROMBONE   .text $00, $21, $94, $75, $17, $32, $00, $21, $0C, $8F, $09, $00
>3831e9	0c 8f 09 00
>3831ed	00 21 94 76 15 00 00 61		MIDIW31_INSTRUMENT_TUBA       .text $00, $21, $94, $76, $15, $00, $00, $61, $07, $82, $37, $00
>3831f5	07 82 37 00
>3831f9	00 31 43 9e 17 00 01 21		MIDIW31_INSTRUMENT_MUTETRP    .text $00, $31, $43, $9E, $17, $00, $01, $21, $07, $62, $2C, $01
>383201	07 62 2c 01
>383205	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_FRHORN     .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>38320d	00 00 00 00
>383211	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_BRASS1     .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>383219	00 00 00 00
>38321d	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_SYNBRAS1   .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>383225	00 00 00 00
>383229	00 21 4d 54 3c 38 00 21		MIDIW31_INSTRUMENT_SYNBRAS2   .text $00, $21, $4D, $54, $3C, $38, $00, $21, $07, $A6, $1C, $00
>383231	07 a6 1c 00
>383235	00 31 8f 93 02 38 01 61		MIDIW31_INSTRUMENT_SOPSAX     .text $00, $31, $8F, $93, $02, $38, $01, $61, $07, $72, $0B, $00
>38323d	07 72 0b 00
>383241	00 31 8e 93 03 38 01 61		MIDIW31_INSTRUMENT_ALTOSAX    .text $00, $31, $8E, $93, $03, $38, $01, $61, $07, $72, $09, $00
>383249	07 72 09 00
>38324d	00 31 91 93 03 30 01 61		MIDIW31_INSTRUMENT_TENSAX     .text $00, $31, $91, $93, $03, $30, $01, $61, $07, $82, $09, $00
>383255	07 82 09 00
>383259	00 31 8e 93 0f 00 01 61		MIDIW31_INSTRUMENT_BARISAX    .text $00, $31, $8E, $93, $0F, $00, $01, $61, $07, $72, $0F, $00
>383261	07 72 0f 00
>383265	00 21 4b aa 16 00 01 21		MIDIW31_INSTRUMENT_OBOE       .text $00, $21, $4B, $AA, $16, $00, $01, $21, $07, $8F, $0A, $00
>38326d	07 8f 0a 00
>383271	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_ENGLHORN   .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>383279	00 00 00 00
>38327d	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_BASSOON    .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>383285	00 00 00 00
>383289	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_CLARINET   .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>383291	00 00 00 00
>383295	00 e1 1f 85 5f 30 00 e1		MIDIW31_INSTRUMENT_PICCOLO    .text $00, $E1, $1F, $85, $5F, $30, $00, $E1, $07, $65, $1A, $00
>38329d	07 65 1a 00
>3832a1	00 e1 46 88 5f 30 00 e1		MIDIW31_INSTRUMENT_FLUTE1     .text $00, $E1, $46, $88, $5F, $30, $00, $E1, $07, $65, $1A, $00
>3832a9	07 65 1a 00
>3832ad	00 a1 9c 75 1f 32 00 21		MIDIW31_INSTRUMENT_RECORDER   .text $00, $A1, $9C, $75, $1F, $32, $00, $21, $07, $75, $0A, $00
>3832b5	07 75 0a 00
>3832b9	00 31 8b 84 58 30 00 21		MIDIW31_INSTRUMENT_PANFLUTE   .text $00, $31, $8B, $84, $58, $30, $00, $21, $07, $65, $1A, $00
>3832c1	07 65 1a 00
>3832c5	00 e1 4c 66 56 00 00 a1		MIDIW31_INSTRUMENT_BOTTLEB    .text $00, $E1, $4C, $66, $56, $00, $00, $A1, $07, $65, $26, $00
>3832cd	07 65 26 00
>3832d1	00 62 cb 76 46 00 00 a1		MIDIW31_INSTRUMENT_SHAKU      .text $00, $62, $CB, $76, $46, $00, $00, $A1, $07, $55, $36, $00
>3832d9	07 55 36 00
>3832dd	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_WHISTLE    .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>3832e5	00 00 00 00
>3832e9	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_OCARINA    .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>3832f1	00 00 00 00
>3832f5	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_SQUARWAV   .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>3832fd	00 00 00 00
>383301	00 21 0e ff 0f 30 01 21		MIDIW31_INSTRUMENT_SAWWAV     .text $00, $21, $0E, $FF, $0F, $30, $01, $21, $07, $FF, $0F, $01
>383309	07 ff 0f 01
>38330d	00 22 46 86 55 30 00 21		MIDIW31_INSTRUMENT_SYNCALLI   .text $00, $22, $46, $86, $55, $30, $00, $21, $87, $64, $18, $00
>383315	87 64 18 00
>383319	00 21 45 66 12 30 00 a1		MIDIW31_INSTRUMENT_CHIFLEAD   .text $00, $21, $45, $66, $12, $30, $00, $A1, $07, $96, $0A, $00
>383321	07 96 0a 00
>383325	00 21 8b 92 2a 34 01 22		MIDIW31_INSTRUMENT_CHARANG    .text $00, $21, $8B, $92, $2A, $34, $01, $22, $07, $91, $2A, $00
>38332d	07 91 2a 00
>383331	00 a2 9e df 05 00 00 61		MIDIW31_INSTRUMENT_SOLOVOX    .text $00, $A2, $9E, $DF, $05, $00, $00, $61, $47, $6F, $07, $00
>383339	47 6f 07 00
>38333d	00 20 1a ef 01 00 00 60		MIDIW31_INSTRUMENT_FIFTHSAW   .text $00, $20, $1A, $EF, $01, $00, $00, $60, $07, $8F, $06, $02
>383345	07 8f 06 02
>383349	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_BASSLEAD   .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>383351	00 00 00 00
>383355	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_FANTASIA   .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>38335d	00 00 00 00
>383361	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_WARMPAD    .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>383369	00 00 00 00
>38336d	00 61 17 91 34 3c 00 61		MIDIW31_INSTRUMENT_POLYSYN    .text $00, $61, $17, $91, $34, $3C, $00, $61, $07, $55, $16, $00
>383375	07 55 16 00
>383379	00 71 5d 54 01 30 00 72		MIDIW31_INSTRUMENT_SPACEVOX   .text $00, $71, $5D, $54, $01, $30, $00, $72, $07, $6A, $03, $00
>383381	07 6a 03 00
>383385	00 21 97 21 43 38 00 a2		MIDIW31_INSTRUMENT_BOWEDGLS   .text $00, $21, $97, $21, $43, $38, $00, $A2, $07, $42, $35, $00
>38338d	07 42 35 00
>383391	00 a1 1c a1 77 30 01 21		MIDIW31_INSTRUMENT_METALPAD   .text $00, $A1, $1C, $A1, $77, $30, $01, $21, $07, $31, $47, $01
>383399	07 31 47 01
>38339d	00 21 89 11 33 00 00 61		MIDIW31_INSTRUMENT_HALOPAD    .text $00, $21, $89, $11, $33, $00, $00, $61, $0A, $42, $25, $00
>3833a5	0a 42 25 00
>3833a9	00 a1 15 11 47 00 01 21		MIDIW31_INSTRUMENT_SWEEPPAD   .text $00, $A1, $15, $11, $47, $00, $01, $21, $07, $CF, $07, $00
>3833b1	07 cf 07 00
>3833b5	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_ICERAIN    .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>3833bd	00 00 00 00
>3833c1	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_SOUNDTRK   .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>3833c9	00 00 00 00
>3833cd	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_CRYSTAL    .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>3833d5	00 00 00 00
>3833d9	00 22 92 b1 81 3c 00 61		MIDIW31_INSTRUMENT_ATMOSPH    .text $00, $22, $92, $B1, $81, $3C, $00, $61, $8A, $F2, $26, $00
>3833e1	8a f2 26 00
>3833e5	00 41 4d f1 51 30 01 42		MIDIW31_INSTRUMENT_BRIGHT     .text $00, $41, $4D, $F1, $51, $30, $01, $42, $07, $F2, $F5, $00
>3833ed	07 f2 f5 00
>3833f1	00 61 94 11 51 36 01 a3		MIDIW31_INSTRUMENT_GOBLIN     .text $00, $61, $94, $11, $51, $36, $01, $A3, $87, $11, $13, $00
>3833f9	87 11 13 00
>3833fd	00 61 8c 11 31 3a 00 a1		MIDIW31_INSTRUMENT_ECHODROP   .text $00, $61, $8C, $11, $31, $3A, $00, $A1, $87, $1D, $03, $00
>383405	87 1d 03 00
>383409	00 a4 4c f3 73 00 01 61		MIDIW31_INSTRUMENT_STARTHEM   .text $00, $A4, $4C, $F3, $73, $00, $01, $61, $07, $81, $23, $00
>383411	07 81 23 00
>383415	00 02 85 d2 53 00 00 07		MIDIW31_INSTRUMENT_SITAR      .text $00, $02, $85, $D2, $53, $00, $00, $07, $0A, $F2, $F6, $01
>38341d	0a f2 f6 01
>383421	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_BANJO      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>383429	00 00 00 00
>38342d	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_SHAMISEN   .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>383435	00 00 00 00
>383439	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_KOTO       .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>383441	00 00 00 00
>383445	00 04 4f fa 56 3c 00 01		MIDIW31_INSTRUMENT_KALIMBA    .text $00, $04, $4F, $FA, $56, $3C, $00, $01, $07, $C2, $05, $00
>38344d	07 c2 05 00
>383451	00 21 49 7c 20 36 00 22		MIDIW31_INSTRUMENT_BAGPIPE    .text $00, $21, $49, $7C, $20, $36, $00, $22, $07, $6F, $0C, $01
>383459	07 6f 0c 01
>38345d	00 31 85 dd 33 3a 01 21		MIDIW31_INSTRUMENT_FIDDLE     .text $00, $31, $85, $DD, $33, $3A, $01, $21, $07, $56, $16, $00
>383465	07 56 16 00
>383469	00 20 04 da 05 30 02 21		MIDIW31_INSTRUMENT_SHANNAI    .text $00, $20, $04, $DA, $05, $30, $02, $21, $88, $8F, $0B, $00
>383471	88 8f 0b 00
>383475	00 05 6a f1 e5 00 00 03		MIDIW31_INSTRUMENT_TINKLBEL   .text $00, $05, $6A, $F1, $E5, $00, $00, $03, $87, $C3, $E5, $00
>38347d	87 c3 e5 00
>383481	00 07 15 ec 26 00 00 02		MIDIW31_INSTRUMENT_AGOGO      .text $00, $07, $15, $EC, $26, $00, $00, $02, $07, $F8, $16, $00
>383489	07 f8 16 00
>38348d	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_STEELDRM   .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>383495	00 00 00 00
>383499	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_WOODBLOK   .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>3834a1	00 00 00 00
>3834a5	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_TAIKO      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>3834ad	00 00 00 00
>3834b1	00 11 41 f8 47 34 02 10		MIDIW31_INSTRUMENT_MELOTOM    .text $00, $11, $41, $F8, $47, $34, $02, $10, $0A, $F3, $03, $00
>3834b9	0a f3 03 00
>3834bd	00 01 8e f1 06 3e 02 10		MIDIW31_INSTRUMENT_SYNDRUM    .text $00, $01, $8E, $F1, $06, $3E, $02, $10, $07, $F3, $02, $00
>3834c5	07 f3 02 00
>3834c9	00 0e 00 1f 00 3e 00 c0		MIDIW31_INSTRUMENT_REVRSCYM   .text $00, $0E, $00, $1F, $00, $3E, $00, $C0, $07, $1F, $FF, $03
>3834d1	07 1f ff 03
>3834d5	00 06 80 f8 24 38 00 03		MIDIW31_INSTRUMENT_FRETNOIS   .text $00, $06, $80, $F8, $24, $38, $00, $03, $8F, $56, $84, $02
>3834dd	8f 56 84 02
>3834e1	00 0e 00 f8 00 00 00 d0		MIDIW31_INSTRUMENT_BRTHNOIS   .text $00, $0E, $00, $F8, $00, $00, $00, $D0, $0C, $34, $04, $03
>3834e9	0c 34 04 03
>3834ed	00 0e 00 f6 00 00 00 c0		MIDIW31_INSTRUMENT_SEASHORE   .text $00, $0E, $00, $F6, $00, $00, $00, $C0, $07, $1F, $02, $03
>3834f5	07 1f 02 03
>3834f9	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_BIRDS      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>383501	00 00 00 00
>383505	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_TELEPHON   .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>38350d	00 00 00 00
>383511	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_HELICOPT   .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>383519	00 00 00 00
>38351d	00 26 00 ff 01 3e 00 e4		MIDIW31_INSTRUMENT_APPLAUSE   .text $00, $26, $00, $FF, $01, $3E, $00, $E4, $07, $12, $16, $01
>383525	07 12 16 01
>383529	00 00 00 f3 f0 3e 00 00		MIDIW31_INSTRUMENT_GUNSHOT    .text $00, $00, $00, $F3, $F0, $3E, $00, $00, $07, $F6, $C9, $02
>383531	07 f6 c9 02
>383535	35 2f 38 00 41 2f 38 00		midiInstrumentsw31 .dword MIDIW31_INSTRUMENT_PIANO1,   MIDIW31_INSTRUMENT_PIANO2,   MIDIW31_INSTRUMENT_PIANO3,   MIDIW31_INSTRUMENT_HONKTONK, MIDIW31_INSTRUMENT_EP1, MIDIW31_INSTRUMENT_EP2
>38353d	4d 2f 38 00 59 2f 38 00 65 2f 38 00 71 2f 38 00
>38354d	7d 2f 38 00 89 2f 38 00		                   .dword MIDIW31_INSTRUMENT_HARPSIC,  MIDIW31_INSTRUMENT_CLAVIC,   MIDIW31_INSTRUMENT_CELESTA,  MIDIW31_INSTRUMENT_GLOCK,    MIDIW31_INSTRUMENT_MUSICBOX, MIDIW31_INSTRUMENT_VIBES
>383555	95 2f 38 00 a1 2f 38 00 ad 2f 38 00 b9 2f 38 00
>383565	c5 2f 38 00 d1 2f 38 00			                 .dword MIDIW31_INSTRUMENT_MARIMBA,  MIDIW31_INSTRUMENT_XYLO,     MIDIW31_INSTRUMENT_TUBEBELL, MIDIW31_INSTRUMENT_SANTUR,   MIDIW31_INSTRUMENT_ORGAN1,   MIDIW31_INSTRUMENT_ORGAN2
>38356d	dd 2f 38 00 e9 2f 38 00 f5 2f 38 00 01 30 38 00
>38357d	0d 30 38 00 19 30 38 00			                 .dword MIDIW31_INSTRUMENT_ORGAN3,   MIDIW31_INSTRUMENT_PIPEORG,  MIDIW31_INSTRUMENT_REEDORG,  MIDIW31_INSTRUMENT_ACORDIAN, MIDIW31_INSTRUMENT_HARMONIC, MIDIW31_INSTRUMENT_BANDNEON
>383585	25 30 38 00 31 30 38 00 3d 30 38 00 49 30 38 00
>383595	55 30 38 00 61 30 38 00		                     .dword MIDIW31_INSTRUMENT_NYLONGT,  MIDIW31_INSTRUMENT_STEELGT,  MIDIW31_INSTRUMENT_JAZZGT,   MIDIW31_INSTRUMENT_CLEANGT,  MIDIW31_INSTRUMENT_MUTEGT,   MIDIW31_INSTRUMENT_OVERDGT
>38359d	6d 30 38 00 79 30 38 00 85 30 38 00 91 30 38 00
>3835ad	9d 30 38 00 a9 30 38 00			                 .dword MIDIW31_INSTRUMENT_DISTGT,   MIDIW31_INSTRUMENT_GTHARMS,  MIDIW31_INSTRUMENT_ACOUBASS, MIDIW31_INSTRUMENT_FINGBASS, MIDIW31_INSTRUMENT_PICKBASS, MIDIW31_INSTRUMENT_FRETLESS
>3835b5	b5 30 38 00 c1 30 38 00 cd 30 38 00 d9 30 38 00
>3835c5	e5 30 38 00 f1 30 38 00			                 .dword MIDIW31_INSTRUMENT_SLAPBAS1, MIDIW31_INSTRUMENT_SLAPBAS2, MIDIW31_INSTRUMENT_SYNBASS1, MIDIW31_INSTRUMENT_SYNBASS2, MIDIW31_INSTRUMENT_VIOLIN,   MIDIW31_INSTRUMENT_VIOLA
>3835cd	fd 30 38 00 09 31 38 00 15 31 38 00 21 31 38 00
>3835dd	2d 31 38 00 39 31 38 00			                 .dword MIDIW31_INSTRUMENT_CELLO,    MIDIW31_INSTRUMENT_CONTRAB,  MIDIW31_INSTRUMENT_TREMSTR,  MIDIW31_INSTRUMENT_PIZZ,     MIDIW31_INSTRUMENT_HARP,     MIDIW31_INSTRUMENT_TIMPANI
>3835e5	45 31 38 00 51 31 38 00 5d 31 38 00 69 31 38 00
>3835f5	75 31 38 00 81 31 38 00			                 .dword MIDIW31_INSTRUMENT_STRINGS,  MIDIW31_INSTRUMENT_SLOWSTR,  MIDIW31_INSTRUMENT_SYNSTR1,  MIDIW31_INSTRUMENT_SYNSTR2,  MIDIW31_INSTRUMENT_CHOIR,    MIDIW31_INSTRUMENT_OOHS
>3835fd	8d 31 38 00 99 31 38 00 a5 31 38 00 b1 31 38 00
>38360d	bd 31 38 00 c9 31 38 00			                 .dword MIDIW31_INSTRUMENT_SYNVOX,   MIDIW31_INSTRUMENT_ORCHIT,   MIDIW31_INSTRUMENT_TRUMPET,  MIDIW31_INSTRUMENT_TROMBONE, MIDIW31_INSTRUMENT_TUBA,     MIDIW31_INSTRUMENT_MUTETRP
>383615	d5 31 38 00 e1 31 38 00 ed 31 38 00 f9 31 38 00
>383625	05 32 38 00 11 32 38 00			                 .dword MIDIW31_INSTRUMENT_FRHORN,   MIDIW31_INSTRUMENT_BRASS1,   MIDIW31_INSTRUMENT_SYNBRAS1, MIDIW31_INSTRUMENT_SYNBRAS2, MIDIW31_INSTRUMENT_SOPSAX,   MIDIW31_INSTRUMENT_ALTOSAX
>38362d	1d 32 38 00 29 32 38 00 35 32 38 00 41 32 38 00
>38363d	4d 32 38 00 59 32 38 00			                 .dword MIDIW31_INSTRUMENT_TENSAX,   MIDIW31_INSTRUMENT_BARISAX,  MIDIW31_INSTRUMENT_OBOE,     MIDIW31_INSTRUMENT_ENGLHORN, MIDIW31_INSTRUMENT_BASSOON,  MIDIW31_INSTRUMENT_CLARINET
>383645	65 32 38 00 71 32 38 00 7d 32 38 00 89 32 38 00
>383655	95 32 38 00 a1 32 38 00			                 .dword MIDIW31_INSTRUMENT_PICCOLO,  MIDIW31_INSTRUMENT_FLUTE1,   MIDIW31_INSTRUMENT_RECORDER, MIDIW31_INSTRUMENT_PANFLUTE, MIDIW31_INSTRUMENT_BOTTLEB,  MIDIW31_INSTRUMENT_SHAKU
>38365d	ad 32 38 00 b9 32 38 00 c5 32 38 00 d1 32 38 00
>38366d	dd 32 38 00 e9 32 38 00			                 .dword MIDIW31_INSTRUMENT_WHISTLE,  MIDIW31_INSTRUMENT_OCARINA,  MIDIW31_INSTRUMENT_SQUARWAV, MIDIW31_INSTRUMENT_SAWWAV,   MIDIW31_INSTRUMENT_SYNCALLI, MIDIW31_INSTRUMENT_CHIFLEAD
>383675	f5 32 38 00 01 33 38 00 0d 33 38 00 19 33 38 00
>383685	25 33 38 00 31 33 38 00			                 .dword MIDIW31_INSTRUMENT_CHARANG,  MIDIW31_INSTRUMENT_SOLOVOX,  MIDIW31_INSTRUMENT_FIFTHSAW, MIDIW31_INSTRUMENT_BASSLEAD, MIDIW31_INSTRUMENT_FANTASIA, MIDIW31_INSTRUMENT_WARMPAD
>38368d	3d 33 38 00 49 33 38 00 55 33 38 00 61 33 38 00
>38369d	6d 33 38 00 79 33 38 00			                 .dword MIDIW31_INSTRUMENT_POLYSYN,  MIDIW31_INSTRUMENT_SPACEVOX, MIDIW31_INSTRUMENT_BOWEDGLS, MIDIW31_INSTRUMENT_METALPAD, MIDIW31_INSTRUMENT_HALOPAD,  MIDIW31_INSTRUMENT_SWEEPPAD
>3836a5	85 33 38 00 91 33 38 00 9d 33 38 00 a9 33 38 00
>3836b5	b5 33 38 00 c1 33 38 00			                 .dword MIDIW31_INSTRUMENT_ICERAIN,  MIDIW31_INSTRUMENT_SOUNDTRK, MIDIW31_INSTRUMENT_CRYSTAL,  MIDIW31_INSTRUMENT_ATMOSPH,  MIDIW31_INSTRUMENT_BRIGHT,   MIDIW31_INSTRUMENT_GOBLIN
>3836bd	cd 33 38 00 d9 33 38 00 e5 33 38 00 f1 33 38 00
>3836cd	fd 33 38 00 09 34 38 00			                 .dword MIDIW31_INSTRUMENT_ECHODROP, MIDIW31_INSTRUMENT_STARTHEM, MIDIW31_INSTRUMENT_SITAR,    MIDIW31_INSTRUMENT_BANJO,    MIDIW31_INSTRUMENT_SHAMISEN, MIDIW31_INSTRUMENT_KOTO
>3836d5	15 34 38 00 21 34 38 00 2d 34 38 00 39 34 38 00
>3836e5	45 34 38 00 51 34 38 00			                 .dword MIDIW31_INSTRUMENT_KALIMBA,  MIDIW31_INSTRUMENT_BAGPIPE,  MIDIW31_INSTRUMENT_FIDDLE,   MIDIW31_INSTRUMENT_SHANNAI,  MIDIW31_INSTRUMENT_TINKLBEL, MIDIW31_INSTRUMENT_AGOGO
>3836ed	5d 34 38 00 69 34 38 00 75 34 38 00 81 34 38 00
>3836fd	8d 34 38 00 99 34 38 00			                 .dword MIDIW31_INSTRUMENT_STEELDRM, MIDIW31_INSTRUMENT_WOODBLOK, MIDIW31_INSTRUMENT_TAIKO,    MIDIW31_INSTRUMENT_MELOTOM,  MIDIW31_INSTRUMENT_SYNDRUM,  MIDIW31_INSTRUMENT_REVRSCYM
>383705	a5 34 38 00 b1 34 38 00 bd 34 38 00 c9 34 38 00
>383715	d5 34 38 00 e1 34 38 00			                 .dword MIDIW31_INSTRUMENT_FRETNOIS, MIDIW31_INSTRUMENT_BRTHNOIS, MIDIW31_INSTRUMENT_SEASHORE, MIDIW31_INSTRUMENT_BIRDS,    MIDIW31_INSTRUMENT_TELEPHON, MIDIW31_INSTRUMENT_HELICOPT
>38371d	ed 34 38 00 f9 34 38 00 05 35 38 00 11 35 38 00
>38372d	1d 35 38 00 29 35 38 00			                 .dword MIDIW31_INSTRUMENT_APPLAUSE, MIDIW31_INSTRUMENT_GUNSHOT

;******  Return to file: src\OPL2_Library.asm

>383735	3c 42 44 45 47 49 4b 4c		NOTE_INTRO  .byte  $3C, $42, $44, $45, $47, $49, $4B, $4C
.38373d					IOPL2_TONE_TEST
.38373d	e2 20		sep #$20	                SEP #$20        ; set A short
.38373f	c2 10		rep #$10	                REP #$10        ; set X long
.383741	a2 00 00	ldx #$0000	                LDX #0
.383744					OPL2_TONE_TESTING_L1
.383744	bd 35 37	lda $383735,x	                LDA NOTE_INTRO, X
.383747	29 0f		and #$0f	                AND #$F
.383749	85 30		sta $30		                STA OPL2_NOTE ; start at C
.38374b	bd 35 37	lda $383735,x	                LDA NOTE_INTRO, X
.38374e	29 70		and #$70	                AND #$70
.383750	4a		lsr a		                LSR A
.383751	4a		lsr a		                LSR A
.383752	4a		lsr a		                LSR A
.383753	4a		lsr a		                LSR A
.383754	85 31		sta $31		                STA OPL2_OCTAVE
.383756	8a		txa		                TXA
.383757	29 03		and #$03	                AND #$03        ; replace modulo 3 -  play each note on a different channel
.383759	85 27		sta $27		                STA OPL2_CHANNEL
.38375b	22 2b 39 38	jsl $38392b	                JSL OPL2_PLAYNOTE
.38375f	a0 00 00	ldy #$0000	                LDY #$0000
.383762					OPL2_TONE_TESTING_L2
.383762	ea		nop		                NOP
.383763	ea		nop		                NOP
.383764	ea		nop		                NOP
.383765	ea		nop		                NOP
.383766	c8		iny		                INY
.383767	c0 ff ff	cpy #$ffff	                CPY #$FFFF
.38376a	d0 f6		bne $383762	                BNE OPL2_TONE_TESTING_L2
.38376c	e8		inx		                INX
.38376d	e0 08 00	cpx #$0008	                CPX #8
.383770	d0 d2		bne $383744	                BNE OPL2_TONE_TESTING_L1
.383772	6b		rtl		                RTL
.383773					OPL2_INIT
.383773	c2 20		rep #$20	                REP #$20        ; set A long
.383775	a9 00 00	lda #$0000	                LDA #$0000
.383778	85 28		sta $28		                STA OPL2_REG_REGION
.38377a	85 2a		sta $2a		                STA OPL2_REG_OFFSET
.38377c	85 30		sta $30		                STA OPL2_NOTE
.38377e	85 32		sta $32		                STA OPL2_PARAMETER0
.383780	85 34		sta $34		                STA OPL2_PARAMETER2
.383782	a9 ff 16	lda #$16ff	                LDA #<>INSTRUMENT_ACCORDN
.383785	85 50		sta $50		                STA RAD_ADDR
.383787	a9 38 00	lda #$0038	                LDA #<`INSTRUMENT_ACCORDN
.38378a	85 52		sta $52		                STA RAD_ADDR + 2
.38378c	e2 20		sep #$20	                SEP #$20        ; set A short
.38378e	6b		rtl		                RTL
.38378f					OPL2_Reset
.38378f	6b		rtl		                RTL
.383790					OPL2_Get_FrequencyBlock
.383790	6b		rtl		                RTL
.383791					OPL2_GET_REGISTER
.383791	48		pha		                PHA             ; begin setdp macro
.383792	08		php		                PHP
.383793	c2 20		rep #$20	                REP #$20        ; set A long
.383795	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.383798	5b		tcd		                TCD
.383799	28		plp		                PLP
.38379a	68		pla		                PLA             ; end setdp macro
.38379b	c2 20		rep #$20	                REP #$20        ; set A long
.38379d	18		clc		              CLC
.38379e	a9 00 e7	lda #$e700	              LDA #<>OPL2_S_BASE
.3837a1	65 32		adc $32		              ADC OPL2_PARAMETER0
.3837a3	85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.3837a5	a9 af 00	lda #$00af	              LDA #`OPL2_S_BASE
.3837a8	85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.3837aa	e2 20		sep #$20	                SEP #$20        ; set A short
.3837ac	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.3837ae	6b		rtl		              RTL
.3837af					OPL2_GET_WAVEFORM_SELECT
.3837af	48		pha		                PHA             ; begin setdp macro
.3837b0	08		php		                PHP
.3837b1	c2 20		rep #$20	                REP #$20        ; set A long
.3837b3	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.3837b6	5b		tcd		                TCD
.3837b7	28		plp		                PLP
.3837b8	68		pla		                PLA             ; end setdp macro
.3837b9	c2 20		rep #$20	                REP #$20        ; set A long
.3837bb	a9 00 e7	lda #$e700	              LDA #<>OPL2_S_BASE
.3837be	69 01 00	adc #$0001	              ADC #$0001
.3837c1	85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.3837c3	a9 af 00	lda #$00af	              LDA #`OPL2_S_BASE
.3837c6	85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.3837c8	e2 20		sep #$20	                SEP #$20        ; set A short
.3837ca	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.3837cc	29 20		and #$20	              AND #$20
.3837ce	6b		rtl		              RTL
.3837cf					OPL2_GET_SCALINGLEVEL
.3837cf	48		pha		                PHA             ; begin setdp macro
.3837d0	08		php		                PHP
.3837d1	c2 20		rep #$20	                REP #$20        ; set A long
.3837d3	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.3837d6	5b		tcd		                TCD
.3837d7	28		plp		                PLP
.3837d8	68		pla		                PLA             ; end setdp macro
.3837d9	c2 20		rep #$20	                REP #$20        ; set A long
.3837db	a9 40 00	lda #$0040	              LDA #$0040  ;
.3837de	85 28		sta $28		              STA OPL2_REG_REGION
.3837e0	20 92 40	jsr $384092	              JSR OPL2_GET_REG_OFFSET
.3837e3	e2 20		sep #$20	                SEP #$20        ; set A short
.3837e5	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.3837e7	29 c0		and #$c0	              AND #$C0
.3837e9	4a		lsr a		              LSR A
.3837ea	4a		lsr a		              LSR A
.3837eb	4a		lsr a		              LSR A
.3837ec	4a		lsr a		              LSR A
.3837ed	4a		lsr a		              LSR A
.3837ee	4a		lsr a		              LSR A
.3837ef	6b		rtl		              RTL
.3837f0					OPL2_GET_BLOCK
.3837f0	48		pha		                PHA             ; begin setdp macro
.3837f1	08		php		                PHP
.3837f2	c2 20		rep #$20	                REP #$20        ; set A long
.3837f4	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.3837f7	5b		tcd		                TCD
.3837f8	28		plp		                PLP
.3837f9	68		pla		                PLA             ; end setdp macro
.3837fa	e2 20		sep #$20	                SEP #$20        ; set A short
.3837fc	18		clc		              CLC
.3837fd	a5 27		lda $27		              LDA OPL2_CHANNEL
.3837ff	29 0f		and #$0f	              AND #$0F  ; This is just precaution, it should be between 0 to 8
.383801	69 b0		adc #$b0	              ADC #$B0
.383803	85 2a		sta $2a		              STA OPL2_REG_OFFSET
.383805	a9 00		lda #$00	              LDA #$00
.383807	85 2b		sta $2b		              STA OPL2_REG_OFFSET+1;
.383809	c2 30		rep #$30	                REP #$30        ; set A&X long
.38380b	18		clc		              CLC
.38380c	a9 00 e7	lda #$e700	              LDA #<>OPL2_S_BASE
.38380f	65 2a		adc $2a		              ADC OPL2_REG_OFFSET
.383811	85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.383813	a9 af 00	lda #$00af	              LDA #`OPL2_S_BASE
.383816	85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.383818	e2 20		sep #$20	                SEP #$20        ; set A short
.38381a	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.38381c	29 1c		and #$1c	              AND #$1C
.38381e	4a		lsr a		              LSR A
.38381f	4a		lsr a		              LSR A
.383820	6b		rtl		              RTL
.383821					OPL2_GET_KEYON
.383821	48		pha		                PHA             ; begin setdp macro
.383822	08		php		                PHP
.383823	c2 20		rep #$20	                REP #$20        ; set A long
.383825	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.383828	5b		tcd		                TCD
.383829	28		plp		                PLP
.38382a	68		pla		                PLA             ; end setdp macro
.38382b	e2 20		sep #$20	                SEP #$20        ; set A short
.38382d	18		clc		              CLC
.38382e	a5 27		lda $27		              LDA OPL2_CHANNEL
.383830	29 0f		and #$0f	              AND #$0F  ; This is just precaution, it should be between 0 to 8
.383832	69 b0		adc #$b0	              ADC #$B0
.383834	85 2a		sta $2a		              STA OPL2_REG_OFFSET
.383836	a9 00		lda #$00	              LDA #$00
.383838	85 2b		sta $2b		              STA OPL2_REG_OFFSET+1;
.38383a	c2 30		rep #$30	                REP #$30        ; set A&X long
.38383c	18		clc		              CLC
.38383d	a9 00 e7	lda #$e700	              LDA #<>OPL2_S_BASE
.383840	65 2a		adc $2a		              ADC OPL2_REG_OFFSET
.383842	85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.383844	a9 af 00	lda #$00af	              LDA #`OPL2_S_BASE
.383847	85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.383849	e2 20		sep #$20	                SEP #$20        ; set A short
.38384b	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.38384d	29 20		and #$20	              AND #$20
.38384f	6b		rtl		              RTL
.383850					OPL2_GET_FEEDBACK
.383850	48		pha		                PHA             ; begin setdp macro
.383851	08		php		                PHP
.383852	c2 20		rep #$20	                REP #$20        ; set A long
.383854	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.383857	5b		tcd		                TCD
.383858	28		plp		                PLP
.383859	68		pla		                PLA             ; end setdp macro
.38385a	e2 20		sep #$20	                SEP #$20        ; set A short
.38385c	18		clc		              CLC
.38385d	a5 27		lda $27		              LDA OPL2_CHANNEL
.38385f	29 0f		and #$0f	              AND #$0F  ; This is just precaution, it should be between 0 to 8
.383861	69 c0		adc #$c0	              ADC #$C0
.383863	85 2a		sta $2a		              STA OPL2_REG_OFFSET
.383865	a9 00		lda #$00	              LDA #$00
.383867	85 2b		sta $2b		              STA OPL2_REG_OFFSET+1;
.383869	c2 30		rep #$30	                REP #$30        ; set A&X long
.38386b	18		clc		              CLC
.38386c	a9 00 e7	lda #$e700	              LDA #<>OPL2_S_BASE
.38386f	65 2a		adc $2a		              ADC OPL2_REG_OFFSET
.383871	85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.383873	a9 af 00	lda #$00af	              LDA #`OPL2_S_BASE
.383876	85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.383878	e2 20		sep #$20	                SEP #$20        ; set A short
.38387a	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.38387c	29 e0		and #$e0	              AND #$E0
.38387e	4a		lsr a		              LSR
.38387f	6b		rtl		              RTL
.383880					OPL2_GET_SYNTHMODE
.383880	48		pha		                PHA             ; begin setdp macro
.383881	08		php		                PHP
.383882	c2 20		rep #$20	                REP #$20        ; set A long
.383884	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.383887	5b		tcd		                TCD
.383888	28		plp		                PLP
.383889	68		pla		                PLA             ; end setdp macro
.38388a	e2 20		sep #$20	                SEP #$20        ; set A short
.38388c	18		clc		              CLC
.38388d	a5 27		lda $27		              LDA OPL2_CHANNEL
.38388f	29 0f		and #$0f	              AND #$0F  ; This is just precaution, it should be between 0 to 8
.383891	69 c0		adc #$c0	              ADC #$C0
.383893	85 2a		sta $2a		              STA OPL2_REG_OFFSET
.383895	a9 00		lda #$00	              LDA #$00
.383897	85 2b		sta $2b		              STA OPL2_REG_OFFSET+1;
.383899	c2 30		rep #$30	                REP #$30        ; set A&X long
.38389b	18		clc		              CLC
.38389c	a9 00 e7	lda #$e700	              LDA #<>OPL2_S_BASE
.38389f	65 2a		adc $2a		              ADC OPL2_REG_OFFSET
.3838a1	85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.3838a3	a9 af 00	lda #$00af	              LDA #`OPL2_S_BASE
.3838a6	85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.3838a8	e2 20		sep #$20	                SEP #$20        ; set A short
.3838aa	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.3838ac	29 01		and #$01	              AND #$01
.3838ae	6b		rtl		              RTL
.3838af					OPL2_GET_DEEPTREMOLO
.3838af	48		pha		                PHA             ; begin setdp macro
.3838b0	08		php		                PHP
.3838b1	c2 20		rep #$20	                REP #$20        ; set A long
.3838b3	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.3838b6	5b		tcd		                TCD
.3838b7	28		plp		                PLP
.3838b8	68		pla		                PLA             ; end setdp macro
.3838b9	c2 20		rep #$20	                REP #$20        ; set A long
.3838bb	a9 bd 00	lda #$00bd	              LDA #$00BD;
.3838be	85 28		sta $28		              STA OPL2_REG_REGION
.3838c0	20 92 40	jsr $384092	              JSR OPL2_GET_REG_OFFSET
.3838c3	e2 20		sep #$20	                SEP #$20        ; set A short
.3838c5	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.3838c7	29 80		and #$80	              AND #$80
.3838c9	6b		rtl		              RTL
.3838ca					OPL2_GET_DEEPVIBRATO
.3838ca	48		pha		                PHA             ; begin setdp macro
.3838cb	08		php		                PHP
.3838cc	c2 20		rep #$20	                REP #$20        ; set A long
.3838ce	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.3838d1	5b		tcd		                TCD
.3838d2	28		plp		                PLP
.3838d3	68		pla		                PLA             ; end setdp macro
.3838d4	c2 20		rep #$20	                REP #$20        ; set A long
.3838d6	a9 00 e7	lda #$e700	              LDA #<>OPL2_S_BASE
.3838d9	69 bd 00	adc #$00bd	              ADC #$00BD
.3838dc	85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.3838de	a9 af 00	lda #$00af	              LDA #`OPL2_S_BASE
.3838e1	85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.3838e3	e2 20		sep #$20	                SEP #$20        ; set A short
.3838e5	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.3838e7	29 40		and #$40	              AND #$40
.3838e9	6b		rtl		              RTL
.3838ea					OPL2_GET_PERCUSSION
.3838ea	48		pha		                PHA             ; begin setdp macro
.3838eb	08		php		                PHP
.3838ec	c2 20		rep #$20	                REP #$20        ; set A long
.3838ee	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.3838f1	5b		tcd		                TCD
.3838f2	28		plp		                PLP
.3838f3	68		pla		                PLA             ; end setdp macro
.3838f4	c2 20		rep #$20	                REP #$20        ; set A long
.3838f6	a9 00 e7	lda #$e700	              LDA #<>OPL2_S_BASE
.3838f9	69 bd 00	adc #$00bd	              ADC #$00BD
.3838fc	85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.3838fe	a9 af 00	lda #$00af	              LDA #`OPL2_S_BASE
.383901	85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.383903	e2 20		sep #$20	                SEP #$20        ; set A short
.383905	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.383907	29 20		and #$20	              AND #$20
.383909	6b		rtl		              RTL
.38390a					OPL2_GET_DRUMS
.38390a	48		pha		                PHA             ; begin setdp macro
.38390b	08		php		                PHP
.38390c	c2 20		rep #$20	                REP #$20        ; set A long
.38390e	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.383911	5b		tcd		                TCD
.383912	28		plp		                PLP
.383913	68		pla		                PLA             ; end setdp macro
.383914	c2 20		rep #$20	                REP #$20        ; set A long
.383916	a9 00 e7	lda #$e700	              LDA #<>OPL2_S_BASE
.383919	69 bd 00	adc #$00bd	              ADC #$00BD
.38391c	85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.38391e	a9 af 00	lda #$00af	              LDA #`OPL2_S_BASE
.383921	85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.383923	e2 20		sep #$20	                SEP #$20        ; set A short
.383925	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.383927	29 1f		and #$1f	              AND #$1F
.383929	6b		rtl		              RTL
.38392a					OPL2_Get_WaveForm
.38392a	6b		rtl		                RTL
.38392b					OPL2_PLAYNOTE
.38392b	48		pha		                PHA             ; begin setdp macro
.38392c	08		php		                PHP
.38392d	c2 20		rep #$20	                REP #$20        ; set A long
.38392f	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.383932	5b		tcd		                TCD
.383933	28		plp		                PLP
.383934	68		pla		                PLA             ; end setdp macro
.383935	e2 20		sep #$20	                SEP #$20        ; set A short
.383937	da		phx		                PHX
.383938	a9 00		lda #$00	                LDA #$00
.38393a	85 32		sta $32		                STA OPL2_PARAMETER0 ; Set Keyon False
.38393c	20 13 3f	jsr $383f13	                JSR OPL2_SET_KEYON
.38393f	20 d8 3e	jsr $383ed8	                JSR OPL2_SET_BLOCK  ; OPL2_SET_BLOCK Already to OPL2_OCTAVE
.383942	e2 10		sep #$10	                SEP #$10        ; set X short
.383944	a5 30		lda $30		                LDA OPL2_NOTE
.383946	3a		dec a		                DEC A
.383947	0a		asl a		                ASL A
.383948	aa		tax		                TAX
.383949	bf c4 16 38	lda $3816c4,x	                LDA @lnoteFNumbers,X
.38394d	85 32		sta $32		                STA OPL2_PARAMETER0 ; Store the 8it in Param OPL2_PARAMETER0
.38394f	e8		inx		                INX
.383950	bf c4 16 38	lda $3816c4,x	                LDA @lnoteFNumbers,X
.383954	85 33		sta $33		                STA OPL2_PARAMETER1 ; Store the 8bit in Param OPL2_PARAMETER1
.383956	22 56 3e 38	jsl $383e56	                JSL OPL2_SET_FNUMBER
.38395a	a9 01		lda #$01	                LDA #$01
.38395c	85 32		sta $32		                STA OPL2_PARAMETER0 ; Set Keyon False
.38395e	20 13 3f	jsr $383f13	                JSR OPL2_SET_KEYON
.383961	c2 10		rep #$10	                REP #$10        ; set X long
.383963	fa		plx		                PLX
.383964	6b		rtl		                RTL
.383965					OPL2_PLAYDRUM
.383965	6b		rtl		                RTL
.383966					OPL2_SET_INSTRUMENT
.383966	48		pha		                PHA             ; begin setdp macro
.383967	08		php		                PHP
.383968	c2 20		rep #$20	                REP #$20        ; set A long
.38396a	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.38396d	5b		tcd		                TCD
.38396e	28		plp		                PLP
.38396f	68		pla		                PLA             ; end setdp macro
.383970	38		sec		              SEC ; Set the WaveFormSelect to True
.383971	22 54 3b 38	jsl $383b54	              JSL OPL2_SET_WAVEFORMSELECT;
.383975	e2 20		sep #$20	                SEP #$20        ; set A short
.383977	c2 10		rep #$10	                REP #$10        ; set X long
.383979	a0 00 00	ldy #$0000	              LDY #$0000
.38397c	a2 00 00	ldx #$0000	              LDX #$0000
.38397f	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO],Y ; Pointer Location 0 in Instrument Profile
.383981	85 35		sta $35		              STA OPL2_PARAMETER3
.383983	c8		iny		              INY
.383984	c9 06		cmp #$06	              CMP #$06
.383986	d0 03		bne $38398b	              BNE PERCUSSION_NEXT07
.383988	82 70 01	brl $383afb	              BRL Percussion_6
.38398b					PERCUSSION_NEXT07
.38398b	c9 07		cmp #$07	              CMP #$07
.38398d	d0 03		bne $383992	              BNE PERCUSSION_NEXT08
.38398f	82 44 01	brl $383ad6	              BRL Percussion_7
.383992					PERCUSSION_NEXT08
.383992	c9 08		cmp #$08	              CMP #$08
.383994	d0 03		bne $383999	              BNE PERCUSSION_NEXT09
.383996	82 18 01	brl $383ab1	              BRL Percussion_8
.383999					PERCUSSION_NEXT09
.383999	c9 09		cmp #$09	              CMP #$09
.38399b	d0 03		bne $3839a0	              BNE PERCUSSION_NEXT0A
.38399d	82 ec 00	brl $383a8c	              BRL Percussion_9
.3839a0					PERCUSSION_NEXT0A
.3839a0	c9 0a		cmp #$0a	              CMP #$0A
.3839a2	d0 03		bne $3839a7	              BNE Percussion_Default
.3839a4	82 c0 00	brl $383a67	              BRL Percussion_A
.3839a7					Percussion_Default
.3839a7	a9 00		lda #$00	              LDA #$00
.3839a9	85 26		sta $26		              STA OPL2_OPERATOR
.3839ab	c2 20		rep #$20	                REP #$20        ; set A long
.3839ad	a9 20 00	lda #$0020	              LDA #$0020;
.3839b0	85 28		sta $28		              STA OPL2_REG_REGION
.3839b2	20 92 40	jsr $384092	              JSR OPL2_GET_REG_OFFSET
.3839b5	e2 20		sep #$20	                SEP #$20        ; set A short
.3839b7	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 1 in Instrument Profile
.3839b9	87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.3839bb	c8		iny		              INY
.3839bc	c2 20		rep #$20	                REP #$20        ; set A long
.3839be	a9 40 00	lda #$0040	              LDA #$0040;
.3839c1	85 28		sta $28		              STA OPL2_REG_REGION
.3839c3	20 92 40	jsr $384092	              JSR OPL2_GET_REG_OFFSET
.3839c6	e2 20		sep #$20	                SEP #$20        ; set A short
.3839c8	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 2 in Instrument Profile
.3839ca	87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.3839cc	c8		iny		              INY
.3839cd	c2 20		rep #$20	                REP #$20        ; set A long
.3839cf	a9 60 00	lda #$0060	              LDA #$0060;
.3839d2	85 28		sta $28		              STA OPL2_REG_REGION
.3839d4	20 92 40	jsr $384092	              JSR OPL2_GET_REG_OFFSET
.3839d7	e2 20		sep #$20	                SEP #$20        ; set A short
.3839d9	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 3 in Instrument Profile
.3839db	87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.3839dd	c8		iny		              INY
.3839de	c2 20		rep #$20	                REP #$20        ; set A long
.3839e0	a9 80 00	lda #$0080	              LDA #$0080;
.3839e3	85 28		sta $28		              STA OPL2_REG_REGION
.3839e5	20 92 40	jsr $384092	              JSR OPL2_GET_REG_OFFSET
.3839e8	e2 20		sep #$20	                SEP #$20        ; set A short
.3839ea	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 4 in Instrument Profile
.3839ec	87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.3839ee	c8		iny		              INY
.3839ef	c2 20		rep #$20	                REP #$20        ; set A long
.3839f1	a9 e0 00	lda #$00e0	              LDA #$00E0;
.3839f4	85 28		sta $28		              STA OPL2_REG_REGION
.3839f6	20 92 40	jsr $384092	              JSR OPL2_GET_REG_OFFSET
.3839f9	e2 20		sep #$20	                SEP #$20        ; set A short
.3839fb	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 5 in Instrument Profile
.3839fd	87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.3839ff	c8		iny		              INY
.383a00	e2 10		sep #$10	                SEP #$10        ; set X short
.383a02	a5 27		lda $27		              LDA OPL2_CHANNEL
.383a04	29 0f		and #$0f	              AND #$0F
.383a06	aa		tax		              TAX
.383a07	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 6 in Instrument Profile
.383a09	9f c0 e7 af	sta $afe7c0,x	              STA @lOPL2_S_FEEDBACK,X
.383a0d	c8		iny		              INY
.383a0e	a9 01		lda #$01	              LDA #$01
.383a10	85 26		sta $26		              STA OPL2_OPERATOR
.383a12	c2 20		rep #$20	                REP #$20        ; set A long
.383a14	a9 20 00	lda #$0020	              LDA #$0020;
.383a17	85 28		sta $28		              STA OPL2_REG_REGION
.383a19	20 92 40	jsr $384092	              JSR OPL2_GET_REG_OFFSET
.383a1c	e2 20		sep #$20	                SEP #$20        ; set A short
.383a1e	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 7 in Instrument Profile
.383a20	87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.383a22	c8		iny		              INY
.383a23	c2 20		rep #$20	                REP #$20        ; set A long
.383a25	a9 40 00	lda #$0040	              LDA #$0040;
.383a28	85 28		sta $28		              STA OPL2_REG_REGION
.383a2a	20 92 40	jsr $384092	              JSR OPL2_GET_REG_OFFSET
.383a2d	e2 20		sep #$20	                SEP #$20        ; set A short
.383a2f	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 8 in Instrument Profile
.383a31	87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.383a33	c8		iny		              INY
.383a34	c2 20		rep #$20	                REP #$20        ; set A long
.383a36	a9 60 00	lda #$0060	              LDA #$0060;
.383a39	85 28		sta $28		              STA OPL2_REG_REGION
.383a3b	20 92 40	jsr $384092	              JSR OPL2_GET_REG_OFFSET
.383a3e	e2 20		sep #$20	                SEP #$20        ; set A short
.383a40	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 9 in Instrument Profile
.383a42	87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.383a44	c8		iny		              INY
.383a45	c2 20		rep #$20	                REP #$20        ; set A long
.383a47	a9 80 00	lda #$0080	              LDA #$0080;
.383a4a	85 28		sta $28		              STA OPL2_REG_REGION
.383a4c	20 92 40	jsr $384092	              JSR OPL2_GET_REG_OFFSET
.383a4f	e2 20		sep #$20	                SEP #$20        ; set A short
.383a51	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location A in Instrument Profile
.383a53	87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.383a55	c8		iny		              INY
.383a56	c2 20		rep #$20	                REP #$20        ; set A long
.383a58	a9 e0 00	lda #$00e0	              LDA #$00E0;
.383a5b	85 28		sta $28		              STA OPL2_REG_REGION
.383a5d	20 92 40	jsr $384092	              JSR OPL2_GET_REG_OFFSET
.383a60	e2 20		sep #$20	                SEP #$20        ; set A short
.383a62	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location B in Instrument Profile
.383a64	87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.383a66	6b		rtl		                RTL
.383a67					Percussion_A
.383a67	e2 20		sep #$20	                SEP #$20        ; set A short
.383a69	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 1 in Instrument Profile
.383a6b	8f 31 e7 af	sta $afe731	              STA @lOPL2_S_AM_VID_EG_KSR_MULT + $11
.383a6f	c8		iny		              INY
.383a70	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 2 in Instrument Profile
.383a72	8f 51 e7 af	sta $afe751	              STA @lOPL2_S_KSL_TL + $11
.383a76	c8		iny		              INY
.383a77	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 3 in Instrument Profile
.383a79	8f 71 e7 af	sta $afe771	              STA @lOPL2_S_AR_DR + $11
.383a7d	c8		iny		              INY
.383a7e	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 4 in Instrument Profile
.383a80	8f 91 e7 af	sta $afe791	              STA @lOPL2_S_SL_RR + $11
.383a84	c8		iny		              INY
.383a85	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 5 in Instrument Profile
.383a87	8f f1 e7 af	sta $afe7f1	              STA @lOPL2_S_WAVE_SELECT + $11
.383a8b	6b		rtl		                RTL
.383a8c					Percussion_9
.383a8c	e2 20		sep #$20	                SEP #$20        ; set A short
.383a8e	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 1 in Instrument Profile
.383a90	8f 35 e7 af	sta $afe735	              STA @lOPL2_S_AM_VID_EG_KSR_MULT + $15
.383a94	c8		iny		              INY
.383a95	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 2 in Instrument Profile
.383a97	8f 55 e7 af	sta $afe755	              STA @lOPL2_S_KSL_TL + $15
.383a9b	c8		iny		              INY
.383a9c	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 3 in Instrument Profile
.383a9e	8f 75 e7 af	sta $afe775	              STA @lOPL2_S_AR_DR + $15
.383aa2	c8		iny		              INY
.383aa3	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 4 in Instrument Profile
.383aa5	8f 95 e7 af	sta $afe795	              STA @lOPL2_S_SL_RR + $15
.383aa9	c8		iny		              INY
.383aaa	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 5 in Instrument Profile
.383aac	8f f5 e7 af	sta $afe7f5	              STA @lOPL2_S_WAVE_SELECT + $15
.383ab0	6b		rtl		              RTL
.383ab1					Percussion_8
.383ab1	e2 20		sep #$20	                SEP #$20        ; set A short
.383ab3	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 1 in Instrument Profile
.383ab5	8f 32 e7 af	sta $afe732	              STA @lOPL2_S_AM_VID_EG_KSR_MULT + $12
.383ab9	c8		iny		              INY
.383aba	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 2 in Instrument Profile
.383abc	8f 52 e7 af	sta $afe752	              STA @lOPL2_S_KSL_TL + $12
.383ac0	c8		iny		              INY
.383ac1	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 3 in Instrument Profile
.383ac3	8f 72 e7 af	sta $afe772	              STA @lOPL2_S_AR_DR + $12
.383ac7	c8		iny		              INY
.383ac8	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 4 in Instrument Profile
.383aca	8f 92 e7 af	sta $afe792	              STA @lOPL2_S_SL_RR + $12
.383ace	c8		iny		              INY
.383acf	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 5 in Instrument Profile
.383ad1	8f f2 e7 af	sta $afe7f2	              STA @lOPL2_S_WAVE_SELECT + $12
.383ad5	6b		rtl		              RTL
.383ad6					Percussion_7
.383ad6	e2 20		sep #$20	                SEP #$20        ; set A short
.383ad8	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 1 in Instrument Profile
.383ada	8f 34 e7 af	sta $afe734	              STA @lOPL2_S_AM_VID_EG_KSR_MULT + $14
.383ade	c8		iny		              INY
.383adf	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 2 in Instrument Profile
.383ae1	8f 54 e7 af	sta $afe754	              STA @lOPL2_S_KSL_TL + $14
.383ae5	c8		iny		              INY
.383ae6	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 3 in Instrument Profile
.383ae8	8f 74 e7 af	sta $afe774	              STA @lOPL2_S_AR_DR + $14
.383aec	c8		iny		              INY
.383aed	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 4 in Instrument Profile
.383aef	8f 94 e7 af	sta $afe794	              STA @lOPL2_S_SL_RR + $14
.383af3	c8		iny		              INY
.383af4	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 5 in Instrument Profile
.383af6	8f f4 e7 af	sta $afe7f4	              STA @lOPL2_S_WAVE_SELECT + $14
.383afa	6b		rtl		              RTL
.383afb					Percussion_6
.383afb	e2 20		sep #$20	                SEP #$20        ; set A short
.383afd	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 1 in Instrument Profile
.383aff	8f 30 e7 af	sta $afe730	              STA @lOPL2_S_AM_VID_EG_KSR_MULT + $10
.383b03	8f 33 e7 af	sta $afe733	              STA @lOPL2_S_AM_VID_EG_KSR_MULT + $13
.383b07	c8		iny		              INY
.383b08	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 2 in Instrument Profile
.383b0a	8f 50 e7 af	sta $afe750	              STA @lOPL2_S_KSL_TL + $10
.383b0e	8f 53 e7 af	sta $afe753	              STA @lOPL2_S_KSL_TL + $13
.383b12	c8		iny		              INY
.383b13	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 3 in Instrument Profile
.383b15	8f 70 e7 af	sta $afe770	              STA @lOPL2_S_AR_DR + $10
.383b19	8f 73 e7 af	sta $afe773	              STA @lOPL2_S_AR_DR + $13
.383b1d	c8		iny		              INY
.383b1e	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 4 in Instrument Profile
.383b20	8f 90 e7 af	sta $afe790	              STA @lOPL2_S_SL_RR + $10
.383b24	8f 93 e7 af	sta $afe793	              STA @lOPL2_S_SL_RR + $13
.383b28	c8		iny		              INY
.383b29	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 5 in Instrument Profile
.383b2b	8f f0 e7 af	sta $afe7f0	              STA @lOPL2_S_WAVE_SELECT + $10
.383b2f	8f f3 e7 af	sta $afe7f3	              STA @lOPL2_S_WAVE_SELECT + $13
.383b33	6b		rtl		              RTL
.383b34					OPL2_SET_REGISTER
.383b34	48		pha		                PHA             ; begin setdp macro
.383b35	08		php		                PHP
.383b36	c2 20		rep #$20	                REP #$20        ; set A long
.383b38	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.383b3b	5b		tcd		                TCD
.383b3c	28		plp		                PLP
.383b3d	68		pla		                PLA             ; end setdp macro
.383b3e	c2 20		rep #$20	                REP #$20        ; set A long
.383b40	18		clc		              CLC
.383b41	a9 00 e7	lda #$e700	              LDA #<>OPL2_S_BASE
.383b44	65 32		adc $32		              ADC OPL2_PARAMETER0
.383b46	85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.383b48	a9 af 00	lda #$00af	              LDA #`OPL2_S_BASE
.383b4b	85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.383b4d	e2 20		sep #$20	                SEP #$20        ; set A short
.383b4f	a5 33		lda $33		              LDA OPL2_PARAMETER1
.383b51	87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.383b53	6b		rtl		              RTL
.383b54					OPL2_SET_WAVEFORMSELECT
.383b54	48		pha		                PHA             ; begin setdp macro
.383b55	08		php		                PHP
.383b56	c2 20		rep #$20	                REP #$20        ; set A long
.383b58	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.383b5b	5b		tcd		                TCD
.383b5c	28		plp		                PLP
.383b5d	68		pla		                PLA             ; end setdp macro
.383b5e	c2 20		rep #$20	                REP #$20        ; set A long
.383b60	a9 01 e7	lda #$e701	              LDA #<>OPL2_S_BASE + $0001
.383b63	85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.383b65	a9 af 00	lda #$00af	              LDA #`OPL2_S_BASE
.383b68	85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.383b6a	e2 20		sep #$20	                SEP #$20        ; set A short
.383b6c	b0 07		bcs $383b75	              BCS OPL2_Set_WaveFormSelect_set
.383b6e	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.383b70	29 df		and #$df	              AND #$DF
.383b72	87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.383b74	6b		rtl		              RTL
.383b75					OPL2_Set_WaveFormSelect_set
.383b75	48		pha		                PHA             ; begin setdp macro
.383b76	08		php		                PHP
.383b77	c2 20		rep #$20	                REP #$20        ; set A long
.383b79	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.383b7c	5b		tcd		                TCD
.383b7d	28		plp		                PLP
.383b7e	68		pla		                PLA             ; end setdp macro
.383b7f	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.383b81	09 20 00	ora #$0020	              ORA #$20
.383b84	87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.383b86	6b		rtl		                RTL
.383b87					OPL2_SET_TREMOLO
.383b87	48		pha		                PHA             ; begin setdp macro
.383b88	08		php		                PHP
.383b89	c2 20		rep #$20	                REP #$20        ; set A long
.383b8b	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.383b8e	5b		tcd		                TCD
.383b8f	28		plp		                PLP
.383b90	68		pla		                PLA             ; end setdp macro
.383b91	08		php		                PHP ; Push the Carry
.383b92	c2 20		rep #$20	                REP #$20        ; set A long
.383b94	18		clc		                CLC
.383b95	a9 20 00	lda #$0020	                LDA #$0020 ;
.383b98	85 28		sta $28		                STA OPL2_REG_REGION
.383b9a	20 92 40	jsr $384092	                JSR OPL2_GET_REG_OFFSET
.383b9d	28		plp		                PLP ; Pull the Carry out
.383b9e	e2 20		sep #$20	                SEP #$20        ; set A short
.383ba0	b0 08		bcs $383baa	                BCS OPL2_Set_Tremolo_Set;
.383ba2	a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.383ba4	29 7f		and #$7f	                AND #$7F
.383ba6	87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.383ba8	80 06		bra $383bb0	                BRA OPL2_Set_Tremolo_Exit
.383baa					OPL2_Set_Tremolo_Set
.383baa	a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.383bac	09 80		ora #$80	                ORA #$80
.383bae	87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.383bb0					OPL2_Set_Tremolo_Exit
.383bb0	6b		rtl		                RTL
.383bb1					OPL2_GET_TREMOLO
.383bb1	48		pha		                PHA             ; begin setdp macro
.383bb2	08		php		                PHP
.383bb3	c2 20		rep #$20	                REP #$20        ; set A long
.383bb5	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.383bb8	5b		tcd		                TCD
.383bb9	28		plp		                PLP
.383bba	68		pla		                PLA             ; end setdp macro
.383bbb	c2 20		rep #$20	                REP #$20        ; set A long
.383bbd	a9 20 00	lda #$0020	                LDA #$0020;
.383bc0	85 28		sta $28		                STA OPL2_REG_REGION
.383bc2	20 92 40	jsr $384092	                JSR OPL2_GET_REG_OFFSET
.383bc5	e2 20		sep #$20	                SEP #$20        ; set A short
.383bc7	a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.383bc9	29 80		and #$80	                AND #$80
.383bcb	6b		rtl		                RTL
.383bcc					OPL2_SET_VIBRATO
.383bcc	48		pha		                PHA             ; begin setdp macro
.383bcd	08		php		                PHP
.383bce	c2 20		rep #$20	                REP #$20        ; set A long
.383bd0	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.383bd3	5b		tcd		                TCD
.383bd4	28		plp		                PLP
.383bd5	68		pla		                PLA             ; end setdp macro
.383bd6	08		php		                PHP ; Push the Carry
.383bd7	c2 20		rep #$20	                REP #$20        ; set A long
.383bd9	18		clc		                CLC
.383bda	a9 20 00	lda #$0020	                LDA #$0020;
.383bdd	85 28		sta $28		                STA OPL2_REG_REGION
.383bdf	20 92 40	jsr $384092	                JSR OPL2_GET_REG_OFFSET
.383be2	28		plp		                PLP ; Pull the Carry out
.383be3	e2 20		sep #$20	                SEP #$20        ; set A short
.383be5	b0 08		bcs $383bef	                BCS OPL2_Set_Vibrato_Set;
.383be7	a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.383be9	29 bf		and #$bf	                AND #$BF
.383beb	87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.383bed	80 06		bra $383bf5	                BRA OPL2_Set_Vibrato_Exit
.383bef					OPL2_Set_Vibrato_Set
.383bef	a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.383bf1	09 40		ora #$40	                ORA #$40
.383bf3	87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.383bf5					OPL2_Set_Vibrato_Exit
.383bf5	6b		rtl		                RTL
.383bf6					OPL2_GET_VIBRATO
.383bf6	48		pha		                PHA             ; begin setdp macro
.383bf7	08		php		                PHP
.383bf8	c2 20		rep #$20	                REP #$20        ; set A long
.383bfa	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.383bfd	5b		tcd		                TCD
.383bfe	28		plp		                PLP
.383bff	68		pla		                PLA             ; end setdp macro
.383c00	c2 20		rep #$20	                REP #$20        ; set A long
.383c02	a9 20 00	lda #$0020	                LDA #$0020;
.383c05	85 28		sta $28		                STA OPL2_REG_REGION
.383c07	20 92 40	jsr $384092	                JSR OPL2_GET_REG_OFFSET
.383c0a	e2 20		sep #$20	                SEP #$20        ; set A short
.383c0c	a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.383c0e	29 40		and #$40	                AND #$40
.383c10	6b		rtl		                RTL
.383c11					OPL2_SET_MAINTAINSUSTAIN
.383c11	48		pha		                PHA             ; begin setdp macro
.383c12	08		php		                PHP
.383c13	c2 20		rep #$20	                REP #$20        ; set A long
.383c15	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.383c18	5b		tcd		                TCD
.383c19	28		plp		                PLP
.383c1a	68		pla		                PLA             ; end setdp macro
.383c1b	08		php		              PHP ; Push the Carry
.383c1c	c2 20		rep #$20	                REP #$20        ; set A long
.383c1e	18		clc		              CLC
.383c1f	a9 20 00	lda #$0020	              LDA #$0020;
.383c22	85 28		sta $28		              STA OPL2_REG_REGION
.383c24	20 92 40	jsr $384092	              JSR OPL2_GET_REG_OFFSET
.383c27	28		plp		              PLP ; Pull the Carry out
.383c28	e2 20		sep #$20	                SEP #$20        ; set A short
.383c2a	b0 08		bcs $383c34	              BCS OPL2_Set_MaintainSustain_Set;
.383c2c	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.383c2e	29 df		and #$df	              AND #$DF
.383c30	87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.383c32	80 06		bra $383c3a	              BRA OPL2_Set_MaintainSustain_Exit
.383c34					OPL2_Set_MaintainSustain_Set
.383c34	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.383c36	09 20		ora #$20	              ORA #$20
.383c38	87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.383c3a					OPL2_Set_MaintainSustain_Exit
.383c3a	6b		rtl		                RTL
.383c3b					OPL2_GET_MAINTAINSUSTAIN
.383c3b	48		pha		                PHA             ; begin setdp macro
.383c3c	08		php		                PHP
.383c3d	c2 20		rep #$20	                REP #$20        ; set A long
.383c3f	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.383c42	5b		tcd		                TCD
.383c43	28		plp		                PLP
.383c44	68		pla		                PLA             ; end setdp macro
.383c45	c2 20		rep #$20	                REP #$20        ; set A long
.383c47	a9 20 00	lda #$0020	              LDA #$0020;
.383c4a	85 28		sta $28		              STA OPL2_REG_REGION
.383c4c	20 92 40	jsr $384092	              JSR OPL2_GET_REG_OFFSET
.383c4f	e2 20		sep #$20	                SEP #$20        ; set A short
.383c51	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.383c53	29 20		and #$20	              AND #$20
.383c55	6b		rtl		                RTL
.383c56					OPL2_SET_ENVELOPESCALING
.383c56	48		pha		                PHA             ; begin setdp macro
.383c57	08		php		                PHP
.383c58	c2 20		rep #$20	                REP #$20        ; set A long
.383c5a	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.383c5d	5b		tcd		                TCD
.383c5e	28		plp		                PLP
.383c5f	68		pla		                PLA             ; end setdp macro
.383c60	08		php		              PHP ; Push the Carry
.383c61	c2 20		rep #$20	                REP #$20        ; set A long
.383c63	18		clc		              CLC
.383c64	a9 20 00	lda #$0020	              LDA #$0020;
.383c67	85 28		sta $28		              STA OPL2_REG_REGION
.383c69	20 92 40	jsr $384092	              JSR OPL2_GET_REG_OFFSET
.383c6c	28		plp		              PLP ; Pull the Carry out
.383c6d	e2 20		sep #$20	                SEP #$20        ; set A short
.383c6f	b0 08		bcs $383c79	              BCS OPL2_Set_EnvelopeScaling_Set;
.383c71	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.383c73	29 ef		and #$ef	              AND #$EF
.383c75	87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.383c77	80 06		bra $383c7f	              BRA OPL2_Set_EnvelopeScaling_Exit
.383c79					OPL2_Set_EnvelopeScaling_Set
.383c79	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.383c7b	09 10		ora #$10	              ORA #$10
.383c7d	87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.383c7f					OPL2_Set_EnvelopeScaling_Exit
.383c7f	6b		rtl		                RTL
.383c80					OPL2_GET_ENVELOPESCALING
.383c80	48		pha		                PHA             ; begin setdp macro
.383c81	08		php		                PHP
.383c82	c2 20		rep #$20	                REP #$20        ; set A long
.383c84	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.383c87	5b		tcd		                TCD
.383c88	28		plp		                PLP
.383c89	68		pla		                PLA             ; end setdp macro
.383c8a	c2 20		rep #$20	                REP #$20        ; set A long
.383c8c	a9 20 00	lda #$0020	              LDA #$0020;
.383c8f	85 28		sta $28		              STA OPL2_REG_REGION
.383c91	20 92 40	jsr $384092	              JSR OPL2_GET_REG_OFFSET
.383c94	e2 20		sep #$20	                SEP #$20        ; set A short
.383c96	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.383c98	29 10		and #$10	              AND #$10
.383c9a	6b		rtl		                RTL
.383c9b					OPL2_GET_MODFREQMULTIPLE
.383c9b	48		pha		                PHA             ; begin setdp macro
.383c9c	08		php		                PHP
.383c9d	c2 20		rep #$20	                REP #$20        ; set A long
.383c9f	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.383ca2	5b		tcd		                TCD
.383ca3	28		plp		                PLP
.383ca4	68		pla		                PLA             ; end setdp macro
.383ca5	c2 20		rep #$20	                REP #$20        ; set A long
.383ca7	a9 20 00	lda #$0020	              LDA #$0020;
.383caa	85 28		sta $28		              STA OPL2_REG_REGION
.383cac	20 92 40	jsr $384092	              JSR OPL2_GET_REG_OFFSET
.383caf	e2 20		sep #$20	                SEP #$20        ; set A short
.383cb1	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.383cb3	29 0f		and #$0f	              AND #$0F
.383cb5	6b		rtl		              RTL
.383cb6					OPL2_SET_MODFREQMULTIPLE
.383cb6	48		pha		                PHA             ; begin setdp macro
.383cb7	08		php		                PHP
.383cb8	c2 20		rep #$20	                REP #$20        ; set A long
.383cba	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.383cbd	5b		tcd		                TCD
.383cbe	28		plp		                PLP
.383cbf	68		pla		                PLA             ; end setdp macro
.383cc0	c2 20		rep #$20	                REP #$20        ; set A long
.383cc2	a9 20 00	lda #$0020	                LDA #$0020;
.383cc5	85 28		sta $28		                STA OPL2_REG_REGION
.383cc7	20 92 40	jsr $384092	                JSR OPL2_GET_REG_OFFSET
.383cca	e2 20		sep #$20	                SEP #$20        ; set A short
.383ccc	a5 32		lda $32		                LDA OPL2_PARAMETER0
.383cce	29 0f		and #$0f	                AND #$0F
.383cd0	85 32		sta $32		                STA OPL2_PARAMETER0
.383cd2	a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.383cd4	29 f0		and #$f0	                AND #$F0
.383cd6	05 32		ora $32		                ORA OPL2_PARAMETER0
.383cd8	87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.383cda	6b		rtl		                RTL
.383cdb					OPL2_SET_SCALINGLEVEL
.383cdb	48		pha		                PHA             ; begin setdp macro
.383cdc	08		php		                PHP
.383cdd	c2 20		rep #$20	                REP #$20        ; set A long
.383cdf	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.383ce2	5b		tcd		                TCD
.383ce3	28		plp		                PLP
.383ce4	68		pla		                PLA             ; end setdp macro
.383ce5	c2 20		rep #$20	                REP #$20        ; set A long
.383ce7	a9 40 00	lda #$0040	                LDA #$0040;
.383cea	85 28		sta $28		                STA OPL2_REG_REGION
.383cec	20 92 40	jsr $384092	                JSR OPL2_GET_REG_OFFSET
.383cef	e2 20		sep #$20	                SEP #$20        ; set A short
.383cf1	a5 32		lda $32		                LDA OPL2_PARAMETER0 ; Attack
.383cf3	29 03		and #$03	                AND #$03
.383cf5	0a		asl a		                ASL
.383cf6	0a		asl a		                ASL
.383cf7	0a		asl a		                ASL
.383cf8	0a		asl a		                ASL
.383cf9	0a		asl a		                ASL
.383cfa	0a		asl a		                ASL
.383cfb	85 32		sta $32		                STA OPL2_PARAMETER0
.383cfd	a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.383cff	29 3f		and #$3f	                AND #$3F
.383d01	05 32		ora $32		                ORA OPL2_PARAMETER0
.383d03	87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.383d05	6b		rtl		                RTL
.383d06					OPL2_SET_VOLUME
.383d06	48		pha		                PHA             ; begin setdp macro
.383d07	08		php		                PHP
.383d08	c2 20		rep #$20	                REP #$20        ; set A long
.383d0a	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.383d0d	5b		tcd		                TCD
.383d0e	28		plp		                PLP
.383d0f	68		pla		                PLA             ; end setdp macro
.383d10	c2 20		rep #$20	                REP #$20        ; set A long
.383d12	a9 40 00	lda #$0040	                LDA #$0040  ;
.383d15	85 28		sta $28		                STA OPL2_REG_REGION
.383d17	20 92 40	jsr $384092	                JSR OPL2_GET_REG_OFFSET
.383d1a	e2 20		sep #$20	                SEP #$20        ; set A short
.383d1c	a5 32		lda $32		                LDA OPL2_PARAMETER0 ; Volume
.383d1e	29 3f		and #$3f	                AND #$3F
.383d20	85 32		sta $32		                STA OPL2_PARAMETER0
.383d22	a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.383d24	29 c0		and #$c0	                AND #$C0
.383d26	05 32		ora $32		                ORA OPL2_PARAMETER0
.383d28	87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.383d2a	6b		rtl		                RTL
.383d2b					OPL2_GET_VOLUME
.383d2b	48		pha		                PHA             ; begin setdp macro
.383d2c	08		php		                PHP
.383d2d	c2 20		rep #$20	                REP #$20        ; set A long
.383d2f	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.383d32	5b		tcd		                TCD
.383d33	28		plp		                PLP
.383d34	68		pla		                PLA             ; end setdp macro
.383d35	c2 20		rep #$20	                REP #$20        ; set A long
.383d37	a9 40 00	lda #$0040	                LDA #$0040  ;
.383d3a	85 28		sta $28		                STA OPL2_REG_REGION
.383d3c	20 92 40	jsr $384092	                JSR OPL2_GET_REG_OFFSET
.383d3f	e2 20		sep #$20	                SEP #$20        ; set A short
.383d41	a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.383d43	29 3f		and #$3f	                AND #$3F
.383d45	6b		rtl		                RTL
.383d46					OPL2_SET_ATTACK
.383d46	48		pha		                PHA             ; begin setdp macro
.383d47	08		php		                PHP
.383d48	c2 20		rep #$20	                REP #$20        ; set A long
.383d4a	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.383d4d	5b		tcd		                TCD
.383d4e	28		plp		                PLP
.383d4f	68		pla		                PLA             ; end setdp macro
.383d50	c2 20		rep #$20	                REP #$20        ; set A long
.383d52	a9 60 00	lda #$0060	                LDA #$0060  ;
.383d55	85 28		sta $28		                STA OPL2_REG_REGION
.383d57	20 92 40	jsr $384092	                JSR OPL2_GET_REG_OFFSET
.383d5a	e2 20		sep #$20	                SEP #$20        ; set A short
.383d5c	a5 32		lda $32		                LDA OPL2_PARAMETER0 ; Attack
.383d5e	29 0f		and #$0f	                AND #$0F
.383d60	0a		asl a		                ASL
.383d61	0a		asl a		                ASL
.383d62	0a		asl a		                ASL
.383d63	0a		asl a		                ASL
.383d64	85 32		sta $32		                STA OPL2_PARAMETER0
.383d66	a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.383d68	29 0f		and #$0f	                AND #$0F
.383d6a	05 32		ora $32		                ORA OPL2_PARAMETER0
.383d6c	87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.383d6e	6b		rtl		                RTL
.383d6f					OPL2_GET_ATTACK
.383d6f	48		pha		                PHA             ; begin setdp macro
.383d70	08		php		                PHP
.383d71	c2 20		rep #$20	                REP #$20        ; set A long
.383d73	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.383d76	5b		tcd		                TCD
.383d77	28		plp		                PLP
.383d78	68		pla		                PLA             ; end setdp macro
.383d79	c2 20		rep #$20	                REP #$20        ; set A long
.383d7b	a9 60 00	lda #$0060	                LDA #$0060
.383d7e	85 28		sta $28		                STA OPL2_REG_REGION
.383d80	20 92 40	jsr $384092	                JSR OPL2_GET_REG_OFFSET
.383d83	e2 20		sep #$20	                SEP #$20        ; set A short
.383d85	a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.383d87	29 f0		and #$f0	                AND #$F0
.383d89	4a		lsr a		                LSR
.383d8a	4a		lsr a		                LSR
.383d8b	4a		lsr a		                LSR
.383d8c	4a		lsr a		                LSR
.383d8d	6b		rtl		                RTL
.383d8e					OPL2_SET_DECAY
.383d8e	48		pha		                PHA             ; begin setdp macro
.383d8f	08		php		                PHP
.383d90	c2 20		rep #$20	                REP #$20        ; set A long
.383d92	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.383d95	5b		tcd		                TCD
.383d96	28		plp		                PLP
.383d97	68		pla		                PLA             ; end setdp macro
.383d98	c2 20		rep #$20	                REP #$20        ; set A long
.383d9a	a9 60 00	lda #$0060	                LDA #$0060;
.383d9d	85 28		sta $28		                STA OPL2_REG_REGION
.383d9f	20 92 40	jsr $384092	                JSR OPL2_GET_REG_OFFSET
.383da2	e2 20		sep #$20	                SEP #$20        ; set A short
.383da4	a5 32		lda $32		                LDA OPL2_PARAMETER0 ; Attack
.383da6	29 0f		and #$0f	                AND #$0F
.383da8	85 32		sta $32		                STA OPL2_PARAMETER0
.383daa	a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.383dac	29 f0		and #$f0	                AND #$F0
.383dae	05 32		ora $32		                ORA OPL2_PARAMETER0
.383db0	87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.383db2	6b		rtl		                RTL
.383db3					OPL2_GET_DECAY
.383db3	48		pha		                PHA             ; begin setdp macro
.383db4	08		php		                PHP
.383db5	c2 20		rep #$20	                REP #$20        ; set A long
.383db7	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.383dba	5b		tcd		                TCD
.383dbb	28		plp		                PLP
.383dbc	68		pla		                PLA             ; end setdp macro
.383dbd	c2 20		rep #$20	                REP #$20        ; set A long
.383dbf	a9 60 00	lda #$0060	                LDA #$0060
.383dc2	85 28		sta $28		                STA OPL2_REG_REGION
.383dc4	20 92 40	jsr $384092	                JSR OPL2_GET_REG_OFFSET
.383dc7	e2 20		sep #$20	                SEP #$20        ; set A short
.383dc9	a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.383dcb	29 0f		and #$0f	                AND #$0F
.383dcd	6b		rtl		                RTL
.383dce					OPL2_SET_SUSTAIN
.383dce	48		pha		                PHA             ; begin setdp macro
.383dcf	08		php		                PHP
.383dd0	c2 20		rep #$20	                REP #$20        ; set A long
.383dd2	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.383dd5	5b		tcd		                TCD
.383dd6	28		plp		                PLP
.383dd7	68		pla		                PLA             ; end setdp macro
.383dd8	c2 20		rep #$20	                REP #$20        ; set A long
.383dda	a9 80 00	lda #$0080	                LDA #$0080;
.383ddd	85 28		sta $28		                STA OPL2_REG_REGION
.383ddf	20 92 40	jsr $384092	                JSR OPL2_GET_REG_OFFSET
.383de2	e2 20		sep #$20	                SEP #$20        ; set A short
.383de4	a5 32		lda $32		                LDA OPL2_PARAMETER0 ; Attack
.383de6	29 0f		and #$0f	                AND #$0F
.383de8	0a		asl a		                ASL
.383de9	0a		asl a		                ASL
.383dea	0a		asl a		                ASL
.383deb	0a		asl a		                ASL
.383dec	85 32		sta $32		                STA OPL2_PARAMETER0
.383dee	a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.383df0	29 0f		and #$0f	                AND #$0F
.383df2	05 32		ora $32		                ORA OPL2_PARAMETER0
.383df4	87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.383df6	6b		rtl		                RTL
.383df7					OPL2_GET_SUSTAIN
.383df7	48		pha		                PHA             ; begin setdp macro
.383df8	08		php		                PHP
.383df9	c2 20		rep #$20	                REP #$20        ; set A long
.383dfb	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.383dfe	5b		tcd		                TCD
.383dff	28		plp		                PLP
.383e00	68		pla		                PLA             ; end setdp macro
.383e01	c2 20		rep #$20	                REP #$20        ; set A long
.383e03	a9 80 00	lda #$0080	                LDA #$0080
.383e06	85 28		sta $28		                STA OPL2_REG_REGION
.383e08	20 92 40	jsr $384092	                JSR OPL2_GET_REG_OFFSET
.383e0b	e2 20		sep #$20	                SEP #$20        ; set A short
.383e0d	a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.383e0f	29 f0		and #$f0	                AND #$F0
.383e11	4a		lsr a		                LSR
.383e12	4a		lsr a		                LSR
.383e13	4a		lsr a		                LSR
.383e14	4a		lsr a		                LSR
.383e15	6b		rtl		                RTL
.383e16					OPL2_SET_RELEASE
.383e16	48		pha		                PHA             ; begin setdp macro
.383e17	08		php		                PHP
.383e18	c2 20		rep #$20	                REP #$20        ; set A long
.383e1a	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.383e1d	5b		tcd		                TCD
.383e1e	28		plp		                PLP
.383e1f	68		pla		                PLA             ; end setdp macro
.383e20	c2 20		rep #$20	                REP #$20        ; set A long
.383e22	a9 80 00	lda #$0080	                LDA #$0080;
.383e25	85 28		sta $28		                STA OPL2_REG_REGION
.383e27	20 92 40	jsr $384092	                JSR OPL2_GET_REG_OFFSET
.383e2a	e2 20		sep #$20	                SEP #$20        ; set A short
.383e2c	a5 32		lda $32		                LDA OPL2_PARAMETER0 ; Attack
.383e2e	29 0f		and #$0f	                AND #$0F
.383e30	85 32		sta $32		                STA OPL2_PARAMETER0
.383e32	a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.383e34	29 f0		and #$f0	                AND #$F0
.383e36	05 32		ora $32		                ORA OPL2_PARAMETER0
.383e38	87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.383e3a	6b		rtl		                RTL
.383e3b					OPL2_GET_RELEASE
.383e3b	48		pha		                PHA             ; begin setdp macro
.383e3c	08		php		                PHP
.383e3d	c2 20		rep #$20	                REP #$20        ; set A long
.383e3f	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.383e42	5b		tcd		                TCD
.383e43	28		plp		                PLP
.383e44	68		pla		                PLA             ; end setdp macro
.383e45	c2 20		rep #$20	                REP #$20        ; set A long
.383e47	a9 80 00	lda #$0080	                LDA #$0080
.383e4a	85 28		sta $28		                STA OPL2_REG_REGION
.383e4c	20 92 40	jsr $384092	                JSR OPL2_GET_REG_OFFSET
.383e4f	e2 20		sep #$20	                SEP #$20        ; set A short
.383e51	a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.383e53	29 0f		and #$0f	                AND #$0F
.383e55	6b		rtl		                RTL
.383e56					OPL2_SET_FNUMBER
.383e56	48		pha		                PHA             ; begin setdp macro
.383e57	08		php		                PHP
.383e58	c2 20		rep #$20	                REP #$20        ; set A long
.383e5a	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.383e5d	5b		tcd		                TCD
.383e5e	28		plp		                PLP
.383e5f	68		pla		                PLA             ; end setdp macro
.383e60	e2 20		sep #$20	                SEP #$20        ; set A short
.383e62	18		clc		                CLC
.383e63	a5 27		lda $27		                LDA OPL2_CHANNEL
.383e65	29 0f		and #$0f	                AND #$0F  ; This is just precaution, it should be between 0 to 8
.383e67	69 a0		adc #$a0	                ADC #$A0
.383e69	85 2a		sta $2a		                STA OPL2_REG_OFFSET
.383e6b	a9 00		lda #$00	                LDA #$00
.383e6d	85 2b		sta $2b		                STA OPL2_REG_OFFSET+1;
.383e6f	c2 30		rep #$30	                REP #$30        ; set A&X long
.383e71	18		clc		                CLC
.383e72	a9 00 e7	lda #$e700	                LDA #<>OPL2_S_BASE
.383e75	65 2a		adc $2a		                ADC OPL2_REG_OFFSET
.383e77	85 2c		sta $2c		                STA OPL2_IND_ADDY_LL
.383e79	a9 af 00	lda #$00af	                LDA #`OPL2_S_BASE
.383e7c	85 2e		sta $2e		                STA OPL2_IND_ADDY_HL
.383e7e	e2 20		sep #$20	                SEP #$20        ; set A short
.383e80	a5 32		lda $32		                LDA OPL2_PARAMETER0     ; Load the first 8 Bits Value of FNumber
.383e82	87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]  ; Load
.383e84	18		clc		                CLC
.383e85	a5 2c		lda $2c		                LDA OPL2_IND_ADDY_LL
.383e87	69 10		adc #$10	                ADC #$10
.383e89	85 2c		sta $2c		                STA OPL2_IND_ADDY_LL
.383e8b	a5 33		lda $33		                LDA OPL2_PARAMETER1
.383e8d	29 03		and #$03	                AND #$03
.383e8f	85 33		sta $33		                STA OPL2_PARAMETER1
.383e91	a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.383e93	29 fc		and #$fc	                AND #$FC
.383e95	05 33		ora $33		                ORA OPL2_PARAMETER1
.383e97	87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.383e99	6b		rtl		                RTL
.383e9a					OPL2_GET_FNUMBER
.383e9a	48		pha		                PHA             ; begin setdp macro
.383e9b	08		php		                PHP
.383e9c	c2 20		rep #$20	                REP #$20        ; set A long
.383e9e	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.383ea1	5b		tcd		                TCD
.383ea2	28		plp		                PLP
.383ea3	68		pla		                PLA             ; end setdp macro
.383ea4	e2 20		sep #$20	                SEP #$20        ; set A short
.383ea6	18		clc		                CLC
.383ea7	a5 27		lda $27		                LDA OPL2_CHANNEL
.383ea9	29 0f		and #$0f	                AND #$0F  ; This is just precaution, it should be between 0 to 8
.383eab	69 a0		adc #$a0	                ADC #$A0
.383ead	85 2a		sta $2a		                STA OPL2_REG_OFFSET
.383eaf	a9 00		lda #$00	                LDA #$00
.383eb1	85 2b		sta $2b		                STA OPL2_REG_OFFSET+1;
.383eb3	c2 30		rep #$30	                REP #$30        ; set A&X long
.383eb5	18		clc		                CLC
.383eb6	a9 00 e7	lda #$e700	                LDA #<>OPL2_S_BASE
.383eb9	65 2a		adc $2a		                ADC OPL2_REG_OFFSET
.383ebb	85 2c		sta $2c		                STA OPL2_IND_ADDY_LL
.383ebd	a9 af 00	lda #$00af	                LDA #`OPL2_S_BASE
.383ec0	85 2e		sta $2e		                STA OPL2_IND_ADDY_HL
.383ec2	e2 20		sep #$20	                SEP #$20        ; set A short
.383ec4	a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.383ec6	85 32		sta $32		                STA OPL2_PARAMETER0
.383ec8	18		clc		                CLC
.383ec9	a5 2c		lda $2c		                LDA OPL2_IND_ADDY_LL
.383ecb	69 10		adc #$10	                ADC #$10
.383ecd	85 2c		sta $2c		                STA OPL2_IND_ADDY_LL
.383ecf	a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.383ed1	29 03		and #$03	                AND #$03
.383ed3	85 33		sta $33		                STA OPL2_PARAMETER1
.383ed5	6b		rtl		                RTL
.383ed6					OPL2_Set_Frequency
.383ed6	6b		rtl		                RTL
.383ed7					OPL2_Get_Frequency
.383ed7	6b		rtl		                RTL
.383ed8					OPL2_SET_BLOCK
.383ed8	48		pha		                PHA             ; begin setdp macro
.383ed9	08		php		                PHP
.383eda	c2 20		rep #$20	                REP #$20        ; set A long
.383edc	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.383edf	5b		tcd		                TCD
.383ee0	28		plp		                PLP
.383ee1	68		pla		                PLA             ; end setdp macro
.383ee2	e2 20		sep #$20	                SEP #$20        ; set A short
.383ee4	18		clc		                CLC
.383ee5	a5 27		lda $27		                LDA OPL2_CHANNEL
.383ee7	29 0f		and #$0f	                AND #$0F  ; This is just precaution, it should be between 0 to 8
.383ee9	69 b0		adc #$b0	                ADC #$B0
.383eeb	85 2a		sta $2a		                STA OPL2_REG_OFFSET
.383eed	a9 00		lda #$00	                LDA #$00
.383eef	85 2b		sta $2b		                STA OPL2_REG_OFFSET+1;
.383ef1	c2 30		rep #$30	                REP #$30        ; set A&X long
.383ef3	18		clc		                CLC
.383ef4	a9 00 e7	lda #$e700	                LDA #<>OPL2_S_BASE
.383ef7	65 2a		adc $2a		                ADC OPL2_REG_OFFSET
.383ef9	85 2c		sta $2c		                STA OPL2_IND_ADDY_LL
.383efb	a9 af 00	lda #$00af	                LDA #`OPL2_S_BASE
.383efe	85 2e		sta $2e		                STA OPL2_IND_ADDY_HL
.383f00	e2 20		sep #$20	                SEP #$20        ; set A short
.383f02	a5 31		lda $31		                LDA OPL2_OCTAVE
.383f04	29 07		and #$07	                AND #$07
.383f06	0a		asl a		                ASL
.383f07	0a		asl a		                ASL
.383f08	85 31		sta $31		                STA OPL2_OCTAVE
.383f0a	a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.383f0c	29 e3		and #$e3	                AND #$E3
.383f0e	05 31		ora $31		                ORA OPL2_OCTAVE
.383f10	87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.383f12	60		rts		                RTS
.383f13					OPL2_SET_KEYON
.383f13	48		pha		                PHA             ; begin setdp macro
.383f14	08		php		                PHP
.383f15	c2 20		rep #$20	                REP #$20        ; set A long
.383f17	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.383f1a	5b		tcd		                TCD
.383f1b	28		plp		                PLP
.383f1c	68		pla		                PLA             ; end setdp macro
.383f1d	e2 20		sep #$20	                SEP #$20        ; set A short
.383f1f	18		clc		                CLC
.383f20	a5 27		lda $27		                LDA OPL2_CHANNEL
.383f22	29 0f		and #$0f	                AND #$0F  ; This is just precaution, it should be between 0 to 8
.383f24	69 b0		adc #$b0	                ADC #$B0
.383f26	85 2a		sta $2a		                STA OPL2_REG_OFFSET
.383f28	a9 00		lda #$00	                LDA #$00
.383f2a	85 2b		sta $2b		                STA OPL2_REG_OFFSET+1;
.383f2c	c2 30		rep #$30	                REP #$30        ; set A&X long
.383f2e	18		clc		                CLC
.383f2f	a9 00 e7	lda #$e700	                LDA #<>OPL2_S_BASE
.383f32	65 2a		adc $2a		                ADC OPL2_REG_OFFSET
.383f34	85 2c		sta $2c		                STA OPL2_IND_ADDY_LL
.383f36	a9 af 00	lda #$00af	                LDA #`OPL2_S_BASE
.383f39	85 2e		sta $2e		                STA OPL2_IND_ADDY_HL
.383f3b	e2 20		sep #$20	                SEP #$20        ; set A short
.383f3d	a5 32		lda $32		                LDA OPL2_PARAMETER0
.383f3f	29 01		and #$01	                AND #$01
.383f41	f0 02		beq $383f45	                BEQ SET_KEYON_OFF
.383f43	a9 20		lda #$20	                LDA #$20
.383f45					    SET_KEYON_OFF
.383f45	85 32		sta $32		                STA OPL2_PARAMETER0
.383f47	a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.383f49	29 df		and #$df	                AND #$DF
.383f4b	05 32		ora $32		                ORA OPL2_PARAMETER0
.383f4d	87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.383f4f	60		rts		                RTS
.383f50					OPL2_SET_FEEDBACK
.383f50	48		pha		                PHA             ; begin setdp macro
.383f51	08		php		                PHP
.383f52	c2 20		rep #$20	                REP #$20        ; set A long
.383f54	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.383f57	5b		tcd		                TCD
.383f58	28		plp		                PLP
.383f59	68		pla		                PLA             ; end setdp macro
.383f5a	e2 20		sep #$20	                SEP #$20        ; set A short
.383f5c	18		clc		              CLC
.383f5d	a5 27		lda $27		              LDA OPL2_CHANNEL
.383f5f	29 0f		and #$0f	              AND #$0F  ; This is just precaution, it should be between 0 to 8
.383f61	69 c0		adc #$c0	              ADC #$C0
.383f63	85 2a		sta $2a		              STA OPL2_REG_OFFSET
.383f65	a9 00		lda #$00	              LDA #$00
.383f67	85 2b		sta $2b		              STA OPL2_REG_OFFSET+1;
.383f69	c2 30		rep #$30	                REP #$30        ; set A&X long
.383f6b	18		clc		              CLC
.383f6c	a9 00 e7	lda #$e700	              LDA #<>OPL2_S_BASE
.383f6f	65 2a		adc $2a		              ADC OPL2_REG_OFFSET
.383f71	85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.383f73	a9 af 00	lda #$00af	              LDA #`OPL2_S_BASE
.383f76	85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.383f78	e2 20		sep #$20	                SEP #$20        ; set A short
.383f7a	a5 32		lda $32		              LDA OPL2_PARAMETER0
.383f7c	29 07		and #$07	              AND #$07
.383f7e	0a		asl a		              ASL
.383f7f	85 32		sta $32		              STA OPL2_PARAMETER0
.383f81	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.383f83	29 01		and #$01	              AND #$01
.383f85	05 32		ora $32		              ORA OPL2_PARAMETER0
.383f87	87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.383f89	6b		rtl		                RTL
.383f8a					OPL2_SET_SYNTHMODE
.383f8a	48		pha		                PHA             ; begin setdp macro
.383f8b	08		php		                PHP
.383f8c	c2 20		rep #$20	                REP #$20        ; set A long
.383f8e	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.383f91	5b		tcd		                TCD
.383f92	28		plp		                PLP
.383f93	68		pla		                PLA             ; end setdp macro
.383f94	08		php		              PHP ; Push the Carry
.383f95	e2 20		sep #$20	                SEP #$20        ; set A short
.383f97	18		clc		              CLC
.383f98	a5 27		lda $27		              LDA OPL2_CHANNEL
.383f9a	29 0f		and #$0f	              AND #$0F  ; This is just precaution, it should be between 0 to 8
.383f9c	69 c0		adc #$c0	              ADC #$C0
.383f9e	85 2a		sta $2a		              STA OPL2_REG_OFFSET
.383fa0	a9 00		lda #$00	              LDA #$00
.383fa2	85 2b		sta $2b		              STA OPL2_REG_OFFSET+1;
.383fa4	c2 30		rep #$30	                REP #$30        ; set A&X long
.383fa6	18		clc		              CLC
.383fa7	a9 00 e7	lda #$e700	              LDA #<>OPL2_S_BASE
.383faa	65 2a		adc $2a		              ADC OPL2_REG_OFFSET
.383fac	85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.383fae	a9 af 00	lda #$00af	              LDA #`OPL2_S_BASE
.383fb1	85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.383fb3	28		plp		              PLP ; Pull the Carry out
.383fb4	e2 20		sep #$20	                SEP #$20        ; set A short
.383fb6	b0 08		bcs $383fc0	              BCS OPL2_Set_Synthmode_Set;
.383fb8	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.383fba	29 fe		and #$fe	              AND #$FE
.383fbc	87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.383fbe	80 06		bra $383fc6	              BRA OPL2_Set_Synthmode_Exit
.383fc0					OPL2_Set_Synthmode_Set
.383fc0	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.383fc2	09 01		ora #$01	              ORA #$01
.383fc4	87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.383fc6					OPL2_Set_Synthmode_Exit
.383fc6	6b		rtl		                RTL
.383fc7					OPL2_SET_DEEPTREMOLO
.383fc7	48		pha		                PHA             ; begin setdp macro
.383fc8	08		php		                PHP
.383fc9	c2 20		rep #$20	                REP #$20        ; set A long
.383fcb	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.383fce	5b		tcd		                TCD
.383fcf	28		plp		                PLP
.383fd0	68		pla		                PLA             ; end setdp macro
.383fd1	c2 20		rep #$20	                REP #$20        ; set A long
.383fd3	a9 bd e7	lda #$e7bd	              LDA #<>OPL2_S_BASE + $00BD
.383fd6	85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.383fd8	a9 af 00	lda #$00af	              LDA #`OPL2_S_BASE
.383fdb	85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.383fdd	e2 20		sep #$20	                SEP #$20        ; set A short
.383fdf	b0 08		bcs $383fe9	              BCS OPL2_Set_DeepTremolo_Set;
.383fe1	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.383fe3	29 7f		and #$7f	              AND #$7F
.383fe5	87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.383fe7	80 06		bra $383fef	              BRA OPL2_Set_DeepTremolo_Exit
.383fe9					OPL2_Set_DeepTremolo_Set
.383fe9	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.383feb	09 80		ora #$80	              ORA #$80
.383fed	87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.383fef					OPL2_Set_DeepTremolo_Exit
.383fef	6b		rtl		                RTL
.383ff0					OPL2_SET_DEEPVIBRATO
.383ff0	48		pha		                PHA             ; begin setdp macro
.383ff1	08		php		                PHP
.383ff2	c2 20		rep #$20	                REP #$20        ; set A long
.383ff4	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.383ff7	5b		tcd		                TCD
.383ff8	28		plp		                PLP
.383ff9	68		pla		                PLA             ; end setdp macro
.383ffa	c2 20		rep #$20	                REP #$20        ; set A long
.383ffc	a9 bd e7	lda #$e7bd	              LDA #<>OPL2_S_BASE + $00BD
.383fff	85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.384001	a9 af 00	lda #$00af	              LDA #`OPL2_S_BASE
.384004	85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.384006	e2 20		sep #$20	                SEP #$20        ; set A short
.384008	b0 08		bcs $384012	              BCS OPL2_Set_DeepVibrato_Set;
.38400a	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.38400c	29 bf		and #$bf	              AND #$BF
.38400e	87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.384010	80 06		bra $384018	              BRA OPL2_Set_DeepVibrato_Exit
.384012					OPL2_Set_DeepVibrato_Set
.384012	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.384014	09 40		ora #$40	              ORA #$40
.384016	87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.384018					OPL2_Set_DeepVibrato_Exit
.384018	6b		rtl		                RTL
.384019					OPL2_SET_PERCUSSION
.384019	48		pha		                PHA             ; begin setdp macro
.38401a	08		php		                PHP
.38401b	c2 20		rep #$20	                REP #$20        ; set A long
.38401d	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.384020	5b		tcd		                TCD
.384021	28		plp		                PLP
.384022	68		pla		                PLA             ; end setdp macro
.384023	c2 20		rep #$20	                REP #$20        ; set A long
.384025	a9 bd e7	lda #$e7bd	                LDA #<>OPL2_S_BASE + $00BD
.384028	85 2c		sta $2c		                STA OPL2_IND_ADDY_LL
.38402a	a9 af 00	lda #$00af	                LDA #`OPL2_S_BASE
.38402d	85 2e		sta $2e		                STA OPL2_IND_ADDY_HL
.38402f	e2 20		sep #$20	                SEP #$20        ; set A short
.384031	b0 08		bcs $38403b	                BCS OPL2_Set_Percussion_Set;
.384033	a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.384035	29 df		and #$df	                AND #$DF
.384037	87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.384039	80 06		bra $384041	                BRA OPL2_Set_Percussion_Exit
.38403b					OPL2_Set_Percussion_Set
.38403b	a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.38403d	09 20		ora #$20	                ORA #$20
.38403f	87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.384041					OPL2_Set_Percussion_Exit
.384041	6b		rtl		                RTL
.384042					OPL2_SET_DRUMS
.384042	48		pha		                PHA             ; begin setdp macro
.384043	08		php		                PHP
.384044	c2 20		rep #$20	                REP #$20        ; set A long
.384046	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.384049	5b		tcd		                TCD
.38404a	28		plp		                PLP
.38404b	68		pla		                PLA             ; end setdp macro
.38404c	c2 20		rep #$20	                REP #$20        ; set A long
.38404e	a9 bd e7	lda #$e7bd	                LDA #<>OPL2_S_BASE + $00BD
.384051	85 2c		sta $2c		                STA OPL2_IND_ADDY_LL
.384053	a9 af 00	lda #$00af	                LDA #`OPL2_S_BASE
.384056	85 2e		sta $2e		                STA OPL2_IND_ADDY_HL
.384058	e2 20		sep #$20	                SEP #$20        ; set A short
.38405a	a5 32		lda $32		                LDA OPL2_PARAMETER0
.38405c	29 1f		and #$1f	                AND #$1F
.38405e	85 32		sta $32		                STA OPL2_PARAMETER0
.384060	49 ff		eor #$ff	                EOR #$FF
.384062	85 33		sta $33		                STA OPL2_PARAMETER1
.384064	a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.384066	25 33		and $33		                AND OPL2_PARAMETER1
.384068	05 32		ora $32		                ORA OPL2_PARAMETER0
.38406a	87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.38406c	6b		rtl		                RTL
.38406d					OPL2_SET_WAVEFORM
.38406d	48		pha		                PHA             ; begin setdp macro
.38406e	08		php		                PHP
.38406f	c2 20		rep #$20	                REP #$20        ; set A long
.384071	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.384074	5b		tcd		                TCD
.384075	28		plp		                PLP
.384076	68		pla		                PLA             ; end setdp macro
.384077	c2 20		rep #$20	                REP #$20        ; set A long
.384079	a9 e0 00	lda #$00e0	                LDA #$00E0;
.38407c	85 28		sta $28		                STA OPL2_REG_REGION
.38407e	20 92 40	jsr $384092	                JSR OPL2_GET_REG_OFFSET
.384081	e2 20		sep #$20	                SEP #$20        ; set A short
.384083	a5 32		lda $32		                LDA OPL2_PARAMETER0
.384085	29 03		and #$03	                AND #$03
.384087	85 32		sta $32		                STA OPL2_PARAMETER0
.384089	a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.38408b	29 fc		and #$fc	                AND #$FC
.38408d	05 32		ora $32		                ORA OPL2_PARAMETER0
.38408f	87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.384091	6b		rtl		                RTL
.384092					OPL2_GET_REG_OFFSET
.384092	e2 30		sep #$30	                SEP #$30        ; set A&X short
.384094	a5 27		lda $27		                LDA OPL2_CHANNEL
.384096	29 0f		and #$0f	                AND #$0F
.384098	aa		tax		                TAX
.384099	a5 26		lda $26		                LDA OPL2_OPERATOR   ; 0 = operator 1, other = operator 2
.38409b	d0 06		bne $3840a3	                BNE OPL2_Get_Register_Offset_l0
.38409d	bf dc 16 38	lda $3816dc,x	                LDA @lregisterOffsets_operator0, X
.3840a1	80 04		bra $3840a7	                BRA OPL2_Get_Register_Offset_exit
.3840a3					OPL2_Get_Register_Offset_l0
.3840a3	bf e5 16 38	lda $3816e5,x	                LDA @lregisterOffsets_operator1, X
.3840a7					OPL2_Get_Register_Offset_exit
.3840a7	85 2a		sta $2a		                STA OPL2_REG_OFFSET
.3840a9	a9 00		lda #$00	                LDA #$00
.3840ab	85 2b		sta $2b		                STA OPL2_REG_OFFSET+1;
.3840ad	c2 30		rep #$30	                REP #$30        ; set A&X long
.3840af	18		clc		                CLC
.3840b0	a9 00 e7	lda #$e700	                LDA #<>OPL2_S_BASE
.3840b3	65 2a		adc $2a		                ADC OPL2_REG_OFFSET
.3840b5	65 28		adc $28		                ADC OPL2_REG_REGION ; Ex: $20, or $40, $60, $80 (in 16bits)
.3840b7	85 2c		sta $2c		                STA OPL2_IND_ADDY_LL
.3840b9	a9 af 00	lda #$00af	                LDA #`OPL2_S_BASE
.3840bc	85 2e		sta $2e		                STA OPL2_IND_ADDY_HL
.3840be	60		rts		                RTS

;******  Return to file: src\kernel.asm


;******  Processing file: src\ide_library.asm

.0000					IDE_ID
>0000	00 00				General_Config        .word $0000
>0002	00 00				Obsolete0             .word $0000
>0004	00 00				Specific_Config       .word $0000
>0006	00 00				Obsolete1             .word $0000
>0008	00 00				Retired0              .word $0000
>000a	00 00				Retired1              .word $0000
>000c	00 00				Obsolete2             .word $0000
>000e	00 00				Reserved_CFlash0      .word $0000
>0010	00 00				Reserved_CFlash1      .word $0000
>0012	00 00				Retired2              .word $0000
>0014	00 00 00 00 00 00 00 00		Serial_Number_String  .byte $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>001c	00 00 00 00 00 00 00 00 00 00 00 00
>0028	00 00 00 00			Retired3              .word $0000, $0000
>002c	00 00				Obsolete3             .word $0000
>002e	00 00 00 00 00 00 00 00		Firmware_Rev_String   .byte $00, $00, $00, $00, $00, $00, $00, $00
>0036	00 00 00 00 00 00 00 00		Model_Number_String   .byte $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>003e	00 00 00 00 00 00 00 00
>0046	00 00 00 00 00 00 00 00		                      .byte $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>004e	00 00 00 00 00 00 00 00
>0056	00 00 00 00 00 00 00 00		                      .byte $00, $00, $00, $00, $00, $00, $00, $00
>005e	00 00				Max_Number_Logic_Sec  .word $0000
>0060	00 00				Trusted_Comp_Feature  .word $0000
>0062	00 00 00 00			Capabilities          .word $0000, $0000
>0066	00 00 00 00			Obsolete4             .word $0000, $0000
>006a	00 00				Free_Fall_Control     .word $0000
>006c	00 00 00 00 00 00 00 00		Obsolete5             .word $0000, $0000, $0000, $0000, $0000
>0074	00 00
>0076	00 00				Reserved0             .word $0000
>0078	00 00 00 00			Total_Addy_Logic_Sec  .word $0000, $0000
>007c	00 00				Obsolete6             .word $0000
>007e	00 00 00 00			Reserved1             .word $0000, $0000
>0082	00 00				Min_Multiword_DMA_Trf .word $0000
>0084	00 00				Manu_Recommended_Mult .word $0000
>0086	00 00				Min_PIO_Trf           .word $0000      ; Word 67
>0088	00 00				Min_PIO_Trf_with_IORD .word $0000      ; Word 68
>008a	00 00 00 00			Reserved2             .word $0000, $0000
>008e	00 00 00 00 00 00 00 00		Reserved3             .word $0000, $0000, $0000, $0000
>0096	00 00				Queue_Dept            .word $0000
>0098	00 00				SATA_Capabilities     .word $0000
>009a	00 00				Reserved_SATA         .word $0000
>009c	00 00				Sup_Feat_SATA         .word $0000
>009e	00 00				Sup_Feat_SATA_Enabled .word $0000    ; Word 79
>00a0	00 00				Major_Version_Number  .word $0000    ; Word 80
>00a2	00 00				Minor_Version_Number  .word $0000    ; Word 81
>00a4	00 00 00 00 00 00 00 00		Cmd_And_Features_Sup  .word $0000, $0000, $0000, $0000, $0000, $0000
>00ac	00 00 00 00
>00b0	00 00				UDMA_Modes            .word $0000
>00b2	00 00 00 00			Reserved4             .word $0000, $0000 ; Word 89
>00b6	00 00				Current_APM_Level     .word $0000
>00b8	00 00				Master_Password_Ident .word $0000
>00ba	00 00				Hardware_Reset_Result .word $0000
>00bc	00 00				Current_AAM_Value     .word $0000  ; Word 94
>00be	00 00				Stream_Min_Req_Size   .word $0000  ; Word 95
>00c0	00 00				Stream_Trf_Time_DMA   .word $0000  ; Word 96
>00c2	00 00				Stream_Access_Lat     .word $0000
>00c4	00 00 00 00			Streaming_Perf_Gran   .word $0000, $0000
>00c8	00 00 00 00 00 00 00 00		Tot_Num_Add_Logic_Sec .word $0000, $0000, $0000, $0000
>00d0	00 00				Streaming_Trf_Time    .word $0000 ; Word 104
>00d2	00 00				Reserved5             .word $0000 ; Word 105
.3840bf					IDE_INIT
.3840bf	e2 20		sep #$20	                SEP #$20        ; set A short
.3840c1	20 e2 40	jsr $3840e2	              JSR IDE_DRIVE_BSY ; Check to see if drive is busy
.3840c4	a9 00		lda #$00	              LDA #$00
.3840c6	8f 35 e8 af	sta $afe835	              STA IDE_CLDR_HI
.3840ca	8f 34 e8 af	sta $afe834	              STA IDE_CLDR_LO
.3840ce	8f 32 e8 af	sta $afe832	              STA IDE_SECT_CNT
.3840d2	a9 01		lda #$01	              LDA #$01
.3840d4	8f 33 e8 af	sta $afe833	              STA IDE_SECT_SRT
.3840d8	a9 a0		lda #$a0	              LDA #$A0 ; HEAD 0 - Select Master Drive
.3840da	8f 36 e8 af	sta $afe836	              STA IDE_HEAD
.3840de	20 f8 40	jsr $3840f8	              JSR IDE_DRV_READY_NOTBUSY
.3840e1	6b		rtl		              RTL
.3840e2					IDE_DRIVE_BSY
.3840e2	af 37 e8 af	lda $afe837	              LDA IDE_CMD_STAT
.3840e6	29 80		and #$80	              AND #$80    ;; Check for RDY Bit, this needs to be 1'b1
.3840e8	c9 80		cmp #$80	              CMP #$80    ;; If not go read again
.3840ea	f0 f6		beq $3840e2	              BEQ IDE_DRIVE_BSY
.3840ec	60		rts		              RTS
.3840ed					IDE_DRIVE_READY
.3840ed	af 37 e8 af	lda $afe837	              LDA IDE_CMD_STAT
.3840f1	29 40		and #$40	              AND #$40    ;; Check to see if the Busy Signal is Cleared
.3840f3	c9 40		cmp #$40	              CMP #$40    ; if it is still one, then go back to read again.
.3840f5	d0 f6		bne $3840ed	              BNE IDE_DRIVE_READY
.3840f7	60		rts		              RTS
.3840f8					IDE_DRV_READY_NOTBUSY
.3840f8	af 37 e8 af	lda $afe837	              LDA IDE_CMD_STAT
.3840fc	29 40		and #$40	              AND #$40    ;; Check to see if the Busy Signal is Cleared
.3840fe	c9 40		cmp #$40	              CMP #$40    ; if it is still one, then go back to read again.
.384100	d0 f6		bne $3840f8	              BNE IDE_DRV_READY_NOTBUSY
.384102	af 37 e8 af	lda $afe837	              LDA IDE_CMD_STAT
.384106	29 80		and #$80	              AND #$80    ;; Check for RDY Bit, this needs to be 1'b1
.384108	c9 80		cmp #$80	              CMP #$80    ;; If not go read again
.38410a	f0 ec		beq $3840f8	              BEQ IDE_DRV_READY_NOTBUSY
.38410c	60		rts		              RTS
.38410d					IDE_NOT_DRQ
.38410d	af 37 e8 af	lda $afe837	              LDA IDE_CMD_STAT
.384111	29 08		and #$08	              AND #$08
.384113	c9 08		cmp #$08	              CMP #$08
.384115	d0 f6		bne $38410d	              BNE IDE_NOT_DRQ
.384117	60		rts		              RTS
.384118					IDE_GET_512BYTES
.384118	c2 30		rep #$30	                REP #$30        ; set A&X long
.38411a	af 38 e8 af	lda $afe838	              LDA IDE_DATA_LO
.38411e	a2 00 00	ldx #$0000	              LDX #$0000
.384121					IDE_GET_INFO_KEEP_FETCHING
.384121	af 38 e8 af	lda $afe838	              LDA IDE_DATA_LO
.384125	9f 00 04 00	sta $000400,x	              STA SDOS_BLK_BEGIN, X
.384129	e8		inx		              INX
.38412a	e8		inx		              INX
.38412b	e0 00 02	cpx #$0200	              CPX #$0200
.38412e	d0 f1		bne $384121	              BNE IDE_GET_INFO_KEEP_FETCHING
.384130	6b		rtl		              RTL
.384131					IDE_GET_INFO
.384131	e2 20		sep #$20	                SEP #$20        ; set A short
.384133	20 e2 40	jsr $3840e2	              JSR IDE_DRIVE_BSY
.384136	a9 ec		lda #$ec	              LDA #$EC              ; Send the Command #$EC to fetch the INFO about the HDD
.384138	8f 37 e8 af	sta $afe837	              STA IDE_CMD_STAT
.38413c	20 f8 40	jsr $3840f8	              JSR IDE_DRV_READY_NOTBUSY
.38413f	20 0d 41	jsr $38410d	              JSR IDE_NOT_DRQ       ; Wait for the Drive to let us know that the Data is ready
.384142	22 18 41 38	jsl $384118	              JSL IDE_GET_512BYTES
.384146	e2 20		sep #$20	                SEP #$20        ; set A short
.384148	c2 10		rep #$10	                REP #$10        ; set X long
.38414a	a2 00 00	ldx #$0000	              LDX #$0000
.38414d					GET_INFO_LOOP
.38414d	bf 37 04 00	lda $000437,x	              LDA SDOS_BLK_BEGIN+55, X    ; Model String
.384151	22 f4 0b 39	jsl $390bf4	              JSL IPUTC
.384155	bf 36 04 00	lda $000436,x	              LDA SDOS_BLK_BEGIN+54, X    ; Model String
.384159	22 f4 0b 39	jsl $390bf4	              JSL IPUTC
.38415d	e8		inx		              INX
.38415e	e8		inx		              INX
.38415f	e0 28 00	cpx #$0028	              CPX #40
.384162	d0 e9		bne $38414d	              BNE GET_INFO_LOOP
.384164	6b		rtl		              RTL
.384165					IDE_DISPLAY_INFO

;******  Return to file: src\kernel.asm


;******  Processing file: src\keyboard.asm

.384165					KEYBOARD_INTERRUPT
.384165	48		pha		                PHA             ; begin setdp macro
.384166	08		php		                PHP
.384167	c2 20		rep #$20	                REP #$20        ; set A long
.384169	a9 00 0f	lda #$0f00	                LDA #KEY_BUFFER         ; set DP to page 0
.38416c	5b		tcd		                TCD
.38416d	28		plp		                PLP
.38416e	68		pla		                PLA             ; end setdp macro
.38416f	a2 00 00	ldx #$0000	                ldx #$0000
.384172	e2 10		sep #$10	                SEP #$10        ; set X short
.384174	e2 20		sep #$20	                SEP #$20        ; set A short
.384176	af 41 01 00	lda $000141	                LDA @lINT_PENDING_REG1
.38417a	29 01		and #$01	                AND #FNX1_INT00_KBD
.38417c	8f 41 01 00	sta $000141	                STA @lINT_PENDING_REG1
.384180					IRQ_HANDLER_FETCH
.384180	af 60 10 af	lda $af1060	                LDA @lKBD_INPT_BUF      ; Get Scan Code from KeyBoard
.384184	85 88		sta $0f88	                STA KEYBOARD_SC_TMP     ; Save Code Immediately
.384186	a5 87		lda $0f87	                LDA KEYBOARD_SC_FLG     ; Check to See if the Prefix was picked up before
.384188	29 80		and #$80	                AND #$80
.38418a	c9 80		cmp #$80	                CMP #$80
.38418c	d0 10		bne $38419e	                BNE CHK_LSHIFT          ; No: do normal scan-code checks
.38418e	a5 87		lda $0f87	PREFIX_ON       LDA KEYBOARD_SC_FLG     ; Otherwise: clear prefix
.384190	29 7f		and #$7f	                AND #$7F
.384192	85 87		sta $0f87	                STA KEYBOARD_SC_FLG
.384194	a5 88		lda $0f88	                LDA KEYBOARD_SC_TMP     ; Get the prefixed scan-code's character
.384196	aa		tax		                TAX
.384197	bf 80 20 39	lda $392080,x	                LDA @lScanCode_Prefix_Set1, x
.38419b	4c 41 42	jmp $384241	                JMP KB_WR_2_SCREEN      ; And save it
.38419e	a5 88		lda $0f88	CHK_LSHIFT      LDA KEYBOARD_SC_TMP
.3841a0	c9 2a		cmp #$2a	                CMP #$2A                ; Left Shift Pressed
.3841a2	d0 03		bne $3841a7	                BNE NOT_KB_SET_LSHIFT
.3841a4	82 ad 00	brl $384254	                BRL KB_SET_SHIFT
.3841a7					NOT_KB_SET_LSHIFT
.3841a7	c9 aa		cmp #$aa	                CMP #$AA                ; Left Shift Unpressed
.3841a9	d0 03		bne $3841ae	                BNE NOT_KB_CLR_LSHIFT
.3841ab	82 af 00	brl $38425d	                BRL KB_CLR_SHIFT
.3841ae					NOT_KB_CLR_LSHIFT
.3841ae	c9 36		cmp #$36	                CMP #$36                ; Right Shift Pressed
.3841b0	d0 03		bne $3841b5	                BNE NOT_KB_SET_RSHIFT
.3841b2	82 9f 00	brl $384254	                BRL KB_SET_SHIFT
.3841b5					NOT_KB_SET_RSHIFT
.3841b5	c9 b6		cmp #$b6	                CMP #$B6                ; Right Shift Unpressed
.3841b7	d0 03		bne $3841bc	                BNE NOT_KB_CLR_RSHIFT
.3841b9	82 a1 00	brl $38425d	                BRL KB_CLR_SHIFT
.3841bc					NOT_KB_CLR_RSHIFT
.3841bc	c9 1d		cmp #$1d	                CMP #$1D                ; Left CTRL pressed
.3841be	d0 03		bne $3841c3	                BNE NOT_KB_SET_CTRL
.3841c0	82 a3 00	brl $384266	                BRL KB_SET_CTRL
.3841c3					NOT_KB_SET_CTRL
.3841c3	c9 9d		cmp #$9d	                CMP #$9D                ; Left CTRL Unpressed
.3841c5	d0 03		bne $3841ca	                BNE NOT_KB_CLR_CTRL
.3841c7	82 a5 00	brl $38426f	                BRL KB_CLR_CTRL
.3841ca					NOT_KB_CLR_CTRL
.3841ca	c9 38		cmp #$38	                CMP #$38                ; Left ALT Pressed
.3841cc	d0 03		bne $3841d1	                BNE NOT_KB_SET_ALT
.3841ce	82 a7 00	brl $384278	                BRL KB_SET_ALT
.3841d1					NOT_KB_SET_ALT
.3841d1	c9 b8		cmp #$b8	                CMP #$B8                ; Left ALT Unpressed
.3841d3	d0 03		bne $3841d8	                BNE NOT_KB_CLR_ALT
.3841d5	82 a9 00	brl $384281	                BRL KB_CLR_ALT
.3841d8	c9 e0		cmp #$e0	NOT_KB_CLR_ALT  CMP #$E0                ; Prefixed scan code
.3841da	d0 03		bne $3841df	                BNE NOT_PREFIXED
.3841dc	82 ab 00	brl $38428a	                BRL KB_SET_PREFIX
.3841df	c9 45		cmp #$45	NOT_PREFIXED    CMP #$45                ; Numlock Pressed
.3841e1	d0 03		bne $3841e6	                BNE NOT_KB_SET_NUM
.3841e3	82 b6 00	brl $38429c	                BRL KB_TOG_NUMLOCK
.3841e6	c9 46		cmp #$46	NOT_KB_SET_NUM  CMP #$46                ; Scroll Lock Pressed
.3841e8	d0 03		bne $3841ed	                BNE NOT_KB_SET_SCR
.3841ea	82 a6 00	brl $384293	                BRL KB_TOG_SCRLOCK
.3841ed	c9 3a		cmp #$3a	NOT_KB_SET_SCR  CMP #$3A                ; Caps Lock Pressed
.3841ef	d0 03		bne $3841f4	                BNE NOT_KB_CAPSLOCK
.3841f1	82 b1 00	brl $3842a5	                BRL KB_TOG_CAPLOCK
.3841f4	c9 58		cmp #$58	NOT_KB_CAPSLOCK CMP #$58                ; F12 Pressed
.3841f6	d0 09		bne $384201	                BNE KB_UNPRESSED
.3841f8	a9 60		lda #$60	                LDA #KB_CREDITS         ; Yes: flag that the CREDITS key has been pressed
.3841fa	8f 8a 0f 00	sta $000f8a	                STA @lKEYFLAG
.3841fe	82 aa 00	brl $3842ab	                BRL KB_CHECK_B_DONE
.384201	29 80		and #$80	KB_UNPRESSED    AND #$80                ; See if the Scan Code is press or Depressed
.384203	c9 80		cmp #$80	                CMP #$80                ; Depress Status - We will not do anything at this point
.384205	d0 03		bne $38420a	                BNE KB_NORM_SC
.384207	82 a1 00	brl $3842ab	                BRL KB_CHECK_B_DONE
.38420a	a5 88		lda $0f88	KB_NORM_SC      LDA KEYBOARD_SC_TMP       ;
.38420c	aa		tax		                TAX
.38420d	a5 87		lda $0f87	                LDA KEYBOARD_SC_FLG     ; Check to See if the SHIFT Key is being Pushed
.38420f	29 10		and #$10	                AND #$10
.384211	c9 10		cmp #$10	                CMP #$10
.384213	f0 17		beq $38422c	                BEQ SHIFT_KEY_ON
.384215	a5 87		lda $0f87	                LDA KEYBOARD_SC_FLG     ; Check to See if the CTRL Key is being Pushed
.384217	29 20		and #$20	                AND #$20
.384219	c9 20		cmp #$20	                CMP #$20
.38421b	f0 16		beq $384233	                BEQ CTRL_KEY_ON
.38421d	a5 87		lda $0f87	                LDA KEYBOARD_SC_FLG     ; Check to See if the ALT Key is being Pushed
.38421f	29 40		and #$40	                AND #$40
.384221	c9 40		cmp #$40	                CMP #$40
.384223	f0 15		beq $38423a	                BEQ ALT_KEY_ON
.384225	bf 00 1e 39	lda $391e00,x	                LDA @lScanCode_Press_Set1, x
.384229	82 15 00	brl $384241	                BRL KB_WR_2_SCREEN
.38422c	bf 80 1e 39	lda $391e80,x	SHIFT_KEY_ON    LDA @lScanCode_Shift_Set1, x
.384230	82 0e 00	brl $384241	                BRL KB_WR_2_SCREEN
.384233	bf 00 1f 39	lda $391f00,x	CTRL_KEY_ON     LDA @lScanCode_Ctrl_Set1, x
.384237	82 07 00	brl $384241	                BRL KB_WR_2_SCREEN
.38423a	bf 80 1f 39	lda $391f80,x	ALT_KEY_ON      LDA @lScanCode_Alt_Set1, x
.38423e	82 00 00	brl $384241	                BRL KB_WR_2_SCREEN
.384241	c9 18		cmp #$18	KB_WR_2_SCREEN  CMP #$18                ; Is it SysRq?
.384243	d0 03		bne $384248	                BNE savechar
.384245	4c bb 42	jmp $3842bb	                JMP programmerKey       ; Yes: trigger the programmer key
.384248	48		pha		savechar        PHA
.384249	c2 10		rep #$10	                REP #$10        ; set X long
.38424b	20 c7 42	jsr $3842c7	                JSR SAVEKEY
.38424e	e2 20		sep #$20	                SEP #$20        ; set A short
.384250	68		pla		                PLA
.384251	4c ab 42	jmp $3842ab	                JMP KB_CHECK_B_DONE
.384254	a5 87		lda $0f87	KB_SET_SHIFT    LDA KEYBOARD_SC_FLG
.384256	09 10		ora #$10	                ORA #$10
.384258	85 87		sta $0f87	                STA KEYBOARD_SC_FLG
.38425a	4c ab 42	jmp $3842ab	                JMP KB_CHECK_B_DONE
.38425d	a5 87		lda $0f87	KB_CLR_SHIFT    LDA KEYBOARD_SC_FLG
.38425f	29 ef		and #$ef	                AND #$EF
.384261	85 87		sta $0f87	                STA KEYBOARD_SC_FLG
.384263	4c ab 42	jmp $3842ab	                JMP KB_CHECK_B_DONE
.384266	a5 87		lda $0f87	KB_SET_CTRL     LDA KEYBOARD_SC_FLG
.384268	09 20		ora #$20	                ORA #$20
.38426a	85 87		sta $0f87	                STA KEYBOARD_SC_FLG
.38426c	4c ab 42	jmp $3842ab	                JMP KB_CHECK_B_DONE
.38426f	a5 87		lda $0f87	KB_CLR_CTRL     LDA KEYBOARD_SC_FLG
.384271	29 df		and #$df	                AND #$DF
.384273	85 87		sta $0f87	                STA KEYBOARD_SC_FLG
.384275	4c ab 42	jmp $3842ab	                JMP KB_CHECK_B_DONE
.384278	a5 87		lda $0f87	KB_SET_ALT      LDA KEYBOARD_SC_FLG
.38427a	09 40		ora #$40	                ORA #$40
.38427c	85 87		sta $0f87	                STA KEYBOARD_SC_FLG
.38427e	4c ab 42	jmp $3842ab	                JMP KB_CHECK_B_DONE
.384281	a5 87		lda $0f87	KB_CLR_ALT      LDA KEYBOARD_SC_FLG
.384283	29 bf		and #$bf	                AND #$BF
.384285	85 87		sta $0f87	                STA KEYBOARD_SC_FLG
.384287	4c ab 42	jmp $3842ab	                JMP KB_CHECK_B_DONE
.38428a	a5 87		lda $0f87	KB_SET_PREFIX   LDA KEYBOARD_SC_FLG
.38428c	09 80		ora #$80	                ORA #$80
.38428e	85 87		sta $0f87	                STA KEYBOARD_SC_FLG
.384290	4c ab 42	jmp $3842ab	                JMP KB_CHECK_B_DONE
.384293	a5 89		lda $0f89	KB_TOG_SCRLOCK  LDA KEYBOARD_LOCKS
.384295	49 01		eor #$01	                EOR #KB_SCROLL_LOCK         ; toggle the Scroll Lock flag
.384297	85 89		sta $0f89	                STA KEYBOARD_LOCKS
.384299	4c ab 42	jmp $3842ab	                JMP KB_CHECK_B_DONE
.38429c	a5 89		lda $0f89	KB_TOG_NUMLOCK  LDA KEYBOARD_LOCKS
.38429e	49 02		eor #$02	                EOR #KB_NUM_LOCK            ; toggle the Num Lock flag
.3842a0	85 89		sta $0f89	                STA KEYBOARD_LOCKS
.3842a2	4c ab 42	jmp $3842ab	                JMP KB_CHECK_B_DONE
.3842a5	a5 89		lda $0f89	KB_TOG_CAPLOCK  LDA KEYBOARD_LOCKS
.3842a7	49 04		eor #$04	                EOR #KB_CAPS_LOCK           ; toggle the Caps Lock flag
.3842a9	85 89		sta $0f89	                STA KEYBOARD_LOCKS
.3842ab					KB_CHECK_B_DONE
.3842ab	af 64 10 af	lda $af1064	                LDA STATUS_PORT
.3842af	29 01		and #$01	                AND #OUT_BUF_FULL           ; Test bit $01 (if 1, Full)
.3842b1	c9 01		cmp #$01	                CMP #OUT_BUF_FULL           ; if Still Byte in the Buffer, fetch it out
.3842b3	d0 03		bne $3842b8	                BNE SET_LED
.3842b5	4c 80 41	jmp $384180	                JMP IRQ_HANDLER_FETCH
.3842b8					SET_LED
.3842b8					KB_DONE
.3842b8	c2 30		rep #$30	                REP #$30        ; set A&X long
.3842ba	60		rts		                RTS
.3842bb					programmerKey
.3842bb	c2 30		rep #$30	                REP #$30        ; set A&X long
.3842bd	68		pla		                PLA                     ; Get and throw-away the return address to the interrupt handler
.3842be	2b		pld		                PLD                     ; Restore the registers that were present when the handler was invoked
.3842bf	ab		plb		                PLB
.3842c0	7a		ply		                PLY
.3842c1	fa		plx		                PLX
.3842c2	68		pla		                PLA
.3842c3	5c 08 10 38	jmp $381008	                JML BREAK               ; And go to the BRK handler directly to open the monitor
.3842c7					SAVEKEY
.3842c7	e2 20		sep #$20	                SEP #$20        ; set A short
.3842c9	48		pha		                PHA                     ; Save the character
.3842ca	a5 89		lda $0f89	                LDA KEYBOARD_LOCKS      ; Check the keyboard lock flags
.3842cc	29 04		and #$04	                AND #KB_CAPS_LOCK       ; Is CAPS lock on?
.3842ce	f0 0d		beq $3842dd	                BEQ no_caps             ; No... just use the character as-is
.3842d0	68		pla		                PLA                     ; Get the character back
.3842d1	c9 61		cmp #$61	                CMP #'a'                ; Is it < 'a'
.3842d3	90 09		bcc $3842de	                BLT check_break         ; Yes: just use as-is
.3842d5	c9 7b		cmp #$7b	                CMP #'z'+1              ; Is it > 'z'
.3842d7	b0 05		bcs $3842de	                BGE check_break         ; Yes: just us as-is
.3842d9	29 df		and #$df	                AND #%11011111          ; Conver to upper case
.3842db	80 01		bra $3842de	                BRA check_break
.3842dd	68		pla		no_caps         PLA                     ; Restore the character
.3842de	c9 00		cmp #$00	check_break     CMP #0
.3842e0	f0 18		beq $3842fa	                BEQ done
.3842e2	c9 03		cmp #$03	                CMP #CHAR_CTRL_C        ; Is it CTRL-C?
.3842e4	f0 15		beq $3842fb	                BEQ flag_break          ; Yes: flag a break
.3842e6	a6 8d		ldx $0f8d	no_break        LDX KEY_BUFFER_WPOS     ; So the Receive Character is saved in the Buffer
.3842e8	e0 80 00	cpx #$0080	                CPX #KEY_BUFFER_SIZE    ; Make sure we haven't been overboard.
.3842eb	b0 0d		bcs $3842fa	                BCS done                ; Stop storing - An error should ensue here...
.3842ed	9f 00 0f 00	sta $000f00,x	                STA @lKEY_BUFFER,X
.3842f1	e8		inx		                INX
.3842f2	86 8d		stx $0f8d	                STX KEY_BUFFER_WPOS
.3842f4	a9 00		lda #$00	                LDA #$00
.3842f6	9f 00 0f 00	sta $000f00,x	                STA @lKEY_BUFFER, X       ; Store a EOL in the following location for good measure
.3842fa	60		rts		done            RTS
.3842fb					flag_break
.3842fb	e2 20		sep #$20	                SEP #$20        ; set A short
.3842fd	a9 80		lda #$80	                LDA #KB_CTRL_C          ; Flag that an interrupt key has been pressed
.3842ff	85 8a		sta $0f8a	                STA KEYFLAG             ; The interpreter should see this soon and throw a BREAK
.384301	60		rts		                RTS
.384302					KBD_GETC
.384302	da		phx		                PHX
.384303	0b		phd		                PHD
.384304	08		php		                PHP
.384305	48		pha		                PHA             ; begin setdp macro
.384306	08		php		                PHP
.384307	c2 20		rep #$20	                REP #$20        ; set A long
.384309	a9 00 0f	lda #$0f00	                LDA #KEY_BUFFER         ; set DP to page 0
.38430c	5b		tcd		                TCD
.38430d	28		plp		                PLP
.38430e	68		pla		                PLA             ; end setdp macro
.38430f	e2 20		sep #$20	                SEP #$20        ; set A short
.384311	c2 10		rep #$10	                REP #$10        ; set X long
.384313	58		cli		                CLI                     ; Make sure interrupts can happen
.384314	af 8a 0f 00	lda $000f8a	get_wait        LDA @lKEYFLAG           ; Check the keyboard control flag
.384318	29 60		and #$60	                AND #KB_CREDITS         ; Are the credits flagged?
.38431a	c9 60		cmp #$60	                CMP #KB_CREDITS
.38431c	d0 0a		bne $384328	                BNE check_buffer        ; No: check the key buffer
.38431e	a9 00		lda #$00	                LDA #0                  ; Yes: clear the flags
.384320	8f 8a 0f 00	sta $000f8a	                STA @lKEYFLAG
.384324	22 9f 18 39	jsl $39189f	                JSL SHOW_CREDITS        ; Then show the credits screen and wait for a key press
.384328	a6 8b		ldx $0f8b	check_buffer    LDX KEY_BUFFER_RPOS     ; Is KEY_BUFFER_RPOS < KEY_BUFFER_WPOS
.38432a	e4 8d		cpx $0f8d	                CPX KEY_BUFFER_WPOS
.38432c	90 02		bcc $384330	                BCC read_buff           ; Yes: a key is present, read it
.38432e	80 e4		bra $384314	                BRA get_wait            ; Otherwise, keep waiting
.384330	78		sei		read_buff       SEI                     ; Don't interrupt me!
.384331	b5 00		lda $0f00,x	                LDA KEY_BUFFER,X        ; Get the key
.384333	e8		inx		                INX                     ; And move to the next key
.384334	e4 8d		cpx $0f8d	                CPX KEY_BUFFER_WPOS     ; Did we just read the last key?
.384336	f0 07		beq $38433f	                BEQ reset_indexes       ; Yes: return to 0 position
.384338	86 8b		stx $0f8b	                STX KEY_BUFFER_RPOS     ; Otherwise: Update the read index
.38433a	58		cli		                CLI
.38433b	28		plp		done            PLP                     ; Restore status and interrupts
.38433c	2b		pld		                PLD
.38433d	fa		plx		                PLX
.38433e	6b		rtl		                RTL
.38433f	64 8b		stz $0f8b	reset_indexes   STZ KEY_BUFFER_RPOS     ; Reset read index to the beginning
.384341	64 8d		stz $0f8d	                STZ KEY_BUFFER_WPOS     ; Reset the write index to the beginning
.384343	80 f6		bra $38433b	                BRA done

;******  Return to file: src\kernel.asm


;******  Processing file: src\uart.asm

=$af13f8				UART1_BASE = $AF13F8        ; Base address for UART 1 (COM1)
=$af12f8				UART2_BASE = $AF12F8        ; Base address for UART 2 (COM2)
=$00					UART_TRHB = $00             ; Transmit/Receive Hold Buffer
=$00					UART_DLL = UART_TRHB        ; Divisor Latch Low Byte
=$01					UART_DLH = $01              ; Divisor Latch High Byte
=$01					UART_IER = UART_DLH         ; Interupt Enable Register
=$02					UART_FCR = $02              ; FIFO Control Register
=$02					UART_IIR = UART_FCR         ; Interupt Indentification Register
=$03					UART_LCR = $03              ; Line Control Register
=$04					UART_MCR = $04              ; Modem Control REgister
=$05					UART_LSR = $05              ; Line Status Register
=$06					UART_MSR = $06              ; Modem Status Register
=$07					UART_SR = $07               ; Scratch Register
=$20					UINT_LOW_POWER = $20        ; Enable Low Power Mode (16750)
=$10					UINT_SLEEP_MODE = $10       ; Enable Sleep Mode (16750)
=$08					UINT_MODEM_STATUS = $08     ; Enable Modem Status Interrupt
=$04					UINT_LINE_STATUS = $04      ; Enable Receiver Line Status Interupt
=$02					UINT_THR_EMPTY = $02        ; Enable Transmit Holding Register Empty interrupt
=$01					UINT_DATA_AVAIL = $01       ; Enable Recieve Data Available interupt
=$80					IIR_FIFO_ENABLED = $80      ; FIFO is enabled
=$40					IIR_FIFO_NONFUNC = $40      ; FIFO is not functioning
=$20					IIR_FIFO_64BYTE = $20       ; 64 byte FIFO enabled (16750)
=$00					IIR_MODEM_STATUS = $00      ; Modem Status Interrupt
=$02					IIR_THR_EMPTY = $02         ; Transmit Holding Register Empty Interrupt
=$04					IIR_DATA_AVAIL = $04        ; Data Available Interrupt
=$06					IIR_LINE_STATUS = $06       ; Line Status Interrupt
=$0c					IIR_TIMEOUT = $0C           ; Time-out Interrupt (16550 and later)
=$01					IIR_INTERRUPT_PENDING = $01 ; Interrupt Pending Flag
=$80					LCR_DLB = $80               ; Divisor Latch Access Bit
=$60					LCR_SBE = $60               ; Set Break Enable
=$00					LCR_PARITY_NONE = $00       ; Parity: None
=$08					LCR_PARITY_ODD = $08        ; Parity: Odd
=$18					LCR_PARITY_EVEN = $18       ; Parity: Even
=$28					LCR_PARITY_MARK = $28       ; Parity: Mark
=$38					LCR_PARITY_SPACE = $38      ; Parity: Space
=$00					LCR_STOPBIT_1 = $00         ; One Stop Bit
=$04					LCR_STOPBIT_2 = $04         ; 1.5 or 2 Stop Bits
=$00					LCR_DATABITS_5 = $00        ; Data Bits: 5
=$01					LCR_DATABITS_6 = $01        ; Data Bits: 6
=$02					LCR_DATABITS_7 = $02        ; Data Bits: 7
=$03					LCR_DATABITS_8 = $03        ; Data Bits: 8
=$80					LSR_ERR_RECIEVE = $80       ; Error in Received FIFO
=$40					LSR_XMIT_DONE = $40         ; All data has been transmitted
=$20					LSR_XMIT_EMPTY = $20        ; Empty transmit holding register
=$10					LSR_BREAK_INT = $10         ; Break interrupt
=$08					LSR_ERR_FRAME = $08         ; Framing error
=$04					LSR_ERR_PARITY = $04        ; Parity error
=$02					LSR_ERR_OVERRUN = $02       ; Overrun error
=$01					LSR_DATA_AVAIL = $01        ; Data is ready in the receive buffer
=384					UART_300 = 384              ; Code for 300 bps
=96					UART_1200 = 96              ; Code for 1200 bps
=48					UART_2400 = 48              ; Code for 2400 bps
=24					UART_4800 = 24              ; Code for 4800 bps
=12					UART_9600 = 12              ; Code for 9600 bps
=6					UART_19200 = 6              ; Code for 19200 bps
=3					UART_38400 = 3              ; Code for 28400 bps
=2					UART_57600 = 2              ; Code for 57600 bps
=1					UART_115200 = 1             ; Code for 115200 bps
.384345					UART_SELECT
.384345	08		php		            PHP
.384346	c2 20		rep #$20	                REP #$20        ; set A long
.384348	c9 02 00	cmp #$0002	            CMP #2
.38434b	f0 07		beq $384354	            BEQ is_COM2
.38434d	c2 20		rep #$20	                REP #$20        ; set A long
.38434f	a9 f8 13	lda #$13f8	            LDA #<>UART1_BASE
.384352	80 05		bra $384359	            BRA setaddr
.384354					is_COM2
.384354	c2 20		rep #$20	                REP #$20        ; set A long
.384356	a9 f8 12	lda #$12f8	            LDA #<>UART2_BASE
.384359	8f 00 07 00	sta $000700	setaddr     STA @lCURRUART
.38435d	e2 20		sep #$20	                SEP #$20        ; set A short
.38435f	a9 af		lda #$af	            LDA #`UART1_BASE
.384361	8f 02 07 00	sta $000702	            STA @lCURRUART+2
.384365	28		plp		            PLP
.384366	6b		rtl		            RTL
.384367					UART_SETBPS
.384367	08		php		            PHP
.384368	0b		phd		            PHD
.384369	48		pha		                PHA             ; begin setdp macro
.38436a	08		php		                PHP
.38436b	c2 20		rep #$20	                REP #$20        ; set A long
.38436d	a9 00 07	lda #$0700	                LDA #CURRUART         ; set DP to page 0
.384370	5b		tcd		                TCD
.384371	28		plp		                PLP
.384372	68		pla		                PLA             ; end setdp macro
.384373	c2 30		rep #$30	                REP #$30        ; set A&X long
.384375	48		pha		            PHA
.384376	e2 20		sep #$20	                SEP #$20        ; set A short
.384378	a0 03 00	ldy #$0003	            LDY #UART_LCR       ; Enable divisor latch
.38437b	b7 00		lda [$0700],y	            LDA [CURRUART],Y
.38437d	09 80		ora #$80	            ORA #LCR_DLB
.38437f	97 00		sta [$0700],y	            STA [CURRUART],Y
.384381	c2 20		rep #$20	                REP #$20        ; set A long
.384383	68		pla		            PLA
.384384	a0 00 00	ldy #$0000	            LDY #UART_DLL
.384387	97 00		sta [$0700],y	            STA [CURRUART],Y    ; Save the divisor to the UART
.384389	e2 20		sep #$20	                SEP #$20        ; set A short
.38438b	a0 03 00	ldy #$0003	            LDY #UART_LCR       ; Disable divisor latch
.38438e	b7 00		lda [$0700],y	            LDA [CURRUART],Y
.384390	49 80		eor #$80	            EOR #LCR_DLB
.384392	97 00		sta [$0700],y	            STA [CURRUART],Y
.384394	2b		pld		            PLD
.384395	28		plp		            PLP
.384396	6b		rtl		            RTL
.384397					UART_SETLCR
.384397	08		php		            PHP
.384398	0b		phd		            PHD
.384399	48		pha		                PHA             ; begin setdp macro
.38439a	08		php		                PHP
.38439b	c2 20		rep #$20	                REP #$20        ; set A long
.38439d	a9 00 07	lda #$0700	                LDA #CURRUART         ; set DP to page 0
.3843a0	5b		tcd		                TCD
.3843a1	28		plp		                PLP
.3843a2	68		pla		                PLA             ; end setdp macro
.3843a3	e2 20		sep #$20	                SEP #$20        ; set A short
.3843a5	c2 10		rep #$10	                REP #$10        ; set X long
.3843a7	29 7f		and #$7f	            AND #$7F            ; We don't want to alter divisor latch
.3843a9	a0 03 00	ldy #$0003	            LDY #UART_LCR
.3843ac	97 00		sta [$0700],y	            STA [CURRUART],Y
.3843ae	2b		pld		            PLD
.3843af	28		plp		            PLP
.3843b0	6b		rtl		            RTL
.3843b1					UART_INIT
.3843b1	08		php		            PHP
.3843b2	0b		phd		            PHD
.3843b3	c2 30		rep #$30	                REP #$30        ; set A&X long
.3843b5	48		pha		                PHA             ; begin setdp macro
.3843b6	08		php		                PHP
.3843b7	c2 20		rep #$20	                REP #$20        ; set A long
.3843b9	a9 00 07	lda #$0700	                LDA #CURRUART         ; set DP to page 0
.3843bc	5b		tcd		                TCD
.3843bd	28		plp		                PLP
.3843be	68		pla		                PLA             ; end setdp macro
.3843bf	a9 01 00	lda #$0001	            LDA #UART_115200
.3843c2	22 67 43 38	jsl $384367	            JSL UART_SETBPS
.3843c6	e2 20		sep #$20	                SEP #$20        ; set A short
.3843c8	a9 03		lda #$03	            LDA #LCR_PARITY_NONE | LCR_STOPBIT_1 | LCR_DATABITS_8
.3843ca	22 97 43 38	jsl $384397	            JSL UART_SETLCR
.3843ce	a9 e1		lda #$e1	            LDA #%11100001
.3843d0	a0 02 00	ldy #$0002	            LDY #UART_FCR
.3843d3	97 00		sta [$0700],y	            STA [CURRUART],Y
.3843d5	2b		pld		            PLD
.3843d6	28		plp		            PLP
.3843d7	6b		rtl		            RTL
.3843d8					UART_HASBYT
.3843d8	08		php		            PHP
.3843d9	0b		phd		            PHD
.3843da	c2 30		rep #$30	                REP #$30        ; set A&X long
.3843dc	48		pha		                PHA             ; begin setdp macro
.3843dd	08		php		                PHP
.3843de	c2 20		rep #$20	                REP #$20        ; set A long
.3843e0	a9 00 07	lda #$0700	                LDA #CURRUART         ; set DP to page 0
.3843e3	5b		tcd		                TCD
.3843e4	28		plp		                PLP
.3843e5	68		pla		                PLA             ; end setdp macro
.3843e6	e2 20		sep #$20	                SEP #$20        ; set A short
.3843e8	a0 05 00	ldy #$0005	            LDY #UART_LSR           ; Check the receive FIFO
.3843eb	b7 00		lda [$0700],y	wait_putc   LDA [CURRUART],Y
.3843ed	29 01		and #$01	            AND #LSR_DATA_AVAIL
.3843ef	d0 04		bne $3843f5	            BNE ret_true            ; If flag is set, return true
.3843f1	2b		pld		ret_false   PLD                     ; Return false
.3843f2	28		plp		            PLP
.3843f3	18		clc		            CLC
.3843f4	6b		rtl		            RTL
.3843f5	2b		pld		ret_true    PLD                     ; Return true
.3843f6	28		plp		            PLP
.3843f7	38		sec		            SEC
.3843f8	6b		rtl		            RTL
.3843f9					UART_GETC
.3843f9	08		php		            PHP
.3843fa	0b		phd		            PHD
.3843fb	c2 30		rep #$30	                REP #$30        ; set A&X long
.3843fd	48		pha		                PHA             ; begin setdp macro
.3843fe	08		php		                PHP
.3843ff	c2 20		rep #$20	                REP #$20        ; set A long
.384401	a9 00 07	lda #$0700	                LDA #CURRUART         ; set DP to page 0
.384404	5b		tcd		                TCD
.384405	28		plp		                PLP
.384406	68		pla		                PLA             ; end setdp macro
.384407	e2 20		sep #$20	                SEP #$20        ; set A short
.384409	a0 05 00	ldy #$0005	            LDY #UART_LSR           ; Check the receive FIFO
.38440c	b7 00		lda [$0700],y	wait_getc   LDA [CURRUART],Y
.38440e	29 01		and #$01	            AND #LSR_DATA_AVAIL
.384410	f0 fa		beq $38440c	            BEQ wait_getc           ; If the flag is clear, wait
.384412	a0 00 00	ldy #$0000	            LDY #UART_TRHB          ; Get the byte from the receive FIFO
.384415	b7 00		lda [$0700],y	            LDA [CURRUART],Y
.384417	2b		pld		            PLD
.384418	28		plp		            PLP
.384419	6b		rtl		            RTL
.38441a					UART_PUTC
.38441a	08		php		            PHP
.38441b	0b		phd		            PHD
.38441c	c2 30		rep #$30	                REP #$30        ; set A&X long
.38441e	48		pha		                PHA             ; begin setdp macro
.38441f	08		php		                PHP
.384420	c2 20		rep #$20	                REP #$20        ; set A long
.384422	a9 00 07	lda #$0700	                LDA #CURRUART         ; set DP to page 0
.384425	5b		tcd		                TCD
.384426	28		plp		                PLP
.384427	68		pla		                PLA             ; end setdp macro
.384428	e2 20		sep #$20	                SEP #$20        ; set A short
.38442a	48		pha		            PHA                     ; Wait for the transmit FIFO to free up
.38442b	a0 05 00	ldy #$0005	            LDY #UART_LSR
.38442e	b7 00		lda [$0700],y	wait_putc   LDA [CURRUART],Y
.384430	29 20		and #$20	            AND #LSR_XMIT_EMPTY
.384432	f0 fa		beq $38442e	            BEQ wait_putc
.384434	68		pla		            PLA
.384435	a0 00 00	ldy #$0000	            LDY #UART_TRHB
.384438	97 00		sta [$0700],y	            STA [CURRUART],Y
.38443a	2b		pld		            PLD
.38443b	28		plp		            PLP
.38443c	6b		rtl		            RTL
.38443d					UART_PUTS
.38443d	08		php		            PHP
.38443e	e2 20		sep #$20	                SEP #$20        ; set A short
.384440	bd 00 00	lda $380000,x	put_loop    LDA #0,B,X
.384443	f0 07		beq $38444c	            BEQ done
.384445	22 1a 44 38	jsl $38441a	            JSL UART_PUTC
.384449	e8		inx		            INX
.38444a	80 f4		bra $384440	            BRA put_loop
.38444c	28		plp		done        PLP
.38444d	6b		rtl		            RTL
.38444e					UART_PUTHEX
.38444e	08		php		            PHP
.38444f	48		pha		            PHA               ; save the value before converting the High part into ASCII
.384450	4a		lsr a		            LSR A             ; Extracting the high part of the byte
.384451	4a		lsr a		            LSR A
.384452	4a		lsr a		            LSR A
.384453	4a		lsr a		            LSR A
.384454	29 0f		and #$0f	            AND #$F
.384456	aa		tax		            LDX A
.384457	bf 44 1d 39	lda $391d44,x	            LDA hex_digits,x
.38445b	a2 00 00	ldx #$0000	            LDX #0
.38445e	22 1a 44 38	jsl $38441a	            JSL UART_PUTC
.384462	68		pla		            PLA             ; get the original value out of the stack
.384463	29 0f		and #$0f	            AND #$F         ; Extracting the low part of the byte
.384465	aa		tax		            LDX A
.384466	bf 44 1d 39	lda $391d44,x	            LDA hex_digits,x
.38446a	a2 00 00	ldx #$0000	            LDX #0
.38446d	22 1a 44 38	jsl $38441a	            JSL UART_PUTC
.384471	28		plp		            PLP
.384472	6b		rtl		            RTL
.384473					UART_PUTHEX_2
.384473	08		php		            PHP
.384474	c2 30		rep #$30	                REP #$30        ; set A&X long
.384476	da		phx		            PHX
.384477	48		pha		            PHA             ; save the value before converting the High part into ASCII
.384478	a9 00 00	lda #$0000	            LDA #$0
.38447b	e2 20		sep #$20	                SEP #$20        ; set A short
.38447d	a3 01		lda $01,s	            LDA #1, S       ; get the original value out of the stack
.38447f	4a		lsr a		            LSR A             ; Extracting the high part of the byte
.384480	4a		lsr a		            LSR A
.384481	4a		lsr a		            LSR A
.384482	4a		lsr a		            LSR A
.384483	29 0f		and #$0f	            AND #$F
.384485	aa		tax		            LDX A
.384486	bf 44 1d 39	lda $391d44,x	            LDA hex_digits,x
.38448a	a2 00 00	ldx #$0000	            LDX #$0
.38448d	22 1a 44 38	jsl $38441a	            JSL UART_PUTC
.384491	a3 01		lda $01,s	            LDA #1, S       ; get the original value out of the stack
.384493	29 0f		and #$0f	            AND #$F         ; Extracting the low part of the byte
.384495	aa		tax		            LDX A
.384496	bf 44 1d 39	lda $391d44,x	            LDA hex_digits,x
.38449a	a2 00 00	ldx #$0000	            LDX #$0
.38449d	22 1a 44 38	jsl $38441a	            JSL UART_PUTC
.3844a1	c2 30		rep #$30	                REP #$30        ; set A&X long
.3844a3	68		pla		            PLA
.3844a4	fa		plx		            PLX
.3844a5	28		plp		            PLP
.3844a6	6b		rtl		            RTL

;******  Return to file: src\kernel.asm


;******  Processing file: src\joystick.asm

.3844a7					JOYSTICK_SET_NES_MODE
.3844a7	e2 20		sep #$20	                SEP #$20        ; set A short
.3844a9	af 04 e8 af	lda $afe804	          LDA JOYSTICK_MODE
.3844ad	29 fb		and #$fb	          AND #~NES_SNES_JOY  ; 0 = NES (8 bit shift)
.3844af	8f 04 e8 af	sta $afe804	          STA JOYSTICK_MODE
.3844b3	6b		rtl		          RTL
.3844b4					JOYSTICK_SET_SNES_MODE
.3844b4	e2 20		sep #$20	                SEP #$20        ; set A short
.3844b6	af 04 e8 af	lda $afe804	          LDA JOYSTICK_MODE
.3844ba	29 fb		and #$fb	          AND #~NES_SNES_JOY
.3844bc	09 04		ora #$04	          ORA #NES_SNES_JOY   ; 1 = SNES (12 Bit Shift)
.3844be	8f 04 e8 af	sta $afe804	          STA JOYSTICK_MODE
.3844c2	6b		rtl		          RTL
.3844c3					JOYSTICK_ENABLE_NES_SNES_PORT0
.3844c3	e2 20		sep #$20	                SEP #$20        ; set A short
.3844c5	af 04 e8 af	lda $afe804	          LDA JOYSTICK_MODE
.3844c9	29 fe		and #$fe	          AND #~NES_SNES_EN0
.3844cb	09 01		ora #$01	          ORA #NES_SNES_EN0
.3844cd	8f 04 e8 af	sta $afe804	          STA JOYSTICK_MODE
.3844d1	6b		rtl		          RTL
.3844d2					JOYSTICK_ENABLE_NES_SNES_PORT1
.3844d2	e2 20		sep #$20	                SEP #$20        ; set A short
.3844d4	af 04 e8 af	lda $afe804	          LDA JOYSTICK_MODE
.3844d8	29 fd		and #$fd	          AND #~NES_SNES_EN1
.3844da	09 02		ora #$02	          ORA #NES_SNES_EN1
.3844dc	8f 04 e8 af	sta $afe804	          STA JOYSTICK_MODE
.3844e0	6b		rtl		          RTL
.3844e1					JOYSTICK_DISABLE_NES_SNES_PORT0
.3844e1	e2 20		sep #$20	                SEP #$20        ; set A short
.3844e3	af 04 e8 af	lda $afe804	          LDA JOYSTICK_MODE
.3844e7	29 fe		and #$fe	          AND #~NES_SNES_EN0
.3844e9	8f 04 e8 af	sta $afe804	          STA JOYSTICK_MODE
.3844ed	6b		rtl		          RTL
.3844ee					JOYSTICK_DISABLE_NES_SNES_PORT1
.3844ee	e2 20		sep #$20	                SEP #$20        ; set A short
.3844f0	af 04 e8 af	lda $afe804	          LDA JOYSTICK_MODE
.3844f4	29 fd		and #$fd	          AND #~NES_SNES_EN1
.3844f6	8f 04 e8 af	sta $afe804	          STA JOYSTICK_MODE
.3844fa	6b		rtl		          RTL
.3844fb					JOYSTICK_NES_SNES_TRIG_WITH_POLL
.3844fb	e2 20		sep #$20	                SEP #$20        ; set A short
.3844fd	af 04 e8 af	lda $afe804	          LDA JOYSTICK_MODE
.384501	29 03		and #$03	          AND #(NES_SNES_EN0 | NES_SNES_EN1)
.384503	c9 00		cmp #$00	          CMP #$00
.384505	f0 14		beq $38451b	          BEQ END_OF_JOYSTICK_POLL
.384507	af 04 e8 af	lda $afe804	          LDA JOYSTICK_MODE
.38450b	09 80		ora #$80	          ORA #NES_SNES_TRIG   ; Set to 1 (Will auto Clear)
.38450d	8f 04 e8 af	sta $afe804	          STA JOYSTICK_MODE
.384511					JOYSTICK_POLLING_ISNOTOVER
.384511	af 04 e8 af	lda $afe804	          LDA JOYSTICK_MODE ;
.384515	29 40		and #$40	          AND #NES_SNES_DONE
.384517	c9 40		cmp #$40	          CMP #NES_SNES_DONE
.384519	d0 f6		bne $384511	          BNE JOYSTICK_POLLING_ISNOTOVER
.38451b					END_OF_JOYSTICK_POLL
.38451b	6b		rtl		          RTL

;******  Return to file: src\kernel.asm


;******  Processing file: src\FAT32.asm


;******  Processing file: src\FAT32_def.asm

=$10000					FAT32_DATA_ADDRESS_BUFFER_512 = $10000         ; RAM address where to store the sector of file data
=$10200					FAT32_FAT_ADDRESS_BUFFER_512 = $10200          ; RAM address where to store the sector of the fat
=$10400					FAT32_FOLDER_ADDRESS_BUFFER_512 = $10400       ; RAM address where to store the sector of the dirrectory data
=$10600					FAT32_LONG_FILE_NAME_BUFFER_256 = $10600       ; RAM address where to store the long file name
=$10700					FAT32_LONG_FILE_NAME_BUFFER_pointer = $10700
=255					FAT32_LONG_FILE_NAME_MAX_LENGHT = 255 ; 512 character
=$01be					MBR_Partition_Entry = $01BE           ; beginning of the 4 16Byte partition entry block
=16					MBR_Partition_Entry_size = 16         ; in Byte
=#$8					MBR_Partition_LBA_Adress = #$8
=#$1					FAT32_SD = #$1
=#$2					FAT32_HDD = #$2
=#$3					FAT32_FDD = #$3

;******  Return to file: src\FAT32.asm


;******  Processing file: src\SDCard_Controller_def.asm

=$afea00				SDC_VERSION_REG         = $AFEA00    ; Ought to read 12
=$afea01				SDC_CONTROL_REG         = $AFEA01    ; Bit0 1 = Reset core logic, and registers. Self clearing
=$afea02				SDC_TRANS_TYPE_REG      = $AFEA02  ; Bit[1:0]
=$00					SDC_TRANS_DIRECT      = $00   ; 00 = Direct Access
=$01					SDC_TRANS_INIT_SD     = $01   ; 01 = Init SD
=$02					SDC_TRANS_READ_BLK    = $02   ; 10 = RW_READ_BLOCK (512 Bytes)
=$03					SDC_TRANS_WRITE_BLK   = $03   ; 11 = RW_WRITE_SD_BLOCK
=$afea03				SDC_TRANS_CONTROL_REG   = $AFEA03
=$01					SDC_TRANS_START         = $01
=$afea04				SDC_TRANS_STATUS_REG    = $AFEA04
=$01					SDC_TRANS_BUSY          = $01     ;  1= Transaction Busy
=$afea05				SDC_TRANS_ERROR_REG     = $AFEA05
=$00					SDC_TRANS_INIT_NO_ERR   = $00   ; Init Error Report [1:0]
=$01					SDC_TRANS_INIT_CMD0_ERR = $01
=$02					SDC_TRANS_INIT_CMD1_ERR = $02
=$00					SDC_TRANS_RD_NO_ERR     = $00   ; Read Error Report [3:2]
=$04					SDC_TRANS_RD_CMD_ERR    = $04
=$08					SDC_TRANS_RD_TOKEN_ERR  = $08
=$00					SDC_TRANS_WR_NO_ERR     = $00   ; Write Report Error  [5:4]
=$10					SDC_TRANS_WR_CMD_ERR    = $10   ;
=$20					SDC_TRANS_WR_DATA_ERR   = $20
=$30					SDC_TRANS_WR_BUSY_ERR   = $30
=$afea06				SDC_DIRECT_ACCESS_REG   = $AFEA06 ; SPI Direct Read and Write - Set DATA before initiating direct Access Transaction
=$afea07				SDC_SD_ADDR_7_0_REG     = $AFEA07 ; Set the ADDR before a block read or block write
=$afea08				SDC_SD_ADDR_15_8_REG    = $AFEA08 ; Addr0 [8:0] Always should be 0, since each block is 512Bytes
=$afea09				SDC_SD_ADDR_23_16_REG   = $AFEA09
=$afea0a				SDC_SD_ADDR_31_24_REG   = $AFEA0A
=$afea0b				SDC_SPI_CLK_DEL_REG     = $AFEA0B
=$afea10				SDC_RX_FIFO_DATA_REG    = $AFEA10 ; Data from the Block Read
=$afea12				SDC_RX_FIFO_DATA_CNT_HI = $AFEA12 ; How many Bytes in the FIFO HI
=$afea13				SDC_RX_FIFO_DATA_CNT_LO = $AFEA13 ; How many Bytes in the FIFO LO
=$afea14				SDC_RX_FIFO_CTRL_REG    = $AFEA14 ; Bit0  Force Empty - Set to 1 to clear FIFO, self clearing (the bit)
=$afea20				SDC_TX_FIFO_DATA_REG    = $AFEA20 ; Write Data Block here
=$afea24				SDC_TX_FIFO_CTRL_REG    = $AFEA24 ; Bit0  Force Empty - Set to 1 to clear FIFO, self clearing (the bit)

;******  Return to file: src\FAT32.asm


;******  Processing file: src\stdlib.asm

.38451c	22 25 45 38	jsl $384525	IPRINT_ABS      JSL IPUTS_ABS
.384520	22 1a 0d 39	jsl $390d1a	                JSL IPRINTCR
.384524	6b		rtl		                RTL
.384525	48		pha		IPUTS_ABS       PHA
.384526	08		php		                PHP
.384527	e2 20		sep #$20	                SEP #$20        ; set A short
.384529	c2 10		rep #$10	                REP #$10        ; set X long
.38452b	8f 32 45 38	sta $384532	                STA @l LDA_instruction+3
.38452f	bf 00 00 ff	lda $ff0000,x	LDA_instruction:LDA @l $FF0000,X      ; read from the string
.384533	c9 00		cmp #$00	                CMP #0
.384535	f0 07		beq $38453e	                BEQ iputs_done_ABS
.384537	22 f4 0b 39	jsl $390bf4	iputs2_ABS      JSL IPUTC
.38453b	e8		inx		iputs3_ABS      INX
.38453c	80 f1		bra $38452f	                BRA LDA_instruction
.38453e	e8		inx		iputs_done_ABS  INX
.38453f	28		plp		                PLP
.384540	68		pla		                PLA
.384541	6b		rtl		                RTL
.384542					IPRINT_HEX
.384542	08		php		            PHP
.384543	c2 30		rep #$30	                REP #$30        ; set A&X long
.384545	da		phx		            PHX
.384546	48		pha		            PHA             ; save the value before converting the High part into ASCII
.384547	a9 00 00	lda #$0000	            LDA #$0
.38454a	e2 20		sep #$20	                SEP #$20        ; set A short
.38454c	a3 01		lda $01,s	            LDA #1, S       ; get the original value out of the stack
.38454e	4a		lsr a		            LSR A             ; Extracting the high part of the byte
.38454f	4a		lsr a		            LSR A
.384550	4a		lsr a		            LSR A
.384551	4a		lsr a		            LSR A
.384552	29 0f		and #$0f	            AND #$F
.384554	aa		tax		            LDX A
.384555	bf 70 45 38	lda $384570,x	            LDA @l hex_digits_stdlib,x
.384559	22 f4 0b 39	jsl $390bf4	            JSL IPUTC
.38455d	a3 01		lda $01,s	            LDA #1, S       ; get the original value out of the stack
.38455f	29 0f		and #$0f	            AND #$F         ; Extracting the low part of the byte
.384561	aa		tax		            LDX A
.384562	bf 70 45 38	lda $384570,x	            LDA @l hex_digits_stdlib,x
.384566	22 f4 0b 39	jsl $390bf4	            JSL IPUTC
.38456a	c2 30		rep #$30	                REP #$30        ; set A&X long
.38456c	68		pla		            PLA
.38456d	fa		plx		            PLX
.38456e	28		plp		            PLP
.38456f	6b		rtl		            RTL
>384570	30 31 32 33 34 35 36 37		hex_digits_stdlib      .text  "0123456789ABCDEF",0
>384578	38 39 41 42 43 44 45 46 00
.384581					SET_COLOUR
.384581	e2 20		sep #$20	                SEP #$20        ; set A short
.384583	8f 1e 00 00	sta $00001e	          STA @l CURCOLOR
.384587	c2 20		rep #$20	                REP #$20        ; set A long
.384589	6b		rtl		          RTL

;******  Return to file: src\FAT32.asm

>010800	00 00				FAT32_Byte_Per_Sector           .word 0; 512 for a Floppy disk
>010802	00 00				FAT32_Sector_Per_Cluster        .word 0; 1
>010804	00 00				FAT32_Nb_Of_reserved_Cluster    .word 0; 1 , this number include the boot sector
>010806	00 00				FAT32_Nb_Of_FAT                 .word 0; 2
>010808	00 00				FAT32_Max_Root_Entry            .word 0; not used in FAT32
>01080a	00 00				FAT32_Total_Sector_Count        .word 0; 2880 => 80 track of 18 sector on each 2 dide (80*18*2)
>01080c	00 00 00 00			FAT32_Sector_per_Fat            .dword 0
>010810	00 00				FAT32_Sector_per_Track          .word 0
>010812	00 00				FAT32_Nb_of_Head                .word 0
>010814	00 00 00 00			FAT32_Nb_Of_Sector_In_Partition .dword 0
>010818	00 00				FAT32_Boot_Signature            .word 0
>01081a	00 00 00 00			FAT32_Volume_ID                 .dword 0
>01081e	00 00 00 00 00 00 00 00		FAT32_Volume_Label              .fill 11,0 ;0xB
>010826	00 00 00
>010829	00 00				FAT32_File_System_Type          .word 0
>01082b	00 00 00 00			FAT32_Sector_loaded_in_ram      .dword 0; updated by any function readding Sector from FDD like : IFAT32_READ_BOOT_SECTOR / IFAT32_COMPUT_ROOT_DIR_POS
>01082f	00 00 00 00			FAT32_Root_Sector_offset        .dword 0; hold the ofset in cluster of the first root dirrectory in the fat
>010833	00 00 00 00			FAT32_Root_Base_Sector          .dword 0; hold the first sector containing the Root directory data
>010837	00 00 00 00			FAT32_Curent_Directory_Sector_loaded_in_ram .dword 0  ; store the actual Folder sector loades in ram
>01083b	00 00 00 00 00 00 00 00		FAT32_Curent_Directory_entry_value  .fill 32,0 ; store the 32 byte of root entry
>010843	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>010853	00 00 00 00 00 00 00 00
>01085b	20 20 20 20 20 20 20 20		FAT32_File_Directory_entry_Template    .text $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,  $00,       $00,$00,$00,$00,$00,$00,$00,$00, $00,$00,     $00,$00,$00,$00 ,$00,$00,     $00,$00,$00,$00; ; store the 32 byte of root entry
>010863	20 20 20 00 00 00 00 00 00 00 00 00 00 00 00 00
>010873	00 00 00 00 00 00 00 00
>01087b	20 20 20 20 20 20 20 20		FAT32_Folder_Directory_entry_Template  .text $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,  $10,       $00,$00,$00,$00,$00,$00,$00,$00, $00,$00,     $00,$00,$00,$00 ,$00,$00,     $00,$00,$00,$00; ; store the 32 byte of root entry
>010883	20 20 20 10 00 00 00 00 00 00 00 00 00 00 00 00
>010893	00 00 00 00 00 00 00 00
>01089b	40 20 00 20 00 20 00 20		FAT32_FLN_Directory_entry_Template     .text $40, $20,$00,$20,$00,$20,$00,$20,$00,$20,$00, $0F,      $5A, $20,$00,$20,$00,$20,$00,$20,$00,$20,$00,$20,$00,      $00 ,$00,$00,     $20,$00,$20,$00; ; store the 32 byte of root entry
>0108a3	00 20 00 0f 5a 20 00 20 00 20 00 20 00 20 00 20
>0108b3	00 00 00 00 20 00 20 00
>0108bb	00 00 00 00			FAT32_FAT_Base_Sector           .dword 0
>0108bf	00 00 00 00			FAT32_FAT_Sector_loaded_in_ram  .dword 0  ; store the actual FAT sector loades in ram
>0108c3	00 00 00 00			FAT32_FAT_Entry                 .dword 0
>0108c7	00 00 00 00			FAT32_FAT_Next_Entry            .dword 0  ; store the next 32 bit FAT entry associated to the FAT entry in 'FAT32_FAT_Entry'
>0108cb	00 00 00 00			FAT32_FAT_Linked_Entry          .dword 0
>0108cf	00 00 00 00			FAT32_FAT_Entry_Physical_Address .dword 0        ; Contain the phisical (from the cluster 0) address of the curent fat entry
>0108d3	00 00 00 00			FAT32_FAT_Entry_PhisicalL_Address_Next .dword 0   ; Contain the phisical (from the cluster 0) address of the next fat entry
>0108d7	00 00 00 00			FAT32_Data_Base_Sector          .dword 0  ; contain the sector index of the first data in the FAT volume (that include the reserved cluster after the fat) => used to convert from cluster count to fat index
>0108db	00 00 00 00			FAT_Partition_address           .dword 0 ; ofset of the curent FAT volume used
>0108df	00 00 00 00			FAT32_Curent_Folder_start_cluster   .dword 0 ; Hold the first cluster of a folder liste from the FAT perspective => real cluster  = FAT32_Curent_Folder_start_cluster + FAT32_Data_Base_Sector
>0108e3	00 00 00 00			FAT32_Curent_Folder_curent_cluster .dword 0
>0108e7	00 00 00 00			FAT32_Curent_File_Cluster   .dword 0 ; Hold the first cluster from the FAT perspective => real cluster  = FAT32_Curent_File_Cluster + FAT32_Data_Base_Sector
>0108eb	00 00 00 00			FAT32_Start_Of_The_file_Cluster .dword 0
>0108ef	00 00 00 00			FAT32_Temp_32_bite              .dword 0
>0108f3	00 00 00 00			FAT32_Sector_to_read            .dword 0
>0108f7	00 00				FAT32_SD_FDD_HDD_Sell           .word 0
>0108f9	48 41 4c 46 4c 49 46 45		file_to_load_fat_32    .text "HALFLIFEBIN",0
>010901	42 49 4e 00
>010905	54 45 53 54 46 49 4c 45		file_to_write_fat_32   .text "TESTFILETXT",0
>01090d	54 58 54 00
>010911	44 43 49 4d 20 20 20 20		folder_name_1          .text "DCIM       ",0
>010919	20 20 20 00
>01091d	31 30 30 44 33 31 30 30		folder_name_2          .text "100D3100   ",0
>010925	20 20 20 00
>010929	00 00 00 00			FAT32_counter_32              .dword 0
>01092d	00 00				debug_stop                      .word 0
.01092f					FAT32_init
.01092f	22 9c 0e 01	jsl $010e9c	              JSL IFAT32_READ_MBR             ; Init only
.010933	22 2e 0f 01	jsl $010f2e	              JSL IFAT32_READ_BOOT_SECTOR     ; Init only
.010937	22 ce 10 01	jsl $0110ce	              JSL IFAT32_COMPUT_FAT_POS       ; Init only
.01093b	22 8b 10 01	jsl $01108b	              JSL IFAT32_COMPUT_ROOT_DIR_POS  ; Init only
.01093f	22 58 10 01	jsl $011058	              JSL IFAT32_COMPUT_DATA_POS      ; Init only IFAT32_COMPUT_ROOT_DIR_POS need to bew caled before !!!
.010943	a9 00 00	lda #$0000	              LDA #0
.010946	8f 2b 08 01	sta $01082b	              STA FAT32_Sector_loaded_in_ram
.01094a	8f 37 08 01	sta $010837	              STA FAT32_Curent_Directory_Sector_loaded_in_ram
.01094e	8f bf 08 01	sta $0108bf	              STA FAT32_FAT_Sector_loaded_in_ram
.010952	a9 00 00	lda #$0000	              LDA #0
.010955	8f 2d 08 01	sta $01082d	              STA FAT32_Sector_loaded_in_ram+2
.010959	8f 39 08 01	sta $010839	              STA FAT32_Curent_Directory_Sector_loaded_in_ram+2
.01095d	8f c1 08 01	sta $0108c1	              STA FAT32_FAT_Sector_loaded_in_ram+2
.010961	af 2f 08 01	lda $01082f	              LDA FAT32_Root_Sector_offset
.010965	8f df 08 01	sta $0108df	              STA FAT32_Curent_Folder_start_cluster
.010969	af 31 08 01	lda $010831	              LDA FAT32_Root_Sector_offset+2
.01096d	8f e1 08 01	sta $0108e1	              STA FAT32_Curent_Folder_start_cluster+2
.010971	22 85 12 01	jsl $011285	              JSL IFAT32_GET_ROOT_DIRECTORY_ENTRY
.010975	6b		rtl		              RTL
.010976					FAT32_Open_Creat_Write_File
.010976	a2 00 00	ldx #$0000	              LDX #0
.010979	c2 10		rep #$10	                REP #$10        ; set X long
.01097b	e2 20		sep #$20	                SEP #$20        ; set A short
.01097d	a9 5a		lda #$5a	              LDA #$5A
.01097f					 LOOP_FILL_BUFFER:
.01097f	8a		txa		              TXA
.010980	9f 00 00 01	sta $010000,x	              STA @l FAT32_DATA_ADDRESS_BUFFER_512,x ; load the byte nb 3 (bank byte)
.010984	e8		inx		              INX
.010985	e0 00 02	cpx #$0200	              CPX #$200
.010988	d0 f5		bne $01097f	              BNE LOOP_FILL_BUFFER
.01098a	c2 30		rep #$30	                REP #$30        ; set A&X long
.01098c	a9 01 00	lda #$0001	              LDA #`FAT32_DATA_ADDRESS_BUFFER_512 ; load the byte nb 3 (bank byte)
.01098f	48		pha		              PHA
.010990	eb		xba		          XBA
.010991	22 42 45 38	jsl $384542	          JSL IPRINT_HEX
.010995	eb		xba		          XBA
.010996	22 42 45 38	jsl $384542	          JSL IPRINT_HEX
.01099a	a9 00 00	lda #$0000	              LDA #<>FAT32_DATA_ADDRESS_BUFFER_512 ; load the low world part of the buffer address
.01099d	48		pha		              PHA
.01099e	eb		xba		          XBA
.01099f	22 42 45 38	jsl $384542	          JSL IPRINT_HEX
.0109a3	eb		xba		          XBA
.0109a4	22 42 45 38	jsl $384542	          JSL IPRINT_HEX
.0109a8	a9 0d 00	lda #$000d	          LDA #$0D
.0109ab	22 f4 0b 39	jsl $390bf4	          JSL IPUTC
.0109af	a9 05 00	lda #$0005	              LDA #5
.0109b2	a2 00 00	ldx #$0000	              LDX #0
.0109b5	22 a0 14 01	jsl $0114a0	              JSL IFAT_WRITE_SECTOR
.0109b9	a9 04 00	lda #$0004	              LDA #4
.0109bc	a2 00 00	ldx #$0000	              LDX #0
.0109bf	22 a0 14 01	jsl $0114a0	              JSL IFAT_WRITE_SECTOR
.0109c3	a9 06 00	lda #$0006	              LDA #6
.0109c6	a2 00 00	ldx #$0000	              LDX #0
.0109c9	22 a0 14 01	jsl $0114a0	              JSL IFAT_WRITE_SECTOR
.0109cd	68		pla		              PLA
.0109ce	68		pla		              PLA
.0109cf	22 ab 0a 01	jsl $010aab	              JSL FAT32_DIR_CMD
.0109d3	a9 0d 00	lda #$000d	              LDA #$0D
.0109d6	22 f4 0b 39	jsl $390bf4	              JSL IPUTC
.0109da	a9 00 00	lda #$0000	              LDA #0
.0109dd	22 3d 0d 01	jsl $010d3d	              JSL FAT32_Open_Folder
.0109e1	22 ab 0a 01	jsl $010aab	              JSL FAT32_DIR_CMD
.0109e5	22 85 12 01	jsl $011285	              JSL IFAT32_GET_ROOT_DIRECTORY_ENTRY
.0109e9	22 ab 0a 01	jsl $010aab	              JSL FAT32_DIR_CMD
.0109ed	22 69 0c 01	jsl $010c69	              JSL FAT32_Open_File
.0109f1	c9 01 00	cmp #$0001	              CMP #1
.0109f4	22 bb 0b 01	jsl $010bbb	              JSL FAT32_Find_Free_Folder_Entry
.0109f8	48		pha		        PHA
.0109f9	eb		xba		        XBA
.0109fa	22 42 45 38	jsl $384542	        JSL IPRINT_HEX
.0109fe	eb		xba		        XBA
.0109ff	22 42 45 38	jsl $384542	        JSL IPRINT_HEX
.010a03	a9 0d 00	lda #$000d	        LDA #$0D
.010a06	22 f4 0b 39	jsl $390bf4	        JSL IPUTC
.010a0a	68		pla		        PLA
.010a0b	c9 00 00	cmp #$0000	              CMP #0
.010a0e	f0 04		beq $010a14	              BEQ FAT32_Open_Creat_Write_File__No_Free_folder_entry
.010a10	22 00 0c 01	jsl $010c00	              JSL FAT32_Write_File_Directory_entry
.010a14					 FAT32_Open_Creat_Write_File__No_Free_folder_entry:
.010a14					 FAT32_Open_Creat_Write_File__File_Opened_with_success:
.010a14	80 fe		bra $010a14	              fdffggd BRA fdffggd
.010a16	22 69 0c 01	jsl $010c69	              JSL FAT32_Open_File
.010a1a	c9 01 00	cmp #$0001	              CMP #1
.010a1d	6b		rtl		              RTL
.010a1e					FAT32_Open_Read_Display_File
.010a1e	a9 00 00	lda #$0000	              LDA #0
.010a21	22 85 12 01	jsl $011285	              JSL IFAT32_GET_ROOT_DIRECTORY_ENTRY
.010a25	a9 05 00	lda #$0005	              LDA #5
.010a28	8f c3 08 01	sta $0108c3	              STA FAT32_FAT_Entry
.010a2c	a9 00 00	lda #$0000	              LDA #0
.010a2f	8f c5 08 01	sta $0108c5	              STA FAT32_FAT_Entry+2
.010a33	22 74 13 01	jsl $011374	              JSL FAT32_IFAT_GET_FAT_ENTRY
.010a37	a9 0d 00	lda #$000d	              LDA #$0D
.010a3a	22 f4 0b 39	jsl $390bf4	              JSL IPUTC
.010a3e	22 ab 0a 01	jsl $010aab	              JSL FAT32_DIR_CMD
.010a42	a9 0d 00	lda #$000d	              LDA #$0D
.010a45	22 f4 0b 39	jsl $390bf4	              JSL IPUTC
.010a49	a9 1b 00	lda #$001b	              LDA #$001B
.010a4c	8f 92 17 01	sta $011792	              STA FAT32_Data_Destination_buffer+2
.010a50	a9 00 00	lda #$0000	              LDA #$0000
.010a53	8f 90 17 01	sta $011790	              STA FAT32_Data_Destination_buffer+0
.010a57	22 69 0c 01	jsl $010c69	              JSL FAT32_Open_File
.010a5b	c9 01 00	cmp #$0001	              CMP #1
.010a5e	d0 32		bne $010a92	              BNE FAT32_TEST__Faill_To_Find_file
.010a60					 loop_read_file:
.010a60	22 13 0e 01	jsl $010e13	              JSL FAT32_Read_File
.010a64	c9 00 00	cmp #$0000	              CMP #0
.010a67	f0 0a		beq $010a73	              BEQ Skip_enpty_data
.010a69	48		pha		              PHA
.010a6a	da		phx		              PHX
.010a6b	5a		phy		              PHY
.010a6c	22 94 17 01	jsl $011794	              JSL FAT32_Copy_Cluster_at_Address
.010a70	7a		ply		              PLY
.010a71	fa		plx		              PLX
.010a72	68		pla		              PLA
.010a73					 Skip_enpty_data
.010a73	c9 01 00	cmp #$0001	              CMP #1
.010a76	f0 e8		beq $010a60	              BEQ loop_read_file
.010a78	da		phx		              PHX
.010a79	48		pha		              PHA
.010a7a	a2 54 09	ldx #$0954	              LDX #<>TEXT__OPEN_FILE_SUCCESS
.010a7d	a9 02 00	lda #$0002	              LDA #`TEXT__OPEN_FILE_SUCCESS
.010a80	22 1c 45 38	jsl $38451c	              JSL IPRINT_ABS
.010a84	a2 f9 08	ldx #$08f9	              LDX #<>file_to_load_fat_32
.010a87	a9 01 00	lda #$0001	              LDA #`file_to_load_fat_32
.010a8a	22 1c 45 38	jsl $38451c	              JSL IPRINT_ABS
.010a8e	68		pla		              PLA
.010a8f	fa		plx		              PLX
.010a90	80 18		bra $010aaa	              BRA FAT32_TEST_END
.010a92					 FAT32_TEST__Faill_To_Find_file:
.010a92	da		phx		              PHX
.010a93	48		pha		              PHA
.010a94	a2 6b 09	ldx #$096b	              LDX #<>TEXT__CANT_FIND_THE_FILE
.010a97	a9 02 00	lda #$0002	              LDA #`TEXT__CANT_FIND_THE_FILE
.010a9a	22 1c 45 38	jsl $38451c	              JSL IPRINT_ABS
.010a9e	a2 f9 08	ldx #$08f9	              LDX #<>file_to_load_fat_32
.010aa1	a9 01 00	lda #$0001	              LDA #`file_to_load_fat_32
.010aa4	22 1c 45 38	jsl $38451c	              JSL IPRINT_ABS
.010aa8	68		pla		              PLA
.010aa9	fa		plx		              PLX
.010aaa					 FAT32_TEST_END:
.010aaa	6b		rtl		              RTL
.010aab					FAT32_DIR_CMD
.010aab	da		phx		                  PHX
.010aac	48		pha		                  PHA
.010aad	da		phx		 PHX
.010aae	48		pha		 PHA
.010aaf	a2 e3 0a	ldx #$0ae3	 LDX #<>TEXT_____DEBUG_START_DIR
.010ab2	a9 02 00	lda #$0002	 LDA #`TEXT_____DEBUG_START_DIR
.010ab5	22 1c 45 38	jsl $38451c	 JSL IPRINT_ABS
.010ab9	68		pla		 PLA
.010aba	fa		plx		 PLX
.010abb	a2 ff ff	ldx #$ffff	                  LDX #-1 ; start by readding the first folder entry
.010abe					 FAT32_DIR_CMD__Read_Next_Folder_Entry:
.010abe	e8		inx		                  INX
.010abf	8a		txa		                  TXA ; get the folder entry index
.010ac0	e0 ff ff	cpx #$ffff	                  CPX #$FFFF ; make sure we are not searching for ever
.010ac3	f0 02		beq $010ac7	                  BEQ FAT32_DIR_CMD__EXIT_TEMP
.010ac5	80 03		bra $010aca	                  BRA FAT32_DIR_CMD_149
.010ac7	82 da 00	brl $010ba4	 FAT32_DIR_CMD__EXIT_TEMP: BRL FAT32_DIR_CMD__EXIT
.010aca					 FAT32_DIR_CMD_149:
.010aca	22 95 12 01	jsl $011295	                  JSL IFAT32_GET_DIRECTORY_ENTRY ; JSL IFAT32_GET_ROOT_DIRECTORY_ENTRY
.010ace	af 46 08 01	lda $010846	                  LDA FAT32_Curent_Directory_entry_value +11
.010ad2	29 ff 00	and #$00ff	                  AND #$00FF
.010ad5	c9 0f 00	cmp #$000f	                  CMP #$0F ; test if it's a long name entry
.010ad8	f0 e4		beq $010abe	                  BEQ FAT32_DIR_CMD__Read_Next_Folder_Entry
.010ada	29 10 00	and #$0010	                  AND #$10
.010add	c9 10 00	cmp #$0010	                  CMP #$10 ;CMP #$20 ; if different from 0x20 its nor a file name entry (need to confirm that)
.010ae0	f0 6b		beq $010b4d	                  BEQ FAT32_DIR_CMD__print_folder
.010ae2	af 3b 08 01	lda $01083b	                  LDA FAT32_Curent_Directory_entry_value
.010ae6	29 ff 00	and #$00ff	                  AND #$00FF
.010ae9	c9 e5 00	cmp #$00e5	                  CMP #$E5 ; test if the entry is deleted
.010aec	f0 d0		beq $010abe	                  BEQ FAT32_DIR_CMD__Read_Next_Folder_Entry
.010aee	c9 00 00	cmp #$0000	                  CMP #$00 ; test if we reached the last entry in the folder
.010af1	f0 02		beq $010af5	                  BEQ FAT32_DIR_CMD__EXIT_TEMP_2
.010af3	80 03		bra $010af8	                  BRA FAT32_DIR_CMD_168
.010af5	82 ac 00	brl $010ba4	 FAT32_DIR_CMD__EXIT_TEMP_2: BRL FAT32_DIR_CMD__EXIT
.010af8					 FAT32_DIR_CMD_168:
.010af8	a9 00 00	lda #$0000	                  LDA #0
.010afb	8f 00 07 01	sta $010700	                  STA FAT32_LONG_FILE_NAME_BUFFER_pointer
.010aff	8a		txa		                  TXA ; get the folder entry index
.010b00	22 db 11 01	jsl $0111db	                  JSL IFAT32_GET_DIRECTORY_ENTRY_LONG_NAME
.010b04	48		pha		                  PHA
.010b05	a9 2d 00	lda #$002d	                  LDA #$2D                  ; Set the default text color to light gray on dark gray
.010b08	22 81 45 38	jsl $384581	                  JSL SET_COLOUR
.010b0c	a9 0d 00	lda #$000d	                  LDA #$0D
.010b0f	22 f4 0b 39	jsl $390bf4	                  JSL IPUTC
.010b13	68		pla		                  PLA
.010b14	c9 01 00	cmp #$0001	                  CMP #1
.010b17	f0 15		beq $010b2e	                  BEQ FAT32_DIR_CMD__Print_FLN_File_Name
.010b19	22 b7 18 01	jsl $0118b7	                  JSL FAT32_Print_File_Name
.010b1d	a9 0d 00	lda #$000d	                  LDA #$0D
.010b20	22 f4 0b 39	jsl $390bf4	                  JSL IPUTC
.010b24	a9 ed 00	lda #$00ed	                  LDA #$ED                  ; Set the default text color to light gray on dark gray
.010b27	22 81 45 38	jsl $384581	                  JSL SET_COLOUR
.010b2b	82 90 ff	brl $010abe	                  BRL FAT32_DIR_CMD__Read_Next_Folder_Entry
.010b2e					 FAT32_DIR_CMD__Print_FLN_File_Name:
.010b2e	da		phx		                  PHX
.010b2f	48		pha		                  PHA
.010b30	a2 00 06	ldx #$0600	                  LDX #<>FAT32_LONG_FILE_NAME_BUFFER_256
.010b33	a9 01 00	lda #$0001	                  LDA #`FAT32_LONG_FILE_NAME_BUFFER_256
.010b36	22 25 45 38	jsl $384525	                  JSL IPUTS_ABS
.010b3a	a9 0d 00	lda #$000d	                  LDA #$0D
.010b3d	22 f4 0b 39	jsl $390bf4	                  JSL IPUTC
.010b41	a9 ed 00	lda #$00ed	                  LDA #$ED                  ; Set the default text color to light gray on dark gray
.010b44	22 81 45 38	jsl $384581	                  JSL SET_COLOUR
.010b48	68		pla		                  PLA
.010b49	fa		plx		                  PLX
.010b4a	82 71 ff	brl $010abe	                  BRL FAT32_DIR_CMD__Read_Next_Folder_Entry
.010b4d					 FAT32_DIR_CMD__print_folder:
.010b4d	a9 00 00	lda #$0000	                  LDA #0
.010b50	8f 00 07 01	sta $010700	                  STA FAT32_LONG_FILE_NAME_BUFFER_pointer
.010b54	8a		txa		                  TXA ; get the folder entry index
.010b55	22 db 11 01	jsl $0111db	                  JSL IFAT32_GET_DIRECTORY_ENTRY_LONG_NAME
.010b59	48		pha		                  PHA ; save the FLN result
.010b5a	a9 8d 00	lda #$008d	                  LDA #$8D                  ; Set the default text color to light gray on dark gray
.010b5d	22 81 45 38	jsl $384581	                  JSL SET_COLOUR
.010b61	a9 0d 00	lda #$000d	                  LDA #$0D
.010b64	22 f4 0b 39	jsl $390bf4	                  JSL IPUTC
.010b68	68		pla		                  PLA
.010b69	c9 01 00	cmp #$0001	                  CMP #1
.010b6c	f0 17		beq $010b85	                  BEQ FAT32_DIR_CMD__Print_FLN_Folder_Name
.010b6e	48		pha		                  PHA ; save the FLN result
.010b6f	22 10 19 01	jsl $011910	                  JSL FAT32_Print_Folder_Name
.010b73	a9 0d 00	lda #$000d	                  LDA #$0D
.010b76	22 f4 0b 39	jsl $390bf4	                  JSL IPUTC
.010b7a	a9 ed 00	lda #$00ed	                  LDA #$ED                  ; Set the default text color to light gray on dark gray
.010b7d	22 81 45 38	jsl $384581	                  JSL SET_COLOUR
.010b81	68		pla		                  PLA
.010b82	82 39 ff	brl $010abe	                  BRL FAT32_DIR_CMD__Read_Next_Folder_Entry
.010b85					 FAT32_DIR_CMD__Print_FLN_Folder_Name:
.010b85	da		phx		                  PHX
.010b86	48		pha		                  PHA
.010b87	a2 00 06	ldx #$0600	                  LDX #<>FAT32_LONG_FILE_NAME_BUFFER_256
.010b8a	a9 01 00	lda #$0001	                  LDA #`FAT32_LONG_FILE_NAME_BUFFER_256
.010b8d	22 25 45 38	jsl $384525	                  JSL IPUTS_ABS
.010b91	a9 0d 00	lda #$000d	                  LDA #$0D
.010b94	22 f4 0b 39	jsl $390bf4	                  JSL IPUTC
.010b98	a9 ed 00	lda #$00ed	                  LDA #$ED                  ; Set the default text color to light gray on dark gray
.010b9b	22 81 45 38	jsl $384581	                  JSL SET_COLOUR
.010b9f	68		pla		                  PLA
.010ba0	fa		plx		                  PLX
.010ba1	82 1a ff	brl $010abe	                  BRL FAT32_DIR_CMD__Read_Next_Folder_Entry
.010ba4					 FAT32_DIR_CMD__EXIT:
.010ba4	da		phx		 PHX
.010ba5	48		pha		 PHA
.010ba6	a2 09 0b	ldx #$0b09	 LDX #<>TEXT_____DEBUG_END_DIR
.010ba9	a9 02 00	lda #$0002	 LDA #`TEXT_____DEBUG_END_DIR
.010bac	22 1c 45 38	jsl $38451c	 JSL IPRINT_ABS
.010bb0	68		pla		 PLA
.010bb1	fa		plx		 PLX
.010bb2	68		pla		                  PLA
.010bb3	fa		plx		                  PLX
.010bb4	6b		rtl		                  RTL
.010bb5					FAT32_Find_Free_Folder_Entry_From_Index
.010bb5	c2 30		rep #$30	                REP #$30        ; set A&X long
.010bb7	da		phx		                  PHX
.010bb8	aa		tax		                  TAX
.010bb9	80 14		bra $010bcf	                  BRA FAT32_Find_Free_Folder_Entry__Read_Next_Folder_Entry
.010bbb					FAT32_Find_Free_Folder_Entry
.010bbb	c2 30		rep #$30	                REP #$30        ; set A&X long
.010bbd	da		phx		                  PHX
.010bbe	a2 00 00	ldx #$0000	                  LDX #0 ; start by readding the first folder entry
.010bc1	da		phx		 PHX
.010bc2	48		pha		 PHA
.010bc3	a2 13 0c	ldx #$0c13	 LDX #<>TEXT_____DEBUG_START_Find_Free_Folder_Entry
.010bc6	a9 02 00	lda #$0002	 LDA #`TEXT_____DEBUG_START_Find_Free_Folder_Entry
.010bc9	22 1c 45 38	jsl $38451c	 JSL IPRINT_ABS
.010bcd	68		pla		 PLA
.010bce	fa		plx		 PLX
.010bcf					 FAT32_Find_Free_Folder_Entry__Read_Next_Folder_Entry:
.010bcf	8a		txa		                  TXA
.010bd0	e0 ff ff	cpx #$ffff	                  CPX #$FFFF ; make sure we are not searching for ever
.010bd3	f0 18		beq $010bed	                  BEQ FAT32_Find_Free_Folder_Entry__EXIT_TOO_MANY_FOLDER_ENTRY
.010bd5	22 95 12 01	jsl $011295	                  JSL IFAT32_GET_DIRECTORY_ENTRY
.010bd9	22 13 16 01	jsl $011613	                  JSL FAT32_GET_FOLDER_ENTRY_TYPE
.010bdd	c9 e5 00	cmp #$00e5	                  CMP #$E5 ; deleted folder entry
.010be0	f0 08		beq $010bea	                  BEQ FAT32_Find_Free_Folder_Entry__FIND_A_FILE_ENTRY
.010be2	c9 00 00	cmp #$0000	                  CMP #$00 ; new empty folder entry
.010be5	f0 03		beq $010bea	                  BEQ FAT32_Find_Free_Folder_Entry__FIND_A_FILE_ENTRY
.010be7	e8		inx		                  INC X
.010be8	80 e5		bra $010bcf	                  BRA FAT32_Find_Free_Folder_Entry__Read_Next_Folder_Entry
.010bea					 FAT32_Find_Free_Folder_Entry__FIND_A_FILE_ENTRY:
.010bea	8a		txa		                  TXA
.010beb	80 03		bra $010bf0	                  BRA FAT32_Find_Free_Folder_Entry__EXIT
.010bed					 FAT32_Find_Free_Folder_Entry__EXIT_TOO_MANY_FOLDER_ENTRY:
.010bed	a9 ff ff	lda #$ffff	                  LDA #-1
.010bf0					 FAT32_Find_Free_Folder_Entry__EXIT:
.010bf0	da		phx		  PHX
.010bf1	48		pha		  PHA
.010bf2	a2 39 0c	ldx #$0c39	  LDX #<>TEXT_____DEBUG_END_Find_Free_Folder_Entry
.010bf5	a9 02 00	lda #$0002	  LDA #`TEXT_____DEBUG_END_Find_Free_Folder_Entry
.010bf8	22 1c 45 38	jsl $38451c	  JSL IPRINT_ABS
.010bfc	68		pla		  PLA
.010bfd	fa		plx		  PLX
.010bfe	fa		plx		                  PLX
.010bff	6b		rtl		                  RTL
.010c00					FAT32_Write_File_Directory_entry
.010c00	c2 30		rep #$30	                REP #$30        ; set A&X long
.010c02	da		phx		PHX
.010c03	48		pha		PHA
.010c04	a2 5f 0c	ldx #$0c5f	LDX #<>TEXT_____DEBUG_START_Write_File_Directory_entry
.010c07	a9 02 00	lda #$0002	LDA #`TEXT_____DEBUG_START_Write_File_Directory_entry
.010c0a	22 1c 45 38	jsl $38451c	JSL IPRINT_ABS
.010c0e	68		pla		PLA
.010c0f	fa		plx		PLX
.010c10	48		pha		                  PHA
.010c11	a9 5b 08	lda #$085b	                  LDA #<>FAT32_File_Directory_entry_Template
.010c14	aa		tax		                  TAX
.010c15	a9 3b 08	lda #$083b	                  LDA #<>FAT32_Curent_Directory_entry_value
.010c18	a8		tay		                  TAY
.010c19	a9 1f 00	lda #$001f	                  LDA #31
.010c1c	54 01 01	mvn $01,$01	                  MVN `FAT32_File_Directory_entry_Template, `FAT32_Curent_Directory_entry_value
.010c1f	a9 05 09	lda #$0905	                  LDA #<>file_to_write_fat_32
.010c22	aa		tax		                  TAX
.010c23	a9 3b 08	lda #$083b	                  LDA #<>FAT32_Curent_Directory_entry_value
.010c26	a8		tay		                  TAY
.010c27	a9 0b 00	lda #$000b	                  LDA #11
.010c2a	54 01 01	mvn $01,$01	                  MVN `file_to_write_fat_32, `FAT32_Curent_Directory_entry_value
.010c2d	a9 3b 08	lda #$083b	                  LDA #<>FAT32_Curent_Directory_entry_value
.010c30	aa		tax		                  TAX
.010c31	68		pla		                  PLA
.010c32	29 0f 00	and #$000f	                  AND #$000F ; get only the 4 first bit as we assune theat the sectore in ram is the one sector to write the data in (loaded by FAT32_Find_Free_Folder_Entry normaly)
.010c35	0a		asl a		                  ASL
.010c36	0a		asl a		                  ASL
.010c37	0a		asl a		                  ASL
.010c38	0a		asl a		                  ASL
.010c39	0a		asl a		                  ASL ; now A contain the ofset to write the root entry
.010c3a	18		clc		                  CLC
.010c3b	69 00 04	adc #$0400	                  ADC #<>FAT32_FOLDER_ADDRESS_BUFFER_512
.010c3e	a8		tay		                  TAY
.010c3f	a9 1f 00	lda #$001f	                  LDA #31
.010c42	54 01 01	mvn $01,$01	                  MVN `FAT32_Curent_Directory_entry_value, `FAT32_FOLDER_ADDRESS_BUFFER_512
.010c45	a9 01 00	lda #$0001	                  LDA #`FAT32_FOLDER_ADDRESS_BUFFER_512 ; load the byte nb 3 (bank byte)
.010c48	48		pha		                  PHA
.010c49	a9 00 04	lda #$0400	                  LDA #<>FAT32_FOLDER_ADDRESS_BUFFER_512 ; load the low world part of the buffer address
.010c4c	48		pha		                  PHA
.010c4d	af 39 08 01	lda $010839	                  LDA FAT32_Curent_Directory_Sector_loaded_in_ram+2
.010c51	aa		tax		                  TAX
.010c52	af 37 08 01	lda $010837	                  LDA FAT32_Curent_Directory_Sector_loaded_in_ram
.010c56	22 a0 14 01	jsl $0114a0	                  JSL IFAT_WRITE_SECTOR
.010c5a	da		phx		PHX
.010c5b	48		pha		PHA
.010c5c	a2 85 0c	ldx #$0c85	LDX #<>TEXT_____DEBUG_END_Write_File_Directory_entry
.010c5f	a9 02 00	lda #$0002	LDA #`TEXT_____DEBUG_END_Write_File_Directory_entry
.010c62	22 1c 45 38	jsl $38451c	JSL IPRINT_ABS
.010c66	68		pla		PLA
.010c67	fa		plx		PLX
.010c68	6b		rtl		                  RTL
.010c69					FAT32_Open_File
.010c69	c2 30		rep #$30	                REP #$30        ; set A&X long
.010c6b	a2 00 00	ldx #$0000	                  LDX #0 ; start by readding the first folder entry
.010c6e	da		phx		 PHX
.010c6f	48		pha		 PHA
.010c70	a2 2f 0b	ldx #$0b2f	 LDX #<>TEXT_____DEBUG_START_Open
.010c73	a9 02 00	lda #$0002	 LDA #`TEXT_____DEBUG_START_Open
.010c76	22 1c 45 38	jsl $38451c	 JSL IPRINT_ABS
.010c7a	68		pla		 PLA
.010c7b	fa		plx		 PLX
.010c7c					 FAT32_Open_File_Read_Next_Folder_Entry:
.010c7c	8a		txa		                  TXA
.010c7d	e0 ff ff	cpx #$ffff	                  CPX #$FFFF ; make sure we are not searching for ever
.010c80	f0 6a		beq $010cec	                  BEQ FAT32_Open_File__EXIT_TOO_MANY_FOLDER_ENTRY
.010c82	22 95 12 01	jsl $011295	                  JSL IFAT32_GET_DIRECTORY_ENTRY
.010c86	e8		inx		                  INC X
.010c87	22 13 16 01	jsl $011613	                  JSL FAT32_GET_FOLDER_ENTRY_TYPE
.010c8b	c9 01 00	cmp #$0001	                  CMP #1
.010c8e	f0 07		beq $010c97	                  BEQ FAT32_Open_File__FIND_A_FILE_ENTRY
.010c90	c9 00 00	cmp #$0000	                  CMP #0
.010c93	f0 52		beq $010ce7	                  BEQ FAT32_Open_File__EXIT_END_OF_THE_ENTRY_LISTE
.010c95	80 e5		bra $010c7c	                  BRA FAT32_Open_File_Read_Next_Folder_Entry
.010c97					 FAT32_Open_File__FIND_A_FILE_ENTRY:
.010c97	22 b7 18 01	jsl $0118b7	                  JSL FAT32_Print_File_Name
.010c9b	a9 0d 00	lda #$000d	                  LDA #$0D
.010c9e	22 f4 0b 39	jsl $390bf4	                  JSL IPUTC
.010ca2	da		phx		                  PHX
.010ca3	a2 ff ff	ldx #$ffff	                  LDX #-1 ; to get x = 0 on the first loop
.010ca6	e2 20		sep #$20	                SEP #$20        ; set A short
.010ca8					 FAT32_Open_File__CHAR_MATCHING:
.010ca8	e8		inx		                  INC X
.010ca9	e0 0b 00	cpx #$000b	                  CPX #11 ; FAT12 file or folder size
.010cac	f0 12		beq $010cc0	                  BEQ FAT32_Open_File__STRING_MATCHED
.010cae	e2 20		sep #$20	                SEP #$20        ; set A short
.010cb0	bf f9 08 01	lda $0108f9,x	                  LDA file_to_load_fat_32,X
.010cb4	df 3b 08 01	cmp $01083b,x	                  CMP FAT32_Curent_Directory_entry_value,X
.010cb8	f0 ee		beq $010ca8	                  BEQ FAT32_Open_File__CHAR_MATCHING ; if the file name match  the loop will be executed 11 time
.010cba	fa		plx		                  PLX
.010cbb	c2 20		rep #$20	                REP #$20        ; set A long
.010cbd	82 bc ff	brl $010c7c	                  BRL FAT32_Open_File_Read_Next_Folder_Entry ; the name dosn't match
.010cc0					 FAT32_Open_File__STRING_MATCHED:
.010cc0	fa		plx		                  PLX
.010cc1	c2 30		rep #$30	                REP #$30        ; set A&X long
.010cc3	22 5a 19 01	jsl $01195a	                  JSL FAT32_PRINT_Root_entry_value_HEX ; Debug
.010cc7	af 55 08 01	lda $010855	                  LDA FAT32_Curent_Directory_entry_value + 26 ;$1S; Low two bytes of first cluster
.010ccb	8f eb 08 01	sta $0108eb	                  STA FAT32_Start_Of_The_file_Cluster
.010ccf	af 4f 08 01	lda $01084f	                  LDA FAT32_Curent_Directory_entry_value + 20 ;$14 ; High two bytes of first cluster
.010cd3	8f ed 08 01	sta $0108ed	                  STA FAT32_Start_Of_The_file_Cluster + 2
.010cd7	a9 00 00	lda #$0000	                  LDA #0 ; FAT32_Curent_File_Cluster = 0 to indicat to the read code to read from the beginning
.010cda	8f e7 08 01	sta $0108e7	                  STA FAT32_Curent_File_Cluster
.010cde	8f e9 08 01	sta $0108e9	                  STA FAT32_Curent_File_Cluster + 2
.010ce2	a9 01 00	lda #$0001	                  LDA #1 ; return success
.010ce5	80 08		bra $010cef	                  BRA FAT32_Open_File__EXIT
.010ce7					 FAT32_Open_File__EXIT_END_OF_THE_ENTRY_LISTE:
.010ce7	a9 00 00	lda #$0000	                  LDA #0
.010cea	80 03		bra $010cef	                  BRA FAT32_Open_File__EXIT
.010cec					 FAT32_Open_File__EXIT_TOO_MANY_FOLDER_ENTRY:
.010cec	a9 ff ff	lda #$ffff	                  LDA #-1
.010cef					 FAT32_Open_File__EXIT:
.010cef	da		phx		  PHX
.010cf0	48		pha		  PHA
.010cf1	a2 9b 08	ldx #$089b	  LDX #<>TEXT_FAT32___FAT32_Start_Of_The_file_Cluster
.010cf4	a9 02 00	lda #$0002	  LDA #`TEXT_FAT32___FAT32_Start_Of_The_file_Cluster
.010cf7	22 25 45 38	jsl $384525	  JSL IPUTS_ABS       ; print the first line
.010cfb	a9 bd 00	lda #$00bd	  LDA #$BD
.010cfe	22 81 45 38	jsl $384581	  JSL SET_COLOUR
.010d02	af ed 08 01	lda $0108ed	  LDA FAT32_Start_Of_The_file_Cluster+2
.010d06	eb		xba		  XBA
.010d07	22 42 45 38	jsl $384542	  JSL IPRINT_HEX
.010d0b	eb		xba		  XBA
.010d0c	22 42 45 38	jsl $384542	  JSL IPRINT_HEX
.010d10	af eb 08 01	lda $0108eb	  LDA FAT32_Start_Of_The_file_Cluster
.010d14	eb		xba		  XBA
.010d15	22 42 45 38	jsl $384542	  JSL IPRINT_HEX
.010d19	eb		xba		  XBA
.010d1a	22 42 45 38	jsl $384542	  JSL IPRINT_HEX
.010d1e	a9 ed 00	lda #$00ed	  LDA #$ED                  ; Set the default text color to light gray on dark gray
.010d21	22 81 45 38	jsl $384581	  JSL SET_COLOUR
.010d25	a9 0d 00	lda #$000d	  LDA #$0D
.010d28	22 f4 0b 39	jsl $390bf4	  JSL IPUTC
.010d2c	68		pla		  PLA
.010d2d	fa		plx		  PLX
.010d2e	da		phx		  PHX
.010d2f	48		pha		  PHA
.010d30	a2 55 0b	ldx #$0b55	  LDX #<>TEXT_____DEBUG_END_Open
.010d33	a9 02 00	lda #$0002	  LDA #`TEXT_____DEBUG_END_Open
.010d36	22 1c 45 38	jsl $38451c	  JSL IPRINT_ABS
.010d3a	68		pla		  PLA
.010d3b	fa		plx		  PLX
.010d3c	6b		rtl		                  RTL
.010d3d					FAT32_Open_Folder
.010d3d	c2 30		rep #$30	                REP #$30        ; set A&X long
.010d3f	a2 00 00	ldx #$0000	                  LDX #0 ; start by readding the first folder entry
.010d42	da		phx		 PHX
.010d43	48		pha		 PHA
.010d44	a2 2f 0b	ldx #$0b2f	 LDX #<>TEXT_____DEBUG_START_Open
.010d47	a9 02 00	lda #$0002	 LDA #`TEXT_____DEBUG_START_Open
.010d4a	22 1c 45 38	jsl $38451c	 JSL IPRINT_ABS
.010d4e	68		pla		 PLA
.010d4f	fa		plx		 PLX
.010d50					 FAT32_Open_Folder_Read_Next_Folder_Entry:
.010d50	8a		txa		                  TXA
.010d51	e0 ff ff	cpx #$ffff	                  CPX #$FFFF ; make sure we are not searching for ever
.010d54	f0 15		beq $010d6b	                  BEQ FAT32_Open_Folder__EXIT_TOO_MANY_FOLDER_ENTRY_1
.010d56	22 95 12 01	jsl $011295	                  JSL IFAT32_GET_DIRECTORY_ENTRY ; JSL IFAT32_GET_ROOT_DIRECTORY_ENTRY
.010d5a	e8		inx		                  INC X
.010d5b	22 13 16 01	jsl $011613	                  JSL FAT32_GET_FOLDER_ENTRY_TYPE
.010d5f	c9 10 00	cmp #$0010	                  CMP #$10 ; folder entry type
.010d62	f0 09		beq $010d6d	                  BEQ FAT32_Open_Folder__FIND_A_FOLDER_ENTRY
.010d64	c9 00 00	cmp #$0000	                  CMP #0
.010d67	f0 54		beq $010dbd	                  BEQ FAT32_Open_Folder__EXIT_END_OF_THE_ENTRY_LISTE
.010d69	80 e5		bra $010d50	                  BRA FAT32_Open_Folder_Read_Next_Folder_Entry
.010d6b	80 55		bra $010dc2	 FAT32_Open_Folder__EXIT_TOO_MANY_FOLDER_ENTRY_1: BRA  FAT32_Open_Folder__EXIT_TOO_MANY_FOLDER_ENTRY
.010d6d					 FAT32_Open_Folder__FIND_A_FOLDER_ENTRY:
.010d6d	22 10 19 01	jsl $011910	                  JSL FAT32_Print_Folder_Name
.010d71	a9 0d 00	lda #$000d	                  LDA #$0D
.010d74	22 f4 0b 39	jsl $390bf4	                  JSL IPUTC
.010d78	da		phx		                  PHX
.010d79	a2 ff ff	ldx #$ffff	                  LDX #-1 ; to get x = 0 on the first loop
.010d7c	e2 20		sep #$20	                SEP #$20        ; set A short
.010d7e					 FAT32_Open_Folder__CHAR_MATCHING:
.010d7e	e8		inx		                  INC X
.010d7f	e0 0b 00	cpx #$000b	                  CPX #11 ; FAT12 file or folder size
.010d82	f0 12		beq $010d96	                  BEQ FAT32_Open_Folder__STRING_MATCHED
.010d84	e2 20		sep #$20	                SEP #$20        ; set A short
.010d86	bf 11 09 01	lda $010911,x	                  LDA folder_name_1,X
.010d8a	df 3b 08 01	cmp $01083b,x	                  CMP FAT32_Curent_Directory_entry_value,X
.010d8e	f0 ee		beq $010d7e	                  BEQ FAT32_Open_Folder__CHAR_MATCHING ; if the file name match  the loop will be executed 11 time
.010d90	fa		plx		                  PLX
.010d91	c2 20		rep #$20	                REP #$20        ; set A long
.010d93	82 ba ff	brl $010d50	                  BRL FAT32_Open_Folder_Read_Next_Folder_Entry ; the name dosn't match
.010d96					 FAT32_Open_Folder__STRING_MATCHED:
.010d96	fa		plx		                  PLX
.010d97	c2 30		rep #$30	                REP #$30        ; set A&X long
.010d99	22 5a 19 01	jsl $01195a	                  JSL FAT32_PRINT_Root_entry_value_HEX ; Debug
.010d9d	af 55 08 01	lda $010855	                  LDA FAT32_Curent_Directory_entry_value + 26 ;$1S; Low two bytes of first cluster
.010da1	8f df 08 01	sta $0108df	                  STA FAT32_Curent_Folder_start_cluster
.010da5	af 4f 08 01	lda $01084f	                  LDA FAT32_Curent_Directory_entry_value + 20 ;$14 ; High two bytes of first cluster
.010da9	8f e1 08 01	sta $0108e1	                  STA FAT32_Curent_Folder_start_cluster + 2
.010dad	a9 00 00	lda #$0000	                  LDA #0 ; FAT32_Curent_File_Cluster = 0 to indicat to the read code to read from the beginning
.010db0	8f e7 08 01	sta $0108e7	                  STA FAT32_Curent_File_Cluster
.010db4	8f e9 08 01	sta $0108e9	                  STA FAT32_Curent_File_Cluster + 2
.010db8	a9 01 00	lda #$0001	                  LDA #1 ; return success
.010dbb	80 08		bra $010dc5	                  BRA FAT32_Open_Folder__EXIT
.010dbd					 FAT32_Open_Folder__EXIT_END_OF_THE_ENTRY_LISTE:
.010dbd	a9 00 00	lda #$0000	                  LDA #0
.010dc0	80 03		bra $010dc5	                  BRA FAT32_Open_Folder__EXIT
.010dc2					 FAT32_Open_Folder__EXIT_TOO_MANY_FOLDER_ENTRY:
.010dc2	a9 ff ff	lda #$ffff	                  LDA #-1
.010dc5					 FAT32_Open_Folder__EXIT:
.010dc5	da		phx		  PHX
.010dc6	48		pha		  PHA
.010dc7	a2 c0 08	ldx #$08c0	  LDX #<>TEXT_FAT32___FAT32_Start_Of_The_folder_Cluster
.010dca	a9 02 00	lda #$0002	  LDA #`TEXT_FAT32___FAT32_Start_Of_The_folder_Cluster
.010dcd	22 25 45 38	jsl $384525	  JSL IPUTS_ABS       ; print the first line
.010dd1	a9 bd 00	lda #$00bd	  LDA #$BD
.010dd4	22 81 45 38	jsl $384581	  JSL SET_COLOUR
.010dd8	af e1 08 01	lda $0108e1	  LDA FAT32_Curent_Folder_start_cluster+2
.010ddc	eb		xba		  XBA
.010ddd	22 42 45 38	jsl $384542	  JSL IPRINT_HEX
.010de1	eb		xba		  XBA
.010de2	22 42 45 38	jsl $384542	  JSL IPRINT_HEX
.010de6	af df 08 01	lda $0108df	  LDA FAT32_Curent_Folder_start_cluster
.010dea	eb		xba		  XBA
.010deb	22 42 45 38	jsl $384542	  JSL IPRINT_HEX
.010def	eb		xba		  XBA
.010df0	22 42 45 38	jsl $384542	  JSL IPRINT_HEX
.010df4	a9 ed 00	lda #$00ed	  LDA #$ED                  ; Set the default text color to light gray on dark gray
.010df7	22 81 45 38	jsl $384581	  JSL SET_COLOUR
.010dfb	a9 0d 00	lda #$000d	  LDA #$0D
.010dfe	22 f4 0b 39	jsl $390bf4	  JSL IPUTC
.010e02	68		pla		  PLA
.010e03	fa		plx		  PLX
.010e04	da		phx		  PHX
.010e05	48		pha		  PHA
.010e06	a2 55 0b	ldx #$0b55	  LDX #<>TEXT_____DEBUG_END_Open
.010e09	a9 02 00	lda #$0002	  LDA #`TEXT_____DEBUG_END_Open
.010e0c	22 1c 45 38	jsl $38451c	  JSL IPRINT_ABS
.010e10	68		pla		  PLA
.010e11	fa		plx		  PLX
.010e12	6b		rtl		                  RTL
.010e13					FAT32_Read_File
.010e13	da		phx		                  PHX
.010e14	af e7 08 01	lda $0108e7	                  LDA FAT32_Curent_File_Cluster
.010e18	c9 00 00	cmp #$0000	                  CMP #0
.010e1b	d0 19		bne $010e36	                  BNE FAT32_Read_File___Get_Next_Sector
.010e1d	af e9 08 01	lda $0108e9	                  LDA FAT32_Curent_File_Cluster+2
.010e21	c9 00 00	cmp #$0000	                  CMP #0
.010e24	d0 10		bne $010e36	                  BNE FAT32_Read_File___Get_Next_Sector
.010e26	af eb 08 01	lda $0108eb	                  LDA FAT32_Start_Of_The_file_Cluster ; sector of the begening of the file
.010e2a	8f e7 08 01	sta $0108e7	                  STA FAT32_Curent_File_Cluster
.010e2e	af ed 08 01	lda $0108ed	                  LDA FAT32_Start_Of_The_file_Cluster+2
.010e32	8f e9 08 01	sta $0108e9	                  STA FAT32_Curent_File_Cluster+2
.010e36					 FAT32_Read_File___Get_Next_Sector:
.010e36	af e7 08 01	lda $0108e7	                  LDA FAT32_Curent_File_Cluster
.010e3a	8f c3 08 01	sta $0108c3	                  STA FAT32_FAT_Entry
.010e3e	af e9 08 01	lda $0108e9	                  LDA FAT32_Curent_File_Cluster+2
.010e42	8f c5 08 01	sta $0108c5	                  STA FAT32_FAT_Entry+2
.010e46	22 3e 17 01	jsl $01173e	                  JSL FAT32_Test_Fat_Entry_Validity
.010e4a	c9 01 00	cmp #$0001	                  CMP #1
.010e4d	f0 08		beq $010e57	                  BEQ FAT32_Read_File__Valit_sector
.010e4f	c9 ff ff	cmp #$ffff	                  CMP #-1
.010e52	f0 0a		beq $010e5e	                  BEQ FAT32_Read_File___End_OF_File
.010e54	82 2f 00	brl $010e86	                  BRL FAT32_Read_File___Reserved_Or_Bad_Sector
.010e57					 FAT32_Read_File__Valit_sector:
.010e57	48		pha		                  PHA ; save the return value
.010e58	22 74 13 01	jsl $011374	                  JSL FAT32_IFAT_GET_FAT_ENTRY ; get the next sector
.010e5c	80 04		bra $010e62	                  BRA FAT32_Read_File___still_several_sector_to_read
.010e5e					 FAT32_Read_File___End_OF_File:
.010e5e	a9 00 00	lda #$0000	                  LDA #0  ; EOF return value
.010e61	48		pha		                  PHA ; save the return value
.010e62					 FAT32_Read_File___still_several_sector_to_read:
.010e62	22 5a 16 01	jsl $01165a	                  JSL FAT32_COMPUT_PHISICAL_CLUSTER; (in : FAT32_FAT_Entry / Out : FAT32_FAT_Entry_Physical_Address)
.010e66	a9 01 00	lda #$0001	                  LDA #`FAT32_DATA_ADDRESS_BUFFER_512 ; load the byte nb 3 (bank byte)
.010e69	48		pha		                  PHA
.010e6a	a9 00 00	lda #$0000	                  LDA #<>FAT32_DATA_ADDRESS_BUFFER_512 ; load the low world part of the buffer address
.010e6d	48		pha		                  PHA
.010e6e	af d1 08 01	lda $0108d1	                  LDA FAT32_FAT_Entry_Physical_Address+2
.010e72	aa		tax		                  TAX
.010e73	af cf 08 01	lda $0108cf	                  LDA FAT32_FAT_Entry_Physical_Address
.010e77	22 84 14 01	jsl $011484	                  JSL IFAT_READ_SECTOR
.010e7b	fa		plx		                  PLX
.010e7c	fa		plx		                  PLX
.010e7d	c9 01 00	cmp #$0001	                  CMP #1
.010e80	f0 07		beq $010e89	                  BEQ  FAT32_Read_File___Read_Sector
.010e82	68		pla		                  PLA       ; remode the saved pres saved return value
.010e83	a9 fc ff	lda #$fffc	                  LDA #-4   ; load the error reading sector error
.010e86					 FAT32_Read_File___Reserved_Or_Bad_Sector:
.010e86	82 11 00	brl $010e9a	                  BRL FAT32_Read_File___RETURN_ERROR
.010e89					 FAT32_Read_File___Read_Sector:
.010e89	af c7 08 01	lda $0108c7	                  LDA FAT32_FAT_Next_Entry ;
.010e8d	8f e7 08 01	sta $0108e7	                  STA FAT32_Curent_File_Cluster
.010e91	af c9 08 01	lda $0108c9	                  LDA FAT32_FAT_Next_Entry+2
.010e95	8f e9 08 01	sta $0108e9	                  STA FAT32_Curent_File_Cluster+2
.010e99	68		pla		                  PLA ; Get the return value in A
.010e9a					 FAT32_Read_File___RETURN_ERROR:
.010e9a	fa		plx		                  PLX
.010e9b	6b		rtl		                  RTL
.010e9c					IFAT32_READ_MBR
.010e9c	c2 20		rep #$20	                REP #$20        ; set A long
.010e9e	a9 01 00	lda #$0001	                  LDA #`FAT32_DATA_ADDRESS_BUFFER_512 ; load the byte nb 3 (bank byte)
.010ea1	48		pha		                  PHA
.010ea2	a9 00 00	lda #$0000	                  LDA #<>FAT32_DATA_ADDRESS_BUFFER_512 ; load the low world part of the buffer address
.010ea5	48		pha		                  PHA
.010ea6	a9 00 00	lda #$0000	                  LDA #0 ; read sector 0 (where the MBR sector is stored)
.010ea9	a2 00 00	ldx #$0000	                  LDX #0
.010eac	22 84 14 01	jsl $011484	                  JSL IFAT_READ_SECTOR
.010eb0	fa		plx		                  PLX
.010eb1	fa		plx		                  PLX
.010eb2	a2 be 01	ldx #$01be	                  LDX #MBR_Partition_Entry
.010eb5					 READ_MBR_Scan:
.010eb5	bf 08 00 01	lda $010008,x	                  LDA FAT32_DATA_ADDRESS_BUFFER_512,X+8
.010eb9	c9 00 00	cmp #$0000	                  CMP #0
.010ebc	f0 03		beq $010ec1	                  BEQ READ_MBR_Partition_Entry_LSB_Null
.010ebe	a0 01 00	ldy #$0001	                  LDY #1
.010ec1					 READ_MBR_Partition_Entry_LSB_Null:
.010ec1	8f db 08 01	sta $0108db	                  STA FAT_Partition_address
.010ec5	bf 0a 00 01	lda $01000a,x	                  LDA FAT32_DATA_ADDRESS_BUFFER_512,X+8+2
.010ec9	c9 00 00	cmp #$0000	                  CMP #0
.010ecc	f0 03		beq $010ed1	                  BEQ READ_MBR_Partition_Entry_MSB_Null
.010ece	a0 01 00	ldy #$0001	                  LDY #1
.010ed1					 READ_MBR_Partition_Entry_MSB_Null:
.010ed1	8f dd 08 01	sta $0108dd	                  STA FAT_Partition_address+2
.010ed5	c0 01 00	cpy #$0001	                  CPY #1 ; curent MBR entry not nul (sector location)
.010ed8	f0 0c		beq $010ee6	                  BEQ READ_MBR_Partition_valid_address
.010eda	e0 fe 01	cpx #$01fe	                  CPX #$1FE
.010edd	f0 4b		beq $010f2a	                  BEQ READ_MBR_End_Scan_no_partition
.010edf	8a		txa		                  TXA ; Conput the next NBR entry position
.010ee0	69 10 00	adc #$0010	                  ADC #MBR_Partition_Entry_size
.010ee3	aa		tax		                  TAX
.010ee4	80 cf		bra $010eb5	                  BRA READ_MBR_Scan
.010ee6					 READ_MBR_Partition_valid_address:
.010ee6	a2 25 04	ldx #$0425	                  LDX #<>Partition_ofset_text
.010ee9	a9 02 00	lda #$0002	                  LDA #`Partition_ofset_text
.010eec	22 25 45 38	jsl $384525	                  JSL IPUTS_ABS       ; print the first line
.010ef0	a9 30 00	lda #$0030	                  LDA #'0'
.010ef3	22 f4 0b 39	jsl $390bf4	                  JSL IPUTC
.010ef7	a9 78 00	lda #$0078	                  LDA #'x'
.010efa	22 f4 0b 39	jsl $390bf4	                  JSL IPUTC
.010efe	af de 08 01	lda $0108de	                  LDA FAT_Partition_address +3
.010f02	22 42 45 38	jsl $384542	                  JSL IPRINT_HEX
.010f06	af dd 08 01	lda $0108dd	                  LDA FAT_Partition_address +2
.010f0a	22 42 45 38	jsl $384542	                  JSL IPRINT_HEX
.010f0e	af dc 08 01	lda $0108dc	                  LDA FAT_Partition_address +1
.010f12	22 42 45 38	jsl $384542	                  JSL IPRINT_HEX
.010f16	af db 08 01	lda $0108db	                  LDA FAT_Partition_address
.010f1a	22 42 45 38	jsl $384542	                  JSL IPRINT_HEX
.010f1e	a9 0d 00	lda #$000d	                  LDA #$0D
.010f21	22 f4 0b 39	jsl $390bf4	                  JSL IPUTC
.010f25	a9 01 00	lda #$0001	                  LDA #1 ; success
.010f28	80 03		bra $010f2d	                  BRA READ_MBR_End
.010f2a					 READ_MBR_End_Scan_no_partition:
.010f2a	a9 ff ff	lda #$ffff	                  LDA #-1
.010f2d					 READ_MBR_End:
.010f2d	6b		rtl		                  RTL
.010f2e					IFAT32_READ_BOOT_SECTOR
.010f2e	c2 30		rep #$30	                REP #$30        ; set A&X long
.010f30	a9 01 00	lda #$0001	                  LDA #`FAT32_DATA_ADDRESS_BUFFER_512 ; load the byte nb 3 (bank byte)
.010f33	48		pha		                  PHA
.010f34	a9 00 00	lda #$0000	                  LDA #<>FAT32_DATA_ADDRESS_BUFFER_512 ; load the low world part of the buffer address
.010f37	48		pha		                  PHA
.010f38	af dd 08 01	lda $0108dd	                  LDA FAT_Partition_address+2 ; dont use X value for now IFAT_READ_SECTOR is a dummy function unlit I ger the real HDD hardware driver
.010f3c	aa		tax		                  TAX
.010f3d	af db 08 01	lda $0108db	                  LDA FAT_Partition_address
.010f41	22 84 14 01	jsl $011484	                  JSL IFAT_READ_SECTOR
.010f45	fa		plx		                  PLX
.010f46	fa		plx		                  PLX;
.010f47	8f 2b 08 01	sta $01082b	                  STA FAT32_Sector_loaded_in_ram
.010f4b	a2 0b 00	ldx #$000b	                  LDX #$B ;11
.010f4e	bf 00 00 01	lda $010000,x	                  LDA FAT32_DATA_ADDRESS_BUFFER_512,X
.010f52	8f 00 08 01	sta $010800	                  STA FAT32_Byte_Per_Sector
.010f56	a2 0d 00	ldx #$000d	                  LDX #$0D ;13
.010f59	bf 00 00 01	lda $010000,x	                  LDA FAT32_DATA_ADDRESS_BUFFER_512,X
.010f5d	29 ff 00	and #$00ff	                  AND #$FF
.010f60	8f 02 08 01	sta $010802	                  STA FAT32_Sector_Per_Cluster
.010f64	a2 0e 00	ldx #$000e	                  LDX #$0E ;14
.010f67	bf 00 00 01	lda $010000,x	                  LDA FAT32_DATA_ADDRESS_BUFFER_512,X
.010f6b	8f 04 08 01	sta $010804	                  STA FAT32_Nb_Of_reserved_Cluster
.010f6f	a2 10 00	ldx #$0010	                  LDX #$10 ;16
.010f72	bf 00 00 01	lda $010000,x	                  LDA FAT32_DATA_ADDRESS_BUFFER_512,X
.010f76	29 ff 00	and #$00ff	                  AND #$FF
.010f79	8f 06 08 01	sta $010806	                  STA FAT32_Nb_Of_FAT
.010f7d	a2 18 00	ldx #$0018	                  LDX #$18 ;
.010f80	bf 00 00 01	lda $010000,x	                  LDA FAT32_DATA_ADDRESS_BUFFER_512,X
.010f84	8f 10 08 01	sta $010810	                  STA FAT32_Sector_per_Track
.010f88	a2 1a 00	ldx #$001a	                  LDX #$1A ;
.010f8b	bf 00 00 01	lda $010000,x	                  LDA FAT32_DATA_ADDRESS_BUFFER_512,X
.010f8f	8f 12 08 01	sta $010812	                  STA FAT32_Nb_of_Head
.010f93	a2 20 00	ldx #$0020	                  LDX #$20 ;36 ;
.010f96	bf 00 00 01	lda $010000,x	                  LDA FAT32_DATA_ADDRESS_BUFFER_512,X
.010f9a	8f 14 08 01	sta $010814	                  STA FAT32_Nb_Of_Sector_In_Partition
.010f9e	a2 22 00	ldx #$0022	                  LDX #$22 ;36 ;
.010fa1	bf 00 00 01	lda $010000,x	                  LDA FAT32_DATA_ADDRESS_BUFFER_512,X
.010fa5	8f 16 08 01	sta $010816	                  STA FAT32_Nb_Of_Sector_In_Partition+2
.010fa9	a2 24 00	ldx #$0024	                  LDX #$24 ;36 ;
.010fac	bf 00 00 01	lda $010000,x	                  LDA FAT32_DATA_ADDRESS_BUFFER_512,X
.010fb0	8f 0c 08 01	sta $01080c	                  STA FAT32_Sector_per_Fat
.010fb4	a2 26 00	ldx #$0026	                  LDX #$26 ;36 ;
.010fb7	bf 00 00 01	lda $010000,x	                  LDA FAT32_DATA_ADDRESS_BUFFER_512,X
.010fbb	8f 0e 08 01	sta $01080e	                  STA FAT32_Sector_per_Fat+2
.010fbf	a2 2c 00	ldx #$002c	                  LDX #$2C ;
.010fc2	bf 00 00 01	lda $010000,x	                  LDA FAT32_DATA_ADDRESS_BUFFER_512,X
.010fc6	8f 2f 08 01	sta $01082f	                  STA FAT32_Root_Sector_offset
.010fca	a2 2e 00	ldx #$002e	                  LDX #$2E ;
.010fcd	bf 00 00 01	lda $010000,x	                  LDA FAT32_DATA_ADDRESS_BUFFER_512,X
.010fd1	8f 31 08 01	sta $010831	                  STA FAT32_Root_Sector_offset+2
.010fd5	af 00 08 01	lda $010800	                  LDA FAT32_Byte_Per_Sector
.010fd9	c9 00 02	cmp #$0200	                  CMP #512
.010fdc	d0 44		bne $011022	                  BNE FAT32_ERROR_BLOCK_SEIZE
.010fde	af 02 08 01	lda $010802	                  LDA FAT32_Sector_Per_Cluster
.010fe2	c9 01 00	cmp #$0001	                  CMP #1
.010fe5	d0 40		bne $011027	                  BNE FAT32_ERROR_SECTOR_PER_CLUSTER
.010fe7	af 04 08 01	lda $010804	                  LDA FAT32_Nb_Of_reserved_Cluster
.010feb	c9 01 00	cmp #$0001	                  CMP #1
.010fee	90 3c		bcc $01102c	                  BCC FAT32_ERROR_RESERVED_SECTOR
.010ff0	af 06 08 01	lda $010806	                  LDA FAT32_Nb_Of_FAT
.010ff4	c9 01 00	cmp #$0001	                  CMP #1
.010ff7	90 38		bcc $011031	                  BCC FAT32_ERROR_NB_FAT
.010ff9	af 0c 08 01	lda $01080c	                  LDA FAT32_Sector_per_Fat
.010ffd	c9 00 00	cmp #$0000	                  CMP #0
.011000	f0 3e		beq $011040	                  BEQ FAT32_ERROR_SECTOR_PER_FAT
.011002	af 0e 08 01	lda $01080e	                  LDA FAT32_Sector_per_Fat+2
.011006	c9 00 00	cmp #$0000	                  CMP #0
.011009	f0 35		beq $011040	                  BEQ FAT32_ERROR_SECTOR_PER_FAT
.01100b	af 2f 08 01	lda $01082f	                  LDA FAT32_Root_Sector_offset
.01100f	c9 02 00	cmp #$0002	                  CMP #2
.011012	90 31		bcc $011045	                  BCC FAT32_ERROR_FAT_SECTOR_OFFSET
.011014	af 31 08 01	lda $010831	                  LDA FAT32_Root_Sector_offset+2
.011018	c9 00 00	cmp #$0000	                  CMP #0
.01101b	90 28		bcc $011045	                  BCC FAT32_ERROR_FAT_SECTOR_OFFSET
.01101d	a9 01 00	lda #$0001	                  LDA #1
.011020	80 35		bra $011057	                  BRA RETURN_IFAT32_READ_BOOT_SECTOR
.011022	a9 ff ff	lda #$ffff	 FAT32_ERROR_BLOCK_SEIZE LDA #-1
.011025	80 30		bra $011057	                  BRA RETURN_IFAT32_READ_BOOT_SECTOR
.011027					 FAT32_ERROR_SECTOR_PER_CLUSTER
.011027	a9 fe ff	lda #$fffe	                  LDA #-2
.01102a	80 2b		bra $011057	                  BRA RETURN_IFAT32_READ_BOOT_SECTOR
.01102c					 FAT32_ERROR_RESERVED_SECTOR
.01102c	a9 fd ff	lda #$fffd	                  LDA #-3
.01102f	80 26		bra $011057	                  BRA RETURN_IFAT32_READ_BOOT_SECTOR
.011031	a9 fc ff	lda #$fffc	 FAT32_ERROR_NB_FAT      LDA #-4
.011034	80 21		bra $011057	                  BRA RETURN_IFAT32_READ_BOOT_SECTOR
.011036					 FAT32_ERROR_NB_ROOT_ENTRY
.011036	a9 fb ff	lda #$fffb	                  LDA #-5
.011039	80 1c		bra $011057	                  BRA RETURN_IFAT32_READ_BOOT_SECTOR
.01103b					 FAT32_ERROR_NB_TOTAL_SECTOR_COUNT
.01103b	a9 fa ff	lda #$fffa	                  LDA #-6
.01103e	80 17		bra $011057	                  BRA RETURN_IFAT32_READ_BOOT_SECTOR
.011040					 FAT32_ERROR_SECTOR_PER_FAT
.011040	a9 f9 ff	lda #$fff9	                  LDA #-7
.011043	80 12		bra $011057	                  BRA RETURN_IFAT32_READ_BOOT_SECTOR
.011045					 FAT32_ERROR_FAT_SECTOR_OFFSET
.011045	a9 f5 ff	lda #$fff5	                  LDA #-11
.011048	80 0d		bra $011057	                  BRA RETURN_IFAT32_READ_BOOT_SECTOR
.01104a					 FAT32_ERROR_SECTOR_PER_TRACK
.01104a	a9 f8 ff	lda #$fff8	                  LDA #-8
.01104d	80 08		bra $011057	                  BRA RETURN_IFAT32_READ_BOOT_SECTOR
.01104f					 FAT32_ERROR_NB_HEAD_NULL
.01104f	a9 f7 ff	lda #$fff7	                  LDA #-9
.011052	80 03		bra $011057	                  BRA RETURN_IFAT32_READ_BOOT_SECTOR
.011054					 FAT32_ERROR_BOOT_SIGNATURE
.011054	a9 f6 ff	lda #$fff6	                  LDA #-10
.011057					 RETURN_IFAT32_READ_BOOT_SECTOR
.011057	6b		rtl		                  RTL
.011058					IFAT32_COMPUT_DATA_POS
.011058	c2 30		rep #$30	                REP #$30        ; set A&X long
.01105a	af 35 08 01	lda $010835	                  LDA FAT32_Root_Base_Sector+2 ; load the MSB first to not mosify the value of the
.01105e	8f 22 01 00	sta $000122	                  STA ADDER_A+2; result if a carry occure wnen loading the result in A or B
.011062	af 33 08 01	lda $010833	                  LDA FAT32_Root_Base_Sector
.011066	8f 20 01 00	sta $000120	                  STA ADDER_A
.01106a	af 2f 08 01	lda $01082f	                  LDA FAT32_Root_Sector_offset
.01106e	8f 24 01 00	sta $000124	                  STA ADDER_B
.011072	af 31 08 01	lda $010831	                  LDA FAT32_Root_Sector_offset+2
.011076	8f 26 01 00	sta $000126	                  STA ADDER_B+2
.01107a	af 28 01 00	lda $000128	                  LDA ADDER_R
.01107e	8f d7 08 01	sta $0108d7	                  STA FAT32_Data_Base_Sector
.011082	af 2a 01 00	lda $00012a	                  LDA ADDER_R+2
.011086	8f d9 08 01	sta $0108d9	                  STA FAT32_Data_Base_Sector+2
.01108a	6b		rtl		                  RTL
.01108b					IFAT32_COMPUT_ROOT_DIR_POS
.01108b	c2 30		rep #$30	                REP #$30        ; set A&X long
.01108d	af 06 08 01	lda $010806	                  LDA FAT32_Nb_Of_FAT ; 16 bits number
.011091	8f 00 01 00	sta $000100	                  STA M0_OPERAND_A
.011095	af 0c 08 01	lda $01080c	                  LDA FAT32_Sector_per_Fat ; 16 bits number
.011099	8f 02 01 00	sta $000102	                  STA M0_OPERAND_B
.01109d	af 04 01 00	lda $000104	                  LDA M0_RESULT
.0110a1	8f 20 01 00	sta $000120	                  STA ADDER_A
.0110a5	af 06 01 00	lda $000106	                  LDA M0_RESULT+2
.0110a9	8f 22 01 00	sta $000122	                  STA ADDER_A+2
.0110ad	af bb 08 01	lda $0108bb	                  LDA FAT32_FAT_Base_Sector ;  reserved sector + partition ofset (FAT_Partition_address)
.0110b1	8f 24 01 00	sta $000124	                  STA ADDER_B
.0110b5	af bd 08 01	lda $0108bd	                  LDA FAT32_FAT_Base_Sector+2
.0110b9	8f 26 01 00	sta $000126	                  STA ADDER_B+2
.0110bd	af 28 01 00	lda $000128	                  LDA ADDER_R
.0110c1	8f 33 08 01	sta $010833	                  STA FAT32_Root_Base_Sector
.0110c5	af 2a 01 00	lda $00012a	                  LDA ADDER_R+2
.0110c9	8f 35 08 01	sta $010835	                  STA FAT32_Root_Base_Sector+2
.0110cd	6b		rtl		                  RTL
.0110ce					IFAT32_COMPUT_FAT_POS
.0110ce	c2 30		rep #$30	                REP #$30        ; set A&X long
.0110d0	af 04 08 01	lda $010804	                  LDA FAT32_Nb_Of_reserved_Cluster ; 16 bite number
.0110d4	8f 20 01 00	sta $000120	                  STA ADDER_A
.0110d8	a9 00 00	lda #$0000	                  LDA #0
.0110db	8f 22 01 00	sta $000122	                  STA ADDER_A+2
.0110df	af db 08 01	lda $0108db	                  LDA FAT_Partition_address ; 32 byte number
.0110e3	8f 24 01 00	sta $000124	                  STA ADDER_B
.0110e7	af dd 08 01	lda $0108dd	                  LDA FAT_Partition_address+2
.0110eb	8f 26 01 00	sta $000126	                  STA ADDER_B+2
.0110ef	af 28 01 00	lda $000128	                  LDA ADDER_R
.0110f3	8f bb 08 01	sta $0108bb	                  STA FAT32_FAT_Base_Sector
.0110f7	af 2a 01 00	lda $00012a	                  LDA ADDER_R+2
.0110fb	8f bd 08 01	sta $0108bd	                  STA FAT32_FAT_Base_Sector+2
.0110ff	6b		rtl		                  RTL
.011100					IFAT32_DEC_FAT_Linked_Entry
.011100	48		pha		                  PHA
.011101	af cb 08 01	lda $0108cb	                  LDA FAT32_FAT_Linked_Entry
.011105	8f 20 01 00	sta $000120	                  STA ADDER_A
.011109	af cd 08 01	lda $0108cd	                  LDA FAT32_FAT_Linked_Entry+2
.01110d	8f 22 01 00	sta $000122	                  STA ADDER_A+2
.011111	a9 ff ff	lda #$ffff	                  LDA #$FFFF ; load -1 in comp 2
.011114	8f 24 01 00	sta $000124	                  STA ADDER_B
.011118	a9 ff ff	lda #$ffff	                  LDA #$FFFF
.01111b	8f 26 01 00	sta $000126	                  STA ADDER_B+2
.01111f	af 28 01 00	lda $000128	                  LDA ADDER_R
.011123	8f cb 08 01	sta $0108cb	                  STA FAT32_FAT_Linked_Entry
.011127	af 2a 01 00	lda $00012a	                  LDA ADDER_R+2
.01112b	8f cd 08 01	sta $0108cd	                  STA FAT32_FAT_Linked_Entry+2
.01112f	68		pla		                  PLA
.011130	6b		rtl		                  RTL
.011131					IFAT32_GET_LONG_NAME_STRING
.011131	c2 30		rep #$30	                REP #$30        ; set A&X long
.011133	da		phx		                  PHX
.011134	48		pha		                  PHA
.011135	af 00 07 01	lda $010700	                  LDA FAT32_LONG_FILE_NAME_BUFFER_pointer
.011139	aa		tax		                  TAX
.01113a	af 3c 08 01	lda $01083c	                  LDA FAT32_Curent_Directory_entry_value+1
.01113e	9f 00 06 01	sta $010600,x	                  STA FAT32_LONG_FILE_NAME_BUFFER_256,x
.011142	e8		inx		                  INX
.011143	af 3e 08 01	lda $01083e	                  LDA FAT32_Curent_Directory_entry_value+3
.011147	9f 00 06 01	sta $010600,x	                  STA FAT32_LONG_FILE_NAME_BUFFER_256,x
.01114b	e8		inx		                  INX
.01114c	af 40 08 01	lda $010840	                  LDA FAT32_Curent_Directory_entry_value+5
.011150	9f 00 06 01	sta $010600,x	                  STA FAT32_LONG_FILE_NAME_BUFFER_256,x
.011154	e8		inx		                  INX
.011155	af 42 08 01	lda $010842	                  LDA FAT32_Curent_Directory_entry_value+7
.011159	9f 00 06 01	sta $010600,x	                  STA FAT32_LONG_FILE_NAME_BUFFER_256,x
.01115d	e8		inx		                  INX
.01115e	af 44 08 01	lda $010844	                  LDA FAT32_Curent_Directory_entry_value+9
.011162	9f 00 06 01	sta $010600,x	                  STA FAT32_LONG_FILE_NAME_BUFFER_256,x
.011166	e8		inx		                  INX
.011167	af 49 08 01	lda $010849	                  LDA FAT32_Curent_Directory_entry_value+14
.01116b	9f 00 06 01	sta $010600,x	                  STA FAT32_LONG_FILE_NAME_BUFFER_256,x
.01116f	e8		inx		                  INX
.011170	af 4b 08 01	lda $01084b	                  LDA FAT32_Curent_Directory_entry_value+16
.011174	9f 00 06 01	sta $010600,x	                  STA FAT32_LONG_FILE_NAME_BUFFER_256,x
.011178	e8		inx		                  INX
.011179	af 4d 08 01	lda $01084d	                  LDA FAT32_Curent_Directory_entry_value+18
.01117d	9f 00 06 01	sta $010600,x	                  STA FAT32_LONG_FILE_NAME_BUFFER_256,x
.011181	e8		inx		                  INX
.011182	af 4f 08 01	lda $01084f	                  LDA FAT32_Curent_Directory_entry_value+20
.011186	9f 00 06 01	sta $010600,x	                  STA FAT32_LONG_FILE_NAME_BUFFER_256,x
.01118a	e8		inx		                  INX
.01118b	af 51 08 01	lda $010851	                  LDA FAT32_Curent_Directory_entry_value+22
.01118f	9f 00 06 01	sta $010600,x	                  STA FAT32_LONG_FILE_NAME_BUFFER_256,x
.011193	e8		inx		                  INX
.011194	af 53 08 01	lda $010853	                  LDA FAT32_Curent_Directory_entry_value+24
.011198	9f 00 06 01	sta $010600,x	                  STA FAT32_LONG_FILE_NAME_BUFFER_256,x
.01119c	e8		inx		                  INX
.01119d	af 57 08 01	lda $010857	                  LDA FAT32_Curent_Directory_entry_value+28
.0111a1	9f 00 06 01	sta $010600,x	                  STA FAT32_LONG_FILE_NAME_BUFFER_256,x
.0111a5	e8		inx		                  INX
.0111a6	af 59 08 01	lda $010859	                  LDA FAT32_Curent_Directory_entry_value+30
.0111aa	9f 00 06 01	sta $010600,x	                  STA FAT32_LONG_FILE_NAME_BUFFER_256,x
.0111ae	e8		inx		                  INX
.0111af	8a		txa		                  TXA
.0111b0	8f 00 07 01	sta $010700	                  STA FAT32_LONG_FILE_NAME_BUFFER_pointer
.0111b4	68		pla		                  PLA
.0111b5	fa		plx		                  PLX
.0111b6	6b		rtl		                  RTL
>0111b7	00 00				FAT32_Temp_16_bite              .word 0
>0111b9	00 00 00 00 00 00 00 00		FAT32_Curent_Directory_entry_value_back_up     .fill 32,0 ; store the 32 byte of root entry
>0111c1	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>0111d1	00 00 00 00 00 00 00 00
>0111d9	00 00				IFAT32_GET_DIRECTORY_ENTRY_LONG_NAME_Need_to_restor_folder_entry .word 0
.0111db					IFAT32_GET_DIRECTORY_ENTRY_LONG_NAME
.0111db	c2 30		rep #$30	                REP #$30        ; set A&X long
.0111dd	da		phx		                  PHX
.0111de	48		pha		                  PHA ; Save the root entry index we want get the long for
.0111df	a9 00 00	lda #$0000	                  LDA #0
.0111e2	8f 00 07 01	sta $010700	                  STA FAT32_LONG_FILE_NAME_BUFFER_pointer
.0111e6	68		pla		                  PLA
.0111e7	48		pha		                  PHA
.0111e8	48		pha		                  PHA
.0111e9	da		phx		                  PHX
.0111ea	5a		phy		                  PHY
.0111eb	af b7 11 01	lda $0111b7	                  LDA FAT32_Temp_16_bite
.0111ef	1a		inc a		                  INC A
.0111f0	8f b7 11 01	sta $0111b7	                  STA FAT32_Temp_16_bite
.0111f4	e2 20		sep #$20	                SEP #$20        ; set A short
.0111f6	48		pha		                PHA             ; begin setdbr macro
.0111f7	08		php		                PHP
.0111f8	e2 20		sep #$20	                SEP #$20        ; set A short
.0111fa	a9 01		lda #$01	                LDA #`FAT32_Curent_Directory_entry_value
.0111fc	48		pha		                PHA
.0111fd	ab		plb		                PLB
.0111fe	28		plp		                PLP
.0111ff	68		pla		                PLA             ; end setdbr macro
.011200	c2 20		rep #$20	                REP #$20        ; set A long
.011202	a9 3b 08	lda #$083b	                  LDA #<>FAT32_Curent_Directory_entry_value
.011205	aa		tax		                  TAX
.011206	a9 b9 11	lda #$11b9	                  LDA #<>FAT32_Curent_Directory_entry_value_back_up
.011209	a8		tay		                  TAY
.01120a	a9 1f 00	lda #$001f	                  LDA #31
.01120d	54 01 01	mvn $01,$01	                  MVN `FAT32_Curent_Directory_entry_value, `FAT32_Curent_Directory_entry_value_back_up
.011210	7a		ply		                  PlY
.011211	fa		plx		                  PLX
.011212	68		pla		                  PLA
.011213	c9 00 00	cmp #$0000	                  CMP #0
.011216	d0 06		bne $01121e	                  BNE IFAT32_GET_DIRECTORY_ENTRY_LONG_NAME__READ_THE_PREVIOUS_ENTRY ; scan the previous folder entry to get the long name string
.011218					 IFAT32_GET_DIRECTORY_ENTRY_LONG_NAME__NO_MORE_ENTRY_TO_READ:
.011218	a9 ff ff	lda #$ffff	                  LDA #-1
.01121b	82 42 00	brl $011260	                  BRL IFAT32_GET_DIRECTORY_ENTRY_LONG_NAME__EXIT
.01121e					 IFAT32_GET_DIRECTORY_ENTRY_LONG_NAME__READ_THE_PREVIOUS_ENTRY:
.01121e	3a		dec a		                  DEC A; read the previous entry
.01121f	c9 ff ff	cmp #$ffff	                  CMP #$FFFF
.011222	f0 f4		beq $011218	                  BEQ IFAT32_GET_DIRECTORY_ENTRY_LONG_NAME__NO_MORE_ENTRY_TO_READ
.011224	48		pha		                  PHA ; save thwe curent folder entry
.011225	22 95 12 01	jsl $011295	                  JSL IFAT32_GET_DIRECTORY_ENTRY
.011229	ad 46 08	lda $010846	                  LDA FAT32_Curent_Directory_entry_value +11 ; test the dirrectory entry type
.01122c	29 ff 00	and #$00ff	                  AND #$00FF
.01122f	c9 0f 00	cmp #$000f	                  CMP #$0F ; test if it's a long name entry
.011232	d0 02		bne $011236	                  BNE IFAT32_GET_DIRECTORY_ENTRY_LONG_NAME__ERROR_IN_LONG_NAME_ORDER ; all the long name sould be aone after the otherone
.011234	80 07		bra $01123d	                  BRA IFAT32_GET_DIRECTORY_ENTRY_LONG_NAME__TEST_FOR_FIRST_LONG_NAME_ENTRY
.011236					 IFAT32_GET_DIRECTORY_ENTRY_LONG_NAME__ERROR_IN_LONG_NAME_ORDER:
.011236	68		pla		                  PLA ; get the foler index back
.011237	a9 fe ff	lda #$fffe	                  LDA #-2
.01123a	82 23 00	brl $011260	                  BRL IFAT32_GET_DIRECTORY_ENTRY_LONG_NAME__EXIT
.01123d					 IFAT32_GET_DIRECTORY_ENTRY_LONG_NAME__TEST_FOR_FIRST_LONG_NAME_ENTRY:
.01123d	22 31 11 01	jsl $011131	                  JSL IFAT32_GET_LONG_NAME_STRING
.011241	ad 3b 08	lda $01083b	                  LDA FAT32_Curent_Directory_entry_value
.011244	29 40 00	and #$0040	                  AND #$0040
.011247	c9 40 00	cmp #$0040	                  CMP #$40
.01124a	d0 02		bne $01124e	                  BNE IFAT32_GET_DIRECTORY_ENTRY_LONG_NAME__READ_THE_PREVIOUS_ENTRY_1
.01124c	80 04		bra $011252	                  BRA IFAT32_GET_DIRECTORY_ENTRY_LONG_NAME__END_READDING_LOOP
.01124e					 IFAT32_GET_DIRECTORY_ENTRY_LONG_NAME__READ_THE_PREVIOUS_ENTRY_1:
.01124e	68		pla		                  PLA ; get the foler index back
.01124f	82 cc ff	brl $01121e	                  BRL IFAT32_GET_DIRECTORY_ENTRY_LONG_NAME__READ_THE_PREVIOUS_ENTRY
.011252					 IFAT32_GET_DIRECTORY_ENTRY_LONG_NAME__END_READDING_LOOP:
.011252	ad 00 07	lda $010700	                  LDA FAT32_LONG_FILE_NAME_BUFFER_pointer
.011255	aa		tax		                  TAX
.011256	68		pla		                  PLA ; get the foler index back
.011257	a9 00 00	lda #$0000	                  LDA #0 ; end of string
.01125a	9d 00 06	sta $010600,x	                  STA FAT32_LONG_FILE_NAME_BUFFER_256,x
.01125d	a9 01 00	lda #$0001	                  LDA #1
.011260					 IFAT32_GET_DIRECTORY_ENTRY_LONG_NAME__EXIT:
.011260	48		pha		                  PHA
.011261	da		phx		                  PHX
.011262	5a		phy		                  PHY
.011263	e2 20		sep #$20	                SEP #$20        ; set A short
.011265	48		pha		                PHA             ; begin setdbr macro
.011266	08		php		                PHP
.011267	e2 20		sep #$20	                SEP #$20        ; set A short
.011269	a9 01		lda #$01	                LDA #`FAT32_Curent_Directory_entry_value
.01126b	48		pha		                PHA
.01126c	ab		plb		                PLB
.01126d	28		plp		                PLP
.01126e	68		pla		                PLA             ; end setdbr macro
.01126f	c2 20		rep #$20	                REP #$20        ; set A long
.011271	a9 b9 11	lda #$11b9	                  LDA #<>FAT32_Curent_Directory_entry_value_back_up
.011274	aa		tax		                  TAX
.011275	a9 3b 08	lda #$083b	                  LDA #<>FAT32_Curent_Directory_entry_value
.011278	a8		tay		                  TAY
.011279	a9 1f 00	lda #$001f	                  LDA #31
.01127c	54 01 01	mvn $01,$01	                  MVN `FAT32_Curent_Directory_entry_value_back_up, `FAT32_Curent_Directory_entry_value
.01127f	7a		ply		                  PlY
.011280	fa		plx		                  PLX
.011281	68		pla		                  PLA
.011282	fa		plx		                  PLX ; get the PLA out of the way without modifiying the return value
.011283	fa		plx		                  PLX
.011284	6b		rtl		                  RTL
.011285					IFAT32_GET_ROOT_DIRECTORY_ENTRY
.011285	c2 30		rep #$30	                REP #$30        ; set A&X long
.011287	48		pha		                  PHA
.011288	ad 2f 08	lda $01082f	                  LDA FAT32_Root_Sector_offset
.01128b	8d df 08	sta $0108df	                  STA FAT32_Curent_Folder_start_cluster
.01128e	ad 31 08	lda $010831	                  LDA FAT32_Root_Sector_offset+2
.011291	8d e1 08	sta $0108e1	                  STA FAT32_Curent_Folder_start_cluster+2
.011294	68		pla		                  PLA
.011295					IFAT32_GET_DIRECTORY_ENTRY
.011295	c2 30		rep #$30	                REP #$30        ; set A&X long
.011297	da		phx		                  PHX
.011298	48		pha		                  PHA ; Save the root entry index we want to read
.011299	a2 00 00	ldx #$0000	                  LDX #0 ; compute in witch sector the desired root entry is, 16 entry per sector so we just need to divid the sector size by 16
.01129c					 IFAT32_GET_DIRECTORY_ENTRY__16_DIV:
.01129c	4a		lsr a		                  LSR
.01129d	e8		inx		                  INC X
.01129e	e0 04 00	cpx #$0004	                  CPX #4 ; divide by 16
.0112a1	d0 f9		bne $01129c	                  BNE IFAT32_GET_DIRECTORY_ENTRY__16_DIV
.0112a3	c9 00 00	cmp #$0000	                  CMP #0
.0112a6	f0 2d		beq $0112d5	                  BEQ IFAT32_GET_ROOT_DIRECTORY_ENTRY__LOAD_CURENT_BASE_SECTOR ; the entry is in the first folder cluster
.0112a8	8d cb 08	sta $0108cb	                  STA FAT32_FAT_Linked_Entry ; store the number of sector from the base sector we need to read
.0112ab	a9 00 00	lda #$0000	                  LDA #0 ; entry index is 16 bit only so that limit at max 65535 entry per folder
.0112ae	8d cd 08	sta $0108cd	                  STA FAT32_FAT_Linked_Entry+2
.0112b1	ad df 08	lda $0108df	                  LDA FAT32_Curent_Folder_start_cluster ;FAT32_Root_Base_Sector
.0112b4	8d c3 08	sta $0108c3	                  STA FAT32_FAT_Entry
.0112b7	ad e1 08	lda $0108e1	                  LDA FAT32_Curent_Folder_start_cluster+2; FAT32_Root_Base_Sector +2
.0112ba	8d c5 08	sta $0108c5	                  STA FAT32_FAT_Entry + 2
.0112bd	22 3c 14 01	jsl $01143c	                  JSL IFAT32_READ_LINKED_FAT_ENTRY
.0112c1	ad c7 08	lda $0108c7	                  LDA FAT32_FAT_Next_Entry
.0112c4	c9 00 00	cmp #$0000	                  CMP #0
.0112c7	30 02		bmi $0112cb	                  BMI IFAT32_GET_ROOT_DIRECTORY_ENTRY__ERROR_RETURNED_temp_1
.0112c9	80 16		bra $0112e1	                  BRA IFAT32_GET_ROOT_DIRECTORY_ENTRY__LOAD_SECTOR ; the entry is not null so keep going
.0112cb					 IFAT32_GET_ROOT_DIRECTORY_ENTRY__ERROR_RETURNED_temp_1:
.0112cb	ad c9 08	lda $0108c9	                  LDA FAT32_FAT_Next_Entry+2
.0112ce	c9 00 00	cmp #$0000	                  CMP #0
.0112d1	30 5e		bmi $011331	                  BMI IFAT32_GET_ROOT_DIRECTORY_ENTRY__ERROR_RETURNED
.0112d3	80 0c		bra $0112e1	                  BRA IFAT32_GET_ROOT_DIRECTORY_ENTRY__LOAD_SECTOR ; the entry is not null so keep going
.0112d5					 IFAT32_GET_ROOT_DIRECTORY_ENTRY__LOAD_CURENT_BASE_SECTOR:
.0112d5	ad df 08	lda $0108df	                  LDA FAT32_Curent_Folder_start_cluster
.0112d8	8d c7 08	sta $0108c7	                  STA FAT32_FAT_Next_Entry
.0112db	ad e1 08	lda $0108e1	                  LDA FAT32_Curent_Folder_start_cluster+2
.0112de	8d c9 08	sta $0108c9	                  STA FAT32_FAT_Next_Entry+2
.0112e1					 IFAT32_GET_ROOT_DIRECTORY_ENTRY__LOAD_SECTOR:
.0112e1	ad c7 08	lda $0108c7	                  LDA FAT32_FAT_Next_Entry ;
.0112e4	8f 20 01 00	sta $000120	                  STA ADDER_A
.0112e8	ad c9 08	lda $0108c9	                  LDA FAT32_FAT_Next_Entry+2
.0112eb	8f 22 01 00	sta $000122	                  STA ADDER_A+2
.0112ef	ad 33 08	lda $010833	                  LDA FAT32_Root_Base_Sector ; 32 byte number
.0112f2	8f 24 01 00	sta $000124	                  STA ADDER_B
.0112f6	ad 35 08	lda $010835	                  LDA FAT32_Root_Base_Sector+2
.0112f9	8f 26 01 00	sta $000126	                  STA ADDER_B+2
.0112fd	af 2a 01 00	lda $00012a	                  LDA ADDER_R+2 ;
.011301	8f 22 01 00	sta $000122	                  STA ADDER_A+2
.011305	af 28 01 00	lda $000128	                  LDA ADDER_R
.011309	8f 20 01 00	sta $000120	                  STA ADDER_A
.01130d	a9 fe ff	lda #$fffe	                  LDA #$FFFE
.011310	8f 24 01 00	sta $000124	                  STA ADDER_B
.011314	a9 ff ff	lda #$ffff	                  LDA #$FFFF
.011317	8f 26 01 00	sta $000126	                  STA ADDER_B+2
.01131b	af 28 01 00	lda $000128	                  LDA ADDER_R
.01131f	cd 37 08	cmp $010837	                  CMP FAT32_Curent_Directory_Sector_loaded_in_ram
.011322	d0 10		bne $011334	                  BNE IFAT32_GET_ROOT_DIRECTORY_ENTRY__NEED_TO_LOAD_A_NEW_SECTOR
.011324	af 2a 01 00	lda $00012a	                  LDA ADDER_R+2
.011328	cd 39 08	cmp $010839	                  CMP FAT32_Curent_Directory_Sector_loaded_in_ram+2
.01132b	d0 07		bne $011334	                  BNE IFAT32_GET_ROOT_DIRECTORY_ENTRY__NEED_TO_LOAD_A_NEW_SECTOR
.01132d	f0 28		beq $011357	                  BEQ FAT32_FDD_SECTOR_ALREADDY_LOADDED_IN_RAM
.01132f	80 03		bra $011334	 BRA IFAT32_GET_ROOT_DIRECTORY_ENTRY__ERROR_RETURNED_NEXT
.011331	82 3d 00	brl $011371	 IFAT32_GET_ROOT_DIRECTORY_ENTRY__ERROR_RETURNED: BRL IFAT32_GET_ROOT_DIRECTORY_ENTRY__ERROR_RETURNED_1
.011334					 IFAT32_GET_ROOT_DIRECTORY_ENTRY__ERROR_RETURNED_NEXT
.011334					 IFAT32_GET_ROOT_DIRECTORY_ENTRY__NEED_TO_LOAD_A_NEW_SECTOR:
.011334	af 2a 01 00	lda $00012a	                  LDA ADDER_R+2
.011338	8d 39 08	sta $010839	                  STA FAT32_Curent_Directory_Sector_loaded_in_ram+2 ; save the new sector to load
.01133b	af 28 01 00	lda $000128	                  LDA ADDER_R
.01133f	8d 37 08	sta $010837	                  STA FAT32_Curent_Directory_Sector_loaded_in_ram
.011342	a9 01 00	lda #$0001	                  LDA #`FAT32_FOLDER_ADDRESS_BUFFER_512 ; load the byte nb 3 (bank byte)
.011345	48		pha		                  PHA
.011346	a9 00 04	lda #$0400	                  LDA #<>FAT32_FOLDER_ADDRESS_BUFFER_512 ; load the low world part of the buffer address
.011349	48		pha		                  PHA
.01134a	ad 39 08	lda $010839	                  LDA FAT32_Curent_Directory_Sector_loaded_in_ram+2 ; Get the ROOT directory sector to read
.01134d	aa		tax		                  TAX
.01134e	ad 37 08	lda $010837	                  LDA FAT32_Curent_Directory_Sector_loaded_in_ram
.011351	22 84 14 01	jsl $011484	                  JSL IFAT_READ_SECTOR
.011355	68		pla		                  PLA
.011356	68		pla		                  PLA
.011357					 FAT32_FDD_SECTOR_ALREADDY_LOADDED_IN_RAM:
.011357	68		pla		                  PLA ; GET the root entry
.011358	29 0f 00	and #$000f	                  AND #$0F ; get only the 4 first byte to get the 16 value ofset in the root entry sector loades in ram (16 entry per sector)
.01135b	0a		asl a		                  ASL
.01135c	0a		asl a		                  ASL
.01135d	0a		asl a		                  ASL
.01135e	0a		asl a		                  ASL
.01135f	0a		asl a		                  ASL ; now A contain the ofset to read the root entry from
.011360	18		clc		                  CLC
.011361	69 00 04	adc #$0400	                  ADC #<>FAT32_FOLDER_ADDRESS_BUFFER_512
.011364	aa		tax		                  TAX
.011365	a9 3b 08	lda #$083b	                  LDA #<>FAT32_Curent_Directory_entry_value
.011368	a8		tay		                  TAY
.011369	a9 1f 00	lda #$001f	                  LDA #31
.01136c	54 01 01	mvn $01,$01	                  MVN `FAT32_FOLDER_ADDRESS_BUFFER_512, `FAT32_Curent_Directory_entry_value
.01136f	80 01		bra $011372	                  BRA IFAT32_GET_ROOT_DIRECTORY_ENTRY___EXIT_OK
.011371					 IFAT32_GET_ROOT_DIRECTORY_ENTRY__ERROR_RETURNED_1:
.011371	fa		plx		                  PLX
.011372					 IFAT32_GET_ROOT_DIRECTORY_ENTRY___EXIT_OK
.011372	fa		plx		                  PLX
.011373	6b		rtl		                  RTL
.011374					FAT32_IFAT_GET_FAT_ENTRY
.011374	48		pha		                  PHA
.011375	da		phx		                  PHX
.011376	5a		phy		                  PHY
.011377	ad c5 08	lda $0108c5	                  LDA FAT32_FAT_Entry+2
.01137a	c9 00 00	cmp #$0000	                  CMP #0
.01137d	d0 17		bne $011396	                  BNE FAT32_FAT_ENTRY_FIND_THE_CLUSTER_32_BYTE_NUMBER ; the FAT entry is definitly not in the first FAT cluster as MSB != 0
.01137f	8d c9 08	sta $0108c9	                  STA FAT32_FAT_Next_Entry+2 ; the MSB of the sector will be for sure 0
.011382	ad c3 08	lda $0108c3	                  LDA FAT32_FAT_Entry
.011385	4a		lsr a		                  LSR A
.011386	4a		lsr a		                  LSR A
.011387	4a		lsr a		                  LSR A
.011388	4a		lsr a		                  LSR A
.011389	4a		lsr a		                  LSR A
.01138a	4a		lsr a		                  LSR A
.01138b	4a		lsr a		                  LSR A ; /128 (512/4)=> 128 entry per sector
.01138c	8d c7 08	sta $0108c7	                  STA FAT32_FAT_Next_Entry
.01138f	c9 00 00	cmp #$0000	                  CMP #0
.011392	d0 27		bne $0113bb	                  BNE FAT32_FAT_ENTRY_FIND_THE_CLUSTER_16_BYTE_NUMBER
.011394	80 38		bra $0113ce	                  BRA FAT32_ENTRY_SECTOR_LOCATION_FIND ;  FAT entry is in  first FAT clustrer (entry smaller than 128)
.011396					 FAT32_FAT_ENTRY_FIND_THE_CLUSTER_32_BYTE_NUMBER
.011396	ad c5 08	lda $0108c5	                  LDA FAT32_FAT_Entry+2
.011399	4a		lsr a		                  LSR A
.01139a	4a		lsr a		                  LSR A
.01139b	4a		lsr a		                  LSR A
.01139c	4a		lsr a		                  LSR A
.01139d	4a		lsr a		                  LSR A
.01139e	4a		lsr a		                  LSR A
.01139f	4a		lsr a		                  LSR A ; /128 (512/4)=> 128 entry per sector
.0113a0	8d c9 08	sta $0108c9	                  STA FAT32_FAT_Next_Entry+2 ; use FAT32_FAT_Next_Entry as a temporary variable
.0113a3	ad c5 08	lda $0108c5	                  LDA FAT32_FAT_Entry+2 ;extract the 7 bits of the HIGHT part of FAT32_FAT_Entry to casrry them in the LOW part
.0113a6	29 7f 00	and #$007f	                  AND #$007F
.0113a9	0a		asl a		                  ASL A
.0113aa	0a		asl a		                  ASL A
.0113ab	0a		asl a		                  ASL A
.0113ac	0a		asl a		                  ASL A
.0113ad	0a		asl a		                  ASL A
.0113ae	0a		asl a		                  ASL A
.0113af	0a		asl a		                  ASL A
.0113b0	0a		asl a		                  ASL A
.0113b1	0a		asl a		                  ASL A
.0113b2	0a		asl a		                  ASL A
.0113b3	0a		asl a		                  ASL A
.0113b4	0a		asl a		                  ASL A
.0113b5	0a		asl a		                  ASL A
.0113b6	0a		asl a		                  ASL A
.0113b7	0a		asl a		                  ASL A ; get the 4 bit in the right position to be added to the LOW part
.0113b8	8d c7 08	sta $0108c7	                  STA FAT32_FAT_Next_Entry
.0113bb					 FAT32_FAT_ENTRY_FIND_THE_CLUSTER_16_BYTE_NUMBER
.0113bb	ad c3 08	lda $0108c3	                  LDA FAT32_FAT_Entry
.0113be	4a		lsr a		                  LSR A
.0113bf	4a		lsr a		                  LSR A
.0113c0	4a		lsr a		                  LSR A
.0113c1	4a		lsr a		                  LSR A
.0113c2	4a		lsr a		                  LSR A
.0113c3	4a		lsr a		                  LSR A
.0113c4	4a		lsr a		                  LSR A ; divide the high part of the FAT entry requested by 16  because there is 16 FAt entry per sector
.0113c5	29 ff 7f	and #$7fff	                  AND #$7FFF
.0113c8	0d c7 08	ora $0108c7	                  ORA FAT32_FAT_Next_Entry
.0113cb	8d c7 08	sta $0108c7	                  STA FAT32_FAT_Next_Entry ; Now contain the 32 bit FAT Cluster to load
.0113ce					 FAT32_ENTRY_SECTOR_LOCATION_FIND:
.0113ce	ad c7 08	lda $0108c7	                  LDA FAT32_FAT_Next_Entry ;
.0113d1	8f 20 01 00	sta $000120	                  STA ADDER_A
.0113d5	ad c9 08	lda $0108c9	                  LDA FAT32_FAT_Next_Entry+2
.0113d8	8f 22 01 00	sta $000122	                  STA ADDER_A+2
.0113dc	ad bb 08	lda $0108bb	                  LDA FAT32_FAT_Base_Sector ; 32 byte number
.0113df	8f 24 01 00	sta $000124	                  STA ADDER_B
.0113e3	ad bd 08	lda $0108bd	                  LDA FAT32_FAT_Base_Sector+2
.0113e6	8f 26 01 00	sta $000126	                  STA ADDER_B+2
.0113ea	af 28 01 00	lda $000128	                  LDA ADDER_R
.0113ee	cd bf 08	cmp $0108bf	                  CMP FAT32_FAT_Sector_loaded_in_ram
.0113f1	d0 0b		bne $0113fe	                  BNE FAT32_IFAT_GET_FAT_ENTRY___NEED_TO_LOAD_A_NEW_SECTOR
.0113f3	af 2a 01 00	lda $00012a	                  LDA ADDER_R+2
.0113f7	cd 39 08	cmp $010839	                  CMP FAT32_Curent_Directory_Sector_loaded_in_ram+2
.0113fa	d0 02		bne $0113fe	                  BNE FAT32_IFAT_GET_FAT_ENTRY___NEED_TO_LOAD_A_NEW_SECTOR
.0113fc	f0 23		beq $011421	                  BEQ FAT32_IFAT_GET_FAT_ENTRY___SECTOR_ALREADDY_LOADDED_IN_RAM
.0113fe					 FAT32_IFAT_GET_FAT_ENTRY___NEED_TO_LOAD_A_NEW_SECTOR:
.0113fe	af 2a 01 00	lda $00012a	                  LDA ADDER_R+2
.011402	8d c1 08	sta $0108c1	                  STA FAT32_FAT_Sector_loaded_in_ram+2 ; save the new sector to load
.011405	af 28 01 00	lda $000128	                  LDA ADDER_R
.011409	8d bf 08	sta $0108bf	                  STA FAT32_FAT_Sector_loaded_in_ram
.01140c	a9 01 00	lda #$0001	                  LDA #`FAT32_FAT_ADDRESS_BUFFER_512 ; load the byte nb 3 (bank byte)
.01140f	48		pha		                  PHA
.011410	a9 00 02	lda #$0200	                  LDA #<>FAT32_FAT_ADDRESS_BUFFER_512 ; load the low world part of the buffer address
.011413	48		pha		                  PHA
.011414	ad c1 08	lda $0108c1	                  LDA FAT32_FAT_Sector_loaded_in_ram+2 ; read the ROOT directory sector saved at the begining of the function
.011417	aa		tax		                  TAX
.011418	ad bf 08	lda $0108bf	                  LDA FAT32_FAT_Sector_loaded_in_ram
.01141b	22 84 14 01	jsl $011484	                  JSL IFAT_READ_SECTOR
.01141f	fa		plx		                  PLX
.011420	fa		plx		                  PLX
.011421					 FAT32_IFAT_GET_FAT_ENTRY___SECTOR_ALREADDY_LOADDED_IN_RAM:
.011421	ad c3 08	lda $0108c3	                  LDA FAT32_FAT_Entry
.011424	29 7f 00	and #$007f	                  AND #$007F ; get only the 7 first byte to get the ofset in the curent FAT cluster loades
.011427	0a		asl a		                  ASL
.011428	0a		asl a		                  ASL ; *4 to point to the FAT entry 32 byte
.011429	18		clc		                  CLC
.01142a	69 00 02	adc #$0200	                  ADC #<>FAT32_FAT_ADDRESS_BUFFER_512
.01142d	aa		tax		                  TAX
.01142e	a9 c7 08	lda #$08c7	                  LDA #<>FAT32_FAT_Next_Entry
.011431	a8		tay		                  TAY
.011432	a9 03 00	lda #$0003	                  LDA #3 ; read 4 byte
.011435	54 01 01	mvn $01,$01	                  MVN `FAT32_FAT_ADDRESS_BUFFER_512,`FAT32_FAT_Next_Entry
.011438	7a		ply		                  PLY
.011439	fa		plx		                  PLX
.01143a	68		pla		                  PLA
.01143b	6b		rtl		                  RTL
.01143c					IFAT32_READ_LINKED_FAT_ENTRY
.01143c	da		phx		                  PHX
.01143d					 IFAT32_READ_LINKED_FAT_ENTRY___READ_NEXT_FAT:
.01143d	22 74 13 01	jsl $011374	                  JSL FAT32_IFAT_GET_FAT_ENTRY
.011441	22 f0 16 01	jsl $0116f0	                  JSL FAT32_Test_Fat_Entry_Validity_Next
.011445	c9 01 00	cmp #$0001	                  CMP #1
.011448	f0 03		beq $01144d	                  BEQ IFAT32_READ_LINKED_FAT_ENTRY___NEXT_CLUSTER_VALID
.01144a	82 35 00	brl $011482	                  BRL IFAT32_READ_LINKED_FAT_ENTRY___EXIT
.01144d					 IFAT32_READ_LINKED_FAT_ENTRY___NEXT_CLUSTER_VALID:
.01144d	22 00 11 01	jsl $011100	                  JSL IFAT32_DEC_FAT_Linked_Entry
.011451	ad cb 08	lda $0108cb	                  LDA FAT32_FAT_Linked_Entry
.011454	c9 00 00	cmp #$0000	                  CMP #0
.011457	f0 0f		beq $011468	                  BEQ IFAT32_READ_LINKED_FAT_ENTRY___TEST_HIGH_PART
.011459	ad c7 08	lda $0108c7	                  LDA FAT32_FAT_Next_Entry
.01145c	8d c3 08	sta $0108c3	                  STA FAT32_FAT_Entry
.01145f	ad c9 08	lda $0108c9	                  LDA FAT32_FAT_Next_Entry+2
.011462	8d c5 08	sta $0108c5	                  STA FAT32_FAT_Entry+2
.011465	82 d5 ff	brl $01143d	                  BRL IFAT32_READ_LINKED_FAT_ENTRY___READ_NEXT_FAT
.011468					 IFAT32_READ_LINKED_FAT_ENTRY___TEST_HIGH_PART:
.011468	ad cd 08	lda $0108cd	                  LDA FAT32_FAT_Linked_Entry+2
.01146b	c9 00 00	cmp #$0000	                  CMP #0
.01146e	f0 0f		beq $01147f	                  BEQ IFAT32_READ_LINKED_FAT_ENTRY___ALL_LINKED_FAT_PARSED
.011470	ad c7 08	lda $0108c7	                  LDA FAT32_FAT_Next_Entry
.011473	8d c3 08	sta $0108c3	                  STA FAT32_FAT_Entry
.011476	ad c9 08	lda $0108c9	                  LDA FAT32_FAT_Next_Entry+2
.011479	8d c5 08	sta $0108c5	                  STA FAT32_FAT_Entry+2
.01147c	82 be ff	brl $01143d	                  BRL IFAT32_READ_LINKED_FAT_ENTRY___READ_NEXT_FAT
.01147f					 IFAT32_READ_LINKED_FAT_ENTRY___ALL_LINKED_FAT_PARSED:
.01147f	a9 01 00	lda #$0001	                  LDA #1
.011482					 IFAT32_READ_LINKED_FAT_ENTRY___EXIT:
.011482	fa		plx		                  PLX
.011483	6b		rtl		                  RTL
.011484					IFAT_READ_SECTOR
.011484	48		pha		                PHA
.011485	ad f7 08	lda $0108f7	                LDA FAT32_SD_FDD_HDD_SELL
.011488	c9 02 00	cmp #$0002	                CMP FAT32_HDD
.01148b	f0 0b		beq $011498	                BEQ IFAT_READ_SECTOR__HDD
.01148d	c9 02 00	cmp #$0002	                CMP FAT32_HDD
.011490	f0 0c		beq $01149e	                BEQ IFAT_READ_SECTOR__FDD
.011492					 IFAT_READ_SECTOR_SD:
.011492	68		pla		                PLA ; get the sector to read back
.011493	22 02 15 01	jsl $011502	                JSL ISD_READ
.011497	6b		rtl		                RTL
.011498					 IFAT_READ_SECTOR__HDD:
.011498	68		pla		                PLA ; get the sector to read back
.011499	22 b8 14 01	jsl $0114b8	                JSL IHDD_READ
.01149d	6b		rtl		                RTL
.01149e					 IFAT_READ_SECTOR__FDD:
.01149e	68		pla		                PLA ; get the sector to read back
.01149f	6b		rtl		                RTL
.0114a0					IFAT_WRITE_SECTOR
.0114a0	48		pha		                PHA
.0114a1	ad f7 08	lda $0108f7	                LDA FAT32_SD_FDD_HDD_SELL
.0114a4	c9 02 00	cmp #$0002	                CMP FAT32_HDD
.0114a7	f0 0b		beq $0114b4	                BEQ IFAT_WRITE_SECTOR__HDD
.0114a9	c9 02 00	cmp #$0002	                CMP FAT32_HDD
.0114ac	f0 08		beq $0114b6	                BEQ IFAT_WRITE_SECTOR__FDD
.0114ae					 IFAT_WRITE_SECTOR_SD:
.0114ae	68		pla		                PLA ; get the sector to read back
.0114af	22 84 15 01	jsl $011584	                JSL ISD_WRITE
.0114b3	6b		rtl		                RTL
.0114b4					 IFAT_WRITE_SECTOR__HDD:
.0114b4	68		pla		                PLA ; get the sector to read back
.0114b5	6b		rtl		                RTL
.0114b6					 IFAT_WRITE_SECTOR__FDD:
.0114b6	68		pla		                PLA ; get the sector to read back
.0114b7	6b		rtl		                RTL
.0114b8					IHDD_READ
.0114b8	c2 30		rep #$30	                REP #$30        ; set A&X long
.0114ba	48		pha		                PHA ; save the sector to read
.0114bb	a3 08		lda $08,s	                LDA 8,S
.0114bd	a8		tay		                TAY
.0114be	a3 06		lda $06,s	                LDA 6,S
.0114c0	a8		tay		                TAY
.0114c1	68		pla		                PLA
.0114c2	48		pha		                PHA ; save the sector read for the return value
.0114c3	0a		asl a		                ASL A ; convert the sector number into byte count
.0114c4	0a		asl a		                ASL A
.0114c5	0a		asl a		                ASL A
.0114c6	0a		asl a		                ASL A
.0114c7	0a		asl a		                ASL A
.0114c8	0a		asl a		                ASL A
.0114c9	0a		asl a		                ASL A
.0114ca	0a		asl a		                ASL A
.0114cb	0a		asl a		                ASL A
.0114cc	69 00 00	adc #$0000	                ADC #<>data_hard_drive
.0114cf	aa		tax		                TAX
.0114d0	e2 20		sep #$20	                SEP #$20        ; set A short
.0114d2	a3 08		lda $08,s	                LDA 8,S
.0114d4	8d dd 14	sta $0114dd	                STA HDD_MVN_INSTRUCTION_ADDRESS + 1 ; rewrite the second parameter of the instruction in RAM
.0114d7	c2 30		rep #$30	                REP #$30        ; set A&X long
.0114d9	a9 ff 01	lda #$01ff	                LDA #511
.0114dc	54 01 12	mvn $12,$01	 HDD_MVN_INSTRUCTION_ADDRESS  MVN `data_hard_drive,`FAT32_DATA_ADDRESS_BUFFER_512
.0114df	68		pla		                PLA
.0114e0	6b		rtl		                RTL
.0114e1					ISD_INIT
.0114e1	c2 30		rep #$30	                REP #$30        ; set A&X long
.0114e3	a9 01 00	lda #$0001	                LDA #SDC_TRANS_INIT_SD
.0114e6	8f 02 ea af	sta $afea02	                STA SDC_TRANS_TYPE_REG;
.0114ea	a9 01 00	lda #$0001	                LDA #SDC_TRANS_START
.0114ed	8f 03 ea af	sta $afea03	                STA SDC_TRANS_CONTROL_REG;
.0114f1					 ISD_INIT_TEST_SD_INIT_FLAG:
.0114f1	af 04 ea af	lda $afea04	                LDA SDC_TRANS_STATUS_REG  ; read the bussy state flag : 1 busy / 0 finished
.0114f5	29 01 00	and #$0001	                AND #SDC_TRANS_BUSY
.0114f8	c9 01 00	cmp #$0001	                CMP #SDC_TRANS_BUSY
.0114fb	f0 f4		beq $0114f1	                BEQ ISD_INIT_TEST_SD_INIT_FLAG
.0114fd	af 05 ea af	lda $afea05	                LDA SDC_TRANS_ERROR_REG ; read the error status
.011501	6b		rtl		                RTL
.011502					ISD_READ
.011502	c2 30		rep #$30	                REP #$30        ; set A&X long
.011504	0a		asl a		                ASL ;get the 512 byte ofset from the sector index
.011505	90 0b		bcc $011512	                BCC ISD_READ__NO_OVERFLOW
.011507	48		pha		                PHA
.011508	8a		txa		                TXA
.011509	0a		asl a		                ASL
.01150a	18		clc		                CLC
.01150b	69 01 00	adc #$0001	                ADC #1
.01150e	aa		tax		                TAX
.01150f	68		pla		                PLA
.011510	80 05		bra $011517	                BRA ISD_READ__OVERFLOW_DONE
.011512					 ISD_READ__NO_OVERFLOW:
.011512	48		pha		                PHA
.011513	8a		txa		                TXA
.011514	0a		asl a		                ASL
.011515	aa		tax		                TAX
.011516	68		pla		                PLA
.011517					 ISD_READ__OVERFLOW_DONE:
.011517	e2 20		sep #$20	                SEP #$20        ; set A short
.011519	8f 08 ea af	sta $afea08	                STA SDC_SD_ADDR_15_8_REG
.01151d	eb		xba		                XBA ; get the other part of the 16 byte A register
.01151e	8f 09 ea af	sta $afea09	                STA SDC_SD_ADDR_23_16_REG
.011522	8a		txa		                TXA
.011523	29 0f		and #$0f	                AND #$0F
.011525	8f 0a ea af	sta $afea0a	                STA SDC_SD_ADDR_31_24_REG
.011529	a9 00		lda #$00	                LDA #0
.01152b	8f 07 ea af	sta $afea07	                STA SDC_SD_ADDR_7_0_REG ; all the time 0 as we are readding 512 byte block
.01152f	a9 01		lda #$01	                LDA #1
.011531	8f 14 ea af	sta $afea14	                STA SDC_RX_FIFO_CTRL_REG ; Clear the RX FIFO
.011535	a9 02		lda #$02	                LDA #SDC_TRANS_READ_BLK
.011537	8f 02 ea af	sta $afea02	                STA SDC_TRANS_TYPE_REG;
.01153b	a9 01		lda #$01	                LDA #SDC_TRANS_START
.01153d	8f 03 ea af	sta $afea03	                STA SDC_TRANS_CONTROL_REG;
.011541					 ISD_READ_TEST_SD_INIT_FLAG:
.011541	af 04 ea af	lda $afea04	                LDA SDC_TRANS_STATUS_REG  ; read the bussy state flag : 1 busy / 0 finished
.011545	29 01		and #$01	                AND #SDC_TRANS_BUSY
.011547	c9 01		cmp #$01	                CMP #SDC_TRANS_BUSY
.011549	f0 f6		beq $011541	                BEQ ISD_READ_TEST_SD_INIT_FLAG
.01154b	af 05 ea af	lda $afea05	                LDA SDC_TRANS_ERROR_REG ; read the error status
.01154f	c9 00		cmp #$00	                CMP #0
.011551	d0 27		bne $01157a	                BNE ISD_READ__INIT_RETURN
.011553					 ISD_READ_GET_BYTE_COUNT:
.011553	e2 20		sep #$20	                SEP #$20        ; set A short
.011555	a3 09		lda $09,s	                LDA 9,S
.011557	8f 71 15 01	sta $011571	                STA @l ISD_READ_+ 3
.01155b	a3 08		lda $08,s	                LDA 8,S
.01155d	8f 70 15 01	sta $011570	                STA @l ISD_READ_+ 2
.011561	a3 07		lda $07,s	                LDA 7,S
.011563	8f 6f 15 01	sta $01156f	                STA @l ISD_READ_+ 1
.011567	a2 00 00	ldx #$0000	                LDX #0
.01156a					 ISD_READ__READ_LOOP_BYTE:
.01156a	af 10 ea af	lda $afea10	                LDA SDC_RX_FIFO_DATA_REG
.01156e	9f 00 00 01	sta $010000,x	 ISD_READ_       STA @l FAT32_DATA_ADDRESS_BUFFER_512,x
.011572	e8		inx		                INX
.011573	e0 00 02	cpx #$0200	                CPX #$200
.011576	d0 f2		bne $01156a	                BNE ISD_READ__READ_LOOP_BYTE
.011578	c2 20		rep #$20	                REP #$20        ; set A long
.01157a					 ISD_READ__INIT_RETURN:
.01157a	a9 01 00	lda #$0001	                LDA #1
.01157d	8f 14 ea af	sta $afea14	                STA SDC_RX_FIFO_CTRL_REG ; discard all possible other byt
.011581	c2 30		rep #$30	                REP #$30        ; set A&X long
.011583	6b		rtl		                RTL
.011584					ISD_WRITE
.011584	c2 30		rep #$30	                REP #$30        ; set A&X long
.011586	0a		asl a		                ASL ;get the 512 byte ofset from the sector index
.011587	90 0b		bcc $011594	                BCC ISD_WRITE__NO_OVERFLOW
.011589	48		pha		                PHA
.01158a	8a		txa		                TXA
.01158b	0a		asl a		                ASL
.01158c	18		clc		                CLC
.01158d	69 01 00	adc #$0001	                ADC #1
.011590	aa		tax		                TAX
.011591	68		pla		                PLA
.011592	80 05		bra $011599	                BRA ISD_WRITE__OVERFLOW_DONE
.011594					 ISD_WRITE__NO_OVERFLOW:
.011594	48		pha		                PHA
.011595	8a		txa		                TXA
.011596	0a		asl a		                ASL
.011597	aa		tax		                TAX
.011598	68		pla		                PLA
.011599					 ISD_WRITE__OVERFLOW_DONE:
.011599	48		pha		                PHA
.01159a	da		phx		                PHX
.01159b	e2 20		sep #$20	                SEP #$20        ; set A short
.01159d	a9 01		lda #$01	                LDA #1
.01159f	8f 24 ea af	sta $afea24	                STA SDC_TX_FIFO_CTRL_REG
.0115a3	a3 0d		lda $0d,s	                LDA 13,S
.0115a5	8f bb 15 01	sta $0115bb	                STA @l ISD_WRITE_+ 3
.0115a9	a3 0c		lda $0c,s	                LDA 12,S
.0115ab	8f ba 15 01	sta $0115ba	                STA @l ISD_WRITE_+ 2
.0115af	a3 0b		lda $0b,s	                LDA 11,S
.0115b1	8f b9 15 01	sta $0115b9	                STA @l ISD_WRITE_+ 1
.0115b5	a2 00 00	ldx #$0000	                LDX #0
.0115b8					 ISD_WRITE__WRITE_LOOP_BYTE:
.0115b8	bf 00 00 01	lda $010000,x	 ISD_WRITE_     LDA @l FAT32_DATA_ADDRESS_BUFFER_512,x
.0115bc	8f 20 ea af	sta $afea20	                STA SDC_TX_FIFO_DATA_REG
.0115c0	e8		inx		                INX
.0115c1	e0 00 02	cpx #$0200	                CPX #$200
.0115c4	d0 f2		bne $0115b8	                BNE ISD_WRITE__WRITE_LOOP_BYTE
.0115c6	c2 20		rep #$20	                REP #$20        ; set A long
.0115c8	fa		plx		                PLX
.0115c9	68		pla		                PLA
.0115ca	e2 20		sep #$20	                SEP #$20        ; set A short
.0115cc	8f 08 ea af	sta $afea08	                STA @l SDC_SD_ADDR_15_8_REG
.0115d0	eb		xba		                XBA ; get the other part of the 16 byte A register
.0115d1	8f 09 ea af	sta $afea09	                STA @l SDC_SD_ADDR_23_16_REG
.0115d5	8a		txa		                TXA
.0115d6	29 0f		and #$0f	                AND #$0F
.0115d8	8f 0a ea af	sta $afea0a	                STA @l SDC_SD_ADDR_31_24_REG
.0115dc	a9 00		lda #$00	                LDA #0
.0115de	8f 07 ea af	sta $afea07	                STA @l SDC_SD_ADDR_7_0_REG ; all the time 0 as we are readding 512 byte block
.0115e2	a9 03		lda #$03	                LDA #SDC_TRANS_WRITE_BLK
.0115e4	8f 02 ea af	sta $afea02	                STA SDC_TRANS_TYPE_REG;
.0115e8	a9 01		lda #$01	                LDA #SDC_TRANS_START
.0115ea	8f 03 ea af	sta $afea03	                STA SDC_TRANS_CONTROL_REG;
.0115ee					 ISD_WRITE_TEST_SD_INIT_FLAG:
.0115ee	af 04 ea af	lda $afea04	                LDA SDC_TRANS_STATUS_REG  ; read the bussy state flag : 1 busy / 0 finished
.0115f2	29 01		and #$01	                AND #SDC_TRANS_BUSY
.0115f4	c9 01		cmp #$01	                CMP #SDC_TRANS_BUSY
.0115f6	f0 f6		beq $0115ee	                BEQ ISD_WRITE_TEST_SD_INIT_FLAG
.0115f8	af 05 ea af	lda $afea05	                LDA SDC_TRANS_ERROR_REG ; read the error status
.0115fc	29 1e		and #$1e	                AND #30 ; get the TX error bits
.0115fe	c9 00		cmp #$00	                CMP #0
.011600	d0 04		bne $011606	                BNE ISD_WRITE__ERROR_RETURN
.011602	a9 01		lda #$01	                LDA #1
.011604	80 02		bra $011608	                BRA ISD_WRITE__OK_RETURN
.011606					 ISD_WRITE__ERROR_RETURN:
.011606	a9 ff		lda #$ff	                LDA #-1
.011608					 ISD_WRITE__OK_RETURN:
.011608	48		pha		                PHA
.011609	a9 01		lda #$01	                LDA #1
.01160b	8f 24 ea af	sta $afea24	                STA SDC_TX_FIFO_CTRL_REG
.01160f	68		pla		                PLA
.011610	c2 30		rep #$30	                REP #$30        ; set A&X long
.011612	6b		rtl		                RTL

;******  Processing file: src\FAT32_Utils.asm

.011613					FAT32_GET_FOLDER_ENTRY_TYPE
.011613	ad 3b 08	lda $01083b	                  LDA FAT32_Curent_Directory_entry_value
.011616	29 ff 00	and #$00ff	                  AND #$00FF
.011619	c9 e5 00	cmp #$00e5	                  CMP #$E5 ; test if the entry is deleted
.01161c	f0 31		beq $01164f	                  BEQ FAT32_GET_FOLDER_ENTRY_TYPE__DELETED_ENTRY
.01161e	c9 00 00	cmp #$0000	                  CMP #$00 ; test if we reached the last entry in the folder
.011621	f0 31		beq $011654	                  BEQ FAT32_GET_FOLDER_ENTRY_TYPE__LAST_ENTRY_IN_FOLDER
.011623	ad 46 08	lda $010846	                  LDA FAT32_Curent_Directory_entry_value +11
.011626	29 ff 00	and #$00ff	                  AND #$00FF
.011629	c9 0f 00	cmp #$000f	                  CMP #$0F ; test if it's a long name entry
.01162c	f0 12		beq $011640	                  BEQ FAT32_GET_FOLDER_ENTRY_TYPE__FLN
.01162e	c9 08 00	cmp #$0008	                  CMP #$08 ; test if it's a volum name
.011631	f0 12		beq $011645	                  BEQ FAT32_GET_FOLDER_ENTRY_TYPE__VOLUM_NAME
.011633	29 10 00	and #$0010	                  AND #$10
.011636	c9 10 00	cmp #$0010	                  CMP #$10 ;CMP #$20 ; if different from 0x20 its nor a file name entry (need to confirm that)
.011639	f0 0f		beq $01164a	                  BEQ FAT32_GET_FOLDER_ENTRY_TYPE__Folder
.01163b	a9 01 00	lda #$0001	                  LDA #$01
.01163e	80 19		bra $011659	                  BRA FAT32_GET_FOLDER_ENTRY_TYPE__FILE_ENTRY
.011640					 FAT32_GET_FOLDER_ENTRY_TYPE__FLN:
.011640	a9 0f 00	lda #$000f	                  LDA #$0F
.011643	80 14		bra $011659	                  BRA FAT32_GET_FOLDER_ENTRY_TYPE__FILE_ENTRY
.011645					 FAT32_GET_FOLDER_ENTRY_TYPE__VOLUM_NAME:
.011645	a9 08 00	lda #$0008	                  LDA #$08
.011648	80 0f		bra $011659	                  BRA FAT32_GET_FOLDER_ENTRY_TYPE__FILE_ENTRY
.01164a					 FAT32_GET_FOLDER_ENTRY_TYPE__Folder:
.01164a	a9 10 00	lda #$0010	                  LDA #$10
.01164d	80 0a		bra $011659	                  BRA FAT32_GET_FOLDER_ENTRY_TYPE__FILE_ENTRY
.01164f					 FAT32_GET_FOLDER_ENTRY_TYPE__DELETED_ENTRY:
.01164f	a9 e5 00	lda #$00e5	                  LDA #$E5
.011652	80 05		bra $011659	                  BRA FAT32_GET_FOLDER_ENTRY_TYPE__FILE_ENTRY
.011654					 FAT32_GET_FOLDER_ENTRY_TYPE__LAST_ENTRY_IN_FOLDER:
.011654	a9 00 00	lda #$0000	                  LDA #$00
.011657	80 00		bra $011659	                  BRA FAT32_GET_FOLDER_ENTRY_TYPE__FILE_ENTRY
.011659					 FAT32_GET_FOLDER_ENTRY_TYPE__FILE_ENTRY:
.011659	6b		rtl		                  RTL
.01165a					FAT32_COMPUT_PHISICAL_CLUSTER
.01165a	48		pha		                  PHA
.01165b	ad c3 08	lda $0108c3	                  LDA FAT32_FAT_Entry ;
.01165e	8f 20 01 00	sta $000120	                  STA ADDER_A
.011662	ad c5 08	lda $0108c5	                  LDA FAT32_FAT_Entry+2
.011665	8f 22 01 00	sta $000122	                  STA ADDER_A+2
.011669	ad 33 08	lda $010833	                  LDA FAT32_Root_Base_Sector ; 32 byte number
.01166c	8f 24 01 00	sta $000124	                  STA ADDER_B
.011670	ad 35 08	lda $010835	                  LDA FAT32_Root_Base_Sector+2
.011673	8f 26 01 00	sta $000126	                  STA ADDER_B+2
.011677	af 2a 01 00	lda $00012a	                  LDA ADDER_R+2 ;
.01167b	8f 22 01 00	sta $000122	                  STA ADDER_A+2
.01167f	af 28 01 00	lda $000128	                  LDA ADDER_R
.011683	8f 20 01 00	sta $000120	                  STA ADDER_A
.011687	a9 fe ff	lda #$fffe	                  LDA #$FFFE
.01168a	8f 24 01 00	sta $000124	                  STA ADDER_B
.01168e	a9 ff ff	lda #$ffff	                  LDA #$FFFF
.011691	8f 26 01 00	sta $000126	                  STA ADDER_B+2
.011695	af 28 01 00	lda $000128	                  LDA ADDER_R;
.011699	8d cf 08	sta $0108cf	                  STA FAT32_FAT_Entry_Physical_Address
.01169c	af 2a 01 00	lda $00012a	                  LDA ADDER_R+2
.0116a0	8d d1 08	sta $0108d1	                  STA FAT32_FAT_Entry_Physical_Address+2
.0116a3	68		pla		                  PLA
.0116a4	6b		rtl		                  RTL
.0116a5					FAT32_COMPUT_PHISICAL_CLUSTER_NEXT
.0116a5	48		pha		                  PHA
.0116a6	ad c7 08	lda $0108c7	                  LDA FAT32_FAT_Next_Entry ;
.0116a9	8f 20 01 00	sta $000120	                  STA ADDER_A
.0116ad	ad c9 08	lda $0108c9	                  LDA FAT32_FAT_Next_Entry+2
.0116b0	8f 22 01 00	sta $000122	                  STA ADDER_A+2
.0116b4	ad 33 08	lda $010833	                  LDA FAT32_Root_Base_Sector ; 32 byte number
.0116b7	8f 24 01 00	sta $000124	                  STA ADDER_B
.0116bb	ad 35 08	lda $010835	                  LDA FAT32_Root_Base_Sector+2
.0116be	8f 26 01 00	sta $000126	                  STA ADDER_B+2
.0116c2	af 2a 01 00	lda $00012a	                  LDA ADDER_R+2 ;
.0116c6	8f 22 01 00	sta $000122	                  STA ADDER_A+2
.0116ca	af 28 01 00	lda $000128	                  LDA ADDER_R
.0116ce	8f 20 01 00	sta $000120	                  STA ADDER_A
.0116d2	a9 fe ff	lda #$fffe	                  LDA #$FFFE
.0116d5	8f 24 01 00	sta $000124	                  STA ADDER_B
.0116d9	a9 ff ff	lda #$ffff	                  LDA #$FFFF
.0116dc	8f 26 01 00	sta $000126	                  STA ADDER_B+2
.0116e0	af 28 01 00	lda $000128	                  LDA ADDER_R;
.0116e4	8d d3 08	sta $0108d3	                  STA FAT32_FAT_Entry_PhisicalL_Address_next
.0116e7	af 2a 01 00	lda $00012a	                  LDA ADDER_R+2
.0116eb	8d d5 08	sta $0108d5	                  STA FAT32_FAT_Entry_PhisicalL_Address_next+2
.0116ee	68		pla		                  PLA
.0116ef	6b		rtl		                  RTL
.0116f0					FAT32_Test_Fat_Entry_Validity_Next
.0116f0	ad c9 08	lda $0108c9	                  LDA FAT32_FAT_Next_Entry +2 ; test for EOC (End Of Cluster)
.0116f3	29 ff 0f	and #$0fff	                  AND #$0FFF ; the 4 MSB are not used in the FAT32
.0116f6	c9 ff 0f	cmp #$0fff	                  CMP #$0FFF
.0116f9	d0 2a		bne $011725	                  BNE FAT32_Test_Fat_Entry_Validity_Next___TEST_NULL_VALUE
.0116fb	ad c7 08	lda $0108c7	                  LDA FAT32_FAT_Next_Entry ; test for EOC (End Of Cluster)
.0116fe	29 f0 ff	and #$fff0	                  AND #$FFF0
.011701	c9 f0 ff	cmp #$fff0	                  CMP #$FFF0
.011704	d0 1f		bne $011725	                  BNE FAT32_Test_Fat_Entry_Validity_Next___TEST_NULL_VALUE
.011706	ad c7 08	lda $0108c7	                  LDA FAT32_FAT_Next_Entry ; the cluster entry is not usable or its the last in the chaine
.011709	29 0f 00	and #$000f	                  AND #$000F
.01170c	c9 08 00	cmp #$0008	                  CMP #8
.01170f	30 05		bmi $011716	                  BMI FAT32_Test_Fat_Entry_Validity_Next___NEXT_CLUSTER_RESERVED_OR_BAD
.011711	a9 ff ff	lda #$ffff	                  LDA #-1 ; end of the file
.011714	80 27		bra $01173d	                  BRA FAT32_Test_Fat_Entry_Validity_Next_ERROR_EXIT
.011716					 FAT32_Test_Fat_Entry_Validity_Next___NEXT_CLUSTER_RESERVED_OR_BAD
.011716	c9 07 00	cmp #$0007	                  CMP #7
.011719	d0 05		bne $011720	                  BNE FAT32_Test_Fat_Entry_Validity_Next___NEXT_CLUSTER_RESERVED
.01171b	a9 fe ff	lda #$fffe	                  LDA #-2 ; Bad sector
.01171e	80 1d		bra $01173d	                  BRA FAT32_Test_Fat_Entry_Validity_Next_ERROR_EXIT
.011720					 FAT32_Test_Fat_Entry_Validity_Next___NEXT_CLUSTER_RESERVED
.011720	a9 fd ff	lda #$fffd	                  LDA #-3 ; reserved sector
.011723	80 18		bra $01173d	                  BRA FAT32_Test_Fat_Entry_Validity_Next_ERROR_EXIT
.011725					 FAT32_Test_Fat_Entry_Validity_Next___TEST_NULL_VALUE
.011725	ad c7 08	lda $0108c7	                  LDA FAT32_FAT_Next_Entry ; test for EOC (End Of Cluster)
.011728	c9 00 00	cmp #$0000	                  CMP #0
.01172b	d0 0d		bne $01173a	                  BNE FAT32_Test_Fat_Entry_Validity_Next___EXIT
.01172d	ad c9 08	lda $0108c9	                  LDA FAT32_FAT_Next_Entry + 2 ; test for EOC (End Of Cluster)
.011730	c9 00 00	cmp #$0000	                  CMP #0
.011733	d0 05		bne $01173a	                  BNE FAT32_Test_Fat_Entry_Validity_Next___EXIT
.011735	a9 fc ff	lda #$fffc	                  LDA #-4 ; empty sector
.011738	80 03		bra $01173d	                  BRA FAT32_Test_Fat_Entry_Validity_Next_ERROR_EXIT
.01173a					 FAT32_Test_Fat_Entry_Validity_Next___EXIT:
.01173a	a9 01 00	lda #$0001	                  LDA #1
.01173d					 FAT32_Test_Fat_Entry_Validity_Next_ERROR_EXIT:
.01173d	6b		rtl		                  RTL
.01173e					FAT32_Test_Fat_Entry_Validity
.01173e	ad c5 08	lda $0108c5	                  LDA FAT32_FAT_Entry +2 ; test for EOC (End Of Cluster)
.011741	29 ff 0f	and #$0fff	                  AND #$0FFF ; the 4 MSB are not used in the FAT32
.011744	c9 ff 0f	cmp #$0fff	                  CMP #$0FFF
.011747	d0 2d		bne $011776	                  BNE FAT32_Test_Fat_Entry_Validity___TEST_NULL_VALUE
.011749	ad c3 08	lda $0108c3	                  LDA FAT32_FAT_Entry ; test for EOC (End Of Cluster)
.01174c	29 f0 ff	and #$fff0	                  AND #$FFF0
.01174f	c9 f0 ff	cmp #$fff0	                  CMP #$FFF0
.011752	d0 22		bne $011776	                  BNE FAT32_Test_Fat_Entry_Validity___TEST_NULL_VALUE
.011754	ad c3 08	lda $0108c3	                  LDA FAT32_FAT_Entry ; the cluster entry is not usable or its the last in the chaine
.011757	29 0f 00	and #$000f	                  AND #$000F
.01175a	c9 08 00	cmp #$0008	                  CMP #8
.01175d	30 06		bmi $011765	                  BMI FAT32_Test_Fat_Entry_Validity___NEXT_CLUSTER_RESERVED_OR_BAD
.01175f	a9 ff ff	lda #$ffff	                  LDA #-1 ; end of the file
.011762	82 2a 00	brl $01178f	                  BRL FAT32_Test_Fat_Entry_Validity_ERROR_EXIT
.011765					                  FAT32_Test_Fat_Entry_Validity___NEXT_CLUSTER_RESERVED_OR_BAD
.011765	c9 07 00	cmp #$0007	                  CMP #7
.011768	d0 06		bne $011770	                  BNE FAT32_Test_Fat_Entry_Validity___NEXT_CLUSTER_RESERVED
.01176a	a9 fe ff	lda #$fffe	                  LDA #-2 ; Bad sector
.01176d	82 1f 00	brl $01178f	                  BRL FAT32_Test_Fat_Entry_Validity_ERROR_EXIT
.011770					                  FAT32_Test_Fat_Entry_Validity___NEXT_CLUSTER_RESERVED
.011770	a9 fd ff	lda #$fffd	                  LDA #-3 ; reserved sector
.011773	82 19 00	brl $01178f	                  BRL FAT32_Test_Fat_Entry_Validity_ERROR_EXIT
.011776					                  FAT32_Test_Fat_Entry_Validity___TEST_NULL_VALUE
.011776	ad c3 08	lda $0108c3	                  LDA FAT32_FAT_Entry ; test for EOC (End Of Cluster)
.011779	c9 00 00	cmp #$0000	                  CMP #0
.01177c	d0 0e		bne $01178c	                  BNE FAT32_Test_Fat_Entry_Validity___EXIT
.01177e	ad c5 08	lda $0108c5	                  LDA FAT32_FAT_Entry + 2 ; test for EOC (End Of Cluster)
.011781	c9 00 00	cmp #$0000	                  CMP #0
.011784	d0 06		bne $01178c	                  BNE FAT32_Test_Fat_Entry_Validity___EXIT
.011786	a9 fc ff	lda #$fffc	                  LDA #-4 ; empty sector
.011789	82 03 00	brl $01178f	                  BRL FAT32_Test_Fat_Entry_Validity_ERROR_EXIT
.01178c					                  FAT32_Test_Fat_Entry_Validity___EXIT:
.01178c	a9 01 00	lda #$0001	                  LDA #1
.01178f					                  FAT32_Test_Fat_Entry_Validity_ERROR_EXIT:
.01178f	6b		rtl		                  RTL
>011790	00 00 00 00			FAT32_Data_Destination_buffer .dword 0
.011794					FAT32_Copy_Cluster_at_Address
.011794	da		phx		                  PHX
.011795	5a		phy		                  PHY
.011796	48		pha		                  PHA
.011797	a2 00 00	ldx #$0000	                  LDX #<>FAT32_DATA_ADDRESS_BUFFER_512
.01179a	af 90 17 01	lda $011790	                  LDA @l FAT32_Data_Destination_buffer
.01179e	a8		tay		                  TAY
.01179f	ad 92 17	lda $011792	                  LDA FAT32_Data_Destination_buffer+2
.0117a2	e2 20		sep #$20	                SEP #$20        ; set A short
.0117a4	c2 20		rep #$20	                REP #$20        ; set A long
.0117a6	a9 00 02	lda #$0200	                  LDA #$0200 ; 512 Byte
.0117a9	e2 20		sep #$20	                SEP #$20        ; set A short
.0117ab	af 92 17 01	lda $011792	                  LDA @lFAT32_Data_Destination_buffer+2
.0117af	8f cf 17 01	sta $0117cf	                  STA @l FAT32_Copy_Cluster_at_Address_MVN+ 3
.0117b3	af 91 17 01	lda $011791	                  LDA @lFAT32_Data_Destination_buffer+1
.0117b7	8f ce 17 01	sta $0117ce	                  STA @l FAT32_Copy_Cluster_at_Address_MVN+ 2
.0117bb	af 90 17 01	lda $011790	                  LDA @lFAT32_Data_Destination_buffer+0
.0117bf	8f cd 17 01	sta $0117cd	                  STA @l FAT32_Copy_Cluster_at_Address_MVN+ 1
.0117c3	c2 20		rep #$20	                REP #$20        ; set A long
.0117c5	a2 00 00	ldx #$0000	                  LDX #0
.0117c8					 FAT32_Copy_Cluster_at_Address__READ_LOOP_BYTE:
.0117c8	bf 00 00 01	lda $010000,x	                  LDA @l FAT32_DATA_ADDRESS_BUFFER_512,x
.0117cc	9f 90 17 01	sta $011790,x	  FAT32_Copy_Cluster_at_Address_MVN STA @l FAT32_Data_Destination_buffer,x
.0117d0	e8		inx		                  INX
.0117d1	e8		inx		                  INX
.0117d2	e0 00 02	cpx #$0200	                  CPX #$200
.0117d5	d0 f1		bne $0117c8	                  BNE FAT32_Copy_Cluster_at_Address__READ_LOOP_BYTE
.0117d7	a9 00 02	lda #$0200	                  LDA #$0200
.0117da	18		clc		                  CLC
.0117db	6d 90 17	adc $011790	                  ADC FAT32_Data_Destination_buffer
.0117de	8d 90 17	sta $011790	                  STA FAT32_Data_Destination_buffer
.0117e1	90 0a		bcc $0117ed	                  BCC FAT32_Copy_Cluster_at_Address__No_over_flow_adresse
.0117e3	a9 01 00	lda #$0001	                  LDA #$0001
.0117e6	18		clc		                  CLC
.0117e7	6d 92 17	adc $011792	                  ADC FAT32_Data_Destination_buffer+2
.0117ea	8d 92 17	sta $011792	                  STA FAT32_Data_Destination_buffer+2
.0117ed					 FAT32_Copy_Cluster_at_Address__No_over_flow_adresse
.0117ed	c2 30		rep #$30	                REP #$30        ; set A&X long
.0117ef	68		pla		                  PLA
.0117f0	7a		ply		                  PLY
.0117f1	fa		plx		                  PLX
.0117f2	6b		rtl		                  RTL

;******  Return to file: src\FAT32.asm


;******  Processing file: src\FAT32_Utils_Print.asm

.0117f3					FAT32_Print_Cluster_HEX
.0117f3	a9 0d 00	lda #$000d	              LDA #$0D
.0117f6	22 f4 0b 39	jsl $390bf4	              JSL IPUTC
.0117fa	a0 00 00	ldy #$0000	              LDY #0
.0117fd	a2 00 00	ldx #$0000	              LDX #0
.011800					FAT32_Print_Clusterr_HEX_Byte
.011800	bd 00 00	lda $010000,x	              LDA FAT32_DATA_ADDRESS_BUFFER_512,X
.011803	22 42 45 38	jsl $384542	              JSL IPRINT_HEX
.011807	a9 20 00	lda #$0020	              LDA #$20
.01180a	22 f4 0b 39	jsl $390bf4	              JSL IPUTC
.01180e	e8		inx		              INX
.01180f	c8		iny		              INY
.011810	c0 10 00	cpy #$0010	              CPY #$10
.011813	d0 0a		bne $01181f	              BNE SKIP_CR_HEX
.011815	a9 0d 00	lda #$000d	              LDA #$0D
.011818	22 f4 0b 39	jsl $390bf4	              JSL IPUTC
.01181c	a0 00 00	ldy #$0000	              LDY #0
.01181f					SKIP_CR_HEX:
.01181f	e0 00 02	cpx #$0200	              CPX #512
.011822	30 dc		bmi $011800	              BMI FAT32_Print_Clusterr_HEX_Byte
.011824	6b		rtl		              RTL
.011825					FAT32_Print_Cluster
.011825	a9 0d 00	lda #$000d	              LDA #$0D
.011828	22 f4 0b 39	jsl $390bf4	              JSL IPUTC
.01182c	a0 00 00	ldy #$0000	              LDY #0
.01182f	a2 00 00	ldx #$0000	              LDX #0
.011832					FAT32_Print_Cluster_Byte
.011832	bd 00 00	lda $010000,x	              LDA FAT32_DATA_ADDRESS_BUFFER_512,X
.011835	22 f4 0b 39	jsl $390bf4	              JSL IPUTC
.011839	e8		inx		              INX
.01183a	c8		iny		              INY
.01183b	c0 40 00	cpy #$0040	              CPY #$40
.01183e	d0 0a		bne $01184a	              BNE SKIP_CR
.011840	a9 0d 00	lda #$000d	              LDA #$0D
.011843	22 f4 0b 39	jsl $390bf4	              JSL IPUTC
.011847	a0 00 00	ldy #$0000	              LDY #0
.01184a					SKIP_CR:
.01184a	e0 00 02	cpx #$0200	              CPX #512
.01184d	30 e3		bmi $011832	              BMI FAT32_Print_Cluster_Byte
.01184f	6b		rtl		              RTL
.011850					FAT32_Print_Directory_Cluster_HEX
.011850	a9 0d 00	lda #$000d	              LDA #$0D
.011853	22 f4 0b 39	jsl $390bf4	              JSL IPUTC
.011857	a0 00 00	ldy #$0000	              LDY #0
.01185a	a2 00 00	ldx #$0000	              LDX #0
.01185d					FAT32_Print_Directory_Clusterr_HEX_Byte
.01185d	bd 00 04	lda $010400,x	              LDA FAT32_FOLDER_ADDRESS_BUFFER_512,X
.011860	22 42 45 38	jsl $384542	              JSL IPRINT_HEX
.011864	a9 20 00	lda #$0020	              LDA #$20
.011867	22 f4 0b 39	jsl $390bf4	              JSL IPUTC
.01186b	e8		inx		              INX
.01186c	c8		iny		              INY
.01186d	c0 10 00	cpy #$0010	              CPY #$10
.011870	d0 0a		bne $01187c	              BNE SKIP_CR_DIRRECTORY_HEX
.011872	a9 0d 00	lda #$000d	              LDA #$0D
.011875	22 f4 0b 39	jsl $390bf4	              JSL IPUTC
.011879	a0 00 00	ldy #$0000	              LDY #0
.01187c					SKIP_CR_DIRRECTORY_HEX:
.01187c	e0 00 02	cpx #$0200	              CPX #512
.01187f	30 dc		bmi $01185d	              BMI FAT32_Print_Directory_Clusterr_HEX_Byte
.011881	6b		rtl		              RTL
.011882					FAT32_Print_Directory_Cluster
.011882	a9 0d 00	lda #$000d	              LDA #$0D
.011885	22 f4 0b 39	jsl $390bf4	              JSL IPUTC
.011889	a0 00 00	ldy #$0000	              LDY #0
.01188c	a2 00 00	ldx #$0000	              LDX #0
.01188f					FAT32_Print_Directory_Cluster__Byte
.01188f	bd 00 04	lda $010400,x	              LDA FAT32_FOLDER_ADDRESS_BUFFER_512,X
.011892	22 f4 0b 39	jsl $390bf4	              JSL IPUTC
.011896	e8		inx		              INX
.011897	c8		iny		              INY
.011898	c0 40 00	cpy #$0040	              CPY #$40
.01189b	d0 0a		bne $0118a7	              BNE SKIP_CR_DIRRECTORY
.01189d	a9 0d 00	lda #$000d	              LDA #$0D
.0118a0	22 f4 0b 39	jsl $390bf4	              JSL IPUTC
.0118a4	a0 00 00	ldy #$0000	              LDY #0
.0118a7					SKIP_CR_DIRRECTORY:
.0118a7	e0 00 02	cpx #$0200	              CPX #512
.0118aa	30 e3		bmi $01188f	              BMI FAT32_Print_Directory_Cluster__Byte
.0118ac	6b		rtl		              RTL
.0118ad					Wait_loop
.0118ad	da		phx		              PHX
.0118ae	a2 e8 03	ldx #$03e8	              LDX #1000
.0118b1	22 92 18 39	jsl $391892	              JSL ILOOP_MS
.0118b5	fa		plx		              PLX
.0118b6	6b		rtl		              RTL
.0118b7					FAT32_Print_File_Name
.0118b7	da		phx		                  PHX
.0118b8	48		pha		                  PHA
.0118b9	ad 3b 08	lda $01083b	                  LDA FAT32_Curent_Directory_entry_value
.0118bc	22 f4 0b 39	jsl $390bf4	                  JSL IPUTC
.0118c0	ad 3c 08	lda $01083c	                  LDA FAT32_Curent_Directory_entry_value +1
.0118c3	22 f4 0b 39	jsl $390bf4	                  JSL IPUTC
.0118c7	ad 3d 08	lda $01083d	                  LDA FAT32_Curent_Directory_entry_value +2
.0118ca	22 f4 0b 39	jsl $390bf4	                  JSL IPUTC
.0118ce	ad 3e 08	lda $01083e	                  LDA FAT32_Curent_Directory_entry_value +3
.0118d1	22 f4 0b 39	jsl $390bf4	                  JSL IPUTC
.0118d5	ad 3f 08	lda $01083f	                  LDA FAT32_Curent_Directory_entry_value +4
.0118d8	22 f4 0b 39	jsl $390bf4	                  JSL IPUTC
.0118dc	ad 40 08	lda $010840	                  LDA FAT32_Curent_Directory_entry_value +5
.0118df	22 f4 0b 39	jsl $390bf4	                  JSL IPUTC
.0118e3	ad 41 08	lda $010841	                  LDA FAT32_Curent_Directory_entry_value +6
.0118e6	22 f4 0b 39	jsl $390bf4	                  JSL IPUTC
.0118ea	ad 42 08	lda $010842	                  LDA FAT32_Curent_Directory_entry_value +7
.0118ed	22 f4 0b 39	jsl $390bf4	                  JSL IPUTC
.0118f1	a9 2e 00	lda #$002e	                  LDA #'.'
.0118f4	22 f4 0b 39	jsl $390bf4	                  JSL IPUTC
.0118f8	ad 43 08	lda $010843	                  LDA FAT32_Curent_Directory_entry_value +8
.0118fb	22 f4 0b 39	jsl $390bf4	                  JSL IPUTC
.0118ff	ad 44 08	lda $010844	                  LDA FAT32_Curent_Directory_entry_value +9
.011902	22 f4 0b 39	jsl $390bf4	                  JSL IPUTC
.011906	ad 45 08	lda $010845	                  LDA FAT32_Curent_Directory_entry_value +10
.011909	22 f4 0b 39	jsl $390bf4	                  JSL IPUTC
.01190d	68		pla		                  PLA
.01190e	fa		plx		                  PLX
.01190f	6b		rtl		                  RTL
.011910					FAT32_Print_Folder_Name
.011910	da		phx		                  PHX
.011911	a2 00 00	ldx #$0000	                  LDX #0
.011914					FAT32_Print_Folder_Name__Print_char:
.011914	bd 3b 08	lda $01083b,x	                  LDA FAT32_Curent_Directory_entry_value,x
.011917	22 f4 0b 39	jsl $390bf4	                  JSL IPUTC
.01191b	e8		inx		                  INX
.01191c	e0 0b 00	cpx #$000b	                  CPX #$B
.01191f	d0 f3		bne $011914	                  BNE FAT32_Print_Folder_Name__Print_char
.011921	fa		plx		                  PLX
.011922	6b		rtl		                  RTL
.011923					FAT32_PRINT_Root_entry_value
.011923	da		phx		                  PHX
.011924	5a		phy		                  PHY
.011925	48		pha		                  PHA
.011926	a2 00 00	ldx #$0000	                  LDX #0
.011929					                  FAT32_PRINT_Root_entry_value_loop_1:
.011929	bf 3b 08 01	lda $01083b,x	                  LDA @l FAT32_Curent_Directory_entry_value,x
.01192d	22 42 45 38	jsl $384542	                  JSL IPRINT_HEX
.011931	e8		inx		                  INX
.011932	e0 20 00	cpx #$0020	                  CPX #32
.011935	d0 f2		bne $011929	                  BNE FAT32_PRINT_Root_entry_value_loop_1
.011937	a9 0d 00	lda #$000d	                  LDA #$0D
.01193a	22 f4 0b 39	jsl $390bf4	                  JSL IPUTC
.01193e	a2 00 00	ldx #$0000	                  LDX #0
.011941					                  FAT32_PRINT_Root_entry_value_loop_2:
.011941	bf 3b 08 01	lda $01083b,x	                  LDA @l FAT32_Curent_Directory_entry_value,x
.011945	22 f4 0b 39	jsl $390bf4	                  JSL IPUTC
.011949	e8		inx		                  INX
.01194a	e0 20 00	cpx #$0020	                  CPX #32
.01194d	d0 f2		bne $011941	                  BNE FAT32_PRINT_Root_entry_value_loop_2
.01194f	a9 0d 00	lda #$000d	                  LDA #$0D
.011952	22 f4 0b 39	jsl $390bf4	                  JSL IPUTC
.011956	68		pla		                  PLA
.011957	7a		ply		                  PLY
.011958	fa		plx		                  PLX
.011959	6b		rtl		                  RTL
.01195a					FAT32_PRINT_Root_entry_value_HEX
.01195a	da		phx		                  PHX
.01195b	5a		phy		                  PHY
.01195c	48		pha		                  PHA
.01195d	a2 00 00	ldx #$0000	                  LDX #0
.011960					                  FAT32_PRINT_Root_entry_value_HEX_loop_1:
.011960	bf 3b 08 01	lda $01083b,x	                  LDA @l FAT32_Curent_Directory_entry_value,x
.011964	22 42 45 38	jsl $384542	                  JSL IPRINT_HEX
.011968	e8		inx		                  INX
.011969	e0 20 00	cpx #$0020	                  CPX #32
.01196c	d0 f2		bne $011960	                  BNE FAT32_PRINT_Root_entry_value_HEX_loop_1
.01196e	a9 0d 00	lda #$000d	                  LDA #$0D
.011971	22 f4 0b 39	jsl $390bf4	                  JSL IPUTC
.011975	68		pla		                  PLA
.011976	7a		ply		                  PLY
.011977	fa		plx		                  PLX
.011978	6b		rtl		                  RTL
.011979					FAT32_Print_FAT_ENTRY_INFO
.011979	08		php		                PHP
.01197a	48		pha		                PHA
.01197b	da		phx		                PHX
.01197c	5a		phy		                PHY
.01197d	a2 4e 07	ldx #$074e	                LDX #<>TEXT_FAT32___FAT_Entry
.011980	a9 02 00	lda #$0002	                LDA #`TEXT_FAT32___FAT_Entry
.011983	22 25 45 38	jsl $384525	                JSL IPUTS_ABS       ; print the first line
.011987	ad c5 08	lda $0108c5	                LDA FAT32_FAT_Entry+2
.01198a	eb		xba		                XBA
.01198b	22 42 45 38	jsl $384542	                JSL IPRINT_HEX
.01198f	eb		xba		                XBA
.011990	22 42 45 38	jsl $384542	                JSL IPRINT_HEX
.011994	ad c3 08	lda $0108c3	                LDA FAT32_FAT_Entry
.011997	eb		xba		                XBA
.011998	22 42 45 38	jsl $384542	                JSL IPRINT_HEX
.01199c	eb		xba		                XBA
.01199d	22 42 45 38	jsl $384542	                JSL IPRINT_HEX
.0119a1	a2 73 07	ldx #$0773	                LDX #<>TEXT_FAT32___FAT_Next_Entry
.0119a4	a9 02 00	lda #$0002	                LDA #`TEXT_FAT32___FAT_Next_Entry
.0119a7	22 25 45 38	jsl $384525	                JSL IPUTS_ABS       ; print the first line
.0119ab	ad c9 08	lda $0108c9	                LDA FAT32_FAT_Next_Entry+2
.0119ae	eb		xba		                XBA
.0119af	22 42 45 38	jsl $384542	                JSL IPRINT_HEX
.0119b3	eb		xba		                XBA
.0119b4	22 42 45 38	jsl $384542	                JSL IPRINT_HEX
.0119b8	ad c7 08	lda $0108c7	                LDA FAT32_FAT_Next_Entry
.0119bb	eb		xba		                XBA
.0119bc	22 42 45 38	jsl $384542	                JSL IPRINT_HEX
.0119c0	eb		xba		                XBA
.0119c1	22 42 45 38	jsl $384542	                JSL IPRINT_HEX
.0119c5	a2 bd 07	ldx #$07bd	                LDX #<>TEXT_FAT32___FAT32_FAT_Entry_Physical_Address
.0119c8	a9 02 00	lda #$0002	                LDA #`TEXT_FAT32___FAT32_FAT_Entry_Physical_Address
.0119cb	22 25 45 38	jsl $384525	                JSL IPUTS_ABS       ; print the first line
.0119cf	ad d1 08	lda $0108d1	                LDA FAT32_FAT_Entry_Physical_Address+2
.0119d2	eb		xba		                XBA
.0119d3	22 42 45 38	jsl $384542	                JSL IPRINT_HEX
.0119d7	eb		xba		                XBA
.0119d8	22 42 45 38	jsl $384542	                JSL IPRINT_HEX
.0119dc	ad cf 08	lda $0108cf	                LDA FAT32_FAT_Entry_Physical_Address
.0119df	eb		xba		                XBA
.0119e0	22 42 45 38	jsl $384542	                JSL IPRINT_HEX
.0119e4	eb		xba		                XBA
.0119e5	22 42 45 38	jsl $384542	                JSL IPRINT_HEX
.0119e9	a9 0d 00	lda #$000d	                LDA #$0D
.0119ec	22 f4 0b 39	jsl $390bf4	                JSL IPUTC
.0119f0	7a		ply		                PLY
.0119f1	fa		plx		                PLX
.0119f2	68		pla		                PLA
.0119f3	28		plp		                PLP
.0119f4	6b		rtl		                RTL
.0119f5					FAT32_Print_FAT_STATE
.0119f5	08		php		                PHP
.0119f6	48		pha		                PHA
.0119f7	da		phx		                PHX
.0119f8	5a		phy		                PHY
.0119f9	a2 45 04	ldx #$0445	                LDX #<>TEXT_FAT32___Byte_Per_Sector
.0119fc	a9 02 00	lda #$0002	                LDA #`TEXT_FAT32___Byte_Per_Sector
.0119ff	22 25 45 38	jsl $384525	                JSL IPUTS_ABS       ; print the first line
.011a03	ad 00 08	lda $010800	                LDA FAT32_Byte_Per_Sector
.011a06	eb		xba		                XBA
.011a07	22 42 45 38	jsl $384542	                JSL IPRINT_HEX
.011a0b	eb		xba		                XBA
.011a0c	22 42 45 38	jsl $384542	                JSL IPRINT_HEX
.011a10	a2 6a 04	ldx #$046a	                LDX #<>TEXT_FAT32___Sector_Per_Cluster
.011a13	a9 02 00	lda #$0002	                LDA #`TEXT_FAT32___Sector_Per_Cluster
.011a16	22 25 45 38	jsl $384525	                JSL IPUTS_ABS       ; print the first line
.011a1a	ad 02 08	lda $010802	                LDA FAT32_Sector_Per_Cluster
.011a1d	eb		xba		                XBA
.011a1e	22 42 45 38	jsl $384542	                JSL IPRINT_HEX
.011a22	eb		xba		                XBA
.011a23	22 42 45 38	jsl $384542	                JSL IPRINT_HEX
.011a27	a2 8f 04	ldx #$048f	                LDX #<>TEXT_FAT32___Nb_Of_reserved_Cluster
.011a2a	a9 02 00	lda #$0002	                LDA #`TEXT_FAT32___Nb_Of_reserved_Cluster
.011a2d	22 25 45 38	jsl $384525	                JSL IPUTS_ABS       ; print the first line
.011a31	ad 04 08	lda $010804	                LDA FAT32_Nb_Of_reserved_Cluster
.011a34	eb		xba		                XBA
.011a35	22 42 45 38	jsl $384542	                JSL IPRINT_HEX
.011a39	eb		xba		                XBA
.011a3a	22 42 45 38	jsl $384542	                JSL IPRINT_HEX
.011a3e	a2 b4 04	ldx #$04b4	                LDX #<>TEXT_FAT32___Nb_Of_FAT
.011a41	a9 02 00	lda #$0002	                LDA #`TEXT_FAT32___Nb_Of_FAT
.011a44	22 25 45 38	jsl $384525	                JSL IPUTS_ABS       ; print the first line
.011a48	ad 06 08	lda $010806	                LDA FAT32_Nb_Of_FAT
.011a4b	eb		xba		                XBA
.011a4c	22 42 45 38	jsl $384542	                JSL IPRINT_HEX
.011a50	eb		xba		                XBA
.011a51	22 42 45 38	jsl $384542	                JSL IPRINT_HEX
.011a55	a2 d9 04	ldx #$04d9	                LDX #<>TEXT_FAT32___Max_Root_Entry
.011a58	a9 02 00	lda #$0002	                LDA #`TEXT_FAT32___Max_Root_Entry
.011a5b	22 25 45 38	jsl $384525	                JSL IPUTS_ABS       ; print the first line
.011a5f	ad 08 08	lda $010808	                LDA FAT32_Max_Root_Entry
.011a62	eb		xba		                XBA
.011a63	22 42 45 38	jsl $384542	                JSL IPRINT_HEX
.011a67	eb		xba		                XBA
.011a68	22 42 45 38	jsl $384542	                JSL IPRINT_HEX
.011a6c	a2 fe 04	ldx #$04fe	                LDX #<>TEXT_FAT32___Total_Sector_Count
.011a6f	a9 02 00	lda #$0002	                LDA #`TEXT_FAT32___Total_Sector_Count
.011a72	22 25 45 38	jsl $384525	                JSL IPUTS_ABS       ; print the first line
.011a76	ad 0a 08	lda $01080a	                LDA FAT32_Total_Sector_Count
.011a79	eb		xba		                XBA
.011a7a	22 42 45 38	jsl $384542	                JSL IPRINT_HEX
.011a7e	eb		xba		                XBA
.011a7f	22 42 45 38	jsl $384542	                JSL IPRINT_HEX
.011a83	a2 23 05	ldx #$0523	                LDX #<>TEXT_FAT32___Sector_per_Fat
.011a86	a9 02 00	lda #$0002	                LDA #`TEXT_FAT32___Sector_per_Fat
.011a89	22 25 45 38	jsl $384525	                JSL IPUTS_ABS       ; print the first line
.011a8d	ad 0e 08	lda $01080e	                LDA FAT32_Sector_per_Fat+2
.011a90	eb		xba		                XBA
.011a91	22 42 45 38	jsl $384542	                JSL IPRINT_HEX
.011a95	eb		xba		                XBA
.011a96	22 42 45 38	jsl $384542	                JSL IPRINT_HEX
.011a9a	ad 0c 08	lda $01080c	                LDA FAT32_Sector_per_Fat
.011a9d	eb		xba		                XBA
.011a9e	22 42 45 38	jsl $384542	                JSL IPRINT_HEX
.011aa2	eb		xba		                XBA
.011aa3	22 42 45 38	jsl $384542	                JSL IPRINT_HEX
.011aa7	a2 48 05	ldx #$0548	                LDX #<>TEXT_FAT32___Sector_per_Track
.011aaa	a9 02 00	lda #$0002	                LDA #`TEXT_FAT32___Sector_per_Track
.011aad	22 25 45 38	jsl $384525	                JSL IPUTS_ABS       ; print the first line
.011ab1	ad 10 08	lda $010810	                LDA FAT32_Sector_per_Track
.011ab4	eb		xba		                XBA
.011ab5	22 42 45 38	jsl $384542	                JSL IPRINT_HEX
.011ab9	eb		xba		                XBA
.011aba	22 42 45 38	jsl $384542	                JSL IPRINT_HEX
.011abe	a2 6d 05	ldx #$056d	                LDX #<>TEXT_FAT32___Nb_of_Head
.011ac1	a9 02 00	lda #$0002	                LDA #`TEXT_FAT32___Nb_of_Head
.011ac4	22 25 45 38	jsl $384525	                JSL IPUTS_ABS       ; print the first line
.011ac8	ad 12 08	lda $010812	                LDA FAT32_Nb_of_Head
.011acb	eb		xba		                XBA
.011acc	22 42 45 38	jsl $384542	                JSL IPRINT_HEX
.011ad0	eb		xba		                XBA
.011ad1	22 42 45 38	jsl $384542	                JSL IPRINT_HEX
.011ad5	a2 92 05	ldx #$0592	                LDX #<>TEXT_FAT32___Nb_Of_Sector_In_Partition
.011ad8	a9 02 00	lda #$0002	                LDA #`TEXT_FAT32___Nb_Of_Sector_In_Partition
.011adb	22 25 45 38	jsl $384525	                JSL IPUTS_ABS       ; print the first line
.011adf	ad 16 08	lda $010816	                LDA FAT32_Nb_Of_Sector_In_Partition+2
.011ae2	eb		xba		                XBA
.011ae3	22 42 45 38	jsl $384542	                JSL IPRINT_HEX
.011ae7	eb		xba		                XBA
.011ae8	22 42 45 38	jsl $384542	                JSL IPRINT_HEX
.011aec	ad 14 08	lda $010814	                LDA FAT32_Nb_Of_Sector_In_Partition
.011aef	eb		xba		                XBA
.011af0	22 42 45 38	jsl $384542	                JSL IPRINT_HEX
.011af4	eb		xba		                XBA
.011af5	22 42 45 38	jsl $384542	                JSL IPRINT_HEX
.011af9	a2 b7 05	ldx #$05b7	                LDX #<>TEXT_FAT32___Boot_Signature
.011afc	a9 02 00	lda #$0002	                LDA #`TEXT_FAT32___Boot_Signature
.011aff	22 25 45 38	jsl $384525	                JSL IPUTS_ABS       ; print the first line
.011b03	ad 18 08	lda $010818	                LDA FAT32_Boot_Signature
.011b06	eb		xba		                XBA
.011b07	22 42 45 38	jsl $384542	                JSL IPRINT_HEX
.011b0b	eb		xba		                XBA
.011b0c	22 42 45 38	jsl $384542	                JSL IPRINT_HEX
.011b10	a2 dc 05	ldx #$05dc	                LDX #<>TEXT_FAT32___Volume_ID
.011b13	a9 02 00	lda #$0002	                LDA #`TEXT_FAT32___Volume_ID
.011b16	22 25 45 38	jsl $384525	                JSL IPUTS_ABS       ; print the first line
.011b1a	ad 1c 08	lda $01081c	                LDA FAT32_Volume_ID+2
.011b1d	eb		xba		                XBA
.011b1e	22 42 45 38	jsl $384542	                JSL IPRINT_HEX
.011b22	eb		xba		                XBA
.011b23	22 42 45 38	jsl $384542	                JSL IPRINT_HEX
.011b27	ad 1a 08	lda $01081a	                LDA FAT32_Volume_ID
.011b2a	eb		xba		                XBA
.011b2b	22 42 45 38	jsl $384542	                JSL IPRINT_HEX
.011b2f	eb		xba		                XBA
.011b30	22 42 45 38	jsl $384542	                JSL IPRINT_HEX
.011b34	a2 01 06	ldx #$0601	                LDX #<>TEXT_FAT32___Volume_Label
.011b37	a9 02 00	lda #$0002	                LDA #`TEXT_FAT32___Volume_Label
.011b3a	22 25 45 38	jsl $384525	                JSL IPUTS_ABS       ; print the first line
.011b3e	a2 00 00	ldx #$0000	                LDX #0
.011b41					 PRINT_FAT32_Volume_Label:
.011b41	bf 1e 08 01	lda $01081e,x	                LDA @l FAT32_Volume_Label,x
.011b45	22 f4 0b 39	jsl $390bf4	                JSL IPUTC
.011b49	e8		inx		                INX
.011b4a	e0 0b 00	cpx #$000b	                CPX #11
.011b4d	d0 f2		bne $011b41	                BNE PRINT_FAT32_Volume_Label
.011b4f	a2 26 06	ldx #$0626	                LDX #<>TEXT_FAT32___File_System_Type
.011b52	a9 02 00	lda #$0002	                LDA #`TEXT_FAT32___File_System_Type
.011b55	22 25 45 38	jsl $384525	                JSL IPUTS_ABS       ; print the first line
.011b59	ad 29 08	lda $010829	                LDA FAT32_File_System_Type
.011b5c	eb		xba		                XBA
.011b5d	22 42 45 38	jsl $384542	                JSL IPRINT_HEX
.011b61	eb		xba		                XBA
.011b62	22 42 45 38	jsl $384542	                JSL IPRINT_HEX
.011b66	a2 4b 06	ldx #$064b	                LDX #<>TEXT_FAT32___Sector_loaded_in_ram
.011b69	a9 02 00	lda #$0002	                LDA #`TEXT_FAT32___Sector_loaded_in_ram
.011b6c	22 25 45 38	jsl $384525	                JSL IPUTS_ABS       ; print the first line
.011b70	ad 2d 08	lda $01082d	                LDA FAT32_Sector_loaded_in_ram+2
.011b73	eb		xba		                XBA
.011b74	22 42 45 38	jsl $384542	                JSL IPRINT_HEX
.011b78	eb		xba		                XBA
.011b79	22 42 45 38	jsl $384542	                JSL IPRINT_HEX
.011b7d	ad 2b 08	lda $01082b	                LDA FAT32_Sector_loaded_in_ram
.011b80	eb		xba		                XBA
.011b81	22 42 45 38	jsl $384542	                JSL IPRINT_HEX
.011b85	eb		xba		                XBA
.011b86	22 42 45 38	jsl $384542	                JSL IPRINT_HEX
.011b8a	a2 70 06	ldx #$0670	                LDX #<>TEXT_FAT32___Root_Sector_offset
.011b8d	a9 02 00	lda #$0002	                LDA #`TEXT_FAT32___Root_Sector_offset
.011b90	22 25 45 38	jsl $384525	                JSL IPUTS_ABS       ; print the first line
.011b94	ad 31 08	lda $010831	                LDA FAT32_Root_Sector_offset+2
.011b97	eb		xba		                XBA
.011b98	22 42 45 38	jsl $384542	                JSL IPRINT_HEX
.011b9c	eb		xba		                XBA
.011b9d	22 42 45 38	jsl $384542	                JSL IPRINT_HEX
.011ba1	ad 2f 08	lda $01082f	                LDA FAT32_Root_Sector_offset
.011ba4	eb		xba		                XBA
.011ba5	22 42 45 38	jsl $384542	                JSL IPRINT_HEX
.011ba9	eb		xba		                XBA
.011baa	22 42 45 38	jsl $384542	                JSL IPRINT_HEX
.011bae	a2 95 06	ldx #$0695	                LDX #<>TEXT_FAT32___Root_Base_Sector
.011bb1	a9 02 00	lda #$0002	                LDA #`TEXT_FAT32___Root_Base_Sector
.011bb4	22 25 45 38	jsl $384525	                JSL IPUTS_ABS       ; print the first line
.011bb8	ad 35 08	lda $010835	                LDA FAT32_Root_Base_Sector+2
.011bbb	eb		xba		                XBA
.011bbc	22 42 45 38	jsl $384542	                JSL IPRINT_HEX
.011bc0	eb		xba		                XBA
.011bc1	22 42 45 38	jsl $384542	                JSL IPRINT_HEX
.011bc5	ad 33 08	lda $010833	                LDA FAT32_Root_Base_Sector
.011bc8	eb		xba		                XBA
.011bc9	22 42 45 38	jsl $384542	                JSL IPRINT_HEX
.011bcd	eb		xba		                XBA
.011bce	22 42 45 38	jsl $384542	                JSL IPRINT_HEX
.011bd2	a2 ba 06	ldx #$06ba	                LDX #<>TEXT_FAT32___Curent_Directory_Sector_loaded_in_ram
.011bd5	a9 02 00	lda #$0002	                LDA #`TEXT_FAT32___Curent_Directory_Sector_loaded_in_ram
.011bd8	22 25 45 38	jsl $384525	                JSL IPUTS_ABS       ; print the first line
.011bdc	ad 39 08	lda $010839	                LDA FAT32_Curent_Directory_Sector_loaded_in_ram+2
.011bdf	eb		xba		                XBA
.011be0	22 42 45 38	jsl $384542	                JSL IPRINT_HEX
.011be4	eb		xba		                XBA
.011be5	22 42 45 38	jsl $384542	                JSL IPRINT_HEX
.011be9	ad 37 08	lda $010837	                LDA FAT32_Curent_Directory_Sector_loaded_in_ram
.011bec	eb		xba		                XBA
.011bed	22 42 45 38	jsl $384542	                JSL IPRINT_HEX
.011bf1	eb		xba		                XBA
.011bf2	22 42 45 38	jsl $384542	                JSL IPRINT_HEX
.011bf6	a2 df 06	ldx #$06df	                LDX #<>TEXT_FAT32___Curent_Folder_entry_value
.011bf9	a9 02 00	lda #$0002	                LDA #`TEXT_FAT32___Curent_Folder_entry_value
.011bfc	22 25 45 38	jsl $384525	                JSL IPUTS_ABS       ; print the first line
.011c00	a9 0d 00	lda #$000d	                LDA #$0D
.011c03	22 f4 0b 39	jsl $390bf4	                JSL IPUTC
.011c07	a2 00 00	ldx #$0000	                LDX #0
.011c0a					 PRINT_FAT32_Root_entry_value:
.011c0a	bf 3b 08 01	lda $01083b,x	                LDA @l FAT32_Curent_Directory_entry_value,x
.011c0e	22 42 45 38	jsl $384542	                JSL IPRINT_HEX
.011c12	e8		inx		                INX
.011c13	e0 20 00	cpx #$0020	                CPX #32
.011c16	d0 f2		bne $011c0a	                BNE PRINT_FAT32_Root_entry_value
.011c18	a9 0d 00	lda #$000d	                LDA #$0D
.011c1b	22 f4 0b 39	jsl $390bf4	                JSL IPUTC
.011c1f	a2 00 00	ldx #$0000	                LDX #0
.011c22					 PRINT_FAT32_Root_entry_value_ASCII:
.011c22	bf 3b 08 01	lda $01083b,x	                LDA @l FAT32_Curent_Directory_entry_value,x
.011c26	22 f4 0b 39	jsl $390bf4	                JSL IPUTC
.011c2a	e8		inx		                INX
.011c2b	e0 20 00	cpx #$0020	                CPX #32
.011c2e	d0 f2		bne $011c22	                BNE PRINT_FAT32_Root_entry_value_ASCII
.011c30	a2 04 07	ldx #$0704	                LDX #<>TEXT_FAT32___FAT_Base_Sector
.011c33	a9 02 00	lda #$0002	                LDA #`TEXT_FAT32___FAT_Base_Sector
.011c36	22 25 45 38	jsl $384525	                JSL IPUTS_ABS       ; print the first line
.011c3a	ad bd 08	lda $0108bd	                LDA FAT32_FAT_Base_Sector+2
.011c3d	eb		xba		                XBA
.011c3e	22 42 45 38	jsl $384542	                JSL IPRINT_HEX
.011c42	eb		xba		                XBA
.011c43	22 42 45 38	jsl $384542	                JSL IPRINT_HEX
.011c47	ad bb 08	lda $0108bb	                LDA FAT32_FAT_Base_Sector
.011c4a	eb		xba		                XBA
.011c4b	22 42 45 38	jsl $384542	                JSL IPRINT_HEX
.011c4f	eb		xba		                XBA
.011c50	22 42 45 38	jsl $384542	                JSL IPRINT_HEX
.011c54	a2 29 07	ldx #$0729	                LDX #<>TEXT_FAT32___FAT_Sector_loaded_in_ram
.011c57	a9 02 00	lda #$0002	                LDA #`TEXT_FAT32___FAT_Sector_loaded_in_ram
.011c5a	22 25 45 38	jsl $384525	                JSL IPUTS_ABS       ; print the first line
.011c5e	ad c1 08	lda $0108c1	                LDA FAT32_FAT_Sector_loaded_in_ram+2
.011c61	eb		xba		                XBA
.011c62	22 42 45 38	jsl $384542	                JSL IPRINT_HEX
.011c66	eb		xba		                XBA
.011c67	22 42 45 38	jsl $384542	                JSL IPRINT_HEX
.011c6b	ad bf 08	lda $0108bf	                LDA FAT32_FAT_Sector_loaded_in_ram
.011c6e	eb		xba		                XBA
.011c6f	22 42 45 38	jsl $384542	                JSL IPRINT_HEX
.011c73	eb		xba		                XBA
.011c74	22 42 45 38	jsl $384542	                JSL IPRINT_HEX
.011c78	a2 4e 07	ldx #$074e	                LDX #<>TEXT_FAT32___FAT_Entry
.011c7b	a9 02 00	lda #$0002	                LDA #`TEXT_FAT32___FAT_Entry
.011c7e	22 25 45 38	jsl $384525	                JSL IPUTS_ABS       ; print the first line
.011c82	ad c5 08	lda $0108c5	                LDA FAT32_FAT_Entry+2
.011c85	eb		xba		                XBA
.011c86	22 42 45 38	jsl $384542	                JSL IPRINT_HEX
.011c8a	eb		xba		                XBA
.011c8b	22 42 45 38	jsl $384542	                JSL IPRINT_HEX
.011c8f	ad c3 08	lda $0108c3	                LDA FAT32_FAT_Entry
.011c92	eb		xba		                XBA
.011c93	22 42 45 38	jsl $384542	                JSL IPRINT_HEX
.011c97	eb		xba		                XBA
.011c98	22 42 45 38	jsl $384542	                JSL IPRINT_HEX
.011c9c	a2 73 07	ldx #$0773	                LDX #<>TEXT_FAT32___FAT_Next_Entry
.011c9f	a9 02 00	lda #$0002	                LDA #`TEXT_FAT32___FAT_Next_Entry
.011ca2	22 25 45 38	jsl $384525	                JSL IPUTS_ABS       ; print the first line
.011ca6	ad c9 08	lda $0108c9	                LDA FAT32_FAT_Next_Entry+2
.011ca9	eb		xba		                XBA
.011caa	22 42 45 38	jsl $384542	                JSL IPRINT_HEX
.011cae	eb		xba		                XBA
.011caf	22 42 45 38	jsl $384542	                JSL IPRINT_HEX
.011cb3	ad c7 08	lda $0108c7	                LDA FAT32_FAT_Next_Entry
.011cb6	eb		xba		                XBA
.011cb7	22 42 45 38	jsl $384542	                JSL IPRINT_HEX
.011cbb	eb		xba		                XBA
.011cbc	22 42 45 38	jsl $384542	                JSL IPRINT_HEX
.011cc0	a2 98 07	ldx #$0798	                LDX #<>TEXT_FAT32___FAT_Linked_Entry
.011cc3	a9 02 00	lda #$0002	                LDA #`TEXT_FAT32___FAT_Linked_Entry
.011cc6	22 25 45 38	jsl $384525	                JSL IPUTS_ABS       ; print the first line
.011cca	ad cd 08	lda $0108cd	                LDA FAT32_FAT_Linked_Entry+2
.011ccd	eb		xba		                XBA
.011cce	22 42 45 38	jsl $384542	                JSL IPRINT_HEX
.011cd2	eb		xba		                XBA
.011cd3	22 42 45 38	jsl $384542	                JSL IPRINT_HEX
.011cd7	ad cb 08	lda $0108cb	                LDA FAT32_FAT_Linked_Entry
.011cda	eb		xba		                XBA
.011cdb	22 42 45 38	jsl $384542	                JSL IPRINT_HEX
.011cdf	eb		xba		                XBA
.011ce0	22 42 45 38	jsl $384542	                JSL IPRINT_HEX
.011ce4	a2 e2 07	ldx #$07e2	                LDX #<>TEXT_FAT32___Data_Base_Sector
.011ce7	a9 02 00	lda #$0002	                LDA #`TEXT_FAT32___Data_Base_Sector
.011cea	22 25 45 38	jsl $384525	                JSL IPUTS_ABS       ; print the first line
.011cee	ad d9 08	lda $0108d9	                LDA FAT32_Data_Base_Sector+2
.011cf1	eb		xba		                XBA
.011cf2	22 42 45 38	jsl $384542	                JSL IPRINT_HEX
.011cf6	eb		xba		                XBA
.011cf7	22 42 45 38	jsl $384542	                JSL IPRINT_HEX
.011cfb	ad d7 08	lda $0108d7	                LDA FAT32_Data_Base_Sector
.011cfe	eb		xba		                XBA
.011cff	22 42 45 38	jsl $384542	                JSL IPRINT_HEX
.011d03	eb		xba		                XBA
.011d04	22 42 45 38	jsl $384542	                JSL IPRINT_HEX
.011d08	a2 07 08	ldx #$0807	                LDX #<>TEXT_FAT32___FAT_Partition_address
.011d0b	a9 02 00	lda #$0002	                LDA #`TEXT_FAT32___FAT_Partition_address
.011d0e	22 25 45 38	jsl $384525	                JSL IPUTS_ABS       ; print the first line
.011d12	ad dd 08	lda $0108dd	                LDA FAT_Partition_address+2
.011d15	eb		xba		                XBA
.011d16	22 42 45 38	jsl $384542	                JSL IPRINT_HEX
.011d1a	eb		xba		                XBA
.011d1b	22 42 45 38	jsl $384542	                JSL IPRINT_HEX
.011d1f	ad db 08	lda $0108db	                LDA FAT_Partition_address
.011d22	eb		xba		                XBA
.011d23	22 42 45 38	jsl $384542	                JSL IPRINT_HEX
.011d27	eb		xba		                XBA
.011d28	22 42 45 38	jsl $384542	                JSL IPRINT_HEX
.011d2c	a2 2c 08	ldx #$082c	                LDX #<>TEXT_FAT32___Curent_Folder_base_cluster
.011d2f	a9 02 00	lda #$0002	                LDA #`TEXT_FAT32___Curent_Folder_base_cluster
.011d32	22 25 45 38	jsl $384525	                JSL IPUTS_ABS       ; print the first line
.011d36	ad e1 08	lda $0108e1	                LDA FAT32_Curent_Folder_start_cluster+2
.011d39	eb		xba		                XBA
.011d3a	22 42 45 38	jsl $384542	                JSL IPRINT_HEX
.011d3e	eb		xba		                XBA
.011d3f	22 42 45 38	jsl $384542	                JSL IPRINT_HEX
.011d43	ad df 08	lda $0108df	                LDA FAT32_Curent_Folder_start_cluster
.011d46	eb		xba		                XBA
.011d47	22 42 45 38	jsl $384542	                JSL IPRINT_HEX
.011d4b	eb		xba		                XBA
.011d4c	22 42 45 38	jsl $384542	                JSL IPRINT_HEX
.011d50	a2 51 08	ldx #$0851	                LDX #<>TEXT_FAT32___Curent_Folder_curent_cluster
.011d53	a9 02 00	lda #$0002	                LDA #`TEXT_FAT32___Curent_Folder_curent_cluster
.011d56	22 25 45 38	jsl $384525	                JSL IPUTS_ABS       ; print the first line
.011d5a	ad e5 08	lda $0108e5	                LDA FAT32_Curent_Folder_curent_cluster+2
.011d5d	eb		xba		                XBA
.011d5e	22 42 45 38	jsl $384542	                JSL IPRINT_HEX
.011d62	eb		xba		                XBA
.011d63	22 42 45 38	jsl $384542	                JSL IPRINT_HEX
.011d67	ad e3 08	lda $0108e3	                LDA FAT32_Curent_Folder_curent_cluster
.011d6a	eb		xba		                XBA
.011d6b	22 42 45 38	jsl $384542	                JSL IPRINT_HEX
.011d6f	eb		xba		                XBA
.011d70	22 42 45 38	jsl $384542	                JSL IPRINT_HEX
.011d74	a2 76 08	ldx #$0876	                LDX #<>TEXT_FAT32___Curent_File_Cluster
.011d77	a9 02 00	lda #$0002	                LDA #`TEXT_FAT32___Curent_File_Cluster
.011d7a	22 25 45 38	jsl $384525	                JSL IPUTS_ABS       ; print the first line
.011d7e	ad e9 08	lda $0108e9	                LDA FAT32_Curent_File_Cluster+2
.011d81	eb		xba		                XBA
.011d82	22 42 45 38	jsl $384542	                JSL IPRINT_HEX
.011d86	eb		xba		                XBA
.011d87	22 42 45 38	jsl $384542	                JSL IPRINT_HEX
.011d8b	ad e7 08	lda $0108e7	                LDA FAT32_Curent_File_Cluster
.011d8e	eb		xba		                XBA
.011d8f	22 42 45 38	jsl $384542	                JSL IPRINT_HEX
.011d93	eb		xba		                XBA
.011d94	22 42 45 38	jsl $384542	                JSL IPRINT_HEX
.011d98	a2 9b 08	ldx #$089b	                LDX #<>TEXT_FAT32___FAT32_Start_Of_The_file_Cluster
.011d9b	a9 02 00	lda #$0002	                LDA #`TEXT_FAT32___FAT32_Start_Of_The_file_Cluster
.011d9e	22 25 45 38	jsl $384525	                JSL IPUTS_ABS       ; print the first line
.011da2	ad ed 08	lda $0108ed	                LDA FAT32_Start_Of_The_file_Cluster+2
.011da5	eb		xba		                XBA
.011da6	22 42 45 38	jsl $384542	                JSL IPRINT_HEX
.011daa	eb		xba		                XBA
.011dab	22 42 45 38	jsl $384542	                JSL IPRINT_HEX
.011daf	ad eb 08	lda $0108eb	                LDA FAT32_Start_Of_The_file_Cluster
.011db2	eb		xba		                XBA
.011db3	22 42 45 38	jsl $384542	                JSL IPRINT_HEX
.011db7	eb		xba		                XBA
.011db8	22 42 45 38	jsl $384542	                JSL IPRINT_HEX
.011dbc	a2 e5 08	ldx #$08e5	                LDX #<>TEXT_FAT32___Sector_to_read
.011dbf	a9 02 00	lda #$0002	                LDA #`TEXT_FAT32___Sector_to_read
.011dc2	22 25 45 38	jsl $384525	                JSL IPUTS_ABS       ; print the first line
.011dc6	ad f5 08	lda $0108f5	                LDA FAT32_Sector_to_read+2
.011dc9	eb		xba		                XBA
.011dca	22 42 45 38	jsl $384542	                JSL IPRINT_HEX
.011dce	eb		xba		                XBA
.011dcf	22 42 45 38	jsl $384542	                JSL IPRINT_HEX
.011dd3	ad f3 08	lda $0108f3	                LDA FAT32_Sector_to_read
.011dd6	eb		xba		                XBA
.011dd7	22 42 45 38	jsl $384542	                JSL IPRINT_HEX
.011ddb	eb		xba		                XBA
.011ddc	22 42 45 38	jsl $384542	                JSL IPRINT_HEX
.011de0	a2 0a 09	ldx #$090a	                LDX #<>TEXT_FAT32___SD_FDD_HDD_Sell
.011de3	a9 02 00	lda #$0002	                LDA #`TEXT_FAT32___SD_FDD_HDD_Sell
.011de6	22 25 45 38	jsl $384525	                JSL IPUTS_ABS       ; print the first line
.011dea	ad f7 08	lda $0108f7	                LDA FAT32_SD_FDD_HDD_Sell
.011ded	eb		xba		                XBA
.011dee	22 42 45 38	jsl $384542	                JSL IPRINT_HEX
.011df2	eb		xba		                XBA
.011df3	22 42 45 38	jsl $384542	                JSL IPRINT_HEX
.011df7	7a		ply		                PLY
.011df8	fa		plx		                PLX
.011df9	68		pla		                PLA
.011dfa	28		plp		                PLP
.011dfb	6b		rtl		                RTL
>020425	50 61 72 74 69 74 69 6f		Partition_ofset_text    .text "Partition ofset (in cluster) : ",0
>02042d	6e 20 6f 66 73 65 74 20 28 69 6e 20 63 6c 75 73
>02043d	74 65 72 29 20 3a 20 00
>020445	0d 46 41 54 33 32 20 42		TEXT_FAT32___Byte_Per_Sector		                  .text   $0D, "FAT32 Byte Per Sector              ",0
>02044d	79 74 65 20 50 65 72 20 53 65 63 74 6f 72 20 20
>02045d	20 20 20 20 20 20 20 20 20 20 20 20 00
>02046a	0d 46 41 54 33 32 20 53		TEXT_FAT32___Sector_Per_Cluster                   .text   $0D, "FAT32 Sector Per Cluster           ",0
>020472	65 63 74 6f 72 20 50 65 72 20 43 6c 75 73 74 65
>020482	72 20 20 20 20 20 20 20 20 20 20 20 00
>02048f	0d 46 41 54 33 32 20 4e		TEXT_FAT32___Nb_Of_reserved_Cluster               .text   $0D, "FAT32 Nb Of reserved Cluster       ",0
>020497	62 20 4f 66 20 72 65 73 65 72 76 65 64 20 43 6c
>0204a7	75 73 74 65 72 20 20 20 20 20 20 20 00
>0204b4	0d 46 41 54 33 32 20 4e		TEXT_FAT32___Nb_Of_FAT                            .text   $0D, "FAT32 Nb Of FAT                    ",0
>0204bc	62 20 4f 66 20 46 41 54 20 20 20 20 20 20 20 20
>0204cc	20 20 20 20 20 20 20 20 20 20 20 20 00
>0204d9	0d 46 41 54 33 32 20 4d		TEXT_FAT32___Max_Root_Entry                       .text   $0D, "FAT32 Max Root Entry               ",0
>0204e1	61 78 20 52 6f 6f 74 20 45 6e 74 72 79 20 20 20
>0204f1	20 20 20 20 20 20 20 20 20 20 20 20 00
>0204fe	0d 46 41 54 33 32 20 54		TEXT_FAT32___Total_Sector_Count                   .text   $0D, "FAT32 Total_Sector_Count           ",0
>020506	6f 74 61 6c 5f 53 65 63 74 6f 72 5f 43 6f 75 6e
>020516	74 20 20 20 20 20 20 20 20 20 20 20 00
>020523	0d 46 41 54 33 32 20 53		TEXT_FAT32___Sector_per_Fat                       .text   $0D, "FAT32 Sector per Fat               ",0
>02052b	65 63 74 6f 72 20 70 65 72 20 46 61 74 20 20 20
>02053b	20 20 20 20 20 20 20 20 20 20 20 20 00
>020548	0d 46 41 54 33 32 20 53		TEXT_FAT32___Sector_per_Track                     .text   $0D, "FAT32 Sector per Track             ",0
>020550	65 63 74 6f 72 20 70 65 72 20 54 72 61 63 6b 20
>020560	20 20 20 20 20 20 20 20 20 20 20 20 00
>02056d	0d 46 41 54 33 32 20 4e		TEXT_FAT32___Nb_of_Head                           .text   $0D, "FAT32 Nb of Head                   ",0
>020575	62 20 6f 66 20 48 65 61 64 20 20 20 20 20 20 20
>020585	20 20 20 20 20 20 20 20 20 20 20 20 00
>020592	0d 46 41 54 33 32 20 4e		TEXT_FAT32___Nb_Of_Sector_In_Partition            .text   $0D, "FAT32 Nb Of Sector In Partition    ",0
>02059a	62 20 4f 66 20 53 65 63 74 6f 72 20 49 6e 20 50
>0205aa	61 72 74 69 74 69 6f 6e 20 20 20 20 00
>0205b7	0d 46 41 54 33 32 20 42		TEXT_FAT32___Boot_Signature                       .text   $0D, "FAT32 Boot Signature               ",0
>0205bf	6f 6f 74 20 53 69 67 6e 61 74 75 72 65 20 20 20
>0205cf	20 20 20 20 20 20 20 20 20 20 20 20 00
>0205dc	0d 46 41 54 33 32 20 56		TEXT_FAT32___Volume_ID                            .text   $0D, "FAT32 Volume ID                    ",0
>0205e4	6f 6c 75 6d 65 20 49 44 20 20 20 20 20 20 20 20
>0205f4	20 20 20 20 20 20 20 20 20 20 20 20 00
>020601	0d 46 41 54 33 32 20 56		TEXT_FAT32___Volume_Label                         .text   $0D, "FAT32 Volume Label                 ",0
>020609	6f 6c 75 6d 65 20 4c 61 62 65 6c 20 20 20 20 20
>020619	20 20 20 20 20 20 20 20 20 20 20 20 00
>020626	0d 46 41 54 33 32 20 46		TEXT_FAT32___File_System_Type                     .text   $0D, "FAT32 File System Type             ",0
>02062e	69 6c 65 20 53 79 73 74 65 6d 20 54 79 70 65 20
>02063e	20 20 20 20 20 20 20 20 20 20 20 20 00
>02064b	0d 46 41 54 33 32 20 53		TEXT_FAT32___Sector_loaded_in_ram                 .text   $0D, "FAT32 Sector loaded in ram         ",0
>020653	65 63 74 6f 72 20 6c 6f 61 64 65 64 20 69 6e 20
>020663	72 61 6d 20 20 20 20 20 20 20 20 20 00
>020670	0d 46 41 54 33 32 20 52		TEXT_FAT32___Root_Sector_offset                   .text   $0D, "FAT32 Root Sector offset           ",0
>020678	6f 6f 74 20 53 65 63 74 6f 72 20 6f 66 66 73 65
>020688	74 20 20 20 20 20 20 20 20 20 20 20 00
>020695	0d 46 41 54 33 32 20 52		TEXT_FAT32___Root_Base_Sector                     .text   $0D, "FAT32 Root Base Sector             ",0
>02069d	6f 6f 74 20 42 61 73 65 20 53 65 63 74 6f 72 20
>0206ad	20 20 20 20 20 20 20 20 20 20 20 20 00
>0206ba	0d 46 41 54 33 32 20 44		TEXT_FAT32___Curent_Directory_Sector_loaded_in_ram .text  $0D, "FAT32 Dir Sector loaded in ram     ",0
>0206c2	69 72 20 53 65 63 74 6f 72 20 6c 6f 61 64 65 64
>0206d2	20 69 6e 20 72 61 6d 20 20 20 20 20 00
>0206df	0d 46 41 54 33 32 20 46		TEXT_FAT32___Curent_Folder_entry_value            .text   $0D, "FAT32 Folder entry value           ",0
>0206e7	6f 6c 64 65 72 20 65 6e 74 72 79 20 76 61 6c 75
>0206f7	65 20 20 20 20 20 20 20 20 20 20 20 00
>020704	0d 46 41 54 33 32 20 46		TEXT_FAT32___FAT_Base_Sector                      .text   $0D, "FAT32 FAT Base Sector              ",0
>02070c	41 54 20 42 61 73 65 20 53 65 63 74 6f 72 20 20
>02071c	20 20 20 20 20 20 20 20 20 20 20 20 00
>020729	0d 46 41 54 33 32 20 46		TEXT_FAT32___FAT_Sector_loaded_in_ram             .text   $0D, "FAT32 FAT Sector loaded in ram     ",0
>020731	41 54 20 53 65 63 74 6f 72 20 6c 6f 61 64 65 64
>020741	20 69 6e 20 72 61 6d 20 20 20 20 20 00
>02074e	0d 46 41 54 33 32 20 46		TEXT_FAT32___FAT_Entry                            .text   $0D, "FAT32 FAT Entry                    ",0
>020756	41 54 20 45 6e 74 72 79 20 20 20 20 20 20 20 20
>020766	20 20 20 20 20 20 20 20 20 20 20 20 00
>020773	0d 46 41 54 33 32 20 46		TEXT_FAT32___FAT_Next_Entry                       .text   $0D, "FAT32 FAT Next Entry               ",0
>02077b	41 54 20 4e 65 78 74 20 45 6e 74 72 79 20 20 20
>02078b	20 20 20 20 20 20 20 20 20 20 20 20 00
>020798	0d 46 41 54 33 32 20 46		TEXT_FAT32___FAT_Linked_Entry                     .text   $0D, "FAT32 FAT Linked Entry             ",0
>0207a0	41 54 20 4c 69 6e 6b 65 64 20 45 6e 74 72 79 20
>0207b0	20 20 20 20 20 20 20 20 20 20 20 20 00
>0207bd	0d 46 41 54 33 32 20 46		TEXT_FAT32___FAT32_FAT_Entry_Physical_Address     .text   $0D, "FAT32 FAT Entry Physical Address   ",0
>0207c5	41 54 20 45 6e 74 72 79 20 50 68 79 73 69 63 61
>0207d5	6c 20 41 64 64 72 65 73 73 20 20 20 00
>0207e2	0d 46 41 54 33 32 20 44		TEXT_FAT32___Data_Base_Sector                     .text   $0D, "FAT32 Data Base Sector             ",0
>0207ea	61 74 61 20 42 61 73 65 20 53 65 63 74 6f 72 20
>0207fa	20 20 20 20 20 20 20 20 20 20 20 20 00
>020807	0d 46 41 54 20 50 61 72		TEXT_FAT32___FAT_Partition_address                .text   $0D, "FAT Partition address              ",0
>02080f	74 69 74 69 6f 6e 20 61 64 64 72 65 73 73 20 20
>02081f	20 20 20 20 20 20 20 20 20 20 20 20 00
>02082c	0d 46 41 54 33 32 20 43		TEXT_FAT32___Curent_Folder_base_cluster           .text   $0D, "FAT32 Curent Folder base cluster   ",0
>020834	75 72 65 6e 74 20 46 6f 6c 64 65 72 20 62 61 73
>020844	65 20 63 6c 75 73 74 65 72 20 20 20 00
>020851	0d 46 41 54 33 32 20 43		TEXT_FAT32___Curent_Folder_curent_cluster         .text   $0D, "FAT32 Curent Folder curent cluster ",0
>020859	75 72 65 6e 74 20 46 6f 6c 64 65 72 20 63 75 72
>020869	65 6e 74 20 63 6c 75 73 74 65 72 20 00
>020876	0d 46 41 54 33 32 20 43		TEXT_FAT32___Curent_File_Cluster                  .text   $0D, "FAT32 Curent File base cluster     ",0
>02087e	75 72 65 6e 74 20 46 69 6c 65 20 62 61 73 65 20
>02088e	63 6c 75 73 74 65 72 20 20 20 20 20 00
>02089b	0d 46 41 54 33 32 20 53		TEXT_FAT32___FAT32_Start_Of_The_file_Cluster      .text   $0D, "FAT32 Start Of The file cluster    ",0
>0208a3	74 61 72 74 20 4f 66 20 54 68 65 20 66 69 6c 65
>0208b3	20 63 6c 75 73 74 65 72 20 20 20 20 00
>0208c0	0d 46 41 54 33 32 20 53		TEXT_FAT32___FAT32_Start_Of_The_folder_Cluster    .text   $0D, "FAT32 Start Of The folder cluster  ",0
>0208c8	74 61 72 74 20 4f 66 20 54 68 65 20 66 6f 6c 64
>0208d8	65 72 20 63 6c 75 73 74 65 72 20 20 00
>0208e5	0d 46 41 54 33 32 20 53		TEXT_FAT32___Sector_to_read                       .text   $0D, "FAT32 Sector to read               ",0
>0208ed	65 63 74 6f 72 20 74 6f 20 72 65 61 64 20 20 20
>0208fd	20 20 20 20 20 20 20 20 20 20 20 20 00
>02090a	0d 46 41 54 33 32 20 53		TEXT_FAT32___SD_FDD_HDD_Sell                      .text   $0D, "FAT32 SD_FDD_HDD_Sell              ",0
>020912	44 5f 46 44 44 5f 48 44 44 5f 53 65 6c 6c 20 20
>020922	20 20 20 20 20 20 20 20 20 20 20 20 00
>02092f	0d 46 61 74 5f 73 69 7a		TEXT_____Fat_size                                 .text   $0D, "Fat_size                           ",0
>020937	65 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>020947	20 20 20 20 20 20 20 20 20 20 20 20 00
>020954	46 69 6c 65 20 6f 70 65		TEXT__OPEN_FILE_SUCCESS                  .text "File open Sucsessfuly",$0D,0
>02095c	6e 20 53 75 63 73 65 73 73 66 75 6c 79 0d 00
>02096b	43 61 6e 27 74 20 66 69		TEXT__CANT_FIND_THE_FILE                 .text "Can't find or open the specified file",$0D,0
>020973	6e 64 20 6f 72 20 6f 70 65 6e 20 74 68 65 20 73
>020983	70 65 63 69 66 69 65 64 20 66 69 6c 65 0d 00
>020992	0d 44 45 42 55 47 20 20		TEXT_____DEBUG                           .text   $0D, "DEBUG                              ",0
>02099a	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>0209aa	20 20 20 20 20 20 20 20 20 20 20 20 00
>0209b7	0d 42 52 45 41 4b 20 20		TEXT_____BREAK                           .text   $0D, "BREAK                              ",0
>0209bf	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>0209cf	20 20 20 20 20 20 20 20 20 20 20 20 00
>0209dc	0d 44 45 42 55 47 20 20		TEXT_____DEBUG_FOLDER_ENTRY_TO_READ      .text   $0D, "DEBUG  Folder Entry To Read        ",0
>0209e4	46 6f 6c 64 65 72 20 45 6e 74 72 79 20 54 6f 20
>0209f4	52 65 61 64 20 20 20 20 20 20 20 20 00
>020a01	0d 44 45 42 55 47 20 20		TEXT_____DEBUG_FAT_SECTOR_TO_READ        .text   $0D, "DEBUG  FAT Sector To Read          ",0
>020a09	46 41 54 20 53 65 63 74 6f 72 20 54 6f 20 52 65
>020a19	61 64 20 20 20 20 20 20 20 20 20 20 00
>020a26	0d 44 45 42 55 47 20 20		TEXT_____DEBUG_SECTOR_TO_READ            .text   $0D, "DEBUG  SECTOR_TO_READ              ",0
>020a2e	53 45 43 54 4f 52 5f 54 4f 5f 52 45 41 44 20 20
>020a3e	20 20 20 20 20 20 20 20 20 20 20 20 00
>020a4b	0d 2a 2a 2a 2a 2a 2a 2a		TEXT_____DEBUG______FAT_L_IN             .text   $0D, "*********** FAT L IN **************",$0D,0
>020a53	2a 2a 2a 2a 20 46 41 54 20 4c 20 49 4e 20 2a 2a
>020a63	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 0d 00
>020a71	0d 2d 2d 2d 2d 2d 2d 2d		TEXT_____DEBUG______FAT_L_OUT            .text   $0D, "----------- FAT L OUT -------------",$0D,0
>020a79	2d 2d 2d 2d 20 46 41 54 20 4c 20 4f 55 54 20 2d
>020a89	2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 0d 00
>020a97	0d 2a 2a 2a 2a 2a 2a 2a		TEXT_____DEBUG_____________              .text   $0D, "*********** FOLDER IN *************",$0D,0
>020a9f	2a 2a 2a 2a 20 46 4f 4c 44 45 52 20 49 4e 20 2a
>020aaf	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 0d 00
>020abd	0d 2d 2d 2d 2d 2d 2d 2d		TEXT_____DEBUG____________EX             .text   $0D, "----------- FOLDER OUT ------------",$0D,0
>020ac5	2d 2d 2d 2d 20 46 4f 4c 44 45 52 20 4f 55 54 20
>020ad5	2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 0d 00
>020ae3	0d 5f 5f 5f 5f 5f 5f 5f		TEXT_____DEBUG_START_DIR                 .text   $0D, "__________ START DIR CMD __________",$0D,0
>020aeb	5f 5f 5f 20 53 54 41 52 54 20 44 49 52 20 43 4d
>020afb	44 20 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 0d 00
>020b09	0d 5f 5f 5f 5f 5f 5f 5f		TEXT_____DEBUG_END_DIR                   .text   $0D, "___________ END DIR CMD ___________",$0D,0
>020b11	5f 5f 5f 5f 20 45 4e 44 20 44 49 52 20 43 4d 44
>020b21	20 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 0d 00
>020b2f	0d 5f 5f 5f 5f 5f 5f 5f		TEXT_____DEBUG_START_Open                .text   $0D, "__________ START Open CMD _________",$0D,0
>020b37	5f 5f 5f 20 53 54 41 52 54 20 4f 70 65 6e 20 43
>020b47	4d 44 20 5f 5f 5f 5f 5f 5f 5f 5f 5f 0d 00
>020b55	0d 5f 5f 5f 5f 5f 5f 5f		TEXT_____DEBUG_END_Open                  .text   $0D, "___________ END Open CMD __________",$0D,0
>020b5d	5f 5f 5f 5f 20 45 4e 44 20 4f 70 65 6e 20 43 4d
>020b6d	44 20 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 0d 00
>020b7b	0d 5f 5f 5f 5f 5f 5f 5f		TEXT_____DEBUG_START_Read                .text   $0D, "__________ START Read CMD _________",$0D,0
>020b83	5f 5f 5f 20 53 54 41 52 54 20 52 65 61 64 20 43
>020b93	4d 44 20 5f 5f 5f 5f 5f 5f 5f 5f 5f 0d 00
>020ba1	0d 5f 5f 5f 5f 5f 5f 5f		TEXT_____DEBUG_END_Read                  .text   $0D, "___________ END Read CMD __________",$0D,0
>020ba9	5f 5f 5f 5f 20 45 4e 44 20 52 65 61 64 20 43 4d
>020bb9	44 20 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 0d 00
>020bc7	0d 5f 5f 5f 5f 5f 5f 5f		TEXT_____DEBUG_START_Write               .text   $0D, "__________ START Write CMD ________",$0D,0
>020bcf	5f 5f 5f 20 53 54 41 52 54 20 57 72 69 74 65 20
>020bdf	43 4d 44 20 5f 5f 5f 5f 5f 5f 5f 5f 0d 00
>020bed	0d 5f 5f 5f 5f 5f 5f 5f		TEXT_____DEBUG_END_Write                 .text   $0D, "___________ END Write CMD _________",$0D,0
>020bf5	5f 5f 5f 5f 20 45 4e 44 20 57 72 69 74 65 20 43
>020c05	4d 44 20 5f 5f 5f 5f 5f 5f 5f 5f 5f 0d 00
>020c13	0d 5f 5f 5f 20 53 54 41		TEXT_____DEBUG_START_Find_Free_Folder_Entry      .text   $0D, "___ START Find Free Folder Entry __",$0D,0
>020c1b	52 54 20 46 69 6e 64 20 46 72 65 65 20 46 6f 6c
>020c2b	64 65 72 20 45 6e 74 72 79 20 5f 5f 0d 00
>020c39	0d 5f 5f 5f 5f 20 45 4e		TEXT_____DEBUG_END_Find_Free_Folder_Entry        .text   $0D, "____ END Find Free Folder Entry ___",$0D,0
>020c41	44 20 46 69 6e 64 20 46 72 65 65 20 46 6f 6c 64
>020c51	65 72 20 45 6e 74 72 79 20 5f 5f 5f 0d 00
>020c5f	0d 5f 20 53 54 41 52 54		TEXT_____DEBUG_START_Write_File_Directory_entry  .text   $0D, "_ START Write File Directory Entry ",$0D,0
>020c67	20 57 72 69 74 65 20 46 69 6c 65 20 44 69 72 65
>020c77	63 74 6f 72 79 20 45 6e 74 72 79 20 0d 00
>020c85	0d 5f 5f 20 45 4e 44 20		TEXT_____DEBUG_END_Write_File_Directory_entry    .text   $0D, "__ END Write File Directory Entry _",$0D,0
>020c8d	57 72 69 74 65 20 46 69 6c 65 20 44 69 72 65 63
>020c9d	74 6f 72 79 20 45 6e 74 72 79 20 5f 0d 00

;******  Return to file: src\FAT32.asm


;******  Processing file: src\FAT_32_Test_Code.asm

.020cab					FAT_32_test_fat_code
.020cab	da		phx		                  PHX
.020cac	48		pha		                  PHA
.020cad	a9 00 00	lda #$0000	                  LDA #$0000
.020cb0	8d c3 08	sta $0108c3	                  STA FAT32_FAT_Entry
.020cb3	a9 f8 d4	lda #$d4f8	                  LDA #$D4F8
.020cb6	8d c3 08	sta $0108c3	                  STA FAT32_FAT_Entry
.020cb9	a2 4e 07	ldx #$074e	                  LDX #<>TEXT_FAT32___FAT_Entry
.020cbc	a9 02 00	lda #$0002	                  LDA #`TEXT_FAT32___FAT_Entry
.020cbf	22 25 45 38	jsl $384525	                  JSL IPUTS_ABS       ; print the first line
.020cc3	a9 bd 00	lda #$00bd	                  LDA #$BD
.020cc6	22 81 45 38	jsl $384581	                  JSL SET_COLOUR
.020cca	ad c5 08	lda $0108c5	                  LDA FAT32_FAT_Entry+2
.020ccd	eb		xba		                  XBA
.020cce	22 42 45 38	jsl $384542	                  JSL IPRINT_HEX
.020cd2	eb		xba		                  XBA
.020cd3	22 42 45 38	jsl $384542	                  JSL IPRINT_HEX
.020cd7	ad c3 08	lda $0108c3	                  LDA FAT32_FAT_Entry
.020cda	eb		xba		                  XBA
.020cdb	22 42 45 38	jsl $384542	                  JSL IPRINT_HEX
.020cdf	eb		xba		                  XBA
.020ce0	22 42 45 38	jsl $384542	                  JSL IPRINT_HEX
.020ce4	a9 ed 00	lda #$00ed	                  LDA #$ED                  ; Set the default text color to light gray on dark gray
.020ce7	22 81 45 38	jsl $384581	                  JSL SET_COLOUR
.020ceb	a9 0d 00	lda #$000d	                  LDA #$0D
.020cee	22 f4 0b 39	jsl $390bf4	                  JSL IPUTC
.020cf2	a2 73 07	ldx #$0773	                  LDX #<>TEXT_FAT32___FAT_Next_Entry
.020cf5	a9 02 00	lda #$0002	                  LDA #`TEXT_FAT32___FAT_Next_Entry
.020cf8	22 25 45 38	jsl $384525	                  JSL IPUTS_ABS       ; print the first line
.020cfc	a9 bd 00	lda #$00bd	                  LDA #$BD
.020cff	22 81 45 38	jsl $384581	                  JSL SET_COLOUR
.020d03	ad c9 08	lda $0108c9	                  LDA FAT32_FAT_Next_Entry+2
.020d06	eb		xba		                  XBA
.020d07	22 42 45 38	jsl $384542	                  JSL IPRINT_HEX
.020d0b	eb		xba		                  XBA
.020d0c	22 42 45 38	jsl $384542	                  JSL IPRINT_HEX
.020d10	ad c7 08	lda $0108c7	                  LDA FAT32_FAT_Next_Entry
.020d13	eb		xba		                  XBA
.020d14	22 42 45 38	jsl $384542	                  JSL IPRINT_HEX
.020d18	eb		xba		                  XBA
.020d19	22 42 45 38	jsl $384542	                  JSL IPRINT_HEX
.020d1d	a9 ed 00	lda #$00ed	                  LDA #$ED                  ; Set the default text color to light gray on dark gray
.020d20	22 81 45 38	jsl $384581	                  JSL SET_COLOUR
.020d24	a9 0d 00	lda #$000d	                  LDA #$0D
.020d27	22 f4 0b 39	jsl $390bf4	                  JSL IPUTC
.020d2b	22 74 13 01	jsl $011374	                  jSL FAT32_IFAT_GET_FAT_ENTRY
.020d2f	a2 73 07	ldx #$0773	                  LDX #<>TEXT_FAT32___FAT_Next_Entry
.020d32	a9 02 00	lda #$0002	                  LDA #`TEXT_FAT32___FAT_Next_Entry
.020d35	22 25 45 38	jsl $384525	                  JSL IPUTS_ABS       ; print the first line
.020d39	a9 bd 00	lda #$00bd	                  LDA #$BD
.020d3c	22 81 45 38	jsl $384581	                  JSL SET_COLOUR
.020d40	ad c9 08	lda $0108c9	                  LDA FAT32_FAT_Next_Entry+2
.020d43	eb		xba		                  XBA
.020d44	22 42 45 38	jsl $384542	                  JSL IPRINT_HEX
.020d48	eb		xba		                  XBA
.020d49	22 42 45 38	jsl $384542	                  JSL IPRINT_HEX
.020d4d	ad c7 08	lda $0108c7	                  LDA FAT32_FAT_Next_Entry
.020d50	eb		xba		                  XBA
.020d51	22 42 45 38	jsl $384542	                  JSL IPRINT_HEX
.020d55	eb		xba		                  XBA
.020d56	22 42 45 38	jsl $384542	                  JSL IPRINT_HEX
.020d5a	a9 ed 00	lda #$00ed	                  LDA #$ED                  ; Set the default text color to light gray on dark gray
.020d5d	22 81 45 38	jsl $384581	                  JSL SET_COLOUR
.020d61	a9 0d 00	lda #$000d	                  LDA #$0D
.020d64	22 f4 0b 39	jsl $390bf4	                  JSL IPUTC
.020d68	68		pla		                  PLA
.020d69	fa		plx		                  PLX
.020d6a	6b		rtl		                  RTL
.020d6b					FAT32_ILOAD_FILE
.020d6b	22 2e 0f 01	jsl $010f2e	                  JSL IFAT32_READ_BOOT_SECTOR
.020d6f	c9 01 00	cmp #$0001	                  CMP #$0001
.020d72	f0 05		beq $020d79	                  BEQ ILOAD_FILE_FAT_32_BOOT_SECTOR_PARSING_OK
.020d74	a9 ff ff	lda #$ffff	                  LDA #-1
.020d77	80 47		bra $020dc0	                  BRA FAT32_ILOAD_FILE_RETURN_ERROR_temp
.020d79					ILOAD_FILE_FAT_32_BOOT_SECTOR_PARSING_OK
.020d79	22 8b 10 01	jsl $01108b	                  JSL IFAT32_COMPUT_ROOT_DIR_POS
.020d7d	c2 30		rep #$30	                REP #$30        ; set A&X long
.020d7f	a9 00 00	lda #$0000	                  LDA #$00 ; sellect the first entry
.020d82	48		pha		                  PHA
.020d83					FAT32_ILOAD_FILE_READ_NEXT_ROOT_ENTRY
.020d83	22 85 12 01	jsl $011285	                  JSL IFAT32_GET_ROOT_DIRECTORY_ENTRY
.020d87	ad 46 08	lda $010846	                  LDA FAT32_Curent_Directory_entry_value + 11 ; get the flag Byte to test if it a file or a directory
.020d8a	29 10 00	and #$0010	                  AND #$10
.020d8d	c9 10 00	cmp #$0010	                  CMP #$10
.020d90	d0 0a		bne $020d9c	                  BNE FAT32_ILOAD_FILE_ENTRY ; if equal we read a directory so just read the next one
.020d92	68		pla		                  PLA   ; get the actual root entry
.020d93	cd 08 08	cmp $010808	                  CMP FAT32_Max_Root_Entry ; prevent to loop forever so exit
.020d96	f0 24		beq $020dbc	                  BEQ FAT32_ILOAD_FILE_NO_FILE_MATCHED
.020d98	1a		inc a		                  INC A ; sellect the next root entry
.020d99	48		pha		                  PHA   ; save the next root entry to read
.020d9a	80 e7		bra $020d83	                  BRA FAT32_ILOAD_FILE_READ_NEXT_ROOT_ENTRY
.020d9c					FAT32_ILOAD_FILE_ENTRY
.020d9c	c2 30		rep #$30	                REP #$30        ; set A&X long
.020d9e	68		pla		                  PLA   ; get the actual root entry
.020d9f	cd 08 08	cmp $010808	                  CMP FAT32_Max_Root_Entry ; prevent to loop forever so exit
.020da2	f0 18		beq $020dbc	                  BEQ FAT32_ILOAD_FILE_NO_FILE_MATCHED
.020da4	1a		inc a		                  INC A ; sellect the next root entry in case the file name is wrong
.020da5	48		pha		                  PHA   ; save the next root entry to read
.020da6	a2 ff ff	ldx #$ffff	                  LDX #-1
.020da9	a0 ff ff	ldy #$ffff	                  LDY #-1
.020dac					FAT32_ILOAD_FILE_CHAR_MATCHING
.020dac	e8		inx		                  INC X
.020dad	c8		iny		                  INC Y
.020dae	e0 0b 00	cpx #$000b	                  CPX #11 ; FAT12 file or folder size
.020db1	f0 0f		beq $020dc2	                  BEQ FAT32_ILOAD_FILE_STRING_MATCHED
.020db3	b3 06		lda ($06,s),y	                  LDA (6,S),Y ; load the "y" char file name we want to read
.020db5	dd 3b 08	cmp $01083b,x	                  CMP FAT32_Curent_Directory_entry_value,X
.020db8	f0 f2		beq $020dac	                  BEQ FAT32_ILOAD_FILE_CHAR_MATCHING
.020dba	80 c7		bra $020d83	                  BRA FAT32_ILOAD_FILE_READ_NEXT_ROOT_ENTRY ;;; FAT32_ILOAD_FILE_STRING_NOT_MATCHED    emoved as we still need to test what type of entry it is befor trying to compare the file name
.020dbc					FAT32_ILOAD_FILE_NO_FILE_MATCHED
.020dbc	68		pla		                  PLA
.020dbd	a9 fe ff	lda #$fffe	                  LDA #-2
.020dc0					FAT32_ILOAD_FILE_RETURN_ERROR_temp
.020dc0	80 5c		bra $020e1e	                  BRA FAT32_ILOAD_FILE_RETURN_ERROR
.020dc2					FAT32_ILOAD_FILE_STRING_MATCHED
.020dc2	68		pla		                  PLA
.020dc3	ad 55 08	lda $010855	                  LDA FAT32_Curent_Directory_entry_value + 26 ; get the first fat entry for the fil from the root directory entry we matched
.020dc6	8d c7 08	sta $0108c7	                  STA FAT32_FAT_Next_Entry
.020dc9					FAT32_ILOAD_FILE_Read_next_sector
.020dc9	a3 0a		lda $0a,s	                  LDA 10,S ; load the byte nb 3 (bank byte)
.020dcb	48		pha		                  PHA
.020dcc	a3 0c		lda $0c,s	                  LDA 12,S ; load the low world part of the buffer address
.020dce	48		pha		                  PHA
.020dcf	ad c7 08	lda $0108c7	                  LDA FAT32_FAT_Next_Entry ; sector to read
.020dd2	69 21 00	adc #$0021	                  ADC #1+9+9+14 ; skip the reserved sector(MBR?) ,  the 2 fat and the root sector that will need to be computed  acording to the fat position if several partition are in the same hardrive, it for now hardcoded as one partition
.020dd5	a2 00 00	ldx #$0000	                  LDX #0
.020dd8	22 84 14 01	jsl $011484	                  JSL IFAT_READ_SECTOR
.020ddc	fa		plx		                  PLX
.020ddd	fa		plx		                  PLX
.020dde	a3 0c		lda $0c,s	                  LDA 12,S ; load the low world part of the buffer address
.020de0	18		clc		                  CLC
.020de1	a9 00 00	lda #$0000	                  LDA #0
.020de4	48		pha		                  PHA ; save the cpt vale
.020de5	48		pha		                  PHA ; save the
.020de6					FAT32_ILOAD_FILE_Add_More_Sector_Per_Cluster
.020de6	a3 04		lda $04,s	                  LDA 4,S ; load the Byte per cluster value
.020de8	6d 00 08	adc $010800	                  ADC FAT32_Byte_Per_Sector
.020deb	83 04		sta $04,s	                  STA 4,S
.020ded	ad 02 08	lda $010802	                  LDA FAT32_Sector_Per_Cluster
.020df0	c3 02		cmp $02,s	                  CMP 2,S
.020df2	f0 07		beq $020dfb	                  BEQ FAT32_ILOAD_FILE_Read_Next_Data
.020df4	a3 02		lda $02,s	                  LDA 2,S
.020df6	1a		inc a		                  INC A
.020df7	83 02		sta $02,s	                  STA 2,S
.020df9	80 eb		bra $020de6	                  BRA FAT32_ILOAD_FILE_Add_More_Sector_Per_Cluster
.020dfb					FAT32_ILOAD_FILE_Read_Next_Data
.020dfb	fa		plx		                  PLX ; removing the compter valuer from the stack
.020dfc	a3 0e		lda $0e,s	                  LDA 14,S ; load the low world part of the buffer address
.020dfe	18		clc		                  CLC
.020dff	63 02		adc $02,s	                  ADC 2,S
.020e01	90 09		bcc $020e0c	                  BCC FAT32_ILOAD_FILE_New_Buffer_Address_computed
.020e03	83 0e		sta $0e,s	                  STA 14,S ; Save the low world part of the buffer address
.020e05	a3 0c		lda $0c,s	                  LDA 12,S ; load the byte nb 3 (bank byte)
.020e07	69 01 00	adc #$0001	                  ADC #1
.020e0a	83 0c		sta $0c,s	                  STA 12,S ; Save the byte nb 3 (bank byte)
.020e0c					FAT32_ILOAD_FILE_New_Buffer_Address_computed
.020e0c	fa		plx		                  PLX ; get the Byte per cluster count out of the stack
.020e0d	ad c7 08	lda $0108c7	                  LDA FAT32_FAT_Next_Entry ; sector to read
.020e10	22 74 13 01	jsl $011374	                  JSL FAT32_IFAT_GET_FAT_ENTRY
.020e14	ad c7 08	lda $0108c7	                  LDA FAT32_FAT_Next_Entry
.020e17	c9 fe 0f	cmp #$0ffe	                  CMP #$FFE
.020e1a	b0 02		bcs $020e1e	                  BCS FAT32_ILOAD_FILE_END_OF_FILE
.020e1c	80 ab		bra $020dc9	                  BRA FAT32_ILOAD_FILE_Read_next_sector
.020e1e					FAT32_ILOAD_FILE_END_OF_FILE
.020e1e					FAT32_ILOAD_FILE_RETURN_ERROR
.020e1e	6b		rtl		                  RTL
.020e1f					FOENIX_SD_INIT_READ
.020e1f	a9 01 00	lda #$0001	                LDA #$01
.020e22	8f 02 ea af	sta $afea02	                STA SDC_TRANS_TYPE_REG  ; Set Init SD
.020e26	a9 01 00	lda #$0001	                LDA #$01
.020e29	8f 03 ea af	sta $afea03	                STA SDC_TRANS_CONTROL_REG ; Let's Start the Process
.020e2d					 SDC_NOT_FINISHED
.020e2d	af 04 ea af	lda $afea04	                LDA SDC_TRANS_STATUS_REG
.020e31	29 01 00	and #$0001	                AND #SDC_TRANS_BUSY
.020e34	c9 01 00	cmp #$0001	                CMP #SDC_TRANS_BUSY
.020e37	f0 f4		beq $020e2d	                BEQ SDC_NOT_FINISHED
.020e39	af 05 ea af	lda $afea05	                LDA SDC_TRANS_ERROR_REG
.020e3d	8f 00 10 00	sta $001000	                STA $001000
.020e41	c9 00 00	cmp #$0000	                CMP #$00
.020e44	d0 0f		bne $020e55	                BNE SDISREADY
.020e46	af 80 e8 af	lda $afe880	                LDA GABE_MSTR_CTRL
.020e4a	29 fd ff	and #$fffd	                AND #~GABE_CTRL_SDC_LED
.020e4d	0f 02 00 00	ora $000002	                ORA GABE_CTRL_SDC_LED
.020e51	8f 80 e8 af	sta $afe880	                STA GABE_MSTR_CTRL
.020e55					 SDISREADY
.020e55	a9 00 00	lda #$0000	                LDA #$00
.020e58	8f 07 ea af	sta $afea07	                STA SDC_SD_ADDR_7_0_REG
.020e5c	a9 00 00	lda #$0000	                LDA #$00
.020e5f	8f 08 ea af	sta $afea08	                STA SDC_SD_ADDR_15_8_REG
.020e63	a9 00 00	lda #$0000	                LDA #$00
.020e66	8f 09 ea af	sta $afea09	                STA SDC_SD_ADDR_23_16_REG
.020e6a	a9 00 00	lda #$0000	                LDA #$00
.020e6d	8f 0a ea af	sta $afea0a	                STA SDC_SD_ADDR_31_24_REG
.020e71	a9 02 00	lda #$0002	                LDA #SDC_TRANS_READ_BLK
.020e74	8f 02 ea af	sta $afea02	                STA SDC_TRANS_TYPE_REG
.020e78	a9 01 00	lda #$0001	                LDA #$01
.020e7b	8f 03 ea af	sta $afea03	                STA SDC_TRANS_CONTROL_REG ; Let's Start the Process
.020e7f					 SDC_NOT_FINISHED2
.020e7f	af 04 ea af	lda $afea04	                LDA SDC_TRANS_STATUS_REG
.020e83	29 01 00	and #$0001	                AND #SDC_TRANS_BUSY
.020e86	c9 01 00	cmp #$0001	                CMP #SDC_TRANS_BUSY
.020e89	f0 f4		beq $020e7f	                BEQ SDC_NOT_FINISHED2
.020e8b	af 05 ea af	lda $afea05	                LDA SDC_TRANS_ERROR_REG
.020e8f	8f 01 10 00	sta $001001	                STA $001001
.020e93	af 13 ea af	lda $afea13	                LDA SDC_RX_FIFO_DATA_CNT_LO
.020e97	8f 02 10 00	sta $001002	                STA $001002
.020e9b	af 12 ea af	lda $afea12	                LDA SDC_RX_FIFO_DATA_CNT_HI
.020e9f	8f 03 10 00	sta $001003	                STA $001003
.020ea3	a2 00 00	ldx #$0000	                LDX #$0000
.020ea6					 SDC_LOAD_BLOCK
.020ea6	af 10 ea af	lda $afea10	                LDA SDC_RX_FIFO_DATA_REG
.020eaa	e8		inx		                INX
.020eab	e0 00 02	cpx #$0200	                CPX #$0200
.020eae	d0 f6		bne $020ea6	                BNE SDC_LOAD_BLOCK
.020eb0	6b		rtl		                RTL

;******  Return to file: src\FAT32.asm


;******  Processing file: src\HDD_row_TEXT_HEX.asm

>120000	fa b8 00 10 8e d0 bc 00		data_hard_drive .text $FA,$B8,$00,$10,$8E,$D0,$BC,$00,$B0,$B8,$00,$00,$8E,$D8,$8E,$C0,$FB,$BE,$00,$7C,$BF,$00,$06,$B9,$00,$02,$F3,$A4,$EA,$21,$06,$00
>120008	b0 b8 00 00 8e d8 8e c0 fb be 00 7c bf 00 06 b9
>120018	00 02 f3 a4 ea 21 06 00
>120020	00 be be 07 38 04 75 0b		.text $00,$BE,$BE,$07,$38,$04,$75,$0B,$83,$C6,$10,$81,$FE,$FE,$07,$75,$F3,$EB,$16,$B4,$02,$B0,$01,$BB,$00,$7C,$B2,$80,$8A,$74,$01,$8B
>120028	83 c6 10 81 fe fe 07 75 f3 eb 16 b4 02 b0 01 bb
>120038	00 7c b2 80 8a 74 01 8b
>120040	4c 02 cd 13 ea 00 7c 00		.text $4C,$02,$CD,$13,$EA,$00,$7C,$00,$00,$EB,$FE,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>120048	00 eb fe 00 00 00 00 00 00 00 00 00 00 00 00 00
>120058	00 00 00 00 00 00 00 00
>120060	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>120068	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>120078	00 00 00 00 00 00 00 00
>120080	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>120088	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>120098	00 00 00 00 00 00 00 00
>1200a0	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>1200a8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1200b8	00 00 00 00 00 00 00 00
>1200c0	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>1200c8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1200d8	00 00 00 00 00 00 00 00
>1200e0	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>1200e8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1200f8	00 00 00 00 00 00 00 00
>120100	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>120108	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>120118	00 00 00 00 00 00 00 00
>120120	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>120128	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>120138	00 00 00 00 00 00 00 00
>120140	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>120148	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>120158	00 00 00 00 00 00 00 00
>120160	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>120168	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>120178	00 00 00 00 00 00 00 00
>120180	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>120188	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>120198	00 00 00 00 00 00 00 00
>1201a0	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$D5,$17,$0F,$38,$00,$00,$00,$20
>1201a8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1201b8	d5 17 0f 38 00 00 00 20
>1201c0	21 00 0b be 32 0c 07 00		.text $21,$00,$0B,$BE,$32,$0C,$07,$00,$00,$00,$00,$18,$03,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>1201c8	00 00 00 18 03 00 00 00 00 00 00 00 00 00 00 00
>1201d8	00 00 00 00 00 00 00 00
>1201e0	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$55,$AA
>1201e8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1201f8	00 00 00 00 00 00 55 aa
>120200	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>120208	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>120218	00 00 00 00 00 00 00 00
>120220	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>120228	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>120238	00 00 00 00 00 00 00 00
>120240	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>120248	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>120258	00 00 00 00 00 00 00 00
>120260	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>120268	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>120278	00 00 00 00 00 00 00 00
>120280	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>120288	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>120298	00 00 00 00 00 00 00 00
>1202a0	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>1202a8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1202b8	00 00 00 00 00 00 00 00
>1202c0	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>1202c8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1202d8	00 00 00 00 00 00 00 00
>1202e0	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>1202e8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1202f8	00 00 00 00 00 00 00 00
>120300	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>120308	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>120318	00 00 00 00 00 00 00 00
>120320	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>120328	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>120338	00 00 00 00 00 00 00 00
>120340	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>120348	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>120358	00 00 00 00 00 00 00 00
>120360	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>120368	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>120378	00 00 00 00 00 00 00 00
>120380	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>120388	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>120398	00 00 00 00 00 00 00 00
>1203a0	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>1203a8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1203b8	00 00 00 00 00 00 00 00
>1203c0	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>1203c8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1203d8	00 00 00 00 00 00 00 00
>1203e0	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>1203e8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1203f8	00 00 00 00 00 00 00 00
>120400	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>120408	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>120418	00 00 00 00 00 00 00 00
>120420	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>120428	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>120438	00 00 00 00 00 00 00 00
>120440	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>120448	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>120458	00 00 00 00 00 00 00 00
>120460	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>120468	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>120478	00 00 00 00 00 00 00 00
>120480	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>120488	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>120498	00 00 00 00 00 00 00 00
>1204a0	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>1204a8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1204b8	00 00 00 00 00 00 00 00
>1204c0	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>1204c8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1204d8	00 00 00 00 00 00 00 00
>1204e0	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>1204e8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1204f8	00 00 00 00 00 00 00 00
>120500	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>120508	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>120518	00 00 00 00 00 00 00 00
>120520	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>120528	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>120538	00 00 00 00 00 00 00 00
>120540	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>120548	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>120558	00 00 00 00 00 00 00 00
>120560	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>120568	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>120578	00 00 00 00 00 00 00 00
>120580	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>120588	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>120598	00 00 00 00 00 00 00 00
>1205a0	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>1205a8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1205b8	00 00 00 00 00 00 00 00
>1205c0	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>1205c8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1205d8	00 00 00 00 00 00 00 00
>1205e0	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>1205e8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1205f8	00 00 00 00 00 00 00 00
>120600	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>120608	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>120618	00 00 00 00 00 00 00 00
>120620	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>120628	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>120638	00 00 00 00 00 00 00 00
>120640	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>120648	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>120658	00 00 00 00 00 00 00 00
>120660	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>120668	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>120678	00 00 00 00 00 00 00 00
>120680	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>120688	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>120698	00 00 00 00 00 00 00 00
>1206a0	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>1206a8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1206b8	00 00 00 00 00 00 00 00
>1206c0	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>1206c8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1206d8	00 00 00 00 00 00 00 00
>1206e0	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>1206e8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1206f8	00 00 00 00 00 00 00 00
>120700	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>120708	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>120718	00 00 00 00 00 00 00 00
>120720	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>120728	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>120738	00 00 00 00 00 00 00 00
>120740	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>120748	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>120758	00 00 00 00 00 00 00 00
>120760	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>120768	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>120778	00 00 00 00 00 00 00 00
>120780	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>120788	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>120798	00 00 00 00 00 00 00 00
>1207a0	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>1207a8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1207b8	00 00 00 00 00 00 00 00
>1207c0	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>1207c8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1207d8	00 00 00 00 00 00 00 00
>1207e0	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>1207e8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1207f8	00 00 00 00 00 00 00 00
>120800	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>120808	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>120818	00 00 00 00 00 00 00 00
>120820	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>120828	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>120838	00 00 00 00 00 00 00 00
>120840	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>120848	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>120858	00 00 00 00 00 00 00 00
>120860	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>120868	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>120878	00 00 00 00 00 00 00 00
>120880	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>120888	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>120898	00 00 00 00 00 00 00 00
>1208a0	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>1208a8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1208b8	00 00 00 00 00 00 00 00
>1208c0	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>1208c8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1208d8	00 00 00 00 00 00 00 00
>1208e0	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>1208e8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1208f8	00 00 00 00 00 00 00 00
>120900	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>120908	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>120918	00 00 00 00 00 00 00 00
>120920	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>120928	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>120938	00 00 00 00 00 00 00 00
>120940	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>120948	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>120958	00 00 00 00 00 00 00 00
>120960	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>120968	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>120978	00 00 00 00 00 00 00 00
>120980	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>120988	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>120998	00 00 00 00 00 00 00 00
>1209a0	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>1209a8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1209b8	00 00 00 00 00 00 00 00
>1209c0	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>1209c8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1209d8	00 00 00 00 00 00 00 00
>1209e0	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>1209e8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1209f8	00 00 00 00 00 00 00 00
>120a00	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>120a08	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>120a18	00 00 00 00 00 00 00 00
>120a20	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>120a28	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>120a38	00 00 00 00 00 00 00 00
>120a40	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>120a48	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>120a58	00 00 00 00 00 00 00 00
>120a60	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>120a68	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>120a78	00 00 00 00 00 00 00 00
>120a80	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>120a88	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>120a98	00 00 00 00 00 00 00 00
>120aa0	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>120aa8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>120ab8	00 00 00 00 00 00 00 00
>120ac0	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>120ac8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>120ad8	00 00 00 00 00 00 00 00
>120ae0	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>120ae8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>120af8	00 00 00 00 00 00 00 00
>120b00	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>120b08	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>120b18	00 00 00 00 00 00 00 00
>120b20	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>120b28	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>120b38	00 00 00 00 00 00 00 00
>120b40	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>120b48	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>120b58	00 00 00 00 00 00 00 00
>120b60	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>120b68	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>120b78	00 00 00 00 00 00 00 00
>120b80	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>120b88	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>120b98	00 00 00 00 00 00 00 00
>120ba0	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>120ba8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>120bb8	00 00 00 00 00 00 00 00
>120bc0	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>120bc8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>120bd8	00 00 00 00 00 00 00 00
>120be0	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>120be8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>120bf8	00 00 00 00 00 00 00 00
>120c00	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>120c08	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>120c18	00 00 00 00 00 00 00 00
>120c20	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>120c28	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>120c38	00 00 00 00 00 00 00 00
>120c40	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>120c48	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>120c58	00 00 00 00 00 00 00 00
>120c60	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>120c68	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>120c78	00 00 00 00 00 00 00 00
>120c80	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>120c88	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>120c98	00 00 00 00 00 00 00 00
>120ca0	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>120ca8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>120cb8	00 00 00 00 00 00 00 00
>120cc0	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>120cc8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>120cd8	00 00 00 00 00 00 00 00
>120ce0	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>120ce8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>120cf8	00 00 00 00 00 00 00 00
>120d00	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>120d08	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>120d18	00 00 00 00 00 00 00 00
>120d20	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>120d28	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>120d38	00 00 00 00 00 00 00 00
>120d40	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>120d48	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>120d58	00 00 00 00 00 00 00 00
>120d60	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>120d68	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>120d78	00 00 00 00 00 00 00 00
>120d80	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>120d88	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>120d98	00 00 00 00 00 00 00 00
>120da0	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>120da8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>120db8	00 00 00 00 00 00 00 00
>120dc0	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>120dc8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>120dd8	00 00 00 00 00 00 00 00
>120de0	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>120de8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>120df8	00 00 00 00 00 00 00 00
>120e00	eb 58 90 4d 53 44 4f 53		.text $EB,$58,$90,$4D,$53,$44,$4F,$53,$35,$2E,$30,$00,$02,$01,$0D,$00,$02,$00,$00,$00,$00,$F8,$00,$00,$3F,$00,$FF,$00,$01,$00,$00,$00
>120e08	35 2e 30 00 02 01 0d 00 02 00 00 00 00 f8 00 00
>120e18	3f 00 ff 00 01 00 00 00
>120e20	00 18 03 00 0a 00 00 00		.text $00,$18,$03,$00,$0A,$00,$00,$00,$00,$00,$00,$00,$02,$00,$00,$00,$01,$00,$06,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>120e28	00 00 00 00 02 00 00 00 01 00 06 00 00 00 00 00
>120e38	00 00 00 00 00 00 00 00
>120e40	80 01 29 84 3b 65 0a 4e		.text $80,$01,$29,$84,$3B,$65,$0A,$4E,$4F,$20,$4E,$41,$4D,$45,$20,$20,$20,$20,$46,$41,$54,$33,$32,$20,$20,$20,$33,$C9,$8E,$D1,$BC,$F4
>120e48	4f 20 4e 41 4d 45 20 20 20 20 46 41 54 33 32 20
>120e58	20 20 33 c9 8e d1 bc f4
>120e60	7b 8e c1 8e d9 bd 00 7c		.text $7B,$8E,$C1,$8E,$D9,$BD,$00,$7C,$88,$56,$40,$88,$4E,$02,$8A,$56,$40,$B4,$41,$BB,$AA,$55,$CD,$13,$72,$10,$81,$FB,$55,$AA,$75,$0A
>120e68	88 56 40 88 4e 02 8a 56 40 b4 41 bb aa 55 cd 13
>120e78	72 10 81 fb 55 aa 75 0a
>120e80	f6 c1 01 74 05 fe 46 02		.text $F6,$C1,$01,$74,$05,$FE,$46,$02,$EB,$2D,$8A,$56,$40,$B4,$08,$CD,$13,$73,$05,$B9,$FF,$FF,$8A,$F1,$66,$0F,$B6,$C6,$40,$66,$0F,$B6
>120e88	eb 2d 8a 56 40 b4 08 cd 13 73 05 b9 ff ff 8a f1
>120e98	66 0f b6 c6 40 66 0f b6
>120ea0	d1 80 e2 3f f7 e2 86 cd		.text $D1,$80,$E2,$3F,$F7,$E2,$86,$CD,$C0,$ED,$06,$41,$66,$0F,$B7,$C9,$66,$F7,$E1,$66,$89,$46,$F8,$83,$7E,$16,$00,$75,$39,$83,$7E,$2A
>120ea8	c0 ed 06 41 66 0f b7 c9 66 f7 e1 66 89 46 f8 83
>120eb8	7e 16 00 75 39 83 7e 2a
>120ec0	00 77 33 66 8b 46 1c 66		.text $00,$77,$33,$66,$8B,$46,$1C,$66,$83,$C0,$0C,$BB,$00,$80,$B9,$01,$00,$E8,$2C,$00,$E9,$A8,$03,$A1,$F8,$7D,$80,$C4,$7C,$8B,$F0,$AC
>120ec8	83 c0 0c bb 00 80 b9 01 00 e8 2c 00 e9 a8 03 a1
>120ed8	f8 7d 80 c4 7c 8b f0 ac
>120ee0	84 c0 74 17 3c ff 74 09		.text $84,$C0,$74,$17,$3C,$FF,$74,$09,$B4,$0E,$BB,$07,$00,$CD,$10,$EB,$EE,$A1,$FA,$7D,$EB,$E4,$A1,$7D,$80,$EB,$DF,$98,$CD,$16,$CD,$19
>120ee8	b4 0e bb 07 00 cd 10 eb ee a1 fa 7d eb e4 a1 7d
>120ef8	80 eb df 98 cd 16 cd 19
>120f00	66 60 80 7e 02 00 0f 84		.text $66,$60,$80,$7E,$02,$00,$0F,$84,$20,$00,$66,$6A,$00,$66,$50,$06,$53,$66,$68,$10,$00,$01,$00,$B4,$42,$8A,$56,$40,$8B,$F4,$CD,$13
>120f08	20 00 66 6a 00 66 50 06 53 66 68 10 00 01 00 b4
>120f18	42 8a 56 40 8b f4 cd 13
>120f20	66 58 66 58 66 58 66 58		.text $66,$58,$66,$58,$66,$58,$66,$58,$EB,$33,$66,$3B,$46,$F8,$72,$03,$F9,$EB,$2A,$66,$33,$D2,$66,$0F,$B7,$4E,$18,$66,$F7,$F1,$FE,$C2
>120f28	eb 33 66 3b 46 f8 72 03 f9 eb 2a 66 33 d2 66 0f
>120f38	b7 4e 18 66 f7 f1 fe c2
>120f40	8a ca 66 8b d0 66 c1 ea		.text $8A,$CA,$66,$8B,$D0,$66,$C1,$EA,$10,$F7,$76,$1A,$86,$D6,$8A,$56,$40,$8A,$E8,$C0,$E4,$06,$0A,$CC,$B8,$01,$02,$CD,$13,$66,$61,$0F
>120f48	10 f7 76 1a 86 d6 8a 56 40 8a e8 c0 e4 06 0a cc
>120f58	b8 01 02 cd 13 66 61 0f
>120f60	82 74 ff 81 c3 00 02 66		.text $82,$74,$FF,$81,$C3,$00,$02,$66,$40,$49,$75,$94,$C3,$42,$4F,$4F,$54,$4D,$47,$52,$20,$20,$20,$20,$00,$00,$00,$00,$00,$00,$00,$00
>120f68	40 49 75 94 c3 42 4f 4f 54 4d 47 52 20 20 20 20
>120f78	00 00 00 00 00 00 00 00
>120f80	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>120f88	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>120f98	00 00 00 00 00 00 00 00
>120fa0	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$0D,$0A,$44,$69,$73,$6B,$20,$65,$72,$72,$6F,$72,$FF,$0D,$0A,$50,$72,$65,$73,$73
>120fa8	00 00 00 00 0d 0a 44 69 73 6b 20 65 72 72 6f 72
>120fb8	ff 0d 0a 50 72 65 73 73
>120fc0	20 61 6e 79 20 6b 65 79		.text $20,$61,$6E,$79,$20,$6B,$65,$79,$20,$74,$6F,$20,$72,$65,$73,$74,$61,$72,$74,$0D,$0A,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>120fc8	20 74 6f 20 72 65 73 74 61 72 74 0d 0a 00 00 00
>120fd8	00 00 00 00 00 00 00 00
>120fe0	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$AC,$01,$B9,$01,$00,$00,$55,$AA
>120fe8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>120ff8	ac 01 b9 01 00 00 55 aa
>121000	52 52 61 41 00 00 00 00		.text $52,$52,$61,$41,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>121008	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>121018	00 00 00 00 00 00 00 00
>121020	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>121028	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>121038	00 00 00 00 00 00 00 00
>121040	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>121048	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>121058	00 00 00 00 00 00 00 00
>121060	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>121068	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>121078	00 00 00 00 00 00 00 00
>121080	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>121088	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>121098	00 00 00 00 00 00 00 00
>1210a0	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>1210a8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1210b8	00 00 00 00 00 00 00 00
>1210c0	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>1210c8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1210d8	00 00 00 00 00 00 00 00
>1210e0	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>1210e8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1210f8	00 00 00 00 00 00 00 00
>121100	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>121108	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>121118	00 00 00 00 00 00 00 00
>121120	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>121128	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>121138	00 00 00 00 00 00 00 00
>121140	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>121148	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>121158	00 00 00 00 00 00 00 00
>121160	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>121168	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>121178	00 00 00 00 00 00 00 00
>121180	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>121188	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>121198	00 00 00 00 00 00 00 00
>1211a0	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>1211a8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1211b8	00 00 00 00 00 00 00 00
>1211c0	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>1211c8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1211d8	00 00 00 00 00 00 00 00
>1211e0	00 00 00 00 72 72 41 61		.text $00,$00,$00,$00,$72,$72,$41,$61,$FF,$FF,$FF,$FF,$02,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$55,$AA
>1211e8	ff ff ff ff 02 00 00 00 00 00 00 00 00 00 00 00
>1211f8	00 00 00 00 00 00 55 aa
>121200	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>121208	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>121218	00 00 00 00 00 00 00 00
>121220	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>121228	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>121238	00 00 00 00 00 00 00 00
>121240	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>121248	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>121258	00 00 00 00 00 00 00 00
>121260	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>121268	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>121278	00 00 00 00 00 00 00 00
>121280	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>121288	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>121298	00 00 00 00 00 00 00 00
>1212a0	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>1212a8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1212b8	00 00 00 00 00 00 00 00
>1212c0	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>1212c8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1212d8	00 00 00 00 00 00 00 00
>1212e0	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>1212e8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1212f8	00 00 00 00 00 00 00 00
>121300	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>121308	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>121318	00 00 00 00 00 00 00 00
>121320	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>121328	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>121338	00 00 00 00 00 00 00 00
>121340	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>121348	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>121358	00 00 00 00 00 00 00 00
>121360	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>121368	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>121378	00 00 00 00 00 00 00 00
>121380	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>121388	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>121398	00 00 00 00 00 00 00 00
>1213a0	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>1213a8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1213b8	00 00 00 00 00 00 00 00
>1213c0	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>1213c8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1213d8	00 00 00 00 00 00 00 00
>1213e0	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$55,$AA
>1213e8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1213f8	00 00 00 00 00 00 55 aa
>121400	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>121408	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>121418	00 00 00 00 00 00 00 00
>121420	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>121428	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>121438	00 00 00 00 00 00 00 00
>121440	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>121448	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>121458	00 00 00 00 00 00 00 00
>121460	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>121468	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>121478	00 00 00 00 00 00 00 00
>121480	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>121488	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>121498	00 00 00 00 00 00 00 00
>1214a0	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>1214a8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1214b8	00 00 00 00 00 00 00 00
>1214c0	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>1214c8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1214d8	00 00 00 00 00 00 00 00
>1214e0	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>1214e8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1214f8	00 00 00 00 00 00 00 00
>121500	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>121508	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>121518	00 00 00 00 00 00 00 00
>121520	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>121528	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>121538	00 00 00 00 00 00 00 00
>121540	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>121548	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>121558	00 00 00 00 00 00 00 00
>121560	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>121568	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>121578	00 00 00 00 00 00 00 00
>121580	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>121588	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>121598	00 00 00 00 00 00 00 00
>1215a0	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>1215a8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1215b8	00 00 00 00 00 00 00 00
>1215c0	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>1215c8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1215d8	00 00 00 00 00 00 00 00
>1215e0	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>1215e8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1215f8	00 00 00 00 00 00 00 00
>121600	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>121608	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>121618	00 00 00 00 00 00 00 00
>121620	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>121628	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>121638	00 00 00 00 00 00 00 00
>121640	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>121648	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>121658	00 00 00 00 00 00 00 00
>121660	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>121668	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>121678	00 00 00 00 00 00 00 00
>121680	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>121688	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>121698	00 00 00 00 00 00 00 00
>1216a0	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>1216a8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1216b8	00 00 00 00 00 00 00 00
>1216c0	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>1216c8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1216d8	00 00 00 00 00 00 00 00
>1216e0	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>1216e8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1216f8	00 00 00 00 00 00 00 00
>121700	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>121708	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>121718	00 00 00 00 00 00 00 00
>121720	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>121728	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>121738	00 00 00 00 00 00 00 00
>121740	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>121748	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>121758	00 00 00 00 00 00 00 00
>121760	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>121768	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>121778	00 00 00 00 00 00 00 00
>121780	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>121788	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>121798	00 00 00 00 00 00 00 00
>1217a0	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>1217a8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1217b8	00 00 00 00 00 00 00 00
>1217c0	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>1217c8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1217d8	00 00 00 00 00 00 00 00
>1217e0	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>1217e8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1217f8	00 00 00 00 00 00 00 00
>121800	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>121808	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>121818	00 00 00 00 00 00 00 00
>121820	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>121828	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>121838	00 00 00 00 00 00 00 00
>121840	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>121848	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>121858	00 00 00 00 00 00 00 00
>121860	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>121868	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>121878	00 00 00 00 00 00 00 00
>121880	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>121888	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>121898	00 00 00 00 00 00 00 00
>1218a0	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>1218a8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1218b8	00 00 00 00 00 00 00 00
>1218c0	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>1218c8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1218d8	00 00 00 00 00 00 00 00
>1218e0	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>1218e8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1218f8	00 00 00 00 00 00 00 00
>121900	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>121908	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>121918	00 00 00 00 00 00 00 00
>121920	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>121928	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>121938	00 00 00 00 00 00 00 00
>121940	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>121948	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>121958	00 00 00 00 00 00 00 00
>121960	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>121968	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>121978	00 00 00 00 00 00 00 00
>121980	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>121988	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>121998	00 00 00 00 00 00 00 00
>1219a0	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>1219a8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1219b8	00 00 00 00 00 00 00 00
>1219c0	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>1219c8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1219d8	00 00 00 00 00 00 00 00
>1219e0	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>1219e8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1219f8	00 00 00 00 00 00 00 00
>121a00	eb 58 90 4d 53 44 4f 53		.text $EB,$58,$90,$4D,$53,$44,$4F,$53,$35,$2E,$30,$00,$02,$01,$0D,$00,$02,$00,$00,$00,$00,$F8,$00,$00,$3F,$00,$FF,$00,$01,$00,$00,$00
>121a08	35 2e 30 00 02 01 0d 00 02 00 00 00 00 f8 00 00
>121a18	3f 00 ff 00 01 00 00 00
>121a20	00 18 03 00 0a 00 00 00		.text $00,$18,$03,$00,$0A,$00,$00,$00,$00,$00,$00,$00,$02,$00,$00,$00,$01,$00,$06,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>121a28	00 00 00 00 02 00 00 00 01 00 06 00 00 00 00 00
>121a38	00 00 00 00 00 00 00 00
>121a40	80 00 29 84 3b 65 0a 4e		.text $80,$00,$29,$84,$3B,$65,$0A,$4E,$4F,$20,$4E,$41,$4D,$45,$20,$20,$20,$20,$46,$41,$54,$33,$32,$20,$20,$20,$33,$C9,$8E,$D1,$BC,$F4
>121a48	4f 20 4e 41 4d 45 20 20 20 20 46 41 54 33 32 20
>121a58	20 20 33 c9 8e d1 bc f4
>121a60	7b 8e c1 8e d9 bd 00 7c		.text $7B,$8E,$C1,$8E,$D9,$BD,$00,$7C,$88,$56,$40,$88,$4E,$02,$8A,$56,$40,$B4,$41,$BB,$AA,$55,$CD,$13,$72,$10,$81,$FB,$55,$AA,$75,$0A
>121a68	88 56 40 88 4e 02 8a 56 40 b4 41 bb aa 55 cd 13
>121a78	72 10 81 fb 55 aa 75 0a
>121a80	f6 c1 01 74 05 fe 46 02		.text $F6,$C1,$01,$74,$05,$FE,$46,$02,$EB,$2D,$8A,$56,$40,$B4,$08,$CD,$13,$73,$05,$B9,$FF,$FF,$8A,$F1,$66,$0F,$B6,$C6,$40,$66,$0F,$B6
>121a88	eb 2d 8a 56 40 b4 08 cd 13 73 05 b9 ff ff 8a f1
>121a98	66 0f b6 c6 40 66 0f b6
>121aa0	d1 80 e2 3f f7 e2 86 cd		.text $D1,$80,$E2,$3F,$F7,$E2,$86,$CD,$C0,$ED,$06,$41,$66,$0F,$B7,$C9,$66,$F7,$E1,$66,$89,$46,$F8,$83,$7E,$16,$00,$75,$39,$83,$7E,$2A
>121aa8	c0 ed 06 41 66 0f b7 c9 66 f7 e1 66 89 46 f8 83
>121ab8	7e 16 00 75 39 83 7e 2a
>121ac0	00 77 33 66 8b 46 1c 66		.text $00,$77,$33,$66,$8B,$46,$1C,$66,$83,$C0,$0C,$BB,$00,$80,$B9,$01,$00,$E8,$2C,$00,$E9,$A8,$03,$A1,$F8,$7D,$80,$C4,$7C,$8B,$F0,$AC
>121ac8	83 c0 0c bb 00 80 b9 01 00 e8 2c 00 e9 a8 03 a1
>121ad8	f8 7d 80 c4 7c 8b f0 ac
>121ae0	84 c0 74 17 3c ff 74 09		.text $84,$C0,$74,$17,$3C,$FF,$74,$09,$B4,$0E,$BB,$07,$00,$CD,$10,$EB,$EE,$A1,$FA,$7D,$EB,$E4,$A1,$7D,$80,$EB,$DF,$98,$CD,$16,$CD,$19
>121ae8	b4 0e bb 07 00 cd 10 eb ee a1 fa 7d eb e4 a1 7d
>121af8	80 eb df 98 cd 16 cd 19
>121b00	66 60 80 7e 02 00 0f 84		.text $66,$60,$80,$7E,$02,$00,$0F,$84,$20,$00,$66,$6A,$00,$66,$50,$06,$53,$66,$68,$10,$00,$01,$00,$B4,$42,$8A,$56,$40,$8B,$F4,$CD,$13
>121b08	20 00 66 6a 00 66 50 06 53 66 68 10 00 01 00 b4
>121b18	42 8a 56 40 8b f4 cd 13
>121b20	66 58 66 58 66 58 66 58		.text $66,$58,$66,$58,$66,$58,$66,$58,$EB,$33,$66,$3B,$46,$F8,$72,$03,$F9,$EB,$2A,$66,$33,$D2,$66,$0F,$B7,$4E,$18,$66,$F7,$F1,$FE,$C2
>121b28	eb 33 66 3b 46 f8 72 03 f9 eb 2a 66 33 d2 66 0f
>121b38	b7 4e 18 66 f7 f1 fe c2
>121b40	8a ca 66 8b d0 66 c1 ea		.text $8A,$CA,$66,$8B,$D0,$66,$C1,$EA,$10,$F7,$76,$1A,$86,$D6,$8A,$56,$40,$8A,$E8,$C0,$E4,$06,$0A,$CC,$B8,$01,$02,$CD,$13,$66,$61,$0F
>121b48	10 f7 76 1a 86 d6 8a 56 40 8a e8 c0 e4 06 0a cc
>121b58	b8 01 02 cd 13 66 61 0f
>121b60	82 74 ff 81 c3 00 02 66		.text $82,$74,$FF,$81,$C3,$00,$02,$66,$40,$49,$75,$94,$C3,$42,$4F,$4F,$54,$4D,$47,$52,$20,$20,$20,$20,$00,$00,$00,$00,$00,$00,$00,$00
>121b68	40 49 75 94 c3 42 4f 4f 54 4d 47 52 20 20 20 20
>121b78	00 00 00 00 00 00 00 00
>121b80	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>121b88	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>121b98	00 00 00 00 00 00 00 00
>121ba0	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$0D,$0A,$44,$69,$73,$6B,$20,$65,$72,$72,$6F,$72,$FF,$0D,$0A,$50,$72,$65,$73,$73
>121ba8	00 00 00 00 0d 0a 44 69 73 6b 20 65 72 72 6f 72
>121bb8	ff 0d 0a 50 72 65 73 73
>121bc0	20 61 6e 79 20 6b 65 79		.text $20,$61,$6E,$79,$20,$6B,$65,$79,$20,$74,$6F,$20,$72,$65,$73,$74,$61,$72,$74,$0D,$0A,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>121bc8	20 74 6f 20 72 65 73 74 61 72 74 0d 0a 00 00 00
>121bd8	00 00 00 00 00 00 00 00
>121be0	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$AC,$01,$B9,$01,$00,$00,$55,$AA
>121be8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>121bf8	ac 01 b9 01 00 00 55 aa
>121c00	52 52 61 41 00 00 00 00		.text $52,$52,$61,$41,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>121c08	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>121c18	00 00 00 00 00 00 00 00
>121c20	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>121c28	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>121c38	00 00 00 00 00 00 00 00
>121c40	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>121c48	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>121c58	00 00 00 00 00 00 00 00
>121c60	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>121c68	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>121c78	00 00 00 00 00 00 00 00
>121c80	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>121c88	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>121c98	00 00 00 00 00 00 00 00
>121ca0	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>121ca8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>121cb8	00 00 00 00 00 00 00 00
>121cc0	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>121cc8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>121cd8	00 00 00 00 00 00 00 00
>121ce0	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>121ce8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>121cf8	00 00 00 00 00 00 00 00
>121d00	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>121d08	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>121d18	00 00 00 00 00 00 00 00
>121d20	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>121d28	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>121d38	00 00 00 00 00 00 00 00
>121d40	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>121d48	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>121d58	00 00 00 00 00 00 00 00
>121d60	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>121d68	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>121d78	00 00 00 00 00 00 00 00
>121d80	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>121d88	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>121d98	00 00 00 00 00 00 00 00
>121da0	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>121da8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>121db8	00 00 00 00 00 00 00 00
>121dc0	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>121dc8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>121dd8	00 00 00 00 00 00 00 00
>121de0	00 00 00 00 72 72 41 61		.text $00,$00,$00,$00,$72,$72,$41,$61,$FF,$FF,$FF,$FF,$02,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$55,$AA
>121de8	ff ff ff ff 02 00 00 00 00 00 00 00 00 00 00 00
>121df8	00 00 00 00 00 00 55 aa
>121e00	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>121e08	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>121e18	00 00 00 00 00 00 00 00
>121e20	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>121e28	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>121e38	00 00 00 00 00 00 00 00
>121e40	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>121e48	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>121e58	00 00 00 00 00 00 00 00
>121e60	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>121e68	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>121e78	00 00 00 00 00 00 00 00
>121e80	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>121e88	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>121e98	00 00 00 00 00 00 00 00
>121ea0	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>121ea8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>121eb8	00 00 00 00 00 00 00 00
>121ec0	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>121ec8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>121ed8	00 00 00 00 00 00 00 00
>121ee0	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>121ee8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>121ef8	00 00 00 00 00 00 00 00
>121f00	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>121f08	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>121f18	00 00 00 00 00 00 00 00
>121f20	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>121f28	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>121f38	00 00 00 00 00 00 00 00
>121f40	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>121f48	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>121f58	00 00 00 00 00 00 00 00
>121f60	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>121f68	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>121f78	00 00 00 00 00 00 00 00
>121f80	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>121f88	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>121f98	00 00 00 00 00 00 00 00
>121fa0	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>121fa8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>121fb8	00 00 00 00 00 00 00 00
>121fc0	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>121fc8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>121fd8	00 00 00 00 00 00 00 00
>121fe0	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$55,$AA
>121fe8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>121ff8	00 00 00 00 00 00 55 aa
>122000	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>122008	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>122018	00 00 00 00 00 00 00 00
>122020	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>122028	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>122038	00 00 00 00 00 00 00 00
>122040	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>122048	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>122058	00 00 00 00 00 00 00 00
>122060	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>122068	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>122078	00 00 00 00 00 00 00 00
>122080	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>122088	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>122098	00 00 00 00 00 00 00 00
>1220a0	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>1220a8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1220b8	00 00 00 00 00 00 00 00
>1220c0	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>1220c8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1220d8	00 00 00 00 00 00 00 00
>1220e0	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>1220e8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1220f8	00 00 00 00 00 00 00 00
>122100	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>122108	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>122118	00 00 00 00 00 00 00 00
>122120	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>122128	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>122138	00 00 00 00 00 00 00 00
>122140	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>122148	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>122158	00 00 00 00 00 00 00 00
>122160	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>122168	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>122178	00 00 00 00 00 00 00 00
>122180	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>122188	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>122198	00 00 00 00 00 00 00 00
>1221a0	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>1221a8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1221b8	00 00 00 00 00 00 00 00
>1221c0	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>1221c8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1221d8	00 00 00 00 00 00 00 00
>1221e0	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>1221e8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1221f8	00 00 00 00 00 00 00 00
>122200	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>122208	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>122218	00 00 00 00 00 00 00 00
>122220	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>122228	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>122238	00 00 00 00 00 00 00 00
>122240	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>122248	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>122258	00 00 00 00 00 00 00 00
>122260	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>122268	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>122278	00 00 00 00 00 00 00 00
>122280	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>122288	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>122298	00 00 00 00 00 00 00 00
>1222a0	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>1222a8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1222b8	00 00 00 00 00 00 00 00
>1222c0	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>1222c8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1222d8	00 00 00 00 00 00 00 00
>1222e0	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>1222e8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1222f8	00 00 00 00 00 00 00 00
>122300	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>122308	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>122318	00 00 00 00 00 00 00 00
>122320	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>122328	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>122338	00 00 00 00 00 00 00 00
>122340	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>122348	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>122358	00 00 00 00 00 00 00 00
>122360	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>122368	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>122378	00 00 00 00 00 00 00 00
>122380	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>122388	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>122398	00 00 00 00 00 00 00 00
>1223a0	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>1223a8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1223b8	00 00 00 00 00 00 00 00
>1223c0	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>1223c8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1223d8	00 00 00 00 00 00 00 00
>1223e0	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>1223e8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1223f8	00 00 00 00 00 00 00 00
>122400	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>122408	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>122418	00 00 00 00 00 00 00 00
>122420	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>122428	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>122438	00 00 00 00 00 00 00 00
>122440	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>122448	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>122458	00 00 00 00 00 00 00 00
>122460	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>122468	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>122478	00 00 00 00 00 00 00 00
>122480	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>122488	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>122498	00 00 00 00 00 00 00 00
>1224a0	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>1224a8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1224b8	00 00 00 00 00 00 00 00
>1224c0	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>1224c8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1224d8	00 00 00 00 00 00 00 00
>1224e0	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>1224e8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1224f8	00 00 00 00 00 00 00 00
>122500	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>122508	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>122518	00 00 00 00 00 00 00 00
>122520	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>122528	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>122538	00 00 00 00 00 00 00 00
>122540	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>122548	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>122558	00 00 00 00 00 00 00 00
>122560	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>122568	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>122578	00 00 00 00 00 00 00 00
>122580	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>122588	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>122598	00 00 00 00 00 00 00 00
>1225a0	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>1225a8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1225b8	00 00 00 00 00 00 00 00
>1225c0	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>1225c8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1225d8	00 00 00 00 00 00 00 00
>1225e0	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>1225e8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1225f8	00 00 00 00 00 00 00 00
>122600	0d 0a 41 6e 20 6f 70 65		.text $0D,$0A,$41,$6E,$20,$6F,$70,$65,$72,$61,$74,$69,$6E,$67,$20,$73,$79,$73,$74,$65,$6D,$20,$77,$61,$73,$6E,$27,$74,$20,$66,$6F,$75
>122608	72 61 74 69 6e 67 20 73 79 73 74 65 6d 20 77 61
>122618	73 6e 27 74 20 66 6f 75
>122620	6e 64 2e 20 54 72 79 20		.text $6E,$64,$2E,$20,$54,$72,$79,$20,$64,$69,$73,$63,$6F,$6E,$6E,$65,$63,$74,$69,$6E,$67,$20,$61,$6E,$79,$20,$64,$72,$69,$76,$65,$73
>122628	64 69 73 63 6f 6e 6e 65 63 74 69 6e 67 20 61 6e
>122638	79 20 64 72 69 76 65 73
>122640	20 74 68 61 74 20 64 6f		.text $20,$74,$68,$61,$74,$20,$64,$6F,$6E,$27,$74,$0D,$0A,$63,$6F,$6E,$74,$61,$69,$6E,$20,$61,$6E,$20,$6F,$70,$65,$72,$61,$74,$69,$6E
>122648	6e 27 74 0d 0a 63 6f 6e 74 61 69 6e 20 61 6e 20
>122658	6f 70 65 72 61 74 69 6e
>122660	67 20 73 79 73 74 65 6d		.text $67,$20,$73,$79,$73,$74,$65,$6D,$2E,$FF,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$04,$66
>122668	2e ff 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>122678	00 00 00 00 00 00 04 66
>122680	0f b6 46 10 66 8b 4e 24		.text $0F,$B6,$46,$10,$66,$8B,$4E,$24,$66,$F7,$E1,$66,$03,$46,$1C,$66,$0F,$B7,$56,$0E,$66,$03,$C2,$66,$89,$46,$FC,$66,$C7,$46,$F4,$FF
>122688	66 f7 e1 66 03 46 1c 66 0f b7 56 0e 66 03 c2 66
>122698	89 46 fc 66 c7 46 f4 ff
>1226a0	ff ff ff 66 8b 46 2c 66		.text $FF,$FF,$FF,$66,$8B,$46,$2C,$66,$83,$F8,$02,$0F,$82,$47,$FC,$66,$3D,$F8,$FF,$FF,$0F,$0F,$83,$3D,$FC,$66,$50,$66,$83,$E8,$02,$66
>1226a8	83 f8 02 0f 82 47 fc 66 3d f8 ff ff 0f 0f 83 3d
>1226b8	fc 66 50 66 83 e8 02 66
>1226c0	0f b6 5e 0d 8b f3 66 f7		.text $0F,$B6,$5E,$0D,$8B,$F3,$66,$F7,$E3,$66,$03,$46,$FC,$BB,$00,$82,$8B,$FB,$B9,$01,$00,$E8,$28,$FC,$38,$2D,$74,$1E,$B1,$0B,$56,$BE
>1226c8	e3 66 03 46 fc bb 00 82 8b fb b9 01 00 e8 28 fc
>1226d8	38 2d 74 1e b1 0b 56 be
>1226e0	6d 7d f3 a6 5e 74 1b 03		.text $6D,$7D,$F3,$A6,$5E,$74,$1B,$03,$F9,$83,$C7,$15,$3B,$FB,$72,$E8,$4E,$75,$DA,$66,$58,$E8,$65,$00,$72,$BF,$83,$C4,$04,$E9,$F6,$FB
>1226e8	f9 83 c7 15 3b fb 72 e8 4e 75 da 66 58 e8 65 00
>1226f8	72 bf 83 c4 04 e9 f6 fb
>122700	00 20 83 c4 04 8b 75 09		.text $00,$20,$83,$C4,$04,$8B,$75,$09,$8B,$7D,$0F,$8B,$C6,$66,$C1,$E0,$10,$8B,$C7,$66,$83,$F8,$02,$0F,$82,$DB,$FB,$66,$3D,$F8,$FF,$FF
>122708	8b 7d 0f 8b c6 66 c1 e0 10 8b c7 66 83 f8 02 0f
>122718	82 db fb 66 3d f8 ff ff
>122720	0f 0f 83 d1 fb 66 50 66		.text $0F,$0F,$83,$D1,$FB,$66,$50,$66,$83,$E8,$02,$66,$0F,$B6,$4E,$0D,$66,$F7,$E1,$66,$03,$46,$FC,$BB,$00,$00,$06,$8E,$06,$00,$81,$E8
>122728	83 e8 02 66 0f b6 4e 0d 66 f7 e1 66 03 46 fc bb
>122738	00 00 06 8e 06 00 81 e8
>122740	be fb 07 66 58 c1 eb 04		.text $BE,$FB,$07,$66,$58,$C1,$EB,$04,$01,$1E,$00,$81,$E8,$0E,$00,$0F,$83,$02,$00,$72,$D0,$8A,$56,$40,$EA,$00,$00,$00,$20,$66,$C1,$E0
>122748	01 1e 00 81 e8 0e 00 0f 83 02 00 72 d0 8a 56 40
>122758	ea 00 00 00 20 66 c1 e0
>122760	02 e8 11 00 26 66 8b 01		.text $02,$E8,$11,$00,$26,$66,$8B,$01,$66,$25,$FF,$FF,$FF,$0F,$66,$3D,$F8,$FF,$FF,$0F,$C3,$BF,$00,$7E,$66,$0F,$B7,$4E,$0B,$66,$33,$D2
>122768	66 25 ff ff ff 0f 66 3d f8 ff ff 0f c3 bf 00 7e
>122778	66 0f b7 4e 0b 66 33 d2
>122780	66 f7 f1 66 3b 46 f4 74		.text $66,$F7,$F1,$66,$3B,$46,$F4,$74,$3A,$66,$89,$46,$F4,$66,$03,$46,$1C,$66,$0F,$B7,$4E,$0E,$66,$03,$C1,$66,$0F,$B7,$5E,$28,$83,$E3
>122788	3a 66 89 46 f4 66 03 46 1c 66 0f b7 4e 0e 66 03
>122798	c1 66 0f b7 5e 28 83 e3
>1227a0	0f 74 16 3a 5e 10 0f 83		.text $0F,$74,$16,$3A,$5E,$10,$0F,$83,$4C,$FB,$52,$66,$8B,$C8,$66,$8B,$46,$24,$66,$F7,$E3,$66,$03,$C1,$5A,$52,$8B,$DF,$B9,$01,$00,$E8
>1227a8	4c fb 52 66 8b c8 66 8b 46 24 66 f7 e3 66 03 c1
>1227b8	5a 52 8b df b9 01 00 e8
>1227c0	3e fb 5a 8b da c3 00 00		.text $3E,$FB,$5A,$8B,$DA,$C3,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>1227c8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1227d8	00 00 00 00 00 00 00 00
>1227e0	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$55,$AA
>1227e8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1227f8	00 00 00 00 00 00 55 aa
>122800	f8 ff ff 0f ff ff ff 0f		.text $F8,$FF,$FF,$0F,$FF,$FF,$FF,$0F,$FF,$FF,$FF,$0F,$04,$00,$00,$00,$05,$00,$00,$00,$06,$00,$00,$00,$07,$00,$00,$00,$08,$00,$00,$00
>122808	ff ff ff 0f 04 00 00 00 05 00 00 00 06 00 00 00
>122818	07 00 00 00 08 00 00 00
>122820	09 00 00 00 0a 00 00 00		.text $09,$00,$00,$00,$0A,$00,$00,$00,$0B,$00,$00,$00,$0C,$00,$00,$00,$0D,$00,$00,$00,$0E,$00,$00,$00,$0F,$00,$00,$00,$FF,$FF,$FF,$0F
>122828	0b 00 00 00 0c 00 00 00 0d 00 00 00 0e 00 00 00
>122838	0f 00 00 00 ff ff ff 0f
>122840	ff ff ff 0f 00 00 00 00		.text $FF,$FF,$FF,$0F,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>122848	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>122858	00 00 00 00 00 00 00 00
>122860	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>122868	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>122878	00 00 00 00 00 00 00 00
>122880	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>122888	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>122898	00 00 00 00 00 00 00 00
>1228a0	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>1228a8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1228b8	00 00 00 00 00 00 00 00
>1228c0	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>1228c8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1228d8	00 00 00 00 00 00 00 00
>1228e0	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>1228e8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1228f8	00 00 00 00 00 00 00 00
>122900	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>122908	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>122918	00 00 00 00 00 00 00 00
>122920	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>122928	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>122938	00 00 00 00 00 00 00 00
>122940	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>122948	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>122958	00 00 00 00 00 00 00 00
>122960	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>122968	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>122978	00 00 00 00 00 00 00 00
>122980	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>122988	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>122998	00 00 00 00 00 00 00 00
>1229a0	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>1229a8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1229b8	00 00 00 00 00 00 00 00
>1229c0	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>1229c8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1229d8	00 00 00 00 00 00 00 00
>1229e0	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>1229e8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1229f8	00 00 00 00 00 00 00 00
>122a00	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>122a08	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>122a18	00 00 00 00 00 00 00 00
>122a20	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>122a28	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>122a38	00 00 00 00 00 00 00 00
>122a40	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>122a48	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>122a58	00 00 00 00 00 00 00 00
>122a60	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>122a68	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>122a78	00 00 00 00 00 00 00 00
>122a80	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>122a88	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>122a98	00 00 00 00 00 00 00 00
>122aa0	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>122aa8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>122ab8	00 00 00 00 00 00 00 00
>122ac0	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>122ac8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>122ad8	00 00 00 00 00 00 00 00
>122ae0	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>122ae8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>122af8	00 00 00 00 00 00 00 00
>122b00	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>122b08	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>122b18	00 00 00 00 00 00 00 00
>122b20	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>122b28	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>122b38	00 00 00 00 00 00 00 00
>122b40	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>122b48	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>122b58	00 00 00 00 00 00 00 00
>122b60	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>122b68	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>122b78	00 00 00 00 00 00 00 00
>122b80	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>122b88	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>122b98	00 00 00 00 00 00 00 00
>122ba0	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>122ba8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>122bb8	00 00 00 00 00 00 00 00
>122bc0	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>122bc8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>122bd8	00 00 00 00 00 00 00 00
>122be0	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>122be8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>122bf8	00 00 00 00 00 00 00 00
>122c00	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>122c08	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>122c18	00 00 00 00 00 00 00 00
>122c20	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>122c28	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>122c38	00 00 00 00 00 00 00 00
>122c40	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>122c48	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>122c58	00 00 00 00 00 00 00 00
>122c60	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>122c68	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>122c78	00 00 00 00 00 00 00 00
>122c80	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>122c88	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>122c98	00 00 00 00 00 00 00 00
>122ca0	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>122ca8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>122cb8	00 00 00 00 00 00 00 00
>122cc0	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>122cc8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>122cd8	00 00 00 00 00 00 00 00
>122ce0	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>122ce8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>122cf8	00 00 00 00 00 00 00 00
>122d00	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>122d08	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>122d18	00 00 00 00 00 00 00 00
>122d20	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>122d28	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>122d38	00 00 00 00 00 00 00 00
>122d40	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>122d48	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>122d58	00 00 00 00 00 00 00 00
>122d60	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>122d68	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>122d78	00 00 00 00 00 00 00 00
>122d80	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>122d88	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>122d98	00 00 00 00 00 00 00 00
>122da0	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>122da8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>122db8	00 00 00 00 00 00 00 00
>122dc0	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>122dc8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>122dd8	00 00 00 00 00 00 00 00
>122de0	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>122de8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>122df8	00 00 00 00 00 00 00 00
>122e00	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>122e08	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>122e18	00 00 00 00 00 00 00 00
>122e20	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>122e28	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>122e38	00 00 00 00 00 00 00 00
>122e40	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>122e48	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>122e58	00 00 00 00 00 00 00 00
>122e60	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>122e68	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>122e78	00 00 00 00 00 00 00 00
>122e80	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>122e88	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>122e98	00 00 00 00 00 00 00 00
>122ea0	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>122ea8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>122eb8	00 00 00 00 00 00 00 00
>122ec0	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>122ec8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>122ed8	00 00 00 00 00 00 00 00
>122ee0	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>122ee8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>122ef8	00 00 00 00 00 00 00 00
>122f00	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>122f08	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>122f18	00 00 00 00 00 00 00 00
>122f20	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>122f28	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>122f38	00 00 00 00 00 00 00 00
>122f40	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>122f48	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>122f58	00 00 00 00 00 00 00 00
>122f60	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>122f68	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>122f78	00 00 00 00 00 00 00 00
>122f80	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>122f88	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>122f98	00 00 00 00 00 00 00 00
>122fa0	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>122fa8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>122fb8	00 00 00 00 00 00 00 00
>122fc0	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>122fc8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>122fd8	00 00 00 00 00 00 00 00
>122fe0	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>122fe8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>122ff8	00 00 00 00 00 00 00 00
>123000	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>123008	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>123018	00 00 00 00 00 00 00 00
>123020	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>123028	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>123038	00 00 00 00 00 00 00 00
>123040	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>123048	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>123058	00 00 00 00 00 00 00 00
>123060	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>123068	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>123078	00 00 00 00 00 00 00 00
>123080	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>123088	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>123098	00 00 00 00 00 00 00 00
>1230a0	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>1230a8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1230b8	00 00 00 00 00 00 00 00
>1230c0	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>1230c8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1230d8	00 00 00 00 00 00 00 00
>1230e0	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>1230e8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1230f8	00 00 00 00 00 00 00 00
>123100	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>123108	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>123118	00 00 00 00 00 00 00 00
>123120	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>123128	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>123138	00 00 00 00 00 00 00 00
>123140	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>123148	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>123158	00 00 00 00 00 00 00 00
>123160	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>123168	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>123178	00 00 00 00 00 00 00 00
>123180	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>123188	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>123198	00 00 00 00 00 00 00 00
>1231a0	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>1231a8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1231b8	00 00 00 00 00 00 00 00
>1231c0	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>1231c8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1231d8	00 00 00 00 00 00 00 00
>1231e0	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>1231e8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1231f8	00 00 00 00 00 00 00 00
>123200	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>123208	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>123218	00 00 00 00 00 00 00 00
>123220	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>123228	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>123238	00 00 00 00 00 00 00 00
>123240	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>123248	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>123258	00 00 00 00 00 00 00 00
>123260	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>123268	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>123278	00 00 00 00 00 00 00 00
>123280	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>123288	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>123298	00 00 00 00 00 00 00 00
>1232a0	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>1232a8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1232b8	00 00 00 00 00 00 00 00
>1232c0	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>1232c8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1232d8	00 00 00 00 00 00 00 00
>1232e0	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>1232e8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1232f8	00 00 00 00 00 00 00 00
>123300	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>123308	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>123318	00 00 00 00 00 00 00 00
>123320	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>123328	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>123338	00 00 00 00 00 00 00 00
>123340	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>123348	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>123358	00 00 00 00 00 00 00 00
>123360	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>123368	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>123378	00 00 00 00 00 00 00 00
>123380	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>123388	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>123398	00 00 00 00 00 00 00 00
>1233a0	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>1233a8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1233b8	00 00 00 00 00 00 00 00
>1233c0	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>1233c8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1233d8	00 00 00 00 00 00 00 00
>1233e0	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>1233e8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1233f8	00 00 00 00 00 00 00 00
>123400	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>123408	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>123418	00 00 00 00 00 00 00 00
>123420	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>123428	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>123438	00 00 00 00 00 00 00 00
>123440	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>123448	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>123458	00 00 00 00 00 00 00 00
>123460	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>123468	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>123478	00 00 00 00 00 00 00 00
>123480	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>123488	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>123498	00 00 00 00 00 00 00 00
>1234a0	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>1234a8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1234b8	00 00 00 00 00 00 00 00
>1234c0	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>1234c8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1234d8	00 00 00 00 00 00 00 00
>1234e0	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>1234e8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1234f8	00 00 00 00 00 00 00 00
>123500	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>123508	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>123518	00 00 00 00 00 00 00 00
>123520	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>123528	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>123538	00 00 00 00 00 00 00 00
>123540	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>123548	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>123558	00 00 00 00 00 00 00 00
>123560	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>123568	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>123578	00 00 00 00 00 00 00 00
>123580	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>123588	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>123598	00 00 00 00 00 00 00 00
>1235a0	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>1235a8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1235b8	00 00 00 00 00 00 00 00
>1235c0	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>1235c8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1235d8	00 00 00 00 00 00 00 00
>1235e0	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>1235e8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1235f8	00 00 00 00 00 00 00 00
>123600	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>123608	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>123618	00 00 00 00 00 00 00 00
>123620	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>123628	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>123638	00 00 00 00 00 00 00 00
>123640	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>123648	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>123658	00 00 00 00 00 00 00 00
>123660	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>123668	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>123678	00 00 00 00 00 00 00 00
>123680	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>123688	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>123698	00 00 00 00 00 00 00 00
>1236a0	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>1236a8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1236b8	00 00 00 00 00 00 00 00
>1236c0	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>1236c8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1236d8	00 00 00 00 00 00 00 00
>1236e0	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>1236e8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1236f8	00 00 00 00 00 00 00 00
>123700	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>123708	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>123718	00 00 00 00 00 00 00 00
>123720	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>123728	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>123738	00 00 00 00 00 00 00 00
>123740	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>123748	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>123758	00 00 00 00 00 00 00 00
>123760	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>123768	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>123778	00 00 00 00 00 00 00 00
>123780	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>123788	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>123798	00 00 00 00 00 00 00 00
>1237a0	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>1237a8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1237b8	00 00 00 00 00 00 00 00
>1237c0	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>1237c8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1237d8	00 00 00 00 00 00 00 00
>1237e0	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>1237e8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1237f8	00 00 00 00 00 00 00 00
>123800	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>123808	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>123818	00 00 00 00 00 00 00 00
>123820	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>123828	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>123838	00 00 00 00 00 00 00 00
>123840	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>123848	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>123858	00 00 00 00 00 00 00 00
>123860	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>123868	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>123878	00 00 00 00 00 00 00 00
>123880	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>123888	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>123898	00 00 00 00 00 00 00 00
>1238a0	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>1238a8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1238b8	00 00 00 00 00 00 00 00
>1238c0	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>1238c8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1238d8	00 00 00 00 00 00 00 00
>1238e0	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>1238e8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1238f8	00 00 00 00 00 00 00 00
>123900	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>123908	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>123918	00 00 00 00 00 00 00 00
>123920	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>123928	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>123938	00 00 00 00 00 00 00 00
>123940	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>123948	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>123958	00 00 00 00 00 00 00 00
>123960	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>123968	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>123978	00 00 00 00 00 00 00 00
>123980	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>123988	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>123998	00 00 00 00 00 00 00 00
>1239a0	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>1239a8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1239b8	00 00 00 00 00 00 00 00
>1239c0	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>1239c8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1239d8	00 00 00 00 00 00 00 00
>1239e0	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>1239e8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1239f8	00 00 00 00 00 00 00 00
>123a00	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>123a08	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>123a18	00 00 00 00 00 00 00 00
>123a20	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>123a28	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>123a38	00 00 00 00 00 00 00 00
>123a40	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>123a48	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>123a58	00 00 00 00 00 00 00 00
>123a60	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>123a68	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>123a78	00 00 00 00 00 00 00 00
>123a80	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>123a88	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>123a98	00 00 00 00 00 00 00 00
>123aa0	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>123aa8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>123ab8	00 00 00 00 00 00 00 00
>123ac0	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>123ac8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>123ad8	00 00 00 00 00 00 00 00
>123ae0	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>123ae8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>123af8	00 00 00 00 00 00 00 00
>123b00	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>123b08	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>123b18	00 00 00 00 00 00 00 00
>123b20	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>123b28	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>123b38	00 00 00 00 00 00 00 00
>123b40	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>123b48	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>123b58	00 00 00 00 00 00 00 00
>123b60	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>123b68	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>123b78	00 00 00 00 00 00 00 00
>123b80	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>123b88	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>123b98	00 00 00 00 00 00 00 00
>123ba0	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>123ba8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>123bb8	00 00 00 00 00 00 00 00
>123bc0	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>123bc8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>123bd8	00 00 00 00 00 00 00 00
>123be0	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>123be8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>123bf8	00 00 00 00 00 00 00 00
>123c00	f8 ff ff 0f ff ff ff 0f		.text $F8,$FF,$FF,$0F,$FF,$FF,$FF,$0F,$FF,$FF,$FF,$0F,$04,$00,$00,$00,$05,$00,$00,$00,$06,$00,$00,$00,$07,$00,$00,$00,$08,$00,$00,$00
>123c08	ff ff ff 0f 04 00 00 00 05 00 00 00 06 00 00 00
>123c18	07 00 00 00 08 00 00 00
>123c20	09 00 00 00 0a 00 00 00		.text $09,$00,$00,$00,$0A,$00,$00,$00,$0B,$00,$00,$00,$0C,$00,$00,$00,$0D,$00,$00,$00,$0E,$00,$00,$00,$0F,$00,$00,$00,$FF,$FF,$FF,$0F
>123c28	0b 00 00 00 0c 00 00 00 0d 00 00 00 0e 00 00 00
>123c38	0f 00 00 00 ff ff ff 0f
>123c40	ff ff ff 0f 00 00 00 00		.text $FF,$FF,$FF,$0F,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>123c48	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>123c58	00 00 00 00 00 00 00 00
>123c60	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>123c68	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>123c78	00 00 00 00 00 00 00 00
>123c80	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>123c88	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>123c98	00 00 00 00 00 00 00 00
>123ca0	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>123ca8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>123cb8	00 00 00 00 00 00 00 00
>123cc0	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>123cc8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>123cd8	00 00 00 00 00 00 00 00
>123ce0	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>123ce8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>123cf8	00 00 00 00 00 00 00 00
>123d00	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>123d08	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>123d18	00 00 00 00 00 00 00 00
>123d20	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>123d28	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>123d38	00 00 00 00 00 00 00 00
>123d40	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>123d48	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>123d58	00 00 00 00 00 00 00 00
>123d60	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>123d68	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>123d78	00 00 00 00 00 00 00 00
>123d80	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>123d88	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>123d98	00 00 00 00 00 00 00 00
>123da0	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>123da8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>123db8	00 00 00 00 00 00 00 00
>123dc0	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>123dc8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>123dd8	00 00 00 00 00 00 00 00
>123de0	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>123de8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>123df8	00 00 00 00 00 00 00 00
>123e00	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>123e08	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>123e18	00 00 00 00 00 00 00 00
>123e20	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>123e28	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>123e38	00 00 00 00 00 00 00 00
>123e40	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>123e48	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>123e58	00 00 00 00 00 00 00 00
>123e60	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>123e68	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>123e78	00 00 00 00 00 00 00 00
>123e80	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>123e88	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>123e98	00 00 00 00 00 00 00 00
>123ea0	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>123ea8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>123eb8	00 00 00 00 00 00 00 00
>123ec0	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>123ec8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>123ed8	00 00 00 00 00 00 00 00
>123ee0	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>123ee8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>123ef8	00 00 00 00 00 00 00 00
>123f00	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>123f08	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>123f18	00 00 00 00 00 00 00 00
>123f20	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>123f28	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>123f38	00 00 00 00 00 00 00 00
>123f40	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>123f48	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>123f58	00 00 00 00 00 00 00 00
>123f60	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>123f68	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>123f78	00 00 00 00 00 00 00 00
>123f80	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>123f88	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>123f98	00 00 00 00 00 00 00 00
>123fa0	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>123fa8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>123fb8	00 00 00 00 00 00 00 00
>123fc0	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>123fc8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>123fd8	00 00 00 00 00 00 00 00
>123fe0	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>123fe8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>123ff8	00 00 00 00 00 00 00 00
>124000	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>124008	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>124018	00 00 00 00 00 00 00 00
>124020	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>124028	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>124038	00 00 00 00 00 00 00 00
>124040	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>124048	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>124058	00 00 00 00 00 00 00 00
>124060	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>124068	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>124078	00 00 00 00 00 00 00 00
>124080	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>124088	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>124098	00 00 00 00 00 00 00 00
>1240a0	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>1240a8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1240b8	00 00 00 00 00 00 00 00
>1240c0	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>1240c8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1240d8	00 00 00 00 00 00 00 00
>1240e0	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>1240e8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1240f8	00 00 00 00 00 00 00 00
>124100	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>124108	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>124118	00 00 00 00 00 00 00 00
>124120	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>124128	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>124138	00 00 00 00 00 00 00 00
>124140	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>124148	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>124158	00 00 00 00 00 00 00 00
>124160	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>124168	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>124178	00 00 00 00 00 00 00 00
>124180	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>124188	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>124198	00 00 00 00 00 00 00 00
>1241a0	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>1241a8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1241b8	00 00 00 00 00 00 00 00
>1241c0	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>1241c8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1241d8	00 00 00 00 00 00 00 00
>1241e0	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>1241e8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1241f8	00 00 00 00 00 00 00 00
>124200	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>124208	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>124218	00 00 00 00 00 00 00 00
>124220	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>124228	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>124238	00 00 00 00 00 00 00 00
>124240	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>124248	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>124258	00 00 00 00 00 00 00 00
>124260	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>124268	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>124278	00 00 00 00 00 00 00 00
>124280	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>124288	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>124298	00 00 00 00 00 00 00 00
>1242a0	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>1242a8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1242b8	00 00 00 00 00 00 00 00
>1242c0	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>1242c8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1242d8	00 00 00 00 00 00 00 00
>1242e0	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>1242e8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1242f8	00 00 00 00 00 00 00 00
>124300	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>124308	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>124318	00 00 00 00 00 00 00 00
>124320	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>124328	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>124338	00 00 00 00 00 00 00 00
>124340	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>124348	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>124358	00 00 00 00 00 00 00 00
>124360	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>124368	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>124378	00 00 00 00 00 00 00 00
>124380	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>124388	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>124398	00 00 00 00 00 00 00 00
>1243a0	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>1243a8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1243b8	00 00 00 00 00 00 00 00
>1243c0	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>1243c8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1243d8	00 00 00 00 00 00 00 00
>1243e0	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>1243e8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1243f8	00 00 00 00 00 00 00 00
>124400	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>124408	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>124418	00 00 00 00 00 00 00 00
>124420	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>124428	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>124438	00 00 00 00 00 00 00 00
>124440	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>124448	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>124458	00 00 00 00 00 00 00 00
>124460	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>124468	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>124478	00 00 00 00 00 00 00 00
>124480	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>124488	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>124498	00 00 00 00 00 00 00 00
>1244a0	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>1244a8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1244b8	00 00 00 00 00 00 00 00
>1244c0	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>1244c8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1244d8	00 00 00 00 00 00 00 00
>1244e0	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>1244e8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1244f8	00 00 00 00 00 00 00 00
>124500	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>124508	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>124518	00 00 00 00 00 00 00 00
>124520	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>124528	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>124538	00 00 00 00 00 00 00 00
>124540	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>124548	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>124558	00 00 00 00 00 00 00 00
>124560	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>124568	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>124578	00 00 00 00 00 00 00 00
>124580	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>124588	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>124598	00 00 00 00 00 00 00 00
>1245a0	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>1245a8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1245b8	00 00 00 00 00 00 00 00
>1245c0	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>1245c8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1245d8	00 00 00 00 00 00 00 00
>1245e0	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>1245e8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1245f8	00 00 00 00 00 00 00 00
>124600	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>124608	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>124618	00 00 00 00 00 00 00 00
>124620	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>124628	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>124638	00 00 00 00 00 00 00 00
>124640	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>124648	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>124658	00 00 00 00 00 00 00 00
>124660	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>124668	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>124678	00 00 00 00 00 00 00 00
>124680	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>124688	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>124698	00 00 00 00 00 00 00 00
>1246a0	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>1246a8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1246b8	00 00 00 00 00 00 00 00
>1246c0	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>1246c8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1246d8	00 00 00 00 00 00 00 00
>1246e0	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>1246e8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1246f8	00 00 00 00 00 00 00 00
>124700	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>124708	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>124718	00 00 00 00 00 00 00 00
>124720	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>124728	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>124738	00 00 00 00 00 00 00 00
>124740	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>124748	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>124758	00 00 00 00 00 00 00 00
>124760	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>124768	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>124778	00 00 00 00 00 00 00 00
>124780	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>124788	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>124798	00 00 00 00 00 00 00 00
>1247a0	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>1247a8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1247b8	00 00 00 00 00 00 00 00
>1247c0	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>1247c8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1247d8	00 00 00 00 00 00 00 00
>1247e0	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>1247e8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1247f8	00 00 00 00 00 00 00 00
>124800	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>124808	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>124818	00 00 00 00 00 00 00 00
>124820	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>124828	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>124838	00 00 00 00 00 00 00 00
>124840	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>124848	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>124858	00 00 00 00 00 00 00 00
>124860	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>124868	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>124878	00 00 00 00 00 00 00 00
>124880	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>124888	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>124898	00 00 00 00 00 00 00 00
>1248a0	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>1248a8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1248b8	00 00 00 00 00 00 00 00
>1248c0	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>1248c8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1248d8	00 00 00 00 00 00 00 00
>1248e0	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>1248e8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1248f8	00 00 00 00 00 00 00 00
>124900	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>124908	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>124918	00 00 00 00 00 00 00 00
>124920	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>124928	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>124938	00 00 00 00 00 00 00 00
>124940	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>124948	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>124958	00 00 00 00 00 00 00 00
>124960	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>124968	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>124978	00 00 00 00 00 00 00 00
>124980	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>124988	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>124998	00 00 00 00 00 00 00 00
>1249a0	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>1249a8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1249b8	00 00 00 00 00 00 00 00
>1249c0	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>1249c8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1249d8	00 00 00 00 00 00 00 00
>1249e0	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>1249e8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1249f8	00 00 00 00 00 00 00 00
>124a00	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>124a08	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>124a18	00 00 00 00 00 00 00 00
>124a20	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>124a28	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>124a38	00 00 00 00 00 00 00 00
>124a40	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>124a48	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>124a58	00 00 00 00 00 00 00 00
>124a60	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>124a68	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>124a78	00 00 00 00 00 00 00 00
>124a80	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>124a88	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>124a98	00 00 00 00 00 00 00 00
>124aa0	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>124aa8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>124ab8	00 00 00 00 00 00 00 00
>124ac0	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>124ac8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>124ad8	00 00 00 00 00 00 00 00
>124ae0	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>124ae8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>124af8	00 00 00 00 00 00 00 00
>124b00	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>124b08	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>124b18	00 00 00 00 00 00 00 00
>124b20	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>124b28	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>124b38	00 00 00 00 00 00 00 00
>124b40	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>124b48	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>124b58	00 00 00 00 00 00 00 00
>124b60	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>124b68	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>124b78	00 00 00 00 00 00 00 00
>124b80	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>124b88	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>124b98	00 00 00 00 00 00 00 00
>124ba0	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>124ba8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>124bb8	00 00 00 00 00 00 00 00
>124bc0	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>124bc8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>124bd8	00 00 00 00 00 00 00 00
>124be0	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>124be8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>124bf8	00 00 00 00 00 00 00 00
>124c00	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>124c08	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>124c18	00 00 00 00 00 00 00 00
>124c20	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>124c28	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>124c38	00 00 00 00 00 00 00 00
>124c40	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>124c48	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>124c58	00 00 00 00 00 00 00 00
>124c60	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>124c68	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>124c78	00 00 00 00 00 00 00 00
>124c80	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>124c88	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>124c98	00 00 00 00 00 00 00 00
>124ca0	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>124ca8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>124cb8	00 00 00 00 00 00 00 00
>124cc0	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>124cc8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>124cd8	00 00 00 00 00 00 00 00
>124ce0	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>124ce8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>124cf8	00 00 00 00 00 00 00 00
>124d00	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>124d08	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>124d18	00 00 00 00 00 00 00 00
>124d20	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>124d28	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>124d38	00 00 00 00 00 00 00 00
>124d40	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>124d48	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>124d58	00 00 00 00 00 00 00 00
>124d60	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>124d68	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>124d78	00 00 00 00 00 00 00 00
>124d80	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>124d88	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>124d98	00 00 00 00 00 00 00 00
>124da0	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>124da8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>124db8	00 00 00 00 00 00 00 00
>124dc0	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>124dc8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>124dd8	00 00 00 00 00 00 00 00
>124de0	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>124de8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>124df8	00 00 00 00 00 00 00 00
>124e00	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>124e08	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>124e18	00 00 00 00 00 00 00 00
>124e20	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>124e28	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>124e38	00 00 00 00 00 00 00 00
>124e40	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>124e48	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>124e58	00 00 00 00 00 00 00 00
>124e60	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>124e68	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>124e78	00 00 00 00 00 00 00 00
>124e80	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>124e88	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>124e98	00 00 00 00 00 00 00 00
>124ea0	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>124ea8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>124eb8	00 00 00 00 00 00 00 00
>124ec0	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>124ec8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>124ed8	00 00 00 00 00 00 00 00
>124ee0	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>124ee8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>124ef8	00 00 00 00 00 00 00 00
>124f00	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>124f08	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>124f18	00 00 00 00 00 00 00 00
>124f20	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>124f28	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>124f38	00 00 00 00 00 00 00 00
>124f40	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>124f48	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>124f58	00 00 00 00 00 00 00 00
>124f60	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>124f68	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>124f78	00 00 00 00 00 00 00 00
>124f80	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>124f88	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>124f98	00 00 00 00 00 00 00 00
>124fa0	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>124fa8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>124fb8	00 00 00 00 00 00 00 00
>124fc0	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>124fc8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>124fd8	00 00 00 00 00 00 00 00
>124fe0	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>124fe8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>124ff8	00 00 00 00 00 00 00 00
>125000	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>125008	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>125018	00 00 00 00 00 00 00 00
>125020	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>125028	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>125038	00 00 00 00 00 00 00 00
>125040	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>125048	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>125058	00 00 00 00 00 00 00 00
>125060	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>125068	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>125078	00 00 00 00 00 00 00 00
>125080	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>125088	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>125098	00 00 00 00 00 00 00 00
>1250a0	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>1250a8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1250b8	00 00 00 00 00 00 00 00
>1250c0	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>1250c8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1250d8	00 00 00 00 00 00 00 00
>1250e0	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>1250e8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1250f8	00 00 00 00 00 00 00 00
>125100	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>125108	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>125118	00 00 00 00 00 00 00 00
>125120	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>125128	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>125138	00 00 00 00 00 00 00 00
>125140	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>125148	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>125158	00 00 00 00 00 00 00 00
>125160	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>125168	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>125178	00 00 00 00 00 00 00 00
>125180	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>125188	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>125198	00 00 00 00 00 00 00 00
>1251a0	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>1251a8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1251b8	00 00 00 00 00 00 00 00
>1251c0	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>1251c8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1251d8	00 00 00 00 00 00 00 00
>1251e0	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>1251e8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1251f8	00 00 00 00 00 00 00 00
>125200	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>125208	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>125218	00 00 00 00 00 00 00 00
>125220	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>125228	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>125238	00 00 00 00 00 00 00 00
>125240	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>125248	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>125258	00 00 00 00 00 00 00 00
>125260	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>125268	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>125278	00 00 00 00 00 00 00 00
>125280	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>125288	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>125298	00 00 00 00 00 00 00 00
>1252a0	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>1252a8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1252b8	00 00 00 00 00 00 00 00
>1252c0	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>1252c8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1252d8	00 00 00 00 00 00 00 00
>1252e0	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>1252e8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1252f8	00 00 00 00 00 00 00 00
>125300	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>125308	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>125318	00 00 00 00 00 00 00 00
>125320	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>125328	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>125338	00 00 00 00 00 00 00 00
>125340	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>125348	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>125358	00 00 00 00 00 00 00 00
>125360	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>125368	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>125378	00 00 00 00 00 00 00 00
>125380	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>125388	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>125398	00 00 00 00 00 00 00 00
>1253a0	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>1253a8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1253b8	00 00 00 00 00 00 00 00
>1253c0	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>1253c8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1253d8	00 00 00 00 00 00 00 00
>1253e0	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>1253e8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1253f8	00 00 00 00 00 00 00 00
>125400	e5 6d 00 65 00 6e 00 74		.text $E5,$6D,$00,$65,$00,$6E,$00,$74,$00,$2E,$00,$0F,$00,$9F,$74,$00,$78,$00,$74,$00,$00,$00,$FF,$FF,$FF,$FF,$00,$00,$FF,$FF,$FF,$FF
>125408	00 2e 00 0f 00 9f 74 00 78 00 74 00 00 00 ff ff
>125418	ff ff 00 00 ff ff ff ff
>125420	e5 4e 00 65 00 77 00 20		.text $E5,$4E,$00,$65,$00,$77,$00,$20,$00,$54,$00,$0F,$00,$9F,$65,$00,$78,$00,$74,$00,$20,$00,$44,$00,$6F,$00,$00,$00,$63,$00,$75,$00
>125428	00 54 00 0f 00 9f 65 00 78 00 74 00 20 00 44 00
>125438	6f 00 00 00 63 00 75 00
>125440	e5 45 57 54 45 58 7e 31		.text $E5,$45,$57,$54,$45,$58,$7E,$31,$54,$58,$54,$20,$00,$A8,$34,$7E,$28,$4F,$28,$4F,$00,$00,$35,$7E,$28,$4F,$00,$00,$00,$00,$00,$00
>125448	54 58 54 20 00 a8 34 7e 28 4f 28 4f 00 00 35 7e
>125458	28 4f 00 00 00 00 00 00
>125460	41 74 00 65 00 78 00 74		.text $41,$74,$00,$65,$00,$78,$00,$74,$00,$5F,$00,$0F,$00,$D6,$74,$00,$65,$00,$73,$00,$74,$00,$2E,$00,$74,$00,$00,$00,$78,$00,$74,$00
>125468	00 5f 00 0f 00 d6 74 00 65 00 73 00 74 00 2e 00
>125478	74 00 00 00 78 00 74 00
>125480	54 45 58 54 5f 54 7e 31		.text $54,$45,$58,$54,$5F,$54,$7E,$31,$54,$58,$54,$20,$00,$A8,$34,$7E,$28,$4F,$28,$4F,$00,$00,$98,$7E,$28,$4F,$03,$00,$00,$00,$00,$00
>125488	54 58 54 20 00 a8 34 7e 28 4f 28 4f 00 00 98 7e
>125498	28 4f 03 00 00 00 00 00
>1254a0	e5 6d 00 65 00 6e 00 74		.text $E5,$6D,$00,$65,$00,$6E,$00,$74,$00,$2E,$00,$0F,$00,$9F,$74,$00,$78,$00,$74,$00,$00,$00,$FF,$FF,$FF,$FF,$00,$00,$FF,$FF,$FF,$FF
>1254a8	00 2e 00 0f 00 9f 74 00 78 00 74 00 00 00 ff ff
>1254b8	ff ff 00 00 ff ff ff ff
>1254c0	e5 4e 00 65 00 77 00 20		.text $E5,$4E,$00,$65,$00,$77,$00,$20,$00,$54,$00,$0F,$00,$9F,$65,$00,$78,$00,$74,$00,$20,$00,$44,$00,$6F,$00,$00,$00,$63,$00,$75,$00
>1254c8	00 54 00 0f 00 9f 65 00 78 00 74 00 20 00 44 00
>1254d8	6f 00 00 00 63 00 75 00
>1254e0	e5 45 57 54 45 58 7e 31		.text $E5,$45,$57,$54,$45,$58,$7E,$31,$54,$58,$54,$20,$00,$C7,$9B,$7E,$28,$4F,$28,$4F,$00,$00,$9C,$7E,$28,$4F,$00,$00,$00,$00,$00,$00
>1254e8	54 58 54 20 00 c7 9b 7e 28 4f 28 4f 00 00 9c 7e
>1254f8	28 4f 00 00 00 00 00 00
>125500	53 44 46 47 56 47 48 20		.text $53,$44,$46,$47,$56,$47,$48,$20,$54,$58,$54,$20,$18,$C7,$9B,$7E,$28,$4F,$28,$4F,$00,$00,$9C,$7E,$28,$4F,$00,$00,$00,$00,$00,$00
>125508	54 58 54 20 18 c7 9b 7e 28 4f 28 4f 00 00 9c 7e
>125518	28 4f 00 00 00 00 00 00
>125520	e5 6d 00 65 00 6e 00 74		.text $E5,$6D,$00,$65,$00,$6E,$00,$74,$00,$2E,$00,$0F,$00,$9F,$74,$00,$78,$00,$74,$00,$00,$00,$FF,$FF,$FF,$FF,$00,$00,$FF,$FF,$FF,$FF
>125528	00 2e 00 0f 00 9f 74 00 78 00 74 00 00 00 ff ff
>125538	ff ff 00 00 ff ff ff ff
>125540	e5 4e 00 65 00 77 00 20		.text $E5,$4E,$00,$65,$00,$77,$00,$20,$00,$54,$00,$0F,$00,$9F,$65,$00,$78,$00,$74,$00,$20,$00,$44,$00,$6F,$00,$00,$00,$63,$00,$75,$00
>125548	00 54 00 0f 00 9f 65 00 78 00 74 00 20 00 44 00
>125558	6f 00 00 00 63 00 75 00
>125560	e5 45 57 54 45 58 7e 31		.text $E5,$45,$57,$54,$45,$58,$7E,$31,$54,$58,$54,$20,$00,$C7,$9B,$7E,$28,$4F,$28,$4F,$00,$00,$A1,$7E,$28,$4F,$00,$00,$00,$00,$00,$00
>125568	54 58 54 20 00 c7 9b 7e 28 4f 28 4f 00 00 a1 7e
>125578	28 4f 00 00 00 00 00 00
>125580	48 4a 4b 20 20 20 20 20		.text $48,$4A,$4B,$20,$20,$20,$20,$20,$54,$58,$54,$20,$18,$C7,$9B,$7E,$28,$4F,$28,$4F,$00,$00,$A5,$7E,$28,$4F,$10,$00,$1B,$00,$00,$00
>125588	54 58 54 20 18 c7 9b 7e 28 4f 28 4f 00 00 a5 7e
>125598	28 4f 10 00 1b 00 00 00
>1255a0	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>1255a8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1255b8	00 00 00 00 00 00 00 00
>1255c0	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>1255c8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1255d8	00 00 00 00 00 00 00 00
>1255e0	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>1255e8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1255f8	00 00 00 00 00 00 00 00
>125600	31 32 33 34 30 30 30 30		.text $31,$32,$33,$34,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30
>125608	30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30
>125618	30 30 30 30 30 30 30 30
>125620	30 30 30 30 30 30 30 30		.text $30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30
>125628	30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30
>125638	30 30 30 30 30 30 30 30
>125640	30 30 30 30 30 30 30 30		.text $30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30
>125648	30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30
>125658	30 30 30 30 30 30 30 30
>125660	30 30 30 30 30 30 30 30		.text $30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30
>125668	30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30
>125678	30 30 30 30 30 30 30 30
>125680	30 30 30 30 30 30 30 30		.text $30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30
>125688	30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30
>125698	30 30 30 30 30 30 30 30
>1256a0	30 30 30 30 30 30 30 30		.text $30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30
>1256a8	30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30
>1256b8	30 30 30 30 30 30 30 30
>1256c0	30 30 30 30 30 30 30 30		.text $30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30
>1256c8	30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30
>1256d8	30 30 30 30 30 30 30 30
>1256e0	30 30 30 30 30 30 30 30		.text $30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30
>1256e8	30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30
>1256f8	30 30 30 30 30 30 30 30
>125700	30 30 30 30 30 30 30 30		.text $30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30
>125708	30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30
>125718	30 30 30 30 30 30 30 30
>125720	30 30 30 30 30 30 30 30		.text $30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30
>125728	30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30
>125738	30 30 30 30 30 30 30 30
>125740	30 30 30 30 30 30 30 30		.text $30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30
>125748	30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30
>125758	30 30 30 30 30 30 30 30
>125760	30 30 30 30 30 30 30 30		.text $30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30
>125768	30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30
>125778	30 30 30 30 30 30 30 30
>125780	30 30 30 30 30 30 30 30		.text $30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30
>125788	30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30
>125798	30 30 30 30 30 30 30 30
>1257a0	30 30 30 30 30 30 30 30		.text $30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30
>1257a8	30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30
>1257b8	30 30 30 30 30 30 30 30
>1257c0	30 30 30 30 30 30 30 30		.text $30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30
>1257c8	30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30
>1257d8	30 30 30 30 30 30 30 30
>1257e0	30 30 30 30 30 30 30 30		.text $30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$35,$36,$37,$38
>1257e8	30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30
>1257f8	30 30 30 30 35 36 37 38
>125800	31 32 33 34 30 30 30 30		.text $31,$32,$33,$34,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30
>125808	30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30
>125818	30 30 30 30 30 30 30 30
>125820	30 30 30 30 30 30 30 30		.text $30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30
>125828	30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30
>125838	30 30 30 30 30 30 30 30
>125840	30 30 30 30 30 30 30 30		.text $30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30
>125848	30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30
>125858	30 30 30 30 30 30 30 30
>125860	30 30 30 30 30 30 30 30		.text $30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30
>125868	30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30
>125878	30 30 30 30 30 30 30 30
>125880	30 30 30 30 30 30 30 30		.text $30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30
>125888	30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30
>125898	30 30 30 30 30 30 30 30
>1258a0	30 30 30 30 30 30 30 30		.text $30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30
>1258a8	30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30
>1258b8	30 30 30 30 30 30 30 30
>1258c0	30 30 30 30 30 30 30 30		.text $30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30
>1258c8	30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30
>1258d8	30 30 30 30 30 30 30 30
>1258e0	30 30 30 30 30 30 30 30		.text $30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30
>1258e8	30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30
>1258f8	30 30 30 30 30 30 30 30
>125900	30 30 30 30 30 30 30 30		.text $30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30
>125908	30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30
>125918	30 30 30 30 30 30 30 30
>125920	30 30 30 30 30 30 30 30		.text $30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30
>125928	30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30
>125938	30 30 30 30 30 30 30 30
>125940	30 30 30 30 30 30 30 30		.text $30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30
>125948	30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30
>125958	30 30 30 30 30 30 30 30
>125960	30 30 30 30 30 30 30 30		.text $30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30
>125968	30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30
>125978	30 30 30 30 30 30 30 30
>125980	30 30 30 30 30 30 30 30		.text $30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30
>125988	30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30
>125998	30 30 30 30 30 30 30 30
>1259a0	30 30 30 30 30 30 30 30		.text $30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30
>1259a8	30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30
>1259b8	30 30 30 30 30 30 30 30
>1259c0	30 30 30 30 30 30 30 30		.text $30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30
>1259c8	30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30
>1259d8	30 30 30 30 30 30 30 30
>1259e0	30 30 30 30 30 30 30 30		.text $30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$35,$36,$37,$38
>1259e8	30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30
>1259f8	30 30 30 30 35 36 37 38
>125a00	31 32 33 34 30 30 30 30		.text $31,$32,$33,$34,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30
>125a08	30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30
>125a18	30 30 30 30 30 30 30 30
>125a20	30 30 30 30 30 30 30 30		.text $30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30
>125a28	30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30
>125a38	30 30 30 30 30 30 30 30
>125a40	30 30 30 30 30 30 30 30		.text $30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30
>125a48	30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30
>125a58	30 30 30 30 30 30 30 30
>125a60	30 30 30 30 30 30 30 30		.text $30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30
>125a68	30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30
>125a78	30 30 30 30 30 30 30 30
>125a80	30 30 30 30 30 30 30 30		.text $30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30
>125a88	30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30
>125a98	30 30 30 30 30 30 30 30
>125aa0	30 30 30 30 30 30 30 30		.text $30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30
>125aa8	30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30
>125ab8	30 30 30 30 30 30 30 30
>125ac0	30 30 30 30 30 30 30 30		.text $30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30
>125ac8	30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30
>125ad8	30 30 30 30 30 30 30 30
>125ae0	30 30 30 30 30 30 30 30		.text $30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30
>125ae8	30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30
>125af8	30 30 30 30 30 30 30 30
>125b00	30 30 30 30 30 30 30 30		.text $30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30
>125b08	30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30
>125b18	30 30 30 30 30 30 30 30
>125b20	30 30 30 30 30 30 30 30		.text $30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30
>125b28	30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30
>125b38	30 30 30 30 30 30 30 30
>125b40	30 30 30 30 30 30 30 30		.text $30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30
>125b48	30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30
>125b58	30 30 30 30 30 30 30 30
>125b60	30 30 30 30 30 30 30 30		.text $30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30
>125b68	30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30
>125b78	30 30 30 30 30 30 30 30
>125b80	30 30 30 30 30 30 30 30		.text $30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30
>125b88	30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30
>125b98	30 30 30 30 30 30 30 30
>125ba0	30 30 30 30 30 30 30 30		.text $30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30
>125ba8	30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30
>125bb8	30 30 30 30 30 30 30 30
>125bc0	30 30 30 30 30 30 30 30		.text $30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30
>125bc8	30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30
>125bd8	30 30 30 30 30 30 30 30
>125be0	30 30 30 30 30 30 30 30		.text $30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$35,$36,$37,$38
>125be8	30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30
>125bf8	30 30 30 30 35 36 37 38
>125c00	31 32 33 34 30 30 30 30		.text $31,$32,$33,$34,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30
>125c08	30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30
>125c18	30 30 30 30 30 30 30 30
>125c20	30 30 30 30 30 30 30 30		.text $30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30
>125c28	30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30
>125c38	30 30 30 30 30 30 30 30
>125c40	30 30 30 30 30 30 30 30		.text $30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30
>125c48	30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30
>125c58	30 30 30 30 30 30 30 30
>125c60	30 30 30 30 30 30 30 30		.text $30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30
>125c68	30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30
>125c78	30 30 30 30 30 30 30 30
>125c80	30 30 30 30 30 30 30 30		.text $30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30
>125c88	30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30
>125c98	30 30 30 30 30 30 30 30
>125ca0	30 30 30 30 30 30 30 30		.text $30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30
>125ca8	30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30
>125cb8	30 30 30 30 30 30 30 30
>125cc0	30 30 30 30 30 30 30 30		.text $30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30
>125cc8	30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30
>125cd8	30 30 30 30 30 30 30 30
>125ce0	30 30 30 30 30 30 30 30		.text $30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30
>125ce8	30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30
>125cf8	30 30 30 30 30 30 30 30
>125d00	30 30 30 30 30 30 30 30		.text $30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30
>125d08	30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30
>125d18	30 30 30 30 30 30 30 30
>125d20	30 30 30 30 30 30 30 30		.text $30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30
>125d28	30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30
>125d38	30 30 30 30 30 30 30 30
>125d40	30 30 30 30 30 30 30 30		.text $30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30
>125d48	30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30
>125d58	30 30 30 30 30 30 30 30
>125d60	30 30 30 30 30 30 30 30		.text $30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30
>125d68	30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30
>125d78	30 30 30 30 30 30 30 30
>125d80	30 30 30 30 30 30 30 30		.text $30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30
>125d88	30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30
>125d98	30 30 30 30 30 30 30 30
>125da0	30 30 30 30 30 30 30 30		.text $30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30
>125da8	30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30
>125db8	30 30 30 30 30 30 30 30
>125dc0	30 30 30 30 30 30 30 30		.text $30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30
>125dc8	30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30
>125dd8	30 30 30 30 30 30 30 30
>125de0	30 30 30 30 30 30 30 30		.text $30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$35,$36,$37,$38
>125de8	30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30
>125df8	30 30 30 30 35 36 37 38
>125e00	31 32 33 34 30 30 30 30		.text $31,$32,$33,$34,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30
>125e08	30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30
>125e18	30 30 30 30 30 30 30 30
>125e20	30 30 30 30 30 30 30 30		.text $30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30
>125e28	30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30
>125e38	30 30 30 30 30 30 30 30
>125e40	30 30 30 30 30 30 30 30		.text $30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30
>125e48	30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30
>125e58	30 30 30 30 30 30 30 30
>125e60	30 30 30 30 30 30 30 30		.text $30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30
>125e68	30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30
>125e78	30 30 30 30 30 30 30 30
>125e80	30 30 30 30 30 30 30 30		.text $30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30
>125e88	30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30
>125e98	30 30 30 30 30 30 30 30
>125ea0	30 30 30 30 30 30 30 30		.text $30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30
>125ea8	30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30
>125eb8	30 30 30 30 30 30 30 30
>125ec0	30 30 30 30 30 30 30 30		.text $30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30
>125ec8	30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30
>125ed8	30 30 30 30 30 30 30 30
>125ee0	30 30 30 30 30 30 30 30		.text $30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30
>125ee8	30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30
>125ef8	30 30 30 30 30 30 30 30
>125f00	30 30 30 30 30 30 30 30		.text $30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30
>125f08	30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30
>125f18	30 30 30 30 30 30 30 30
>125f20	30 30 30 30 30 30 30 30		.text $30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30
>125f28	30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30
>125f38	30 30 30 30 30 30 30 30
>125f40	30 30 30 30 30 30 30 30		.text $30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30
>125f48	30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30
>125f58	30 30 30 30 30 30 30 30
>125f60	30 30 30 30 30 30 30 30		.text $30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30
>125f68	30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30
>125f78	30 30 30 30 30 30 30 30
>125f80	30 30 30 30 30 30 30 30		.text $30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30
>125f88	30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30
>125f98	30 30 30 30 30 30 30 30
>125fa0	30 30 30 30 30 30 30 30		.text $30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30
>125fa8	30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30
>125fb8	30 30 30 30 30 30 30 30
>125fc0	30 30 30 30 30 30 30 30		.text $30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30
>125fc8	30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30
>125fd8	30 30 30 30 30 30 30 30
>125fe0	30 30 30 30 30 30 30 30		.text $30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$35,$36,$37,$38
>125fe8	30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30
>125ff8	30 30 30 30 35 36 37 38
>126000	31 32 33 34 30 30 30 30		.text $31,$32,$33,$34,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30
>126008	30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30
>126018	30 30 30 30 30 30 30 30
>126020	30 30 30 30 30 30 30 30		.text $30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30
>126028	30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30
>126038	30 30 30 30 30 30 30 30
>126040	30 30 30 30 30 30 30 30		.text $30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30
>126048	30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30
>126058	30 30 30 30 30 30 30 30
>126060	30 30 30 30 30 30 30 30		.text $30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30
>126068	30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30
>126078	30 30 30 30 30 30 30 30
>126080	30 30 30 30 30 30 30 30		.text $30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30
>126088	30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30
>126098	30 30 30 30 30 30 30 30
>1260a0	30 30 30 30 30 30 30 30		.text $30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30
>1260a8	30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30
>1260b8	30 30 30 30 30 30 30 30
>1260c0	30 30 30 30 30 30 30 30		.text $30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30
>1260c8	30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30
>1260d8	30 30 30 30 30 30 30 30
>1260e0	30 30 30 30 30 30 30 30		.text $30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30
>1260e8	30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30
>1260f8	30 30 30 30 30 30 30 30
>126100	30 30 30 30 30 30 30 30		.text $30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30
>126108	30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30
>126118	30 30 30 30 30 30 30 30
>126120	30 30 30 30 30 30 30 30		.text $30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30
>126128	30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30
>126138	30 30 30 30 30 30 30 30
>126140	30 30 30 30 30 30 30 30		.text $30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30
>126148	30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30
>126158	30 30 30 30 30 30 30 30
>126160	30 30 30 30 30 30 30 30		.text $30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30
>126168	30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30
>126178	30 30 30 30 30 30 30 30
>126180	30 30 30 30 30 30 30 30		.text $30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30
>126188	30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30
>126198	30 30 30 30 30 30 30 30
>1261a0	30 30 30 30 30 30 30 30		.text $30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30
>1261a8	30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30
>1261b8	30 30 30 30 30 30 30 30
>1261c0	30 30 30 30 30 30 30 30		.text $30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30
>1261c8	30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30
>1261d8	30 30 30 30 30 30 30 30
>1261e0	30 30 30 30 30 30 30 30		.text $30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$35,$36,$37,$38
>1261e8	30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30
>1261f8	30 30 30 30 35 36 37 38
>126200	31 32 33 34 30 30 30 30		.text $31,$32,$33,$34,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30
>126208	30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30
>126218	30 30 30 30 30 30 30 30
>126220	30 30 30 30 30 30 30 30		.text $30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30
>126228	30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30
>126238	30 30 30 30 30 30 30 30
>126240	30 30 30 30 30 30 30 30		.text $30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30
>126248	30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30
>126258	30 30 30 30 30 30 30 30
>126260	30 30 30 30 30 30 30 30		.text $30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30
>126268	30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30
>126278	30 30 30 30 30 30 30 30
>126280	30 30 30 30 30 30 30 30		.text $30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30
>126288	30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30
>126298	30 30 30 30 30 30 30 30
>1262a0	30 30 30 30 30 30 30 30		.text $30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30
>1262a8	30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30
>1262b8	30 30 30 30 30 30 30 30
>1262c0	30 30 30 30 30 30 30 30		.text $30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30
>1262c8	30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30
>1262d8	30 30 30 30 30 30 30 30
>1262e0	30 30 30 30 30 30 30 30		.text $30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30
>1262e8	30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30
>1262f8	30 30 30 30 30 30 30 30
>126300	30 30 30 30 30 30 30 30		.text $30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30
>126308	30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30
>126318	30 30 30 30 30 30 30 30
>126320	30 30 30 30 30 30 30 30		.text $30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30
>126328	30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30
>126338	30 30 30 30 30 30 30 30
>126340	30 30 30 30 30 30 30 30		.text $30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30
>126348	30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30
>126358	30 30 30 30 30 30 30 30
>126360	30 30 30 30 30 30 30 30		.text $30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30
>126368	30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30
>126378	30 30 30 30 30 30 30 30
>126380	30 30 30 30 30 30 30 30		.text $30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30
>126388	30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30
>126398	30 30 30 30 30 30 30 30
>1263a0	30 30 30 30 30 30 30 30		.text $30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30
>1263a8	30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30
>1263b8	30 30 30 30 30 30 30 30
>1263c0	30 30 30 30 30 30 30 30		.text $30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30
>1263c8	30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30
>1263d8	30 30 30 30 30 30 30 30
>1263e0	30 30 30 30 30 30 30 30		.text $30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$35,$36,$37,$38
>1263e8	30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30
>1263f8	30 30 30 30 35 36 37 38
>126400	31 32 33 34 30 30 30 30		.text $31,$32,$33,$34,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30
>126408	30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30
>126418	30 30 30 30 30 30 30 30
>126420	30 30 30 30 30 30 30 30		.text $30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30
>126428	30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30
>126438	30 30 30 30 30 30 30 30
>126440	30 30 30 30 30 30 30 30		.text $30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30
>126448	30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30
>126458	30 30 30 30 30 30 30 30
>126460	30 30 30 30 30 30 30 30		.text $30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30
>126468	30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30
>126478	30 30 30 30 30 30 30 30
>126480	30 30 30 30 30 30 30 30		.text $30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30
>126488	30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30
>126498	30 30 30 30 30 30 30 30
>1264a0	30 30 30 30 30 30 30 30		.text $30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30
>1264a8	30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30
>1264b8	30 30 30 30 30 30 30 30
>1264c0	30 30 30 30 30 30 30 30		.text $30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30
>1264c8	30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30
>1264d8	30 30 30 30 30 30 30 30
>1264e0	30 30 30 30 30 30 30 30		.text $30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30
>1264e8	30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30
>1264f8	30 30 30 30 30 30 30 30
>126500	30 30 30 30 30 30 30 30		.text $30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30
>126508	30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30
>126518	30 30 30 30 30 30 30 30
>126520	30 30 30 30 30 30 30 30		.text $30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30
>126528	30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30
>126538	30 30 30 30 30 30 30 30
>126540	30 30 30 30 30 30 30 30		.text $30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30
>126548	30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30
>126558	30 30 30 30 30 30 30 30
>126560	30 30 30 30 30 30 30 30		.text $30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30
>126568	30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30
>126578	30 30 30 30 30 30 30 30
>126580	30 30 30 30 30 30 30 30		.text $30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30
>126588	30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30
>126598	30 30 30 30 30 30 30 30
>1265a0	30 30 30 30 30 30 30 30		.text $30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30
>1265a8	30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30
>1265b8	30 30 30 30 30 30 30 30
>1265c0	30 30 30 30 30 30 30 30		.text $30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30
>1265c8	30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30
>1265d8	30 30 30 30 30 30 30 30
>1265e0	30 30 30 30 30 30 30 30		.text $30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$35,$36,$37,$38
>1265e8	30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30
>1265f8	30 30 30 30 35 36 37 38
>126600	31 32 33 34 30 30 30 30		.text $31,$32,$33,$34,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30
>126608	30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30
>126618	30 30 30 30 30 30 30 30
>126620	30 30 30 30 30 30 30 30		.text $30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30
>126628	30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30
>126638	30 30 30 30 30 30 30 30
>126640	30 30 30 30 30 30 30 30		.text $30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30
>126648	30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30
>126658	30 30 30 30 30 30 30 30
>126660	30 30 30 30 30 30 30 30		.text $30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30
>126668	30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30
>126678	30 30 30 30 30 30 30 30
>126680	30 30 30 30 30 30 30 30		.text $30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30
>126688	30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30
>126698	30 30 30 30 30 30 30 30
>1266a0	30 30 30 30 30 30 30 30		.text $30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30
>1266a8	30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30
>1266b8	30 30 30 30 30 30 30 30
>1266c0	30 30 30 30 30 30 30 30		.text $30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30
>1266c8	30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30
>1266d8	30 30 30 30 30 30 30 30
>1266e0	30 30 30 30 30 30 30 30		.text $30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30
>1266e8	30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30
>1266f8	30 30 30 30 30 30 30 30
>126700	30 30 30 30 30 30 30 30		.text $30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30
>126708	30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30
>126718	30 30 30 30 30 30 30 30
>126720	30 30 30 30 30 30 30 30		.text $30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30
>126728	30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30
>126738	30 30 30 30 30 30 30 30
>126740	30 30 30 30 30 30 30 30		.text $30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30
>126748	30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30
>126758	30 30 30 30 30 30 30 30
>126760	30 30 30 30 30 30 30 30		.text $30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30
>126768	30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30
>126778	30 30 30 30 30 30 30 30
>126780	30 30 30 30 30 30 30 30		.text $30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30
>126788	30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30
>126798	30 30 30 30 30 30 30 30
>1267a0	30 30 30 30 30 30 30 30		.text $30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30
>1267a8	30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30
>1267b8	30 30 30 30 30 30 30 30
>1267c0	30 30 30 30 30 30 30 30		.text $30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30
>1267c8	30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30
>1267d8	30 30 30 30 30 30 30 30
>1267e0	30 30 30 30 30 30 30 30		.text $30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$35,$36,$37,$38
>1267e8	30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30
>1267f8	30 30 30 30 35 36 37 38
>126800	31 32 33 34 30 30 30 30		.text $31,$32,$33,$34,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30
>126808	30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30
>126818	30 30 30 30 30 30 30 30
>126820	30 30 30 30 30 30 30 30		.text $30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30
>126828	30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30
>126838	30 30 30 30 30 30 30 30
>126840	30 30 30 30 30 30 30 30		.text $30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30
>126848	30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30
>126858	30 30 30 30 30 30 30 30
>126860	30 30 30 30 30 30 30 30		.text $30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30
>126868	30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30
>126878	30 30 30 30 30 30 30 30
>126880	30 30 30 30 30 30 30 30		.text $30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30
>126888	30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30
>126898	30 30 30 30 30 30 30 30
>1268a0	30 30 30 30 30 30 30 30		.text $30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30
>1268a8	30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30
>1268b8	30 30 30 30 30 30 30 30
>1268c0	30 30 30 30 30 30 30 30		.text $30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30
>1268c8	30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30
>1268d8	30 30 30 30 30 30 30 30
>1268e0	30 30 30 30 30 30 30 30		.text $30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30
>1268e8	30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30
>1268f8	30 30 30 30 30 30 30 30
>126900	30 30 30 30 30 30 30 30		.text $30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30
>126908	30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30
>126918	30 30 30 30 30 30 30 30
>126920	30 30 30 30 30 30 30 30		.text $30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30
>126928	30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30
>126938	30 30 30 30 30 30 30 30
>126940	30 30 30 30 30 30 30 30		.text $30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30
>126948	30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30
>126958	30 30 30 30 30 30 30 30
>126960	30 30 30 30 30 30 30 30		.text $30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30
>126968	30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30
>126978	30 30 30 30 30 30 30 30
>126980	30 30 30 30 30 30 30 30		.text $30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30
>126988	30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30
>126998	30 30 30 30 30 30 30 30
>1269a0	30 30 30 30 30 30 30 30		.text $30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30
>1269a8	30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30
>1269b8	30 30 30 30 30 30 30 30
>1269c0	30 30 30 30 30 30 30 30		.text $30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30
>1269c8	30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30
>1269d8	30 30 30 30 30 30 30 30
>1269e0	30 30 30 30 30 30 30 30		.text $30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$35,$36,$37,$38
>1269e8	30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30
>1269f8	30 30 30 30 35 36 37 38
>126a00	31 32 33 34 30 30 30 30		.text $31,$32,$33,$34,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30
>126a08	30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30
>126a18	30 30 30 30 30 30 30 30
>126a20	30 30 30 30 30 30 30 30		.text $30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30
>126a28	30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30
>126a38	30 30 30 30 30 30 30 30
>126a40	30 30 30 30 30 30 30 30		.text $30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30
>126a48	30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30
>126a58	30 30 30 30 30 30 30 30
>126a60	30 30 30 30 30 30 30 30		.text $30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30
>126a68	30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30
>126a78	30 30 30 30 30 30 30 30
>126a80	30 30 30 30 30 30 30 30		.text $30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30
>126a88	30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30
>126a98	30 30 30 30 30 30 30 30
>126aa0	30 30 30 30 30 30 30 30		.text $30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30
>126aa8	30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30
>126ab8	30 30 30 30 30 30 30 30
>126ac0	30 30 30 30 30 30 30 30		.text $30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30
>126ac8	30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30
>126ad8	30 30 30 30 30 30 30 30
>126ae0	30 30 30 30 30 30 30 30		.text $30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30
>126ae8	30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30
>126af8	30 30 30 30 30 30 30 30
>126b00	30 30 30 30 30 30 30 30		.text $30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30
>126b08	30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30
>126b18	30 30 30 30 30 30 30 30
>126b20	30 30 30 30 30 30 30 30		.text $30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30
>126b28	30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30
>126b38	30 30 30 30 30 30 30 30
>126b40	30 30 30 30 30 30 30 30		.text $30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30
>126b48	30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30
>126b58	30 30 30 30 30 30 30 30
>126b60	30 30 30 30 30 30 30 30		.text $30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30
>126b68	30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30
>126b78	30 30 30 30 30 30 30 30
>126b80	30 30 30 30 30 30 30 30		.text $30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30
>126b88	30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30
>126b98	30 30 30 30 30 30 30 30
>126ba0	30 30 30 30 30 30 30 30		.text $30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30
>126ba8	30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30
>126bb8	30 30 30 30 30 30 30 30
>126bc0	30 30 30 30 30 30 30 30		.text $30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30
>126bc8	30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30
>126bd8	30 30 30 30 30 30 30 30
>126be0	30 30 30 30 30 30 30 30		.text $30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$35,$36,$37,$38
>126be8	30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30
>126bf8	30 30 30 30 35 36 37 38
>126c00	31 32 33 34 30 30 30 30		.text $31,$32,$33,$34,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30
>126c08	30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30
>126c18	30 30 30 30 30 30 30 30
>126c20	30 30 30 30 30 30 30 30		.text $30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30
>126c28	30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30
>126c38	30 30 30 30 30 30 30 30
>126c40	30 30 30 30 30 30 30 30		.text $30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30
>126c48	30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30
>126c58	30 30 30 30 30 30 30 30
>126c60	30 30 30 30 30 30 30 30		.text $30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30
>126c68	30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30
>126c78	30 30 30 30 30 30 30 30
>126c80	30 30 30 30 30 30 30 30		.text $30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30
>126c88	30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30
>126c98	30 30 30 30 30 30 30 30
>126ca0	30 30 30 30 30 30 30 30		.text $30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30
>126ca8	30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30
>126cb8	30 30 30 30 30 30 30 30
>126cc0	30 30 30 30 30 30 30 30		.text $30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30
>126cc8	30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30
>126cd8	30 30 30 30 30 30 30 30
>126ce0	30 30 30 30 30 30 30 30		.text $30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30
>126ce8	30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30
>126cf8	30 30 30 30 30 30 30 30
>126d00	30 30 30 30 30 30 30 30		.text $30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30
>126d08	30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30
>126d18	30 30 30 30 30 30 30 30
>126d20	30 30 30 30 30 30 30 30		.text $30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30
>126d28	30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30
>126d38	30 30 30 30 30 30 30 30
>126d40	30 30 30 30 30 30 30 30		.text $30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30
>126d48	30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30
>126d58	30 30 30 30 30 30 30 30
>126d60	30 30 30 30 30 30 30 30		.text $30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30
>126d68	30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30
>126d78	30 30 30 30 30 30 30 30
>126d80	30 30 30 30 30 30 30 30		.text $30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30
>126d88	30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30
>126d98	30 30 30 30 30 30 30 30
>126da0	30 30 30 30 30 30 30 30		.text $30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30
>126da8	30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30
>126db8	30 30 30 30 30 30 30 30
>126dc0	30 30 30 30 30 30 30 30		.text $30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30
>126dc8	30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30
>126dd8	30 30 30 30 30 30 30 30
>126de0	30 30 30 30 30 30 30 30		.text $30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$35,$36,$37,$38
>126de8	30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30
>126df8	30 30 30 30 35 36 37 38
>126e00	31 32 33 34 30 30 30 30		.text $31,$32,$33,$34,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30
>126e08	30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30
>126e18	30 30 30 30 30 30 30 30
>126e20	30 30 30 30 30 30 30 30		.text $30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30
>126e28	30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30
>126e38	30 30 30 30 30 30 30 30
>126e40	30 30 30 30 30 30 30 30		.text $30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30
>126e48	30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30
>126e58	30 30 30 30 30 30 30 30
>126e60	30 30 30 30 30 30 30 30		.text $30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30
>126e68	30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30
>126e78	30 30 30 30 30 30 30 30
>126e80	30 30 30 30 30 30 30 30		.text $30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30
>126e88	30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30
>126e98	30 30 30 30 30 30 30 30
>126ea0	30 30 30 30 30 30 30 30		.text $30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30
>126ea8	30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30
>126eb8	30 30 30 30 30 30 30 30
>126ec0	30 30 30 30 30 30 30 30		.text $30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30
>126ec8	30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30
>126ed8	30 30 30 30 30 30 30 30
>126ee0	30 30 30 30 30 30 30 30		.text $30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30
>126ee8	30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30
>126ef8	30 30 30 30 30 30 30 30
>126f00	30 30 30 30 30 30 30 30		.text $30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30
>126f08	30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30
>126f18	30 30 30 30 30 30 30 30
>126f20	30 30 30 30 30 30 30 30		.text $30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30
>126f28	30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30
>126f38	30 30 30 30 30 30 30 30
>126f40	30 30 30 30 30 30 30 30		.text $30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30
>126f48	30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30
>126f58	30 30 30 30 30 30 30 30
>126f60	30 30 30 30 30 30 30 30		.text $30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30
>126f68	30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30
>126f78	30 30 30 30 30 30 30 30
>126f80	30 30 30 30 30 30 30 30		.text $30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30
>126f88	30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30
>126f98	30 30 30 30 30 30 30 30
>126fa0	30 30 30 30 30 30 30 30		.text $30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30
>126fa8	30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30
>126fb8	30 30 30 30 30 30 30 30
>126fc0	30 30 30 30 30 30 30 30		.text $30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30
>126fc8	30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30
>126fd8	30 30 30 30 30 30 30 30
>126fe0	30 30 30 30 30 30 30 30		.text $30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$35,$36,$37,$38
>126fe8	30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30
>126ff8	30 30 30 30 35 36 37 38
>127000	63 76 6e 63 62 6e 62 63		.text $63,$76,$6E,$63,$62,$6E,$62,$63,$6E,$63,$76,$62,$6E,$78,$20,$63,$76,$68,$6A,$20,$6E,$0D,$0A,$0D,$0A,$66,$67,$00,$00,$00,$00,$00
>127008	6e 63 76 62 6e 78 20 63 76 68 6a 20 6e 0d 0a 0d
>127018	0a 66 67 00 00 00 00 00
>127020	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>127028	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>127038	00 00 00 00 00 00 00 00
>127040	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>127048	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>127058	00 00 00 00 00 00 00 00
>127060	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>127068	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>127078	00 00 00 00 00 00 00 00
>127080	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>127088	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>127098	00 00 00 00 00 00 00 00
>1270a0	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>1270a8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1270b8	00 00 00 00 00 00 00 00
>1270c0	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>1270c8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1270d8	00 00 00 00 00 00 00 00
>1270e0	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>1270e8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1270f8	00 00 00 00 00 00 00 00
>127100	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>127108	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>127118	00 00 00 00 00 00 00 00
>127120	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>127128	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>127138	00 00 00 00 00 00 00 00
>127140	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>127148	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>127158	00 00 00 00 00 00 00 00
>127160	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>127168	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>127178	00 00 00 00 00 00 00 00
>127180	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>127188	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>127198	00 00 00 00 00 00 00 00
>1271a0	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>1271a8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1271b8	00 00 00 00 00 00 00 00
>1271c0	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>1271c8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1271d8	00 00 00 00 00 00 00 00
>1271e0	00 00 00 00 00 00 00 00		.text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>1271e8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1271f8	00 00 00 00 00 00 00 00

;******  Return to file: src\FAT32.asm


;******  Return to file: src\kernel.asm


;******  Processing file: src\Floppy.asm


;******  Processing file: src\Floppy_def.asm

=$af13f0				FDD_STATUS_A         = $AF13F0 ; Read     use in with PS2 and PS2 mode 30 noly
=$af13f1				FDD_STATUS_B         = $AF13F1 ; Read
=$af13f2				FDD_DIGITAL_OUTPUT   = $AF13F2 ; Read/Write
=$af13f3				FDD_TAPE_DRIVER      = $AF13F3 ; Read/Write
=$af13f4				FDD_MAIN_STATUE      = $AF13F4 ; Read
=$af13f4				FDD_DATA_RATE_SELECT = $AF13F4 ; Write
=$af13f5				FDD_FIFO             = $AF13F5 ; Read/Write
=$af13f7				FDD_DIGITAL_INPUT    = $AF13F7 ; Read
=$af13f7				FDD_CONFIG_CTRL      = $AF13F7 ; Write
=$01					FFD_DIRECTION         = $01 ; "1" Head is moving inward direction, "0" it moving outward direction
=$02					FDD_nWRITE_PROTECT    = $02 ; "0" protected / "1" unprotected
=$04					FDD_nINDEX            = $04 ;
=$08					FDD_HEAD_SELLECT      = $08 ; "1" side 1 selected / "0" side 0 selected
=$10					FDD_nTRACK0           = $10 ; "0" => head at track 0
=$20					FDD_STEP              = $20 ;
=$80					FDD_INTERRUPT_PENDING = $80 ; "1" interrupt output is active
=$01					FDD_nDIRECTION        = $01 ; "0" Head is moving inward direction, "1" it moving outward direction
=$02					FDD_WRITE_PROTECT     = $02 ; "1" protected / "0" unprotected
=$04					FDD_INDEX             = $04 ;
=$08					FDD_nHEAD_SELLECT     = $08 ; "0" side 1 selected / "1" side 0 selected
=$10					FDD_TRACK0            = $10 ; "1" => head at track 0
=$40					FDD_DMA_REQUEST       = $40 ; "1" => DMA requeste pending
=$01					FDD_MOTOR_ENABLE_0    = $01 ; "1" => motor enabled
=$02					FDD_MOTOR_ENABLE_1    = $02 ; "1" => motor enabled
=$04					FDD_WRITE_GATE        = $04 ;
=$08					FDD_READ_DATA_TOOGLE  = $08 ;
=$10					FDD_WRITE_DATA_TOOGLE = $10 ;
=$20					FDD_DRIVER_SELLECT_0  = $20 ; bit reflet the bite 0 in "Data Outpu Register"
=$08					FDD_READ_DATA         = $08 ;
=$01					FDD_WRITE_DATA        = $01 ;
=$40					FDD_nDRIVE_SELLECT_1  = $40 ;
=$03					FDD_DRIVE_SEL         = $03
=$04					FDD_nRESET            = $04 ; Set at 1 will reset the FDD write back 0 to reactivate it
=$08					FDD_DMAEN             = $08 ; Set at 1 will active the DMA and interupt IF in PC/AT and Model 30 mode otherwise alreaddy active
=$10					FDD_ENABLE_MOTOR_0    = $10
=$20					FDD_ENABLE_MOTOR_1    = $20
=$03					FDD_TAPE_SEL          = $03
=$0c					FDD_FLOPPY_BOOT_DRIVE = $0C
=$30					FDD_DRIVE_ID          = $30
=$03					FDD_DRIVER_BUSY       = $03
=$10					FDD_CMD_BUSSY         = $10 ; set to "1" when a command is in progress
=$20					FDD_NO_DMA            = $20
=$40					FDD_DIO               = $40
=$80					FDD_RQM               = $80
=$03					FDD_DATA_RATE         = $03
=$1c					FDD_PRE_COMP          = $1C
=$40					FDD_LOW_POWER         = $40 ; write 1 to activeate
=$80					FDD_SOFTWARE_RESET    = $80 ; write 1 to reset the controler , this bit will reset himself
=$01					FDD_nHIGH_ENSITY      = $01 ; "0" if 500Kbps or 1Mbps / "1" if 250 or 300Kpbs
=$06					FDD_DRATE_SEL_PS2     = $06
=$03					FDD_DRATE_SEL_MODE_30 = $03
=$04					FDD_NOPREC            = $04
=$08					FDD_DMAEN_MODE_30     = $08
=$80					FDD_DSKCHG            = $80 ; Disk Change state
=$03					FDD_DRATE_SEL         = $03
=$03					FDD_ST0_DRIVE_SELLECT       = $03 ; give the curent sellected drive
=$04					FDD_ST0_HEAD_ADDRESS        = $04
=$10					FDD_ST0_EQUIPMENT_CHeCK     = $10 ; "1" if fail
=$20					FDD_ST0_SEEK_END            = $20
=$c0					FDD_ST0_INTERRUPT_COE       = $C0 ; "00" Normal termination
=$01					FDD_ST1_MISSIG_ADDRESS_MARK = $01
=$02					FDD_ST1_NOT_WRITABLE        = $02
=$04					FDD_ST1_NO_DATA             = $04
=$10					FDD_ST1_OVERRUN_UDNERRUN    = $10
=$20					FDD_ST1_DATTA_ERROR         = $20
=$80					FDD_ST1_END_OF_CYLINDER     = $80
=$01					FDD_ST2_MISSIG_DATA_ADDRESS_MARK = $01
=$02					FDD_ST2_BAD_CYLINDER        = $02
=$10					FDD_ST2_WRONG_CYLINDER      = $10
=$20					FDD_ST2_DATA_ERROR_IN_DATA_FIELD = $20
=$40					FDD_ST2_CONTROL_MASK        = $40
=$03					FDD_ST3_DRIVE_SELLECT       = $03
=$04					FDD_ST3_HEAD_ADDRESS        = $04
=$10					FDD_ST3_TRACK_0             = $10
=$40					FDD_ST3_WRITE_PROTECT       = $40

;******  Return to file: src\Floppy.asm

=$19800					FAT12_ADDRESS_BUFFER_512 = $19800 ; RAM address where to store the sector read by the floppy READ_DATA function
=$19c00					FLOPPY_CMD_BUFFER = $19C00 ; 10 Byte buffer for the command to be send to the FDC and the the data recieved as a result of the command
>019a0a	2d 2d 2d 2d 2d 2d 2d 2d		minus_line       .text "-----------------------------------------------",$0A,$0D,0
>019a12	2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d
>019a22	2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d
>019a32	2d 2d 2d 2d 2d 2d 2d 0a 0d 00
.019a3c					FDD_Test
.019a3c	48		pha		                PHA             ; begin setdbr macro
.019a3d	08		php		                PHP
.019a3e	e2 20		sep #$20	                SEP #$20        ; set A short
.019a40	a9 01		lda #$01	                LDA #`minus_line
.019a42	48		pha		                PHA
.019a43	ab		plb		                PLB
.019a44	28		plp		                PLP
.019a45	68		pla		                PLA             ; end setdbr macro
.019a46	a2 0a 9a	ldx #$9a0a	                LDX #<>minus_line
.019a49	22 3d 44 38	jsl $38443d	                JSL UART_PUTS
.019a4d	22 a9 a6 01	jsl $01a6a9	                JSL IFDD_PRINT_REG  ; read the FDD register value
.019a51	c2 30		rep #$30	                REP #$30        ; set A&X long
.019a53	22 a6 9d 01	jsl $019da6	                JSL IFDD_INIT_AT
.019a57	22 a9 a6 01	jsl $01a6a9	                JSL IFDD_PRINT_REG  ; read the FDD register value
.019a5b					seek_loop
.019a5b	af 00 00 00	lda $000000	                LDA 0
.019a5f	48		pha		                PHA
.019a60	e2 20		sep #$20	                SEP #$20        ; set A short
.019a62	48		pha		                PHA             ; begin setdbr macro
.019a63	08		php		                PHP
.019a64	e2 20		sep #$20	                SEP #$20        ; set A short
.019a66	a9 af		lda #$af	                LDA #`$AFA200
.019a68	48		pha		                PHA
.019a69	ab		plb		                PLB
.019a6a	28		plp		                PLP
.019a6b	68		pla		                PLA             ; end setdbr macro
.019a6c	a2 00 00	ldx #$0000	                LDX #0
.019a6f	a9 00		lda #$00	                LDA #0
.019a71	9d 00 a0	sta $afa000,x	  ERAZE_SCREEN_1  STA $AFA000 ,X
.019a74	e8		inx		                INX
.019a75	e0 00 20	cpx #$2000	                CPX #$2000
.019a78	d0 f7		bne $019a71	                BNE ERAZE_SCREEN_1
.019a7a	48		pha		                PHA             ; begin setdbr macro
.019a7b	08		php		                PHP
.019a7c	e2 20		sep #$20	                SEP #$20        ; set A short
.019a7e	a9 af		lda #$af	                LDA #`$AFA200
.019a80	48		pha		                PHA
.019a81	ab		plb		                PLB
.019a82	28		plp		                PLP
.019a83	68		pla		                PLA             ; end setdbr macro
.019a84	a2 00 00	ldx #$0000	                LDX #0
.019a87	a9 00		lda #$00	seek_loop_2_     LDA #0
.019a89	9d 00 a2	sta $afa200,x	ERAZE_SCREEN_2  STA $AFA200 ,X
.019a8c	e8		inx		                INX
.019a8d	e0 00 20	cpx #$2000	                CPX #$2000
.019a90	d0 f7		bne $019a89	                BNE ERAZE_SCREEN_2
.019a92	a9 00		lda #$00	                 LDA #0                      ; Floppy driver to work with and side
.019a94	a2 01 00	ldx #$0001	                 LDX #1                      ; MFM:1/FM:0
.019a97	22 b2 a2 01	jsl $01a2b2	                 JSL IFDD_READ_ID
.019a9b	22 6c a6 01	jsl $01a66c	                 JSL IFDD_PRINT_FDD_MS_REG  ; read the FDD register value
.019a9f	22 28 a1 01	jsl $01a128	                 JSL IFDD_SENS_INTERRUPT_STATUS
.019aa3	22 6c a6 01	jsl $01a66c	                 JSL IFDD_PRINT_FDD_MS_REG  ; read the FDD register value
.019aa7	80 68		bra $019b11	                 BRA seek_loop_2
.019aa9	a9 01		lda #$01	                LDA #$1                     ; ND ("1":non-DMA mode / "0":DMA mode)
.019aab	48		pha		                PHA
.019aac	a9 00		lda #$00	                LDA #$0                     ; HLT (Head Load Time)
.019aae	48		pha		                PHA
.019aaf	a9 00		lda #$00	                LDA #$0                     ; HUT (Head Unload Time)
.019ab1	48		pha		                PHA
.019ab2	a9 00		lda #$00	                LDA #$0                     ; SRT (Step Rate Time)
.019ab4	48		pha		                PHA
.019ab5	68		pla		                PLA
.019ab6	68		pla		                PLA
.019ab7	68		pla		                PLA
.019ab8	68		pla		                PLA
.019ab9	e2 20		sep #$20	                SEP #$20        ; set A short
.019abb	a9 00		lda #$00	                LDA #0                      ; Floppy driver to work with and side
.019abd	a2 01 00	ldx #$0001	                LDX #1                      ; MFM:1/FM:0
.019ac0	22 b2 a2 01	jsl $01a2b2	                JSL IFDD_READ_ID
.019ac4	22 28 a1 01	jsl $01a128	                JSL IFDD_SENS_INTERRUPT_STATUS
.019ac8	e2 20		sep #$20	                SEP #$20        ; set A short
.019aca	a9 00		lda #$00	                LDA #$0                    ; R (Sector Adress)
.019acc	48		pha		                PHA
.019acd	a9 00		lda #$00	                LDA #$0                    ; H (Head Address)
.019acf	48		pha		                PHA
.019ad0	a9 00		lda #$00	                LDA #$0                    ; C (Cylender Adress)
.019ad2	48		pha		                PHA
.019ad3	a9 aa		lda #$aa	                LDA #$AA                    ; D (Byte filler)
.019ad5	48		pha		                PHA
.019ad6	a9 54		lda #$54	                LDA #$54                    ; GPL (Gap3)
.019ad8	48		pha		                PHA
.019ad9	a9 09		lda #$09	                LDA #$9                    ; SC (Sector Per Cylender)
.019adb	48		pha		                PHA
.019adc	a9 02		lda #$02	                LDA #$2                    ; N (Byte per sector)
.019ade	48		pha		                PHA
.019adf	a9 00		lda #$00	                LDA #$0                    ; HDS/DS1-DS0 (Head DRIVE1-Drive0)
.019ae1	48		pha		                PHA
.019ae2	a9 01		lda #$01	                LDA #$1                    ; MFM
.019ae4	48		pha		                PHA
.019ae5	a9 ff		lda #$ff	                LDA #$FF
.019ae7	22 3f 9f 01	jsl $019f3f	                JSL IFDD_FORMAT_TRACK
.019aeb	68		pla		                PLA
.019aec	68		pla		                PLA
.019aed	68		pla		                PLA
.019aee	68		pla		                PLA
.019aef	68		pla		                PLA
.019af0	68		pla		                PLA
.019af1	68		pla		                PLA
.019af2	68		pla		                PLA
.019af3	68		pla		                PLA
.019af4	c2 30		rep #$30	                REP #$30        ; set A&X long
.019af6	a2 88 13	ldx #$1388	                LDX #5000
.019af9	22 92 18 39	jsl $391892	                JSL ILOOP_MS
.019afd	e2 20		sep #$20	                SEP #$20        ; set A short
.019aff	af 00 00 00	lda $000000	                LDA 0
.019b03	a2 01 00	ldx #$0001	                LDX #1                      ; MFM:1/FM:0
.019b06	22 b2 a2 01	jsl $01a2b2	                JSL IFDD_READ_ID
.019b0a	a2 d0 07	ldx #$07d0	                LDX #2000
.019b0d	22 92 18 39	jsl $391892	                JSL ILOOP_MS
.019b11					seek_loop_2
.019b11	e2 20		sep #$20	                SEP #$20        ; set A short
.019b13	a9 00		lda #$00	                LDA #0
.019b15	a2 0a 00	ldx #$000a	                LDX #10
.019b18	22 1e a2 01	jsl $01a21e	                JSL IFDD_SEEKRELATIF_UP ;JSL IFDD_SEEK
.019b1c	a2 20 4e	ldx #$4e20	                LDX #20000
.019b1f	22 92 18 39	jsl $391892	                JSL ILOOP_MS
.019b23	e2 20		sep #$20	                SEP #$20        ; set A short
.019b25	a9 00		lda #$00	                LDA #0
.019b27	a2 14 00	ldx #$0014	                LDX #20
.019b2a	22 1e a2 01	jsl $01a21e	                JSL IFDD_SEEKRELATIF_UP ;JSL IFDD_SEEK
.019b2e	a2 20 4e	ldx #$4e20	                LDX #20000
.019b31	22 92 18 39	jsl $391892	                JSL ILOOP_MS
.019b35	e2 20		sep #$20	                SEP #$20        ; set A short
.019b37	a9 00		lda #$00	                LDA #0
.019b39	a2 14 00	ldx #$0014	                LDX #20
.019b3c	22 68 a2 01	jsl $01a268	                JSL IFDD_SEEKRELATIF_DOWN ;JSL IFDD_SEEK
.019b40	a2 20 4e	ldx #$4e20	                LDX #20000
.019b43	22 92 18 39	jsl $391892	                JSL ILOOP_MS
.019b47	e2 20		sep #$20	                SEP #$20        ; set A short
.019b49	a9 00		lda #$00	                LDA #0
.019b4b	a2 05 00	ldx #$0005	                LDX #5
.019b4e	22 1e a2 01	jsl $01a21e	                JSL IFDD_SEEKRELATIF_UP ;JSL IFDD_SEEK
.019b52	a2 20 4e	ldx #$4e20	                LDX #20000
.019b55	22 92 18 39	jsl $391892	                JSL ILOOP_MS
.019b59	e2 20		sep #$20	                SEP #$20        ; set A short
.019b5b	a9 00		lda #$00	                LDA #0
.019b5d	a2 0a 00	ldx #$000a	                LDX #10
.019b60	22 68 a2 01	jsl $01a268	                JSL IFDD_SEEKRELATIF_DOWN ;JSL IFDD_SEEK
.019b64	a2 20 4e	ldx #$4e20	                LDX #20000
.019b67	22 92 18 39	jsl $391892	                JSL ILOOP_MS
.019b6b	e2 20		sep #$20	                SEP #$20        ; set A short
.019b6d	a9 00		lda #$00	                LDA #0
.019b6f	a2 05 00	ldx #$0005	                LDX #5
.019b72	22 68 a2 01	jsl $01a268	                JSL IFDD_SEEKRELATIF_DOWN ;JSL IFDD_SEEK
.019b76	a2 20 4e	ldx #$4e20	                LDX #20000
.019b79	22 92 18 39	jsl $391892	                JSL ILOOP_MS
.019b7d	22 28 a1 01	jsl $01a128	                JSL IFDD_SENS_INTERRUPT_STATUS
.019b81	e2 20		sep #$20	                SEP #$20        ; set A short
.019b83	af 00 00 00	lda $000000	                LDA 0
.019b87	a2 01 00	ldx #$0001	                LDX #1                      ; MFM:1/FM:0
.019b8a	a9 00		lda #$00	                LDA #0            ; Sellect the floppy disc drive 0
.019b8c	a2 20 4e	ldx #$4e20	                LDX #20000
.019b8f	22 92 18 39	jsl $391892	                JSL ILOOP_MS
.019b93	22 5f 9c 01	jsl $019c5f	                JSL IFDD_MOTOR_0_OFF
.019b97	a2 20 4e	ldx #$4e20	                LDX #20000
.019b9a	22 92 18 39	jsl $391892	                JSL ILOOP_MS
.019b9e	22 4d 9c 01	jsl $019c4d	                JSL IFDD_MOTOR_0_ON
.019ba2	a2 20 4e	ldx #$4e20	                LDX #20000
.019ba5	22 92 18 39	jsl $391892	                JSL ILOOP_MS
.019ba9	82 65 ff	brl $019b11	                BRL seek_loop_2
.019bac	22 a9 a6 01	jsl $01a6a9	                JSL IFDD_PRINT_REG  ; read the FDD register value
.019bb0	c2 30		rep #$30	                REP #$30        ; set A&X long
.019bb2	a2 20 4e	ldx #$4e20	                LDX #20000
.019bb5	22 92 18 39	jsl $391892	                JSL ILOOP_MS
.019bb9	22 a9 a6 01	jsl $01a6a9	                JSL IFDD_PRINT_REG  ; read the FDD register value
.019bbd	c2 30		rep #$30	                REP #$30        ; set A&X long
.019bbf	a2 f4 01	ldx #$01f4	                LDX #500
.019bc2	22 92 18 39	jsl $391892	                JSL ILOOP_MS
.019bc6	22 a9 a6 01	jsl $01a6a9	                JSL IFDD_PRINT_REG  ; read the FDD register value
.019bca	c2 30		rep #$30	                REP #$30        ; set A&X long
.019bcc	a2 20 4e	ldx #$4e20	                LDX #20000
.019bcf	22 92 18 39	jsl $391892	                JSL ILOOP_MS
.019bd3	e2 20		sep #$20	                SEP #$20        ; set A short
.019bd5	a9 00		lda #$00	                LDA #0
.019bd7	a2 0f 00	ldx #$000f	                LDX #15
.019bda	22 d6 a1 01	jsl $01a1d6	                JSL IFDD_SEEK
.019bde	22 a9 a6 01	jsl $01a6a9	                JSL IFDD_PRINT_REG  ; read the FDD register value
.019be2	c2 30		rep #$30	                REP #$30        ; set A&X long
.019be4	a2 88 13	ldx #$1388	                LDX #5000
.019be7	22 92 18 39	jsl $391892	                JSL ILOOP_MS
.019beb	80 00		bra $019bed	                BRA next_instruction
.019bed					seek_loop_step1
.019bed					next_instruction
.019bed	48		pha		                PHA             ; begin setdbr macro
.019bee	08		php		                PHP
.019bef	e2 20		sep #$20	                SEP #$20        ; set A short
.019bf1	a9 01		lda #$01	                LDA #`minus_line
.019bf3	48		pha		                PHA
.019bf4	ab		plb		                PLB
.019bf5	28		plp		                PLP
.019bf6	68		pla		                PLA             ; end setdbr macro
.019bf7	a2 0a 9a	ldx #$9a0a	                LDX #<>minus_line
.019bfa	22 3d 44 38	jsl $38443d	                JSL UART_PUTS
.019bfe	a2 0a 9a	ldx #$9a0a	                LDX #<>minus_line
.019c01	22 3d 44 38	jsl $38443d	                JSL UART_PUTS
.019c05	c2 30		rep #$30	                REP #$30        ; set A&X long
.019c07	a2 f4 01	ldx #$01f4	                LDX #500
.019c0a	22 92 18 39	jsl $391892	                JSL ILOOP_MS
.019c0e	e2 20		sep #$20	                SEP #$20        ; set A short
.019c10	a9 00		lda #$00	                LDA #0
.019c12	22 32 a3 01	jsl $01a332	                JSL IFDD_GET_DRIVE_STATUS
.019c16	e2 20		sep #$20	                SEP #$20        ; set A short
.019c18	48		pha		                PHA             ; begin setdbr macro
.019c19	08		php		                PHP
.019c1a	e2 20		sep #$20	                SEP #$20        ; set A short
.019c1c	a9 01		lda #$01	                LDA #`FLOPPY_CMD_BUFFER
.019c1e	48		pha		                PHA
.019c1f	ab		plb		                PLB
.019c20	28		plp		                PLP
.019c21	68		pla		                PLA             ; end setdbr macro
.019c22	ad 00 9c	lda $019c00	                LDA FLOPPY_CMD_BUFFER
.019c25	22 4e 44 38	jsl $38444e	                JSL UART_PUTHEX
.019c29	a9 0a		lda #$0a	                LDA #$A
.019c2b	22 1a 44 38	jsl $38441a	                JSL UART_PUTC
.019c2f	a9 0d		lda #$0d	                LDA #$D
.019c31	22 1a 44 38	jsl $38441a	                JSL UART_PUTC
.019c35	48		pha		                PHA             ; begin setdbr macro
.019c36	08		php		                PHP
.019c37	e2 20		sep #$20	                SEP #$20        ; set A short
.019c39	a9 01		lda #$01	                LDA #`minus_line
.019c3b	48		pha		                PHA
.019c3c	ab		plb		                PLB
.019c3d	28		plp		                PLP
.019c3e	68		pla		                PLA             ; end setdbr macro
.019c3f	a2 0a 9a	ldx #$9a0a	                LDX #<>minus_line
.019c42	22 3d 44 38	jsl $38443d	                JSL UART_PUTS
.019c46	22 5f 9c 01	jsl $019c5f	                JSL IFDD_MOTOR_0_OFF
.019c4a	80 a1		bra $019bed	                BRA seek_loop_step1
.019c4c	6b		rtl		                RTL
.019c4d					IFDD_MOTOR_0_ON
.019c4d	e2 20		sep #$20	                SEP #$20        ; set A short
.019c4f	48		pha		                PHA             ; begin setdbr macro
.019c50	08		php		                PHP
.019c51	e2 20		sep #$20	                SEP #$20        ; set A short
.019c53	a9 af		lda #$af	                LDA #`FDD_DIGITAL_OUTPUT
.019c55	48		pha		                PHA
.019c56	ab		plb		                PLB
.019c57	28		plp		                PLP
.019c58	68		pla		                PLA             ; end setdbr macro
.019c59	a9 10		lda #$10	                LDA #FDD_ENABLE_MOTOR_0
.019c5b	0c f2 13	tsb $af13f2	                TSB FDD_DIGITAL_OUTPUT
.019c5e	6b		rtl		                RTL
.019c5f					IFDD_MOTOR_0_OFF
.019c5f	e2 20		sep #$20	                SEP #$20        ; set A short
.019c61	48		pha		                PHA             ; begin setdbr macro
.019c62	08		php		                PHP
.019c63	e2 20		sep #$20	                SEP #$20        ; set A short
.019c65	a9 af		lda #$af	                LDA #`FDD_DIGITAL_OUTPUT
.019c67	48		pha		                PHA
.019c68	ab		plb		                PLB
.019c69	28		plp		                PLP
.019c6a	68		pla		                PLA             ; end setdbr macro
.019c6b	a9 10		lda #$10	                LDA #FDD_ENABLE_MOTOR_0
.019c6d	1c f2 13	trb $af13f2	                TRB FDD_DIGITAL_OUTPUT
.019c70	6b		rtl		                RTL
.019c71					IFDD_MOTOR_ALL_OFF
.019c71	e2 20		sep #$20	                SEP #$20        ; set A short
.019c73	48		pha		                PHA             ; begin setdbr macro
.019c74	08		php		                PHP
.019c75	e2 20		sep #$20	                SEP #$20        ; set A short
.019c77	a9 af		lda #$af	                LDA #`FDD_DIGITAL_OUTPUT
.019c79	48		pha		                PHA
.019c7a	ab		plb		                PLB
.019c7b	28		plp		                PLP
.019c7c	68		pla		                PLA             ; end setdbr macro
.019c7d	a9 10		lda #$10	                LDA #FDD_ENABLE_MOTOR_0
.019c7f	1c f2 13	trb $af13f2	                TRB FDD_DIGITAL_OUTPUT
.019c82	a9 20		lda #$20	                LDA #FDD_ENABLE_MOTOR_1
.019c84	1c f2 13	trb $af13f2	                TRB FDD_DIGITAL_OUTPUT
.019c87	6b		rtl		                RTL
.019c88					IFDD_TRANSFERT_OK
.019c88	08		php		                PHP
.019c89	0b		phd		                PHD
.019c8a	c2 30		rep #$30	                REP #$30        ; set A&X long
.019c8c	da		phx		                PHX
.019c8d	48		pha		                PHA             ; save the value before converting the High part into ASCII
.019c8e	e2 20		sep #$20	                SEP #$20        ; set A short
.019c90	c2 30		rep #$30	                REP #$30        ; set A&X long
.019c92	68		pla		                PLA
.019c93	fa		plx		                PLX
.019c94	2b		pld		                PLD
.019c95	28		plp		                PLP
.019c96	6b		rtl		                RTL
.019c97					SCREEN_PUTHEX
.019c97	08		php		                PHP
.019c98	0b		phd		                PHD
.019c99	c2 30		rep #$30	                REP #$30        ; set A&X long
.019c9b	da		phx		                PHX
.019c9c	48		pha		                PHA             ; save the value before converting the High part into ASCII
.019c9d	e2 20		sep #$20	                SEP #$20        ; set A short
.019c9f	a3 01		lda $01,s	                LDA #1, S       ; get the original value out of the stack
.019ca1	4a		lsr a		                LSR A             ; Extracting the high part of the byte
.019ca2	4a		lsr a		                LSR A
.019ca3	4a		lsr a		                LSR A
.019ca4	4a		lsr a		                LSR A
.019ca5	c2 20		rep #$20	                REP #$20        ; set A long
.019ca7	29 0f 00	and #$000f	                AND #$F
.019caa	aa		tax		                LDX A
.019cab	e2 20		sep #$20	                SEP #$20        ; set A short
.019cad	bf 44 1d 39	lda $391d44,x	                LDA hex_digits,x
.019cb1	48		pha		                PHA
.019cb2	c2 20		rep #$20	                REP #$20        ; set A long
.019cb4	a3 04		lda $04,s	                LDA #4, S
.019cb6	aa		tax		                TAX
.019cb7	e2 20		sep #$20	                SEP #$20        ; set A short
.019cb9	68		pla		                PLA
.019cba	48		pha		                PHA             ; begin setdbr macro
.019cbb	08		php		                PHP
.019cbc	e2 20		sep #$20	                SEP #$20        ; set A short
.019cbe	a9 af		lda #$af	                LDA #`$AFA000
.019cc0	48		pha		                PHA
.019cc1	ab		plb		                PLB
.019cc2	28		plp		                PLP
.019cc3	68		pla		                PLA             ; end setdbr macro
.019cc4	9d 00 a0	sta $afa000,x	                STA $AFA000,x
.019cc7	a3 01		lda $01,s	                LDA #1, S       ; get the original value out of the stack
.019cc9	c2 20		rep #$20	                REP #$20        ; set A long
.019ccb	29 0f 00	and #$000f	                AND #$F         ; Extracting the low part of the byte
.019cce	aa		tax		                LDX A
.019ccf	e2 20		sep #$20	                SEP #$20        ; set A short
.019cd1	bf 44 1d 39	lda $391d44,x	                LDA hex_digits,x
.019cd5	48		pha		                PHA
.019cd6	c2 20		rep #$20	                REP #$20        ; set A long
.019cd8	a3 04		lda $04,s	                LDA #4, S
.019cda	aa		tax		                TAX
.019cdb	e2 20		sep #$20	                SEP #$20        ; set A short
.019cdd	68		pla		                PLA
.019cde	e8		inx		                INX
.019cdf	48		pha		                PHA             ; begin setdbr macro
.019ce0	08		php		                PHP
.019ce1	e2 20		sep #$20	                SEP #$20        ; set A short
.019ce3	a9 af		lda #$af	                LDA #`$AFA000
.019ce5	48		pha		                PHA
.019ce6	ab		plb		                PLB
.019ce7	28		plp		                PLP
.019ce8	68		pla		                PLA             ; end setdbr macro
.019ce9	9d 00 a0	sta $afa000,x	                STA $AFA000,x
.019cec	c2 30		rep #$30	                REP #$30        ; set A&X long
.019cee	68		pla		                PLA
.019cef	fa		plx		                PLX
.019cf0	2b		pld		                PLD
.019cf1	28		plp		                PLP
.019cf2	6b		rtl		                RTL
.019cf3					IFDD_READ_FDD
.019cf3	08		php		                PHP
.019cf4	0b		phd		                PHD
.019cf5	c2 30		rep #$30	                REP #$30        ; set A&X long
.019cf7	da		phx		                PHX
.019cf8	48		pha		                PHA
.019cf9	e2 20		sep #$20	                SEP #$20        ; set A short
.019cfb	a3 01		lda $01,s	                LDA #1, S
.019cfd	a2 05 02	ldx #$0205	                LDX #$205
.019d00	22 97 9c 01	jsl $019c97	                JSL SCREEN_PUTHEX
.019d04	48		pha		                PHA             ; begin setdbr macro
.019d05	08		php		                PHP
.019d06	e2 20		sep #$20	                SEP #$20        ; set A short
.019d08	a9 af		lda #$af	                LDA #`$AFA200
.019d0a	48		pha		                PHA
.019d0b	ab		plb		                PLB
.019d0c	28		plp		                PLP
.019d0d	68		pla		                PLA             ; end setdbr macro
.019d0e	a2 00 00	ldx #$0000	                LDX #0
.019d11	9d 00 a2	sta $afa200,x	                STA $AFA200,x
.019d14	68		pla		                PLA
.019d15	48		pha		                PHA             ; begin setdbr macro
.019d16	08		php		                PHP
.019d17	e2 20		sep #$20	                SEP #$20        ; set A short
.019d19	a9 01		lda #$01	                LDA #`FLOPPY_CMD_BUFFER
.019d1b	48		pha		                PHA
.019d1c	ab		plb		                PLB
.019d1d	28		plp		                PLP
.019d1e	68		pla		                PLA             ; end setdbr macro
.019d1f	8d 04 9c	sta $019c04	                STA FLOPPY_CMD_BUFFER+4   ; R : Sector Address
.019d22	a9 46		lda #$46	                LDA #$46 ;;;;;;;;
.019d24	8d 00 9c	sta $019c00	                STA FLOPPY_CMD_BUFFER     ; command code 0 : MT MFM SK  0 0 1   1   0
.019d27	8a		txa		                LDA X                     ; command code 1 : 0  0   0   0 0 HDS DS1 DS2
.019d28	29 07		and #$07	                AND #7
.019d2a	8d 01 9c	sta $019c01	                STA FLOPPY_CMD_BUFFER+1
.019d2d	af 00 00 00	lda $000000	                LDA 0                     ; C : Cylinder Address
.019d31	8d 02 9c	sta $019c02	                STA FLOPPY_CMD_BUFFER+2
.019d34	af 00 00 00	lda $000000	                LDA 0                     ; H : Head Address
.019d38	8d 03 9c	sta $019c03	                STA FLOPPY_CMD_BUFFER+3
.019d3b	af 02 00 00	lda $000002	                LDA 2                     ; N : Sector Size Code 0=>128 / 1=>256 / 2=>512
.019d3f	8d 05 9c	sta $019c05	                STA FLOPPY_CMD_BUFFER+5
.019d42	af 01 00 00	lda $000001	                LDA 1                     ; EOT : End of Track
.019d46	8d 06 9c	sta $019c06	                STA FLOPPY_CMD_BUFFER+6
.019d49	af 00 00 00	lda $000000	                LDA 0                     ; GPL : Gap Length
.019d4d	8d 07 9c	sta $019c07	                STA FLOPPY_CMD_BUFFER+7
.019d50	af 02 00 00	lda $000002	                LDA 2                     ; DTL : Special Sector Size Determin the number of byte to read / 2=>512 ???
.019d54	8d 08 9c	sta $019c08	                STA FLOPPY_CMD_BUFFER+8
.019d57	48		pha		                PHA             ; begin setdbr macro
.019d58	08		php		                PHP
.019d59	e2 20		sep #$20	                SEP #$20        ; set A short
.019d5b	a9 01		lda #$01	                LDA #`Text_READ
.019d5d	48		pha		                PHA
.019d5e	ab		plb		                PLB
.019d5f	28		plp		                PLP
.019d60	68		pla		                PLA             ; end setdbr macro
.019d61	a2 62 a8	ldx #$a862	                LDX #<>Text_READ
.019d64	22 3d 44 38	jsl $38443d	                JSL UART_PUTS
.019d68	a9 09		lda #$09	                LDA #9                    ; number of command Bytes
.019d6a	22 69 a3 01	jsl $01a369	                JSL IFDD_SEND_CMD
.019d6e	e2 20		sep #$20	                SEP #$20        ; set A short
.019d70	0b		phd		                PHD
.019d71	08		php		                PHP
.019d72	22 76 a5 01	jsl $01a576	                JSL IFDD_READ_DATA_FIFO
.019d76	08		php		                PHP
.019d77	0b		phd		                PHD
.019d78	e2 20		sep #$20	                SEP #$20        ; set A short
.019d7a	c9 01		cmp #$01	                CMP #1
.019d7c	a9 07		lda #$07	                LDA #7
.019d7e	48		pha		                PHA
.019d7f	48		pha		                PHA             ; begin setdbr macro
.019d80	08		php		                PHP
.019d81	e2 20		sep #$20	                SEP #$20        ; set A short
.019d83	a9 01		lda #$01	                LDA #`Text_Stop_Rx_FIFO
.019d85	48		pha		                PHA
.019d86	ab		plb		                PLB
.019d87	28		plp		                PLP
.019d88	68		pla		                PLA             ; end setdbr macro
.019d89	a2 f3 a9	ldx #$a9f3	                LDX #<>Text_Stop_Rx_FIFO
.019d8c	22 3d 44 38	jsl $38443d	                JSL UART_PUTS
.019d90	68		pla		                PLA                    ; number of Bytes to read
.019d91	22 6f a4 01	jsl $01a46f	                JSL IFDD_READ_CMD_RESULT
.019d95	22 28 a1 01	jsl $01a128	                JSL IFDD_SENS_INTERRUPT_STATUS
.019d99	22 5f 9c 01	jsl $019c5f	                JSL IFDD_MOTOR_0_OFF
.019d9d	80 fe		bra $019d9d	DEBUG_INF_LOOP                BRA DEBUG_INF_LOOP
.019d9f	c2 30		rep #$30	                REP #$30        ; set A&X long
.019da1	68		pla		                PLA
.019da2	fa		plx		                PLX
.019da3	2b		pld		                PLD
.019da4	28		plp		                PLP
.019da5	6b		rtl		                RTL
.019da6					IFDD_INIT_AT
.019da6	c2 30		rep #$30	                REP #$30        ; set A&X long
.019da8	48		pha		                PHA             ; begin setdbr macro
.019da9	08		php		                PHP
.019daa	e2 20		sep #$20	                SEP #$20        ; set A short
.019dac	a9 01		lda #$01	                LDA #`Text_INIT_AT
.019dae	48		pha		                PHA
.019daf	ab		plb		                PLB
.019db0	28		plp		                PLP
.019db1	68		pla		                PLA             ; end setdbr macro
.019db2	a2 cc a7	ldx #$a7cc	                LDX #<>Text_INIT_AT
.019db5	22 3d 44 38	jsl $38443d	                JSL UART_PUTS
.019db9	22 30 9e 01	jsl $019e30	                JSL IFDD_RESET_FULL         ; Reset FDD : No DMA, Drive 0 selected, no motor activated
.019dbd	48		pha		                PHA             ; begin setdbr macro
.019dbe	08		php		                PHP
.019dbf	e2 20		sep #$20	                SEP #$20        ; set A short
.019dc1	a9 af		lda #$af	                LDA #`FDD_DATA_RATE_SELECT
.019dc3	48		pha		                PHA
.019dc4	ab		plb		                PLB
.019dc5	28		plp		                PLP
.019dc6	68		pla		                PLA             ; end setdbr macro
.019dc7	a9 00		lda #$00	                LDA #$00
.019dc9	8d f4 13	sta $af13f4	                STA FDD_DATA_RATE_SELECT
.019dcc	48		pha		                PHA             ; begin setdbr macro
.019dcd	08		php		                PHP
.019dce	e2 20		sep #$20	                SEP #$20        ; set A short
.019dd0	a9 af		lda #$af	                LDA #`FDD_CONFIG_CTRL
.019dd2	48		pha		                PHA
.019dd3	ab		plb		                PLB
.019dd4	28		plp		                PLP
.019dd5	68		pla		                PLA             ; end setdbr macro
.019dd6	a9 00		lda #$00	                LDA #$00
.019dd8	8d f7 13	sta $af13f7	                STA FDD_CONFIG_CTRL         ; 500kbs on MFM modr
.019ddb	48		pha		                PHA             ; begin setdbr macro
.019ddc	08		php		                PHP
.019ddd	e2 20		sep #$20	                SEP #$20        ; set A short
.019ddf	a9 af		lda #$af	                LDA #`FDD_DIGITAL_OUTPUT
.019de1	48		pha		                PHA
.019de2	ab		plb		                PLB
.019de3	28		plp		                PLP
.019de4	68		pla		                PLA             ; end setdbr macro
.019de5	a9 10		lda #$10	                LDA #$10                    ; active drive motor output 0 and sellect drive 0 (bit 0-1)
.019de7	0c f2 13	tsb $af13f2	                TSB FDD_DIGITAL_OUTPUT      ; Set the reset bit to exit the reset mode  "Test and Reset Memory Bits Against Accumulator"
.019dea	6b		rtl		                RTL
.019deb					IFDD_RESET
.019deb	48		pha		                PHA             ; begin setdbr macro
.019dec	08		php		                PHP
.019ded	e2 20		sep #$20	                SEP #$20        ; set A short
.019def	a9 af		lda #$af	                LDA #`FDD_DIGITAL_OUTPUT
.019df1	48		pha		                PHA
.019df2	ab		plb		                PLB
.019df3	28		plp		                PLP
.019df4	68		pla		                PLA             ; end setdbr macro
.019df5	a9 04		lda #$04	                LDA #FDD_nRESET             ; reset the floppy disc controler, deactive all the motors and the DMA
.019df7	1c f2 13	trb $af13f2	                TRB FDD_DIGITAL_OUTPUT      ; Clear the reset bit to go in reset mode "Test and Reset Memory Bits Against Accumulator"
.019dfa	22 64 18 39	jsl $391864	                JSL ILOOP_1
.019dfe	48		pha		                PHA             ; begin setdbr macro
.019dff	08		php		                PHP
.019e00	e2 20		sep #$20	                SEP #$20        ; set A short
.019e02	a9 af		lda #$af	                LDA #`FDD_DATA_RATE_SELECT
.019e04	48		pha		                PHA
.019e05	ab		plb		                PLB
.019e06	28		plp		                PLP
.019e07	68		pla		                PLA             ; end setdbr macro
.019e08	a9 00		lda #$00	                LDA #0 ; LDA #2
.019e0a	8d f4 13	sta $af13f4	                STA FDD_DATA_RATE_SELECT    ; if in mode PC/AT or PS/2 the datarate is set in Config Control Register
.019e0d	22 8d 18 39	jsl $39188d	                JSL ILOOP_1MS
.019e11	48		pha		                PHA             ; begin setdbr macro
.019e12	08		php		                PHP
.019e13	e2 20		sep #$20	                SEP #$20        ; set A short
.019e15	a9 af		lda #$af	                LDA #`FDD_CONFIG_CTRL
.019e17	48		pha		                PHA
.019e18	ab		plb		                PLB
.019e19	28		plp		                PLP
.019e1a	68		pla		                PLA             ; end setdbr macro
.019e1b	a9 00		lda #$00	                LDA #0
.019e1d	8d f7 13	sta $af13f7	                STA FDD_CONFIG_CTRL
.019e20	48		pha		                PHA             ; begin setdbr macro
.019e21	08		php		                PHP
.019e22	e2 20		sep #$20	                SEP #$20        ; set A short
.019e24	a9 af		lda #$af	                LDA #`FDD_DIGITAL_OUTPUT
.019e26	48		pha		                PHA
.019e27	ab		plb		                PLB
.019e28	28		plp		                PLP
.019e29	68		pla		                PLA             ; end setdbr macro
.019e2a	a9 04		lda #$04	                LDA #FDD_nRESET             ; Load the reset bit to be set
.019e2c	0c f2 13	tsb $af13f2	                TSB FDD_DIGITAL_OUTPUT      ; Set the reset bit to exit the reset mode  "Test and Reset Memory Bits Against Accumulator"
.019e2f	6b		rtl		                RTL
.019e30					IFDD_RESET_FULL
.019e30	e2 20		sep #$20	                SEP #$20        ; set A short
.019e32	a9 00		lda #$00	                LDA #0                      ; Will set all the bit at 0 to reset everyting
.019e34	48		pha		                PHA             ; begin setdbr macro
.019e35	08		php		                PHP
.019e36	e2 20		sep #$20	                SEP #$20        ; set A short
.019e38	a9 af		lda #$af	                LDA #`FDD_DIGITAL_OUTPUT
.019e3a	48		pha		                PHA
.019e3b	ab		plb		                PLB
.019e3c	28		plp		                PLP
.019e3d	68		pla		                PLA             ; end setdbr macro
.019e3e	8d f2 13	sta $af13f2	                STA  FDD_DIGITAL_OUTPUT
.019e41	ea		nop		                NOP                         ; wait, the doc say 100ns min
.019e42	ea		nop		                NOP
.019e43	22 64 18 39	jsl $391864	                JSL ILOOP_1
.019e47	ea		nop		                NOP
.019e48	e2 20		sep #$20	                SEP #$20        ; set A short
.019e4a	a9 04		lda #$04	                LDA #FDD_nRESET
.019e4c	48		pha		                PHA             ; begin setdbr macro
.019e4d	08		php		                PHP
.019e4e	e2 20		sep #$20	                SEP #$20        ; set A short
.019e50	a9 af		lda #$af	                LDA #`FDD_DIGITAL_OUTPUT
.019e52	48		pha		                PHA
.019e53	ab		plb		                PLB
.019e54	28		plp		                PLP
.019e55	68		pla		                PLA             ; end setdbr macro
.019e56	8d f2 13	sta $af13f2	                STA FDD_DIGITAL_OUTPUT      ; Set the reset bit to exit the reset mode
.019e59	6b		rtl		                RTL
.019e5a					IFDD_READ
.019e5a	c2 30		rep #$30	                REP #$30        ; set A&X long
.019e5c	48		pha		                PHA ; save the sector to read
.019e5d	a3 08		lda $08,s	                LDA 8,S
.019e5f	a8		tay		                TAY
.019e60	a3 06		lda $06,s	                LDA 6,S
.019e62	a8		tay		                TAY
.019e63	68		pla		                PLA
.019e64	48		pha		                PHA ; save the sector read for the return value
.019e65	0a		asl a		                ASL A ; convert the sector number into byte count
.019e66	0a		asl a		                ASL A
.019e67	0a		asl a		                ASL A
.019e68	0a		asl a		                ASL A
.019e69	0a		asl a		                ASL A
.019e6a	0a		asl a		                ASL A
.019e6b	0a		asl a		                ASL A
.019e6c	0a		asl a		                ASL A
.019e6d	0a		asl a		                ASL A
.019e6e	aa		tax		                TAX
.019e6f	e2 20		sep #$20	                SEP #$20        ; set A short
.019e71	a3 08		lda $08,s	                LDA 8,S
.019e73	8f 7e 9e 01	sta $019e7e	                STA FFD_MVN_INSTRUCTION_ADDRESS + 2 ; rewrite the second parameter of the instruction in RAM
.019e77	c2 30		rep #$30	                REP #$30        ; set A&X long
.019e79	a9 ff 01	lda #$01ff	                LDA #511
.019e7c					FFD_MVN_INSTRUCTION_ADDRESS
.019e7c	68		pla		                PLA
.019e7d	6b		rtl		                RTL
.019e7e					IFDD_READ_ORI
.019e7e	c2 30		rep #$30	                REP #$30        ; set A&X long
.019e80	48		pha		                PHA
.019e81	a3 08		lda $08,s	                LDA 8,S
.019e83	aa		tax		                TAX
.019e84	a3 06		lda $06,s	                LDA 6,S
.019e86	a8		tay		                TAY
.019e87	68		pla		                PLA
.019e88	48		pha		                PHA ; save the sector read for the return value
.019e89	0a		asl a		                ASL A ; convert the sector number into byte count
.019e8a	0a		asl a		                ASL A
.019e8b	0a		asl a		                ASL A
.019e8c	0a		asl a		                ASL A
.019e8d	0a		asl a		                ASL A
.019e8e	0a		asl a		                ASL A
.019e8f	0a		asl a		                ASL A
.019e90	0a		asl a		                ASL A
.019e91	0a		asl a		                ASL A
.019e92	aa		tax		                TAX
.019e93	a9 ff 01	lda #$01ff	                LDA #511
.019e96	a0 00 98	ldy #$9800	                LDY #<>FAT12_ADDRESS_BUFFER_512
.019e99	68		pla		                PLA
.019e9a	6b		rtl		                RTL
.019e9b	00		brk #		IFDD_WRITE      BRK
.019e9c	00		brk #		IFDD_SETSECTOR  BRK
.019e9d	00		brk #		IFDD_SETTRACK  BRK
.019e9e	00		brk #		IFDD_SETSIDE    BRK
.019e9f					IFDD_MAKE_IT_READDY_TO_RECIEVE_CMD
.019e9f	08		php		                PHP
.019ea0	0b		phd		                PHD
.019ea1	c2 30		rep #$30	                REP #$30        ; set A&X long
.019ea3	da		phx		                PHX
.019ea4	48		pha		                PHA
.019ea5	e2 20		sep #$20	                SEP #$20        ; set A short
.019ea7	48		pha		                PHA             ; begin setdbr macro
.019ea8	08		php		                PHP
.019ea9	e2 20		sep #$20	                SEP #$20        ; set A short
.019eab	a9 01		lda #$01	                LDA #`Text_MAKE_IT_READY
.019ead	48		pha		                PHA
.019eae	ab		plb		                PLB
.019eaf	28		plp		                PLP
.019eb0	68		pla		                PLA             ; end setdbr macro
.019eb1	a2 5b a9	ldx #$a95b	                LDX #<>Text_MAKE_IT_READY
.019eb4	22 3d 44 38	jsl $38443d	                JSL UART_PUTS
.019eb8	48		pha		                PHA                       ; alocate space on the stack to save the main statur value
.019eb9					IFDD_MAKE_IT_READDY_TO_RECIEVE_CMD____READ_MAIN_STATUS_REG
.019eb9	48		pha		                PHA             ; begin setdbr macro
.019eba	08		php		                PHP
.019ebb	e2 20		sep #$20	                SEP #$20        ; set A short
.019ebd	a9 af		lda #$af	                LDA #`FDD_MAIN_STATUE
.019ebf	48		pha		                PHA
.019ec0	ab		plb		                PLB
.019ec1	28		plp		                PLP
.019ec2	68		pla		                PLA             ; end setdbr macro
.019ec3	ad f4 13	lda $af13f4	                LDA FDD_MAIN_STATUE       ; read bit 6 and 7 to see if we can send data to the FDD_CMD_BUSSY
.019ec6	83 01		sta $01,s	                STA #1, S                 ; Save the Maine Status value
.019ec8	48		pha		                PHA
.019ec9	22 73 44 38	jsl $384473	                JSL UART_PUTHEX_2
.019ecd	68		pla		                PLA
.019ece	c9 80		cmp #$80	                CMP #$80                      ; if == 1 we can read or write data from the FIFO,depending on the DIO bit value
.019ed0	f0 27		beq $019ef9	                BEQ IFDD_MAKE_IT_READDY_TO_RECIEVE_CMD____FDD_READY
.019ed2	29 80		and #$80	                AND #FDD_RQM                  ; get RQM bit
.019ed4	c9 80		cmp #$80	                CMP #$80
.019ed6	f0 06		beq $019ede	                BEQ IFDD_MAKE_IT_READDY_TO_RECIEVE_CMD____TRANSFERT_CAN_BE_DONE ;
.019ed8	ea		nop		                NOP
.019ed9	ea		nop		                NOP
.019eda	ea		nop		                NOP
.019edb	ea		nop		                NOP
.019edc	80 db		bra $019eb9	                BRA IFDD_MAKE_IT_READDY_TO_RECIEVE_CMD____READ_MAIN_STATUS_REG
.019ede					IFDD_MAKE_IT_READDY_TO_RECIEVE_CMD____TRANSFERT_CAN_BE_DONE
.019ede	a3 01		lda $01,s	                LDA #1, S
.019ee0	29 40		and #$40	                AND #FDD_DIO                  ; get DIO bit
.019ee2	c9 40		cmp #$40	                CMP #$40                      ; if == 0 we can write data into the FIFO, if == 1 we need to read data
.019ee4	d0 05		bne $019eeb	                BNE IFDD_MAKE_IT_READDY_TO_RECIEVE_CMD____READY_TO_SEND_DATA;
.019ee6	ad f5 13	lda $af13f5	                LDA FDD_FIFO
.019ee9	80 ce		bra $019eb9	                BRA IFDD_MAKE_IT_READDY_TO_RECIEVE_CMD____READ_MAIN_STATUS_REG
.019eeb					IFDD_MAKE_IT_READDY_TO_RECIEVE_CMD____READY_TO_SEND_DATA
.019eeb	a3 01		lda $01,s	                LDA #1, S
.019eed	29 03		and #$03	                AND #FDD_DRIVER_BUSY
.019eef	c9 00		cmp #$00	                CMP #$0
.019ef1	f0 04		beq $019ef7	                BEQ IFDD_MAKE_IT_READDY_TO_RECIEVE_CMD____FDD_RIVER_NOT_BUSY;
.019ef3	22 28 a1 01	jsl $01a128	                JSL IFDD_SENS_INTERRUPT_STATUS
.019ef7					IFDD_MAKE_IT_READDY_TO_RECIEVE_CMD____FDD_RIVER_NOT_BUSY
.019ef7	80 c0		bra $019eb9	                BRA IFDD_MAKE_IT_READDY_TO_RECIEVE_CMD____READ_MAIN_STATUS_REG
.019ef9					                IFDD_MAKE_IT_READDY_TO_RECIEVE_CMD____FDD_READY
.019ef9	68		pla		                PLA
.019efa	c2 30		rep #$30	                REP #$30        ; set A&X long
.019efc	68		pla		                PLA
.019efd	fa		plx		                PLX
.019efe	2b		pld		                PLD
.019eff	28		plp		                PLP
.019f00	6b		rtl		                RTL
.019f01					IFDD_WAIT_FOR_TRANSFERT_READY
.019f01	08		php		                PHP
.019f02	0b		phd		                PHD
.019f03	c2 30		rep #$30	                REP #$30        ; set A&X long
.019f05	da		phx		                PHX
.019f06	48		pha		                PHA
.019f07	e2 20		sep #$20	                SEP #$20        ; set A short
.019f09	48		pha		                PHA                       ; alocate space on the stack to save the main statur value
.019f0a	48		pha		                PHA             ; begin setdbr macro
.019f0b	08		php		                PHP
.019f0c	e2 20		sep #$20	                SEP #$20        ; set A short
.019f0e	a9 af		lda #$af	                LDA #`FDD_MAIN_STATUE
.019f10	48		pha		                PHA
.019f11	ab		plb		                PLB
.019f12	28		plp		                PLP
.019f13	68		pla		                PLA             ; end setdbr macro
.019f14					                IFDD_WAIT_FOR_TRANSFERT_READY____READ_MAIN_STATUS_REG
.019f14	ad f4 13	lda $af13f4	                LDA FDD_MAIN_STATUE       ; read bit 6 and 7 to see if we can send data to the FDD_CMD_BUSSY
.019f17	83 01		sta $01,s	                STA #1, S                 ; Save the Maine Status value
.019f19	48		pha		                PHA
.019f1a	22 73 44 38	jsl $384473	                JSL UART_PUTHEX_2
.019f1e	68		pla		                PLA
.019f1f	29 80		and #$80	                AND #FDD_RQM                  ; get RQM bit
.019f21	c9 80		cmp #$80	                CMP #$80                      ; if == 1 we can read or write data from the FIFO,depending on the DIO bit value
.019f23	f0 06		beq $019f2b	                BEQ IFDD_WAIT_FOR_TRANSFERT_READY____TRANSFERT_CAN_BE_DONE ;
.019f25	ea		nop		                NOP
.019f26	ea		nop		                NOP
.019f27	ea		nop		                NOP
.019f28	ea		nop		                NOP
.019f29	80 e9		bra $019f14	                BRA IFDD_WAIT_FOR_TRANSFERT_READY____READ_MAIN_STATUS_REG  ; Try to read the Main register again until it get the right value (will need e timout at some point)
.019f2b					                IFDD_WAIT_FOR_TRANSFERT_READY____TRANSFERT_CAN_BE_DONE
.019f2b	68		pla		                PLA
.019f2c	29 40		and #$40	                AND #FDD_DIO                  ; get DIO bit
.019f2e	c9 40		cmp #$40	                CMP #$40                      ; if == 0 we can write data into the FIFO, if == 1 we need to read data
.019f30	d0 04		bne $019f36	                BNE IFDD_WAIT_FOR_TRANSFERT_READY____READY_TO_SEND_DATA;
.019f32	a9 01		lda #$01	                LDA #1
.019f34	80 02		bra $019f38	                BRA IFDD_WAIT_FOR_TRANSFERT_READY____READY_TO_READ_DATA
.019f36					IFDD_WAIT_FOR_TRANSFERT_READY____READY_TO_SEND_DATA
.019f36	a9 00		lda #$00	                LDA #0
.019f38					IFDD_WAIT_FOR_TRANSFERT_READY____READY_TO_READ_DATA
.019f38	c2 30		rep #$30	                REP #$30        ; set A&X long
.019f3a	fa		plx		                PLX
.019f3b	fa		plx		                PLX
.019f3c	2b		pld		                PLD
.019f3d	28		plp		                PLP
.019f3e	6b		rtl		                RTL
.019f3f					IFDD_FORMAT_TRACK
.019f3f	08		php		                PHP
.019f40	0b		phd		                PHD
.019f41	c2 30		rep #$30	                REP #$30        ; set A&X long
.019f43	da		phx		                PHX
.019f44	48		pha		                PHA ; stack ofset of 7 need to be addes to get the parametters
.019f45	22 9f 9e 01	jsl $019e9f	                JSL IFDD_MAKE_IT_READDY_TO_RECIEVE_CMD
.019f49	e2 20		sep #$20	                SEP #$20        ; set A short
.019f4b	a3 0b		lda $0b,s	                LDA #4+7, S         ; Get the MFM Byte
.019f4d	29 01		and #$01	                AND #1            ; Get only the MFM 1 bits info
.019f4f	0a		asl a		                ASL
.019f50	0a		asl a		                ASL
.019f51	0a		asl a		                ASL
.019f52	0a		asl a		                ASL
.019f53	0a		asl a		                ASL
.019f54	0a		asl a		                ASL
.019f55	09 0d		ora #$0d	                ORA #$D
.019f57	48		pha		                PHA             ; begin setdbr macro
.019f58	08		php		                PHP
.019f59	e2 20		sep #$20	                SEP #$20        ; set A short
.019f5b	a9 01		lda #$01	                LDA #`FLOPPY_CMD_BUFFER
.019f5d	48		pha		                PHA
.019f5e	ab		plb		                PLB
.019f5f	28		plp		                PLP
.019f60	68		pla		                PLA             ; end setdbr macro
.019f61	8d 00 9c	sta $019c00	                STA FLOPPY_CMD_BUFFER
.019f64	a3 0c		lda $0c,s	                LDA #5+7, S         ; Get the ID Info Byte
.019f66	29 07		and #$07	                AND #7            ; Get only the ID 3 bits info
.019f68	8d 01 9c	sta $019c01	                STA FLOPPY_CMD_BUFFER+1
.019f6b	a3 0d		lda $0d,s	                LDA #6+7, S         ; Get N (Byte per sector)
.019f6d	8d 02 9c	sta $019c02	                STA FLOPPY_CMD_BUFFER+2
.019f70	a3 0e		lda $0e,s	                LDA #7+7, S         ; Get SC (Sector Per Cylender)
.019f72	8d 03 9c	sta $019c03	                STA FLOPPY_CMD_BUFFER+3
.019f75	a3 0f		lda $0f,s	                LDA #8+7, S         ; Get GPL (Gap3)
.019f77	8d 04 9c	sta $019c04	                STA FLOPPY_CMD_BUFFER+4
.019f7a	a3 10		lda $10,s	                LDA #9+7, S         ; Get D (Byte filler)
.019f7c	8d 05 9c	sta $019c05	                STA FLOPPY_CMD_BUFFER+5
.019f7f	48		pha		                PHA             ; begin setdbr macro
.019f80	08		php		                PHP
.019f81	e2 20		sep #$20	                SEP #$20        ; set A short
.019f83	a9 01		lda #$01	                LDA #`Text_FORMAT
.019f85	48		pha		                PHA
.019f86	ab		plb		                PLB
.019f87	28		plp		                PLP
.019f88	68		pla		                PLA             ; end setdbr macro
.019f89	a2 c6 a8	ldx #$a8c6	                LDX #<>Text_FORMAT
.019f8c	22 3d 44 38	jsl $38443d	                JSL UART_PUTS
.019f90	a9 06		lda #$06	                LDA #6                    ; number of command Bytes
.019f92	22 69 a3 01	jsl $01a369	                JSL IFDD_SEND_CMD
.019f96	c9 00		cmp #$00	                CMP #0
.019f98	d0 42		bne $019fdc	                BNE IFDD_FORMAT_TRACK_ERROR_SEND_CMD
.019f9a	a3 11		lda $11,s	                LDA #10+7, S         ; Get C (Cylender Adress)
.019f9c	8d 00 9c	sta $019c00	                STA FLOPPY_CMD_BUFFER
.019f9f	a3 12		lda $12,s	                LDA #11+7, S         ; Get H (Head Address)
.019fa1	8d 01 9c	sta $019c01	                STA FLOPPY_CMD_BUFFER+1
.019fa4	a3 13		lda $13,s	                LDA #12+7, S         ; Get R (Sector size code)
.019fa6	8d 03 9c	sta $019c03	                STA FLOPPY_CMD_BUFFER+3
.019fa9	a3 0d		lda $0d,s	                LDA #6+7, S ; LDA #6+7, S ;LDA #13+7, S         ; Get R (Sector Adress)
.019fab					Format_next_sector
.019fab	8d 02 9c	sta $019c02	                STA FLOPPY_CMD_BUFFER+2
.019fae	a9 04		lda #$04	                LDA #4
.019fb0	22 f6 9f 01	jsl $019ff6	                JSL IFDD_SEND_EXECUTION_DATA
.019fb4	c9 00		cmp #$00	                CMP #0
.019fb6	f0 0a		beq $019fc2	                BEQ Format_Execution_parametter_sent_ok
.019fb8	e2 20		sep #$20	                SEP #$20        ; set A short
.019fba	a9 07		lda #$07	                LDA #7                    ; number of Bytes to read
.019fbc	22 6f a4 01	jsl $01a46f	                JSL IFDD_READ_CMD_RESULT
.019fc0	80 1a		bra $019fdc	                BRA IFDD_FORMAT_TRACK_ERROR_SEND_CMD
.019fc2					Format_Execution_parametter_sent_ok
.019fc2	e2 20		sep #$20	                SEP #$20        ; set A short
.019fc4	af f4 13 af	lda $af13f4	                LDA FDD_MAIN_STATUE       ; read bit 6 and 7 to see if we cal sent data to the FDD_CMD_BUSSY
.019fc8	29 14		and #$14	                AND #20                  ; get NON DMA bit, will stay 1 until the Executuin phase
.019fca	c9 20		cmp #$20	                CMP #$20
.019fcc	d0 0a		bne $019fd8	                BNE Format_sector_done
.019fce	a3 14		lda $14,s	                LDA #13+7, S
.019fd0	1a		inc a		                INC A
.019fd1	8d 02 9c	sta $019c02	                STA FLOPPY_CMD_BUFFER+2
.019fd4	83 14		sta $14,s	                STA #13+7, S
.019fd6	80 d3		bra $019fab	                BRA Format_next_sector
.019fd8					Format_sector_done
.019fd8	a9 01		lda #$01	                LDA #1
.019fda	80 13		bra $019fef	                BRA IFDD_FORMAT_TRACK_DONE
.019fdc					IFDD_FORMAT_TRACK_ERROR_SEND_CMD
.019fdc	48		pha		                PHA             ; begin setdbr macro
.019fdd	08		php		                PHP
.019fde	e2 20		sep #$20	                SEP #$20        ; set A short
.019fe0	a9 01		lda #$01	                LDA #`Text_ERROR
.019fe2	48		pha		                PHA
.019fe3	ab		plb		                PLB
.019fe4	28		plp		                PLP
.019fe5	68		pla		                PLA             ; end setdbr macro
.019fe6	a2 06 aa	ldx #$aa06	                LDX #<>Text_ERROR
.019fe9	22 3d 44 38	jsl $38443d	                JSL UART_PUTS
.019fed	a9 ff		lda #$ff	                LDA #-1
.019fef					IFDD_FORMAT_TRACK_DONE
.019fef	c2 30		rep #$30	                REP #$30        ; set A&X long
.019ff1	fa		plx		                PLX ; used to remove the PHA value from the begining but wisout destroying the value in reg A
.019ff2	fa		plx		                PLX
.019ff3	2b		pld		                PLD
.019ff4	28		plp		                PLP
.019ff5	6b		rtl		                RTL
.019ff6					IFDD_SEND_EXECUTION_DATA
.019ff6	08		php		                PHP
.019ff7	0b		phd		                PHD
.019ff8	c2 30		rep #$30	                REP #$30        ; set A&X long
.019ffa	da		phx		                PHX
.019ffb	48		pha		                PHA ; stack ofset of 7 need to be addes to get the parametters
.019ffc	a9 2b 00	lda #$002b	                LDA #$2B ; +
.019fff	22 1a 44 38	jsl $38441a	                JSL UART_PUTC
.01a003	a3 01		lda $01,s	                LDA #1, S
.01a005	e2 20		sep #$20	                SEP #$20        ; set A short
.01a007	48		pha		                PHA                       ; save the number of byt to be sent to the FDC
.01a008	22 01 9f 01	jsl $019f01	                JSL IFDD_WAIT_FOR_TRANSFERT_READY ; Return 1 if the FDC is readdy to recieve data
.01a00c	48		pha		                PHA
.01a00d	22 73 44 38	jsl $384473	                JSL UART_PUTHEX_2
.01a011	68		pla		                PLA
.01a012	c9 00		cmp #$00	                CMP #0
.01a014	d0 75		bne $01a08b	                BNE IFDD_SEND_EXECUTION_DATA____ERROR_SEND_EXECUTION_DATA_1
.01a016	a9 21		lda #$21	                LDA #$21 ; !
.01a018	22 1a 44 38	jsl $38441a	                JSL UART_PUTC
.01a01c	a2 00 00	ldx #$0000	                LDX #0
.01a01f					IFDD_SEND_EXECUTION_DATA____SEND_NEXT_ECUTION_DATA
.01a01f	8a		txa		                LDA X
.01a020	c3 01		cmp $01,s	                CMP #1, S                 ; Test if we sent all the data ot not
.01a022	f0 6f		beq $01a093	                BEQ IFDD_SEND_EXECUTION_DATA____ALL_DATA_ECUTION_SENT_1
.01a024	48		pha		                PHA             ; begin setdbr macro
.01a025	08		php		                PHP
.01a026	e2 20		sep #$20	                SEP #$20        ; set A short
.01a028	a9 01		lda #$01	                LDA #`FLOPPY_CMD_BUFFER
.01a02a	48		pha		                PHA
.01a02b	ab		plb		                PLB
.01a02c	28		plp		                PLP
.01a02d	68		pla		                PLA             ; end setdbr macro
.01a02e	bd 00 9c	lda $019c00,x	                LDA FLOPPY_CMD_BUFFER,X
.01a031	8f f5 13 af	sta $af13f5	                STA FDD_FIFO              ; Write the data in the FDC's FIFO
.01a035	da		phx		                PHX
.01a036	48		pha		                PHA             ; begin setdbr macro
.01a037	08		php		                PHP
.01a038	e2 20		sep #$20	                SEP #$20        ; set A short
.01a03a	a9 01		lda #$01	                LDA #`Text_CMD_Parametter
.01a03c	48		pha		                PHA
.01a03d	ab		plb		                PLB
.01a03e	28		plp		                PLP
.01a03f	68		pla		                PLA             ; end setdbr macro
.01a040	a2 2b aa	ldx #$aa2b	                LDX #<>Text_CMD_Parametter
.01a043	22 3d 44 38	jsl $38443d	                JSL UART_PUTS
.01a047	fa		plx		                PLX
.01a048	da		phx		                PHX
.01a049	8a		txa		                TXA
.01a04a	22 73 44 38	jsl $384473	                JSL UART_PUTHEX_2
.01a04e	48		pha		                PHA             ; begin setdbr macro
.01a04f	08		php		                PHP
.01a050	e2 20		sep #$20	                SEP #$20        ; set A short
.01a052	a9 01		lda #$01	                LDA #`Text_duble_dot
.01a054	48		pha		                PHA
.01a055	ab		plb		                PLB
.01a056	28		plp		                PLP
.01a057	68		pla		                PLA             ; end setdbr macro
.01a058	a2 47 aa	ldx #$aa47	                LDX #<>Text_duble_dot
.01a05b	22 3d 44 38	jsl $38443d	                JSL UART_PUTS
.01a05f	fa		plx		                PLX
.01a060	da		phx		                PHX
.01a061	48		pha		                PHA             ; begin setdbr macro
.01a062	08		php		                PHP
.01a063	e2 20		sep #$20	                SEP #$20        ; set A short
.01a065	a9 01		lda #$01	                LDA #`FLOPPY_CMD_BUFFER
.01a067	48		pha		                PHA
.01a068	ab		plb		                PLB
.01a069	28		plp		                PLP
.01a06a	68		pla		                PLA             ; end setdbr macro
.01a06b	bd 00 9c	lda $019c00,x	                LDA FLOPPY_CMD_BUFFER,X
.01a06e	22 73 44 38	jsl $384473	                JSL UART_PUTHEX_2
.01a072	a2 17 aa	ldx #$aa17	                LDX #<>Text_EOL
.01a075	22 3d 44 38	jsl $38443d	                JSL UART_PUTS
.01a079	22 6c a6 01	jsl $01a66c	                JSL IFDD_PRINT_FDD_MS_REG
.01a07d	fa		plx		                PLX
.01a07e	e8		inx		                INX
.01a07f	48		pha		                PHA             ; begin setdbr macro
.01a080	08		php		                PHP
.01a081	e2 20		sep #$20	                SEP #$20        ; set A short
.01a083	a9 af		lda #$af	                LDA #`FDD_MAIN_STATUE
.01a085	48		pha		                PHA
.01a086	ab		plb		                PLB
.01a087	28		plp		                PLP
.01a088	68		pla		                PLA             ; end setdbr macro
.01a089					IFDD_SEND_EXECUTION____READ_MAIN_STATUS_REG_FOR_TRANSFERT
.01a089	80 0a		bra $01a095	                BRA IFDD_SEND_EXECUTION____JUMP_BYPASS
.01a08b					IFDD_SEND_EXECUTION_DATA____ERROR_SEND_EXECUTION_DATA_1
.01a08b	a9 7e		lda #$7e	                LDA #$7E ; ~
.01a08d	22 1a 44 38	jsl $38441a	                JSL UART_PUTC
.01a091	d0 4f		bne $01a0e2	                BNE IFDD_SEND_EXECUTION_DATA____ERROR_SEND_EXECUTION_DATA
.01a093	80 48		bra $01a0dd	IFDD_SEND_EXECUTION_DATA____ALL_DATA_ECUTION_SENT_1 BRA IFDD_SEND_EXECUTION_DATA____ALL_DATA_ECUTION_SENT
.01a095					IFDD_SEND_EXECUTION____JUMP_BYPASS
.01a095	ad f4 13	lda $af13f4	                LDA FDD_MAIN_STATUE
.01a098	48		pha		                PHA
.01a099	29 0f		and #$0f	                AND #$F
.01a09b	18		clc		                CLC
.01a09c	69 30		adc #$30	                ADC #$30
.01a09e	48		pha		                PHA             ; begin setdbr macro
.01a09f	08		php		                PHP
.01a0a0	e2 20		sep #$20	                SEP #$20        ; set A short
.01a0a2	a9 af		lda #$af	                LDA #`$AFA207
.01a0a4	48		pha		                PHA
.01a0a5	ab		plb		                PLB
.01a0a6	28		plp		                PLP
.01a0a7	68		pla		                PLA             ; end setdbr macro
.01a0a8	8d 07 a2	sta $afa207	                STA $AFA207
.01a0ab	a3 01		lda $01,s	                LDA #1, S
.01a0ad	4a		lsr a		                LSR A
.01a0ae	4a		lsr a		                LSR A
.01a0af	4a		lsr a		                LSR A
.01a0b0	4a		lsr a		                LSR A
.01a0b1	29 0f		and #$0f	                AND #$F
.01a0b3	18		clc		                CLC
.01a0b4	69 30		adc #$30	                ADC #$30
.01a0b6	48		pha		                PHA             ; begin setdbr macro
.01a0b7	08		php		                PHP
.01a0b8	e2 20		sep #$20	                SEP #$20        ; set A short
.01a0ba	a9 af		lda #$af	                LDA #`$AFA206
.01a0bc	48		pha		                PHA
.01a0bd	ab		plb		                PLB
.01a0be	28		plp		                PLP
.01a0bf	68		pla		                PLA             ; end setdbr macro
.01a0c0	8d 06 a2	sta $afa206	                STA $AFA206
.01a0c3	68		pla		                PLA
.01a0c4	48		pha		                PHA             ; begin setdbr macro
.01a0c5	08		php		                PHP
.01a0c6	e2 20		sep #$20	                SEP #$20        ; set A short
.01a0c8	a9 af		lda #$af	                LDA #`FDD_MAIN_STATUE
.01a0ca	48		pha		                PHA
.01a0cb	ab		plb		                PLB
.01a0cc	28		plp		                PLP
.01a0cd	68		pla		                PLA             ; end setdbr macro
.01a0ce	ad f4 13	lda $af13f4	                LDA FDD_MAIN_STATUE       ; read bit 6 and 7 to see if we cal sent data to the FDD_CMD_BUSSY
.01a0d1	29 80		and #$80	                AND #FDD_RQM                  ; get RQM bit
.01a0d3	c9 80		cmp #$80	                CMP #$80                  ; if == 1 we can read or write data from the FIFO,depending on the DIO bit value
.01a0d5	82 47 ff	brl $01a01f	                BRL IFDD_SEND_EXECUTION_DATA____SEND_NEXT_ECUTION_DATA
.01a0d8	ea		nop		                NOP
.01a0d9	ea		nop		                NOP
.01a0da	ea		nop		                NOP
.01a0db	80 ac		bra $01a089	                BRA IFDD_SEND_EXECUTION____READ_MAIN_STATUS_REG_FOR_TRANSFERT  ; Try to read the Main register again until it get the right value (will need e timout at some point)
.01a0dd					IFDD_SEND_EXECUTION_DATA____ALL_DATA_ECUTION_SENT
.01a0dd	68		pla		                PLA                       ; removing the number of commands byte to send
.01a0de	a9 00		lda #$00	                LDA #0
.01a0e0	80 05		bra $01a0e7	                BRA IFDD_SEND_EXECUTION_DATA____EXIT
.01a0e2					IFDD_SEND_EXECUTION_DATA____ERROR_SEND_EXECUTION_DATA
.01a0e2	68		pla		                PLA
.01a0e3	a9 ff		lda #$ff	                LDA #-1
.01a0e5	80 00		bra $01a0e7	                BRA IFDD_SEND_EXECUTION_DATA____EXIT
.01a0e7					IFDD_SEND_EXECUTION_DATA____EXIT
.01a0e7	c2 30		rep #$30	                REP #$30        ; set A&X long
.01a0e9	fa		plx		                PLX
.01a0ea	fa		plx		                PLX
.01a0eb	2b		pld		                PLD
.01a0ec	28		plp		                PLP
.01a0ed	6b		rtl		                RTL
.01a0ee					IFDD_RECALIBRATE
.01a0ee	e2 20		sep #$20	                SEP #$20        ; set A short
.01a0f0	29 03		and #$03	                AND #3                    ; just get the 2 first bit
.01a0f2	48		pha		                PHA             ; begin setdbr macro
.01a0f3	08		php		                PHP
.01a0f4	e2 20		sep #$20	                SEP #$20        ; set A short
.01a0f6	a9 01		lda #$01	                LDA #`FLOPPY_CMD_BUFFER
.01a0f8	48		pha		                PHA
.01a0f9	ab		plb		                PLB
.01a0fa	28		plp		                PLP
.01a0fb	68		pla		                PLA             ; end setdbr macro
.01a0fc	8d 01 9c	sta $019c01	                STA FLOPPY_CMD_BUFFER+1
.01a0ff	a9 07		lda #$07	                LDA #7
.01a101	8d 00 9c	sta $019c00	                STA FLOPPY_CMD_BUFFER
.01a104	48		pha		                PHA             ; begin setdbr macro
.01a105	08		php		                PHP
.01a106	e2 20		sep #$20	                SEP #$20        ; set A short
.01a108	a9 01		lda #$01	                LDA #`Text_RECALIBRATE
.01a10a	48		pha		                PHA
.01a10b	ab		plb		                PLB
.01a10c	28		plp		                PLP
.01a10d	68		pla		                PLA             ; end setdbr macro
.01a10e	a2 fe a7	ldx #$a7fe	                LDX #<>Text_RECALIBRATE
.01a111	22 3d 44 38	jsl $38443d	                JSL UART_PUTS
.01a115	a9 02		lda #$02	                LDA #2                    ; number of command Bytes
.01a117	22 69 a3 01	jsl $01a369	                JSL IFDD_SEND_CMD
.01a11b	c9 00		cmp #$00	                CMP #0
.01a11d	30 04		bmi $01a123	                BMI IFDD_RECALIBRATE_ERROR_SEND_CMD
.01a11f	a9 01		lda #$01	                LDA #1
.01a121	80 04		bra $01a127	                BRA IFDD_RECALIBRATE_DONE
.01a123					IFDD_RECALIBRATE_ERROR_SEND_CMD
.01a123	a9 ff		lda #$ff	                LDA #-1
.01a125	80 00		bra $01a127	                BRA IFDD_RECALIBRATE_ERROR
.01a127					IFDD_RECALIBRATE_ERROR
.01a127					IFDD_RECALIBRATE_DONE
.01a127	6b		rtl		                RTL
.01a128					IFDD_SENS_INTERRUPT_STATUS
.01a128	08		php		                PHP
.01a129	0b		phd		                PHD
.01a12a	c2 30		rep #$30	                REP #$30        ; set A&X long
.01a12c	48		pha		                PHA
.01a12d	da		phx		                PHX; stack ofset of 7 need to be addes to get the parametters
.01a12e	e2 20		sep #$20	                SEP #$20        ; set A short
.01a130	a9 08		lda #$08	                LDA #$08
.01a132	48		pha		                PHA             ; begin setdbr macro
.01a133	08		php		                PHP
.01a134	e2 20		sep #$20	                SEP #$20        ; set A short
.01a136	a9 01		lda #$01	                LDA #`FLOPPY_CMD_BUFFER
.01a138	48		pha		                PHA
.01a139	ab		plb		                PLB
.01a13a	28		plp		                PLP
.01a13b	68		pla		                PLA             ; end setdbr macro
.01a13c	8d 00 9c	sta $019c00	                STA FLOPPY_CMD_BUFFER
.01a13f	48		pha		                PHA             ; begin setdbr macro
.01a140	08		php		                PHP
.01a141	e2 20		sep #$20	                SEP #$20        ; set A short
.01a143	a9 01		lda #$01	                LDA #`Text_SENS_INTERRUPT_STATUS
.01a145	48		pha		                PHA
.01a146	ab		plb		                PLB
.01a147	28		plp		                PLP
.01a148	68		pla		                PLA             ; end setdbr macro
.01a149	a2 94 a8	ldx #$a894	                LDX #<>Text_SENS_INTERRUPT_STATUS
.01a14c	22 3d 44 38	jsl $38443d	                JSL UART_PUTS
.01a150	a9 01		lda #$01	                LDA #1                    ; number of command Bytes
.01a152	22 69 a3 01	jsl $01a369	                JSL IFDD_SEND_CMD
.01a156	c9 00		cmp #$00	                CMP #0
.01a158	30 10		bmi $01a16a	                BMI IFDD_SENS_INTERRUPT_STATUS_ERROR_READ_CMD
.01a15a	e2 20		sep #$20	                SEP #$20        ; set A short
.01a15c	a9 02		lda #$02	                LDA #2                    ; number of Bytes to read
.01a15e	22 6f a4 01	jsl $01a46f	                JSL IFDD_READ_CMD_RESULT
.01a162	c9 00		cmp #$00	                CMP #0
.01a164	30 04		bmi $01a16a	                BMI IFDD_SENS_INTERRUPT_STATUS_ERROR_READ_CMD
.01a166	a9 01		lda #$01	                LDA #1
.01a168	80 13		bra $01a17d	                BRA IFDD_SENS_INTERRUPT_STATUS_DONE
.01a16a					IFDD_SENS_INTERRUPT_STATUS_ERROR_READ_CMD
.01a16a	48		pha		                PHA             ; begin setdbr macro
.01a16b	08		php		                PHP
.01a16c	e2 20		sep #$20	                SEP #$20        ; set A short
.01a16e	a9 01		lda #$01	                LDA #`Text_ERROR
.01a170	48		pha		                PHA
.01a171	ab		plb		                PLB
.01a172	28		plp		                PLP
.01a173	68		pla		                PLA             ; end setdbr macro
.01a174	a2 06 aa	ldx #$aa06	                LDX #<>Text_ERROR
.01a177	22 3d 44 38	jsl $38443d	                JSL UART_PUTS
.01a17b	a9 ff		lda #$ff	                LDA #-1
.01a17d					IFDD_SENS_INTERRUPT_STATUS_DONE
.01a17d	c2 30		rep #$30	                REP #$30        ; set A&X long
.01a17f	fa		plx		                PLX
.01a180	68		pla		                PLA
.01a181	2b		pld		                PLD
.01a182	28		plp		                PLP
.01a183	6b		rtl		                RTL
.01a184	08		php		IFDD_SPECIFY    PHP
.01a185	0b		phd		                PHD
.01a186	c2 30		rep #$30	                REP #$30        ; set A&X long
.01a188	da		phx		                PHX
.01a189	48		pha		                PHA ; stack ofset of 7 need to be addes to get the parametters
.01a18a	48		pha		                PHA             ; begin setdbr macro
.01a18b	08		php		                PHP
.01a18c	e2 20		sep #$20	                SEP #$20        ; set A short
.01a18e	a9 01		lda #$01	                LDA #`FLOPPY_CMD_BUFFER
.01a190	48		pha		                PHA
.01a191	ab		plb		                PLB
.01a192	28		plp		                PLP
.01a193	68		pla		                PLA             ; end setdbr macro
.01a194	e2 20		sep #$20	                SEP #$20        ; set A short
.01a196	a9 03		lda #$03	                LDA #3                    ; "SPECIFY" command value
.01a198	8d 00 9c	sta $019c00	                STA FLOPPY_CMD_BUFFER
.01a19b	a3 0b		lda $0b,s	                LDA #4+7, S                 ; Get SRT (Step Rate Time)
.01a19d	0a		asl a		                ASL
.01a19e	0a		asl a		                ASL
.01a19f	0a		asl a		                ASL
.01a1a0	0a		asl a		                ASL
.01a1a1	03 0c		ora $0c,s	                ORA #5+7, S                 ; Get HUT (Head Unload Time)
.01a1a3	8d 01 9c	sta $019c01	                STA FLOPPY_CMD_BUFFER+1
.01a1a6	a3 0d		lda $0d,s	                LDA #6+7, S                 ; Get HLT (Head Load Time)
.01a1a8	0a		asl a		                ASL
.01a1a9	03 0e		ora $0e,s	                ORA #7+7, S                 ; Get ND (non-DMA)
.01a1ab	8d 02 9c	sta $019c02	                STA FLOPPY_CMD_BUFFER+2
.01a1ae	48		pha		                PHA             ; begin setdbr macro
.01a1af	08		php		                PHP
.01a1b0	e2 20		sep #$20	                SEP #$20        ; set A short
.01a1b2	a9 01		lda #$01	                LDA #`Text_SPECIFY
.01a1b4	48		pha		                PHA
.01a1b5	ab		plb		                PLB
.01a1b6	28		plp		                PLP
.01a1b7	68		pla		                PLA             ; end setdbr macro
.01a1b8	a2 2a a9	ldx #$a92a	                LDX #<>Text_SPECIFY
.01a1bb	22 3d 44 38	jsl $38443d	                JSL UART_PUTS
.01a1bf	a9 03		lda #$03	                LDA #3                    ; number of command Bytes
.01a1c1	22 69 a3 01	jsl $01a369	                JSL IFDD_SEND_CMD
.01a1c5	c9 00		cmp #$00	                CMP #0
.01a1c7	30 04		bmi $01a1cd	                BMI IFDD_SPECIFY_ERROR_SEND_CMD
.01a1c9	a9 01		lda #$01	                LDA #1
.01a1cb	80 02		bra $01a1cf	                BRA IFDD_SPECIFY_DONE
.01a1cd					IFDD_SPECIFY_ERROR_SEND_CMD
.01a1cd	a9 ff		lda #$ff	                LDA #-1
.01a1cf					IFDD_SPECIFY_DONE
.01a1cf	c2 30		rep #$30	                REP #$30        ; set A&X long
.01a1d1	68		pla		                PLA
.01a1d2	fa		plx		                PLX
.01a1d3	2b		pld		                PLD
.01a1d4	28		plp		                PLP
.01a1d5	6b		rtl		                RTL
.01a1d6	08		php		IFDD_SEEK       PHP
.01a1d7	0b		phd		                PHD
.01a1d8	c2 30		rep #$30	                REP #$30        ; set A&X long
.01a1da	da		phx		                PHX
.01a1db	48		pha		                PHA
.01a1dc	e2 20		sep #$20	                SEP #$20        ; set A short
.01a1de	29 07		and #$07	                AND #7                    ; Get the 3 first bit side (2) and driver (1-0)
.01a1e0	48		pha		                PHA             ; begin setdbr macro
.01a1e1	08		php		                PHP
.01a1e2	e2 20		sep #$20	                SEP #$20        ; set A short
.01a1e4	a9 01		lda #$01	                LDA #`FLOPPY_CMD_BUFFER
.01a1e6	48		pha		                PHA
.01a1e7	ab		plb		                PLB
.01a1e8	28		plp		                PLP
.01a1e9	68		pla		                PLA             ; end setdbr macro
.01a1ea	8d 01 9c	sta $019c01	                STA FLOPPY_CMD_BUFFER+1
.01a1ed	a9 0f		lda #$0f	                LDA #$F
.01a1ef	8d 00 9c	sta $019c00	                STA FLOPPY_CMD_BUFFER
.01a1f2	8a		txa		                LDA X                     ; Get the cylinder index
.01a1f3	8d 02 9c	sta $019c02	                STA FLOPPY_CMD_BUFFER+2
.01a1f6	48		pha		                PHA             ; begin setdbr macro
.01a1f7	08		php		                PHP
.01a1f8	e2 20		sep #$20	                SEP #$20        ; set A short
.01a1fa	a9 01		lda #$01	                LDA #`Text_SEEK
.01a1fc	48		pha		                PHA
.01a1fd	ab		plb		                PLB
.01a1fe	28		plp		                PLP
.01a1ff	68		pla		                PLA             ; end setdbr macro
.01a200	a2 f8 a8	ldx #$a8f8	                LDX #<>Text_SEEK
.01a203	22 3d 44 38	jsl $38443d	                JSL UART_PUTS
.01a207	a9 03		lda #$03	                LDA #3                    ; number of command Bytes
.01a209	22 69 a3 01	jsl $01a369	                JSL IFDD_SEND_CMD
.01a20d	c9 00		cmp #$00	                CMP #0
.01a20f	30 04		bmi $01a215	                BMI IFDD_SEEK_ERROR_SEND_CMD
.01a211	a9 01		lda #$01	                LDA #1
.01a213	80 02		bra $01a217	                BRA IFDD_SEEK_DONE
.01a215					IFDD_SEEK_ERROR_SEND_CMD
.01a215	a9 ff		lda #$ff	                LDA #-1
.01a217					IFDD_SEEK_DONE
.01a217	c2 30		rep #$30	                REP #$30        ; set A&X long
.01a219	68		pla		                PLA
.01a21a	fa		plx		                PLX
.01a21b	2b		pld		                PLD
.01a21c	28		plp		                PLP
.01a21d	6b		rtl		                RTL
.01a21e	08		php		IFDD_SEEKRELATIF_UP PHP
.01a21f	0b		phd		                PHD
.01a220	c2 30		rep #$30	                REP #$30        ; set A&X long
.01a222	da		phx		                PHX
.01a223	48		pha		                PHA
.01a224	e2 30		sep #$30	                SEP #$30        ; set A&X short
.01a226	29 07		and #$07	                AND #7                    ; Get the 3 first bit side (2) and driver (1-0)
.01a228	48		pha		                PHA             ; begin setdbr macro
.01a229	08		php		                PHP
.01a22a	e2 20		sep #$20	                SEP #$20        ; set A short
.01a22c	a9 01		lda #$01	                LDA #`FLOPPY_CMD_BUFFER
.01a22e	48		pha		                PHA
.01a22f	ab		plb		                PLB
.01a230	28		plp		                PLP
.01a231	68		pla		                PLA             ; end setdbr macro
.01a232	8d 01 9c	sta $019c01	                STA FLOPPY_CMD_BUFFER+1
.01a235	a9 8f		lda #$8f	                LDA #$8F
.01a237	8d 00 9c	sta $019c00	                STA FLOPPY_CMD_BUFFER
.01a23a	8a		txa		                LDA X                     ; Get the cylinder index
.01a23b	8d 02 9c	sta $019c02	                STA FLOPPY_CMD_BUFFER+2
.01a23e	c2 10		rep #$10	                REP #$10        ; set X long
.01a240	48		pha		                PHA             ; begin setdbr macro
.01a241	08		php		                PHP
.01a242	e2 20		sep #$20	                SEP #$20        ; set A short
.01a244	a9 01		lda #$01	                LDA #`Text_SEEK
.01a246	48		pha		                PHA
.01a247	ab		plb		                PLB
.01a248	28		plp		                PLP
.01a249	68		pla		                PLA             ; end setdbr macro
.01a24a	a2 f8 a8	ldx #$a8f8	                LDX #<>Text_SEEK
.01a24d	22 3d 44 38	jsl $38443d	                JSL UART_PUTS
.01a251	a9 03		lda #$03	                LDA #3                    ; number of command Bytes
.01a253	22 69 a3 01	jsl $01a369	                JSL IFDD_SEND_CMD
.01a257	c9 00		cmp #$00	                CMP #0
.01a259	30 04		bmi $01a25f	                BMI IFDD_SEEKRELATIF_UP_ERROR_SEND_CMD
.01a25b	a9 01		lda #$01	                LDA #1
.01a25d	80 02		bra $01a261	                BRA IFDD_SEEKRELATIF_UP_DONE
.01a25f					IFDD_SEEKRELATIF_UP_ERROR_SEND_CMD
.01a25f	a9 ff		lda #$ff	                LDA #-1
.01a261					IFDD_SEEKRELATIF_UP_DONE
.01a261	c2 30		rep #$30	                REP #$30        ; set A&X long
.01a263	68		pla		                PLA
.01a264	fa		plx		                PLX
.01a265	2b		pld		                PLD
.01a266	28		plp		                PLP
.01a267	6b		rtl		                RTL
.01a268	08		php		IFDD_SEEKRELATIF_DOWN PHP
.01a269	0b		phd		                PHD
.01a26a	c2 30		rep #$30	                REP #$30        ; set A&X long
.01a26c	da		phx		                PHX
.01a26d	48		pha		                PHA
.01a26e	e2 30		sep #$30	                SEP #$30        ; set A&X short
.01a270	29 07		and #$07	                AND #7                    ; Get the 3 first bit side (2) and driver (1-0)
.01a272	48		pha		                PHA             ; begin setdbr macro
.01a273	08		php		                PHP
.01a274	e2 20		sep #$20	                SEP #$20        ; set A short
.01a276	a9 01		lda #$01	                LDA #`FLOPPY_CMD_BUFFER
.01a278	48		pha		                PHA
.01a279	ab		plb		                PLB
.01a27a	28		plp		                PLP
.01a27b	68		pla		                PLA             ; end setdbr macro
.01a27c	8d 01 9c	sta $019c01	                STA FLOPPY_CMD_BUFFER+1
.01a27f	a9 cf		lda #$cf	                LDA #$CF
.01a281	8d 00 9c	sta $019c00	                STA FLOPPY_CMD_BUFFER
.01a284	8a		txa		                LDA X                     ; Get the cylinder index
.01a285	8d 02 9c	sta $019c02	                STA FLOPPY_CMD_BUFFER+2
.01a288	c2 10		rep #$10	                REP #$10        ; set X long
.01a28a	48		pha		                PHA             ; begin setdbr macro
.01a28b	08		php		                PHP
.01a28c	e2 20		sep #$20	                SEP #$20        ; set A short
.01a28e	a9 01		lda #$01	                LDA #`Text_SEEK
.01a290	48		pha		                PHA
.01a291	ab		plb		                PLB
.01a292	28		plp		                PLP
.01a293	68		pla		                PLA             ; end setdbr macro
.01a294	a2 f8 a8	ldx #$a8f8	                LDX #<>Text_SEEK
.01a297	22 3d 44 38	jsl $38443d	                JSL UART_PUTS
.01a29b	a9 03		lda #$03	                LDA #3                    ; number of command Bytes
.01a29d	22 69 a3 01	jsl $01a369	                JSL IFDD_SEND_CMD
.01a2a1	c9 00		cmp #$00	                CMP #0
.01a2a3	30 04		bmi $01a2a9	                BMI IFDD_SEEKRELATIF_DOW_ERROR_SEND_CMD
.01a2a5	a9 01		lda #$01	                LDA #1
.01a2a7	80 02		bra $01a2ab	                BRA IFDD_SEEKRELATIF_DOW_DONE
.01a2a9					IFDD_SEEKRELATIF_DOW_ERROR_SEND_CMD
.01a2a9	a9 ff		lda #$ff	                LDA #-1
.01a2ab					IFDD_SEEKRELATIF_DOW_DONE
.01a2ab	c2 30		rep #$30	                REP #$30        ; set A&X long
.01a2ad	68		pla		                PLA
.01a2ae	fa		plx		                PLX
.01a2af	2b		pld		                PLD
.01a2b0	28		plp		                PLP
.01a2b1	6b		rtl		                RTL
.01a2b2					IFDD_READ_ID
.01a2b2	08		php		                PHP
.01a2b3	0b		phd		                PHD
.01a2b4	c2 30		rep #$30	                REP #$30        ; set A&X long
.01a2b6	48		pha		                PHA
.01a2b7	da		phx		                PHX
.01a2b8	22 9f 9e 01	jsl $019e9f	                JSL IFDD_MAKE_IT_READDY_TO_RECIEVE_CMD
.01a2bc	e2 20		sep #$20	                SEP #$20        ; set A short
.01a2be	29 07		and #$07	                AND #7                    ; Get the 3 first bit HDS (2) and driver (1-0)
.01a2c0	48		pha		                PHA             ; begin setdbr macro
.01a2c1	08		php		                PHP
.01a2c2	e2 20		sep #$20	                SEP #$20        ; set A short
.01a2c4	a9 01		lda #$01	                LDA #`FLOPPY_CMD_BUFFER
.01a2c6	48		pha		                PHA
.01a2c7	ab		plb		                PLB
.01a2c8	28		plp		                PLP
.01a2c9	68		pla		                PLA             ; end setdbr macro
.01a2ca	8d 01 9c	sta $019c01	                STA FLOPPY_CMD_BUFFER+1
.01a2cd	8a		txa		                LDA X                     ; Get the cylinder index
.01a2ce	29 01		and #$01	                AND #1
.01a2d0	0a		asl a		                ASL
.01a2d1	0a		asl a		                ASL
.01a2d2	0a		asl a		                ASL
.01a2d3	0a		asl a		                ASL
.01a2d4	0a		asl a		                ASL
.01a2d5	0a		asl a		                ASL
.01a2d6	48		pha		                PHA
.01a2d7	a9 0a		lda #$0a	                LDA #$0A
.01a2d9	03 01		ora $01,s	                ORA #1, S
.01a2db	8d 00 9c	sta $019c00	                STA FLOPPY_CMD_BUFFER
.01a2de	68		pla		                PLA
.01a2df	ad 00 9c	lda $019c00	                LDA FLOPPY_CMD_BUFFER
.01a2e2	22 73 44 38	jsl $384473	                JSL UART_PUTHEX_2
.01a2e6	ad 01 9c	lda $019c01	                LDA FLOPPY_CMD_BUFFER+1
.01a2e9	22 73 44 38	jsl $384473	                JSL UART_PUTHEX_2
.01a2ed	48		pha		                PHA             ; begin setdbr macro
.01a2ee	08		php		                PHP
.01a2ef	e2 20		sep #$20	                SEP #$20        ; set A short
.01a2f1	a9 01		lda #$01	                LDA #`Text_READ_ID
.01a2f3	48		pha		                PHA
.01a2f4	ab		plb		                PLB
.01a2f5	28		plp		                PLP
.01a2f6	68		pla		                PLA             ; end setdbr macro
.01a2f7	a2 30 a8	ldx #$a830	                LDX #<>Text_READ_ID
.01a2fa	22 3d 44 38	jsl $38443d	                JSL UART_PUTS
.01a2fe	a9 02		lda #$02	                LDA #2                    ; number of command Bytes
.01a300	22 69 a3 01	jsl $01a369	                JSL IFDD_SEND_CMD
.01a304	c9 00		cmp #$00	                CMP #0
.01a306	30 10		bmi $01a318	                BMI IFDD_READ_ID_ERROR_READ_CMD
.01a308	e2 20		sep #$20	                SEP #$20        ; set A short
.01a30a	a9 07		lda #$07	                LDA #7                    ; number of Bytes to read
.01a30c	22 6f a4 01	jsl $01a46f	                JSL IFDD_READ_CMD_RESULT
.01a310	c9 00		cmp #$00	                CMP #0
.01a312	30 04		bmi $01a318	                BMI IFDD_READ_ID_ERROR_READ_CMD
.01a314	a9 01		lda #$01	                LDA #1
.01a316	80 13		bra $01a32b	                BRA IFDD_READ_ID_DONE
.01a318					IFDD_READ_ID_ERROR_READ_CMD
.01a318	48		pha		                PHA             ; begin setdbr macro
.01a319	08		php		                PHP
.01a31a	e2 20		sep #$20	                SEP #$20        ; set A short
.01a31c	a9 01		lda #$01	                LDA #`Text_ERROR
.01a31e	48		pha		                PHA
.01a31f	ab		plb		                PLB
.01a320	28		plp		                PLP
.01a321	68		pla		                PLA             ; end setdbr macro
.01a322	a2 06 aa	ldx #$aa06	                LDX #<>Text_ERROR
.01a325	22 3d 44 38	jsl $38443d	                JSL UART_PUTS
.01a329	a9 ff		lda #$ff	                LDA #-1
.01a32b					IFDD_READ_ID_DONE
.01a32b	c2 30		rep #$30	                REP #$30        ; set A&X long
.01a32d	fa		plx		                PLX
.01a32e	68		pla		                PLA
.01a32f	2b		pld		                PLD
.01a330	28		plp		                PLP
.01a331	6b		rtl		                RTL
.01a332					IFDD_GET_DRIVE_STATUS
.01a332	e2 20		sep #$20	                SEP #$20        ; set A short
.01a334	29 07		and #$07	                AND #7                    ; Get the 3 first bit HDS (2) and driver (1-0)
.01a336	48		pha		                PHA             ; begin setdbr macro
.01a337	08		php		                PHP
.01a338	e2 20		sep #$20	                SEP #$20        ; set A short
.01a33a	a9 01		lda #$01	                LDA #`FLOPPY_CMD_BUFFER
.01a33c	48		pha		                PHA
.01a33d	ab		plb		                PLB
.01a33e	28		plp		                PLP
.01a33f	68		pla		                PLA             ; end setdbr macro
.01a340	8d 01 9c	sta $019c01	                STA FLOPPY_CMD_BUFFER+1
.01a343	a9 04		lda #$04	                LDA #$4
.01a345	8d 00 9c	sta $019c00	                STA FLOPPY_CMD_BUFFER
.01a348	8a		txa		                LDA X                     ; Get the cylinder index
.01a349	8d 02 9c	sta $019c02	                STA FLOPPY_CMD_BUFFER+2
.01a34c	a9 02		lda #$02	                LDA #2                    ; number of command Bytes
.01a34e	22 69 a3 01	jsl $01a369	                JSL IFDD_SEND_CMD
.01a352	c9 00		cmp #$00	                CMP #0
.01a354	30 10		bmi $01a366	                BMI IFDD_DRIVE_STATUS_ERROR_READ_CMD
.01a356	e2 20		sep #$20	                SEP #$20        ; set A short
.01a358	a9 01		lda #$01	                LDA #1                    ; number of Bytes to read
.01a35a	22 6f a4 01	jsl $01a46f	                JSL IFDD_READ_CMD_RESULT
.01a35e	c9 00		cmp #$00	                CMP #0
.01a360	30 04		bmi $01a366	                BMI IFDD_DRIVE_STATUS_ERROR_READ_CMD
.01a362	a9 01		lda #$01	                LDA #1
.01a364	80 02		bra $01a368	                BRA IFDD_DRIVE_STATUS_DONE
.01a366					IFDD_DRIVE_STATUS_ERROR_READ_CMD
.01a366	a9 ff		lda #$ff	                LDA #-1
.01a368					IFDD_DRIVE_STATUS_DONE
.01a368	6b		rtl		                RTL
.01a369	48		pha		IFDD_SEND_CMD   PHA                       ; save the number of byt to be sent to the FDC
.01a36a	48		pha		                PHA                       ; alocate space on the stack to save the main statur value
.01a36b	48		pha		                PHA             ; begin setdbr macro
.01a36c	08		php		                PHP
.01a36d	e2 20		sep #$20	                SEP #$20        ; set A short
.01a36f	a9 af		lda #$af	                LDA #`FDD_MAIN_STATUE
.01a371	48		pha		                PHA
.01a372	ab		plb		                PLB
.01a373	28		plp		                PLP
.01a374	68		pla		                PLA             ; end setdbr macro
.01a375					IFDD_SEND_CMD_READ_MAIN_STATUS_REG
.01a375	ad f4 13	lda $af13f4	                LDA FDD_MAIN_STATUE       ; read bit 6 and 7 to see if we cal sent data to the FDD_CMD_BUSSY
.01a378	83 01		sta $01,s	                STA #1, S                 ; Save the Maine Status value
.01a37a	29 80		and #$80	                AND #FDD_RQM                  ; get RQM bit
.01a37c	c9 80		cmp #$80	                CMP #$80                  ; if == 1 we can read or write data from the FIFO,depending on the DIO bit value
.01a37e	f0 05		beq $01a385	                BEQ IFDD_SEND_CMD_TRANSFERT_CAN_BE_DONE ;
.01a380	ea		nop		                NOP
.01a381	ea		nop		                NOP
.01a382	ea		nop		                NOP
.01a383	80 f0		bra $01a375	                BRA IFDD_SEND_CMD_READ_MAIN_STATUS_REG  ; Try to read the Main register again until it get the right value (will need e timout at some point)
.01a385					IFDD_SEND_CMD_TRANSFERT_CAN_BE_DONE
.01a385	a3 01		lda $01,s	                LDA #1, S                 ; get the Main Status avlue
.01a387	29 40		and #$40	                AND #FDD_DIO                  ; get DIO bit
.01a389	c9 40		cmp #$40	                CMP #$40                  ; if == 0 we can write data into the FIFO, if == 1 we need to read data
.01a38b	d0 09		bne $01a396	                BNE IFDD_SEND_CMD_READDY_TO_SEND_DATA;
.01a38d	ad f5 13	lda $af13f5	                LDA FDD_FIFO                      ; remove the Main Status value saved
.01a390	22 73 44 38	jsl $384473	                JSL UART_PUTHEX_2
.01a394	80 df		bra $01a375	                BRA IFDD_SEND_CMD_READ_MAIN_STATUS_REG  ; retest if we can send data now#
.01a396					IFDD_SEND_CMD_READDY_TO_SEND_DATA
.01a396	68		pla		                PLA                       ; remove the Main Status value saved
.01a397	48		pha		                PHA             ; begin setdbr macro
.01a398	08		php		                PHP
.01a399	e2 20		sep #$20	                SEP #$20        ; set A short
.01a39b	a9 01		lda #$01	                LDA #`Text_SEND_CMD
.01a39d	48		pha		                PHA
.01a39e	ab		plb		                PLB
.01a39f	28		plp		                PLP
.01a3a0	68		pla		                PLA             ; end setdbr macro
.01a3a1	a2 8d a9	ldx #$a98d	                LDX #<>Text_SEND_CMD
.01a3a4	22 3d 44 38	jsl $38443d	                JSL UART_PUTS
.01a3a8	a2 1a aa	ldx #$aa1a	                LDX #<>Text_CMD_Parametter_Number
.01a3ab	22 3d 44 38	jsl $38443d	                JSL UART_PUTS
.01a3af	a3 01		lda $01,s	                LDA #1, S                 ; Get the number of parametter
.01a3b1	22 73 44 38	jsl $384473	                JSL UART_PUTHEX_2
.01a3b5	a2 17 aa	ldx #$aa17	                LDX #<>Text_EOL
.01a3b8	22 3d 44 38	jsl $38443d	                JSL UART_PUTS
.01a3bc	48		pha		                PHA             ; begin setdbr macro
.01a3bd	08		php		                PHP
.01a3be	e2 20		sep #$20	                SEP #$20        ; set A short
.01a3c0	a9 01		lda #$01	                LDA #`FLOPPY_CMD_BUFFER
.01a3c2	48		pha		                PHA
.01a3c3	ab		plb		                PLB
.01a3c4	28		plp		                PLP
.01a3c5	68		pla		                PLA             ; end setdbr macro
.01a3c6	a2 00 00	ldx #$0000	                LDX #0
.01a3c9	8a		txa		SEND_NEXT_DATA  LDA X
.01a3ca	c3 01		cmp $01,s	                CMP #1, S                 ; Test if we sent all the data ot not
.01a3cc	f0 53		beq $01a421	                BEQ ALL_DATA_SENT_1
.01a3ce	bd 00 9c	lda $019c00,x	                LDA FLOPPY_CMD_BUFFER,X
.01a3d1	8f f5 13 af	sta $af13f5	                STA FDD_FIFO              ; Write the data in the FDC's FIFO
.01a3d5	da		phx		                PHX
.01a3d6	48		pha		                PHA             ; begin setdbr macro
.01a3d7	08		php		                PHP
.01a3d8	e2 20		sep #$20	                SEP #$20        ; set A short
.01a3da	a9 01		lda #$01	                LDA #`Text_CMD_Parametter
.01a3dc	48		pha		                PHA
.01a3dd	ab		plb		                PLB
.01a3de	28		plp		                PLP
.01a3df	68		pla		                PLA             ; end setdbr macro
.01a3e0	a2 2b aa	ldx #$aa2b	                LDX #<>Text_CMD_Parametter
.01a3e3	22 3d 44 38	jsl $38443d	                JSL UART_PUTS
.01a3e7	fa		plx		                PLX
.01a3e8	da		phx		                PHX
.01a3e9	8a		txa		                TXA
.01a3ea	22 73 44 38	jsl $384473	                JSL UART_PUTHEX_2
.01a3ee	48		pha		                PHA             ; begin setdbr macro
.01a3ef	08		php		                PHP
.01a3f0	e2 20		sep #$20	                SEP #$20        ; set A short
.01a3f2	a9 01		lda #$01	                LDA #`Text_duble_dot
.01a3f4	48		pha		                PHA
.01a3f5	ab		plb		                PLB
.01a3f6	28		plp		                PLP
.01a3f7	68		pla		                PLA             ; end setdbr macro
.01a3f8	a2 47 aa	ldx #$aa47	                LDX #<>Text_duble_dot
.01a3fb	22 3d 44 38	jsl $38443d	                JSL UART_PUTS
.01a3ff	fa		plx		                PLX
.01a400	da		phx		                PHX
.01a401	bd 00 9c	lda $019c00,x	                LDA FLOPPY_CMD_BUFFER,X
.01a404	22 73 44 38	jsl $384473	                JSL UART_PUTHEX_2
.01a408	a2 17 aa	ldx #$aa17	                LDX #<>Text_EOL
.01a40b	22 3d 44 38	jsl $38443d	                JSL UART_PUTS
.01a40f	22 6c a6 01	jsl $01a66c	                JSL IFDD_PRINT_FDD_MS_REG
.01a413	fa		plx		                PLX
.01a414	e8		inx		                INX
.01a415	48		pha		                PHA             ; begin setdbr macro
.01a416	08		php		                PHP
.01a417	e2 20		sep #$20	                SEP #$20        ; set A short
.01a419	a9 af		lda #$af	                LDA #`FDD_MAIN_STATUE
.01a41b	48		pha		                PHA
.01a41c	ab		plb		                PLB
.01a41d	28		plp		                PLP
.01a41e	68		pla		                PLA             ; end setdbr macro
.01a41f					READ_MAIN_STATUS_REG_FOR_TRANSFERT
.01a41f	80 02		bra $01a423	                BRA ALL_DATA_SEND_JUMP_BYPASS
.01a421	80 48		bra $01a46b	ALL_DATA_SENT_1 BRA ALL_DATA_SENT
.01a423					ALL_DATA_SEND_JUMP_BYPASS
.01a423	ad f4 13	lda $af13f4	                LDA FDD_MAIN_STATUE
.01a426	48		pha		                PHA
.01a427	29 0f		and #$0f	                AND #$F
.01a429	18		clc		                CLC
.01a42a	69 30		adc #$30	                ADC #$30
.01a42c	48		pha		                PHA             ; begin setdbr macro
.01a42d	08		php		                PHP
.01a42e	e2 20		sep #$20	                SEP #$20        ; set A short
.01a430	a9 af		lda #$af	                LDA #`$AFA207
.01a432	48		pha		                PHA
.01a433	ab		plb		                PLB
.01a434	28		plp		                PLP
.01a435	68		pla		                PLA             ; end setdbr macro
.01a436	8d 07 a2	sta $afa207	                STA $AFA207
.01a439	a3 01		lda $01,s	                LDA #1, S
.01a43b	4a		lsr a		                LSR A
.01a43c	4a		lsr a		                LSR A
.01a43d	4a		lsr a		                LSR A
.01a43e	4a		lsr a		                LSR A
.01a43f	29 0f		and #$0f	                AND #$F
.01a441	18		clc		                CLC
.01a442	69 30		adc #$30	                ADC #$30
.01a444	48		pha		                PHA             ; begin setdbr macro
.01a445	08		php		                PHP
.01a446	e2 20		sep #$20	                SEP #$20        ; set A short
.01a448	a9 af		lda #$af	                LDA #`$AFA206
.01a44a	48		pha		                PHA
.01a44b	ab		plb		                PLB
.01a44c	28		plp		                PLP
.01a44d	68		pla		                PLA             ; end setdbr macro
.01a44e	8d 06 a2	sta $afa206	                STA $AFA206
.01a451	68		pla		                PLA
.01a452	48		pha		                PHA             ; begin setdbr macro
.01a453	08		php		                PHP
.01a454	e2 20		sep #$20	                SEP #$20        ; set A short
.01a456	a9 af		lda #$af	                LDA #`FDD_MAIN_STATUE
.01a458	48		pha		                PHA
.01a459	ab		plb		                PLB
.01a45a	28		plp		                PLP
.01a45b	68		pla		                PLA             ; end setdbr macro
.01a45c	ad f4 13	lda $af13f4	                LDA FDD_MAIN_STATUE       ; read bit 6 and 7 to see if we cal sent data to the FDD_CMD_BUSSY
.01a45f	29 80		and #$80	                AND #FDD_RQM                  ; get RQM bit
.01a461	c9 80		cmp #$80	                CMP #$80                  ; if == 1 we can read or write data from the FIFO,depending on the DIO bit value
.01a463	82 63 ff	brl $01a3c9	                BRL SEND_NEXT_DATA
.01a466	ea		nop		                NOP
.01a467	ea		nop		                NOP
.01a468	ea		nop		                NOP
.01a469	80 b4		bra $01a41f	                BRA READ_MAIN_STATUS_REG_FOR_TRANSFERT  ; Try to read the Main register again until it get the right value (will need e timout at some point)
.01a46b					ALL_DATA_SENT
.01a46b	68		pla		                PLA                       ; removing the number of commands byte to send
.01a46c	a9 00		lda #$00	                LDA #0
.01a46e	6b		rtl		                RTL
.01a46f					IFDD_READ_CMD_RESULT
.01a46f	48		pha		                PHA                       ; save the number of byte to be read to the FDC
.01a470	48		pha		                PHA                       ; alocate space on the stack to save the main statur value
.01a471					IFDD_READ_CMD_RESULT_READ_MAIN_STATUS_REG
.01a471	48		pha		                PHA             ; begin setdbr macro
.01a472	08		php		                PHP
.01a473	e2 20		sep #$20	                SEP #$20        ; set A short
.01a475	a9 af		lda #$af	                LDA #`FDD_MAIN_STATUE
.01a477	48		pha		                PHA
.01a478	ab		plb		                PLB
.01a479	28		plp		                PLP
.01a47a	68		pla		                PLA             ; end setdbr macro
.01a47b	ad f4 13	lda $af13f4	                LDA FDD_MAIN_STATUE       ; read bit 6 and 7 to see if we can sent data to the FDD_CMD_BUSSY
.01a47e	83 01		sta $01,s	                STA #1, S                 ; Save the Maine Status value
.01a480	22 73 44 38	jsl $384473	                JSL UART_PUTHEX_2
.01a484	a3 01		lda $01,s	                LDA #1, S
.01a486	29 80		and #$80	                AND #FDD_RQM                  ; get RQM bit
.01a488	c9 80		cmp #$80	                CMP #$80                  ; if == 1 we can read or write data from the FIFO,depending on the DIO bit value
.01a48a	f0 0b		beq $01a497	                BEQ IFDD_READ_CMD_TRANSFERT_CAN_BE_DONE ;
.01a48c	ea		nop		                NOP
.01a48d	a2 d0 07	ldx #$07d0	                LDX #2000
.01a490	22 92 18 39	jsl $391892	                JSL ILOOP_MS
.01a494	ea		nop		                NOP
.01a495	80 da		bra $01a471	                BRA IFDD_READ_CMD_RESULT_READ_MAIN_STATUS_REG  ; Try to read the Main register again until it get the right value (will need e timout at some point)
.01a497					IFDD_READ_CMD_TRANSFERT_CAN_BE_DONE
.01a497	ad f4 13	lda $af13f4	                LDA FDD_MAIN_STATUE
.01a49a	29 40		and #$40	                AND #FDD_DIO              ; get DIO bit
.01a49c	c9 40		cmp #$40	                CMP #$40                  ; if == 0 we can write data into the FIFO, if == 1 we need to read data
.01a49e	f0 04		beq $01a4a4	                BEQ READDY_TO_READ_DATA   ; We want to read the result of the command
.01a4a0	a9 01		lda #$01	                LDA #1                    ; error, the FDC after reciving the command, is supposed to sent you data
.01a4a2	80 cd		bra $01a471	                BRA IFDD_READ_CMD_RESULT_READ_MAIN_STATUS_REG  ; Try to read the Main register again until it get the right value (will need e timout at some point)
.01a4a4					READDY_TO_READ_DATA
.01a4a4	68		pla		                PLA
.01a4a5	48		pha		                PHA             ; begin setdbr macro
.01a4a6	08		php		                PHP
.01a4a7	e2 20		sep #$20	                SEP #$20        ; set A short
.01a4a9	a9 01		lda #$01	                LDA #`Text_EOL
.01a4ab	48		pha		                PHA
.01a4ac	ab		plb		                PLB
.01a4ad	28		plp		                PLP
.01a4ae	68		pla		                PLA             ; end setdbr macro
.01a4af	a2 17 aa	ldx #$aa17	                LDX #<>Text_EOL
.01a4b2	22 3d 44 38	jsl $38443d	                JSL UART_PUTS
.01a4b6	a2 b4 a9	ldx #$a9b4	                LDX #<>Text_Start_Rx_CMD
.01a4b9	22 3d 44 38	jsl $38443d	                JSL UART_PUTS
.01a4bd	a2 32 aa	ldx #$aa32	                LDX #<>Text_CMD_Result_Number
.01a4c0	22 3d 44 38	jsl $38443d	                JSL UART_PUTS
.01a4c4	a3 01		lda $01,s	                LDA #1, S                 ; Get the number of parametter
.01a4c6	22 73 44 38	jsl $384473	                JSL UART_PUTHEX_2
.01a4ca	a2 17 aa	ldx #$aa17	                LDX #<>Text_EOL
.01a4cd	22 3d 44 38	jsl $38443d	                JSL UART_PUTS
.01a4d1	a2 00 00	ldx #$0000	                LDX #0
.01a4d4	8a		txa		READ_NEXT_DATA  LDA X
.01a4d5	c3 01		cmp $01,s	                CMP #1, S                 ; Test if we read all the data ot not
.01a4d7	f0 72		beq $01a54b	                BEQ ALL_DATA_READ
.01a4d9	48		pha		                PHA             ; begin setdbr macro
.01a4da	08		php		                PHP
.01a4db	e2 20		sep #$20	                SEP #$20        ; set A short
.01a4dd	a9 af		lda #$af	                LDA #`FDD_FIFO
.01a4df	48		pha		                PHA
.01a4e0	ab		plb		                PLB
.01a4e1	28		plp		                PLP
.01a4e2	68		pla		                PLA             ; end setdbr macro
.01a4e3	ad f5 13	lda $af13f5	                LDA FDD_FIFO              ; Read the data from the FDC's FIFO
.01a4e6	48		pha		                PHA             ; begin setdbr macro
.01a4e7	08		php		                PHP
.01a4e8	e2 20		sep #$20	                SEP #$20        ; set A short
.01a4ea	a9 01		lda #$01	                LDA #`FLOPPY_CMD_BUFFER
.01a4ec	48		pha		                PHA
.01a4ed	ab		plb		                PLB
.01a4ee	28		plp		                PLP
.01a4ef	68		pla		                PLA             ; end setdbr macro
.01a4f0	9d 00 9c	sta $019c00,x	                STA FLOPPY_CMD_BUFFER,X   ; Save it in the Buffer
.01a4f3	da		phx		                PHX
.01a4f4	48		pha		                PHA             ; begin setdbr macro
.01a4f5	08		php		                PHP
.01a4f6	e2 20		sep #$20	                SEP #$20        ; set A short
.01a4f8	a9 01		lda #$01	                LDA #`Text_CMD_Parametter
.01a4fa	48		pha		                PHA
.01a4fb	ab		plb		                PLB
.01a4fc	28		plp		                PLP
.01a4fd	68		pla		                PLA             ; end setdbr macro
.01a4fe	a2 3f aa	ldx #$aa3f	                LDX #<>Text_CMD_Result
.01a501	22 3d 44 38	jsl $38443d	                JSL UART_PUTS
.01a505	fa		plx		                PLX
.01a506	da		phx		                PHX
.01a507	8a		txa		                TXA
.01a508	22 73 44 38	jsl $384473	                JSL UART_PUTHEX_2
.01a50c	48		pha		                PHA             ; begin setdbr macro
.01a50d	08		php		                PHP
.01a50e	e2 20		sep #$20	                SEP #$20        ; set A short
.01a510	a9 01		lda #$01	                LDA #`Text_duble_dot
.01a512	48		pha		                PHA
.01a513	ab		plb		                PLB
.01a514	28		plp		                PLP
.01a515	68		pla		                PLA             ; end setdbr macro
.01a516	a2 47 aa	ldx #$aa47	                LDX #<>Text_duble_dot
.01a519	22 3d 44 38	jsl $38443d	                JSL UART_PUTS
.01a51d	fa		plx		                PLX
.01a51e	da		phx		                PHX
.01a51f	bd 00 9c	lda $019c00,x	                LDA FLOPPY_CMD_BUFFER,X
.01a522	22 73 44 38	jsl $384473	                JSL UART_PUTHEX_2
.01a526	a2 17 aa	ldx #$aa17	                LDX #<>Text_EOL
.01a529	22 3d 44 38	jsl $38443d	                JSL UART_PUTS
.01a52d	22 6c a6 01	jsl $01a66c	                JSL IFDD_PRINT_FDD_MS_REG
.01a531	fa		plx		                PLX
.01a532	e8		inx		                INX
.01a533	48		pha		                PHA             ; begin setdbr macro
.01a534	08		php		                PHP
.01a535	e2 20		sep #$20	                SEP #$20        ; set A short
.01a537	a9 af		lda #$af	                LDA #`FDD_MAIN_STATUE
.01a539	48		pha		                PHA
.01a53a	ab		plb		                PLB
.01a53b	28		plp		                PLP
.01a53c	68		pla		                PLA             ; end setdbr macro
.01a53d					READ_MAIN_STATUS_REG_FOR_TRANSFERT_2
.01a53d	ad f4 13	lda $af13f4	                LDA FDD_MAIN_STATUE       ; read bit 6 and 7 to see if we cal sent data to the FDD_CMD_BUSSY
.01a540	29 80		and #$80	                AND #FDD_RQM                  ; get RQM bit
.01a542	c9 80		cmp #$80	                CMP #$80                  ; if == 1 we can read or write data from the FIFO,depending on the DIO bit value
.01a544	f0 8e		beq $01a4d4	                BEQ READ_NEXT_DATA
.01a546	ea		nop		                NOP
.01a547	ea		nop		                NOP
.01a548	ea		nop		                NOP
.01a549	80 f2		bra $01a53d	                BRA READ_MAIN_STATUS_REG_FOR_TRANSFERT_2  ; Try to read the Main register again until it get the right value (will need e timout at some point)
.01a54b					ALL_DATA_READ
.01a54b	a9 00		lda #$00	                LDA #0
.01a54d	80 11		bra $01a560	                BRA IFDD_READ_CMD_RESULT_RETURN
.01a54f					IFDD_READ_CMD_RESULT_RETURN_ERROR
.01a54f	48		pha		                PHA             ; begin setdbr macro
.01a550	08		php		                PHP
.01a551	e2 20		sep #$20	                SEP #$20        ; set A short
.01a553	a9 01		lda #$01	                LDA #`Text_ERROR
.01a555	48		pha		                PHA
.01a556	ab		plb		                PLB
.01a557	28		plp		                PLP
.01a558	68		pla		                PLA             ; end setdbr macro
.01a559	a2 06 aa	ldx #$aa06	                LDX #<>Text_ERROR
.01a55c	22 3d 44 38	jsl $38443d	                JSL UART_PUTS
.01a560					IFDD_READ_CMD_RESULT_RETURN
.01a560	68		pla		                PLA
.01a561	48		pha		                PHA             ; begin setdbr macro
.01a562	08		php		                PHP
.01a563	e2 20		sep #$20	                SEP #$20        ; set A short
.01a565	a9 01		lda #$01	                LDA #`Text_Stop_Rx_CMD
.01a567	48		pha		                PHA
.01a568	ab		plb		                PLB
.01a569	28		plp		                PLP
.01a56a	68		pla		                PLA             ; end setdbr macro
.01a56b	a2 ca a9	ldx #$a9ca	                LDX #<>Text_Stop_Rx_CMD
.01a56e	22 3d 44 38	jsl $38443d	                JSL UART_PUTS
.01a572	a2 00 00	ldx #$0000	                LDX #0
.01a575	6b		rtl		                RTL
.01a576					IFDD_READ_DATA_FIFO
.01a576	c2 10		rep #$10	                REP #$10        ; set X long
.01a578	48		pha		                PHA                       ; alocate space on the stack to save the main statur value
.01a579	48		pha		                PHA             ; begin setdbr macro
.01a57a	08		php		                PHP
.01a57b	e2 20		sep #$20	                SEP #$20        ; set A short
.01a57d	a9 af		lda #$af	                LDA #`FDD_MAIN_STATUE
.01a57f	48		pha		                PHA
.01a580	ab		plb		                PLB
.01a581	28		plp		                PLP
.01a582	68		pla		                PLA             ; end setdbr macro
.01a583					IFDD_READ_DATA_FIFO_READ_MAIN_STATUS_REG
.01a583	ad f4 13	lda $af13f4	                LDA FDD_MAIN_STATUE       ; read bit 6 and 7 to see if we cal sent data to the FDD_CMD_BUSSY
.01a586	83 01		sta $01,s	                STA #1, S                 ; Save the Maine Status value
.01a588	29 80		and #$80	                AND #FDD_RQM                  ; get RQM bit
.01a58a	c9 80		cmp #$80	                CMP #$80                  ; if == 1 we can read or write data from the FIFO,depending on the DIO bit value
.01a58c	f0 05		beq $01a593	                BEQ IFDD_READ_DATA_FIFO_TRANSFERT_CAN_BE_DONE ;
.01a58e	ea		nop		                NOP
.01a58f	ea		nop		                NOP
.01a590	ea		nop		                NOP
.01a591	80 f0		bra $01a583	                BRA IFDD_READ_DATA_FIFO_READ_MAIN_STATUS_REG  ; Try to read the Main register again until it get the right value (will need e timout at some point)
.01a593					IFDD_READ_DATA_FIFO_TRANSFERT_CAN_BE_DONE
.01a593	ad f4 13	lda $af13f4	                LDA FDD_MAIN_STATUE
.01a596	29 40		and #$40	                AND #FDD_DIO              ; get DIO bit
.01a598	c9 40		cmp #$40	                CMP #$40                  ; if == 0 we can write data into the FIFO, if == 1 we need to read data
.01a59a	f0 06		beq $01a5a2	                BEQ IFDD_READ_DATA_FIFO_READDY_TO_READ_DATA   ; We want to read the result of the command
.01a59c	68		pla		                PLA
.01a59d	a9 01		lda #$01	                LDA #1                   ; error, the FDC after reciving the commans is suppos to sent you data
.01a59f	82 b6 00	brl $01a658	                BRL IFDD_READ_DATA_FIFO_RETURN_ERROR
.01a5a2					IFDD_READ_DATA_FIFO_READDY_TO_READ_DATA
.01a5a2	68		pla		                PLA
.01a5a3	a2 00 00	ldx #$0000	                LDX #0
.01a5a6	a0 00 06	ldy #$0600	                LDY #$600
.01a5a9					IFDD_READ_DATA_FIFO_READ_NEXT_DATA
.01a5a9	48		pha		                PHA             ; begin setdbr macro
.01a5aa	08		php		                PHP
.01a5ab	e2 20		sep #$20	                SEP #$20        ; set A short
.01a5ad	a9 af		lda #$af	                LDA #`FDD_FIFO
.01a5af	48		pha		                PHA
.01a5b0	ab		plb		                PLB
.01a5b1	28		plp		                PLP
.01a5b2	68		pla		                PLA             ; end setdbr macro
.01a5b3	ad f5 13	lda $af13f5	                LDA FDD_FIFO              ; Read the data from the FDC's FIFO
.01a5b6	48		pha		                PHA             ; begin setdbr macro
.01a5b7	08		php		                PHP
.01a5b8	e2 20		sep #$20	                SEP #$20        ; set A short
.01a5ba	a9 19		lda #$19	                LDA #`$19A000
.01a5bc	48		pha		                PHA
.01a5bd	ab		plb		                PLB
.01a5be	28		plp		                PLP
.01a5bf	68		pla		                PLA             ; end setdbr macro
.01a5c0	9d 00 a0	sta $19a000,x	                STA $19A000 ,X            ; Save it in the Buffer
.01a5c3	48		pha		                PHA             ; begin setdbr macro
.01a5c4	08		php		                PHP
.01a5c5	e2 20		sep #$20	                SEP #$20        ; set A short
.01a5c7	a9 af		lda #$af	                LDA #`$AFA000
.01a5c9	48		pha		                PHA
.01a5ca	ab		plb		                PLB
.01a5cb	28		plp		                PLP
.01a5cc	68		pla		                PLA             ; end setdbr macro
.01a5cd	da		phx		                PHX
.01a5ce	48		pha		                PHA
.01a5cf	a3 01		lda $01,s	                LDA #1, S
.01a5d1	4a		lsr a		                LSR A                   ; Extracting the high part of the byte
.01a5d2	4a		lsr a		                LSR A
.01a5d3	4a		lsr a		                LSR A
.01a5d4	4a		lsr a		                LSR A
.01a5d5	c2 20		rep #$20	                REP #$20        ; set A long
.01a5d7	29 0f 00	and #$000f	                AND #$F
.01a5da	aa		tax		                LDX A
.01a5db	e2 20		sep #$20	                SEP #$20        ; set A short
.01a5dd	48		pha		                PHA             ; begin setdbr macro
.01a5de	08		php		                PHP
.01a5df	e2 20		sep #$20	                SEP #$20        ; set A short
.01a5e1	a9 39		lda #$39	                LDA #`hex_digits
.01a5e3	48		pha		                PHA
.01a5e4	ab		plb		                PLB
.01a5e5	28		plp		                PLP
.01a5e6	68		pla		                PLA             ; end setdbr macro
.01a5e7	bd 44 1d	lda $391d44,x	                LDA hex_digits,X
.01a5ea	bb		tyx		                TYX
.01a5eb	9f 00 a0 af	sta $afa000,x	                STA $AFA000 ,X
.01a5ef	a3 01		lda $01,s	                LDA #1, S
.01a5f1	c2 20		rep #$20	                REP #$20        ; set A long
.01a5f3	29 0f 00	and #$000f	                AND #$F
.01a5f6	aa		tax		                LDX A
.01a5f7	e2 20		sep #$20	                SEP #$20        ; set A short
.01a5f9	bd 44 1d	lda $391d44,x	                LDA hex_digits,X
.01a5fc	bb		tyx		                TYX
.01a5fd	9f 01 a0 af	sta $afa001,x	                STA $AFA000+1 ,X
.01a601	80 02		bra $01a605	                BRA BYPASS_IFDD_READ_DATA_FIFO_READ_NEXT_DATA
.01a603	80 a4		bra $01a5a9	IFDD_READ_DATA_FIFO_READ_NEXT_DATA_step1 BRA IFDD_READ_DATA_FIFO_READ_NEXT_DATA
.01a605					BYPASS_IFDD_READ_DATA_FIFO_READ_NEXT_DATA
.01a605	c2 20		rep #$20	                REP #$20        ; set A long
.01a607	98		tya		                TYA
.01a608	18		clc		                CLC
.01a609	69 04 00	adc #$0004	                ADC #4
.01a60c	29 40 00	and #$0040	                AND #$40
.01a60f	c9 40 00	cmp #$0040	                CMP #$40
.01a612	d0 0a		bne $01a61e	                BNE NO_NEED_NEW_LINE
.01a614	98		tya		                TYA
.01a615	29 80 ff	and #$ff80	                AND #$FF80
.01a618	18		clc		                CLC
.01a619	69 80 00	adc #$0080	                ADC #$80
.01a61c	80 05		bra $01a623	                BRA NEW_LINE_ADDED
.01a61e					NO_NEED_NEW_LINE
.01a61e	98		tya		                TYA
.01a61f	18		clc		                CLC
.01a620	69 04 00	adc #$0004	                ADC #4
.01a623	a8		tay		NEW_LINE_ADDED  TAY
.01a624	e2 20		sep #$20	                SEP #$20        ; set A short
.01a626	68		pla		                PLA
.01a627	fa		plx		                PLX
.01a628	e8		inx		                INC X
.01a629	e0 00 02	cpx #$0200	                CPX #512
.01a62c	f0 18		beq $01a646	                BEQ ALL_DATA_READ_2
.01a62e	48		pha		                PHA             ; begin setdbr macro
.01a62f	08		php		                PHP
.01a630	e2 20		sep #$20	                SEP #$20        ; set A short
.01a632	a9 af		lda #$af	                LDA #`FDD_MAIN_STATUE
.01a634	48		pha		                PHA
.01a635	ab		plb		                PLB
.01a636	28		plp		                PLP
.01a637	68		pla		                PLA             ; end setdbr macro
.01a638					READ_MAIN_STATUS_REG_FOR_TRANSFERT_3
.01a638	ad f4 13	lda $af13f4	                LDA FDD_MAIN_STATUE       ; read bit 6 and 7 to see if we cal sent data to the FDD_CMD_BUSSY
.01a63b	29 80		and #$80	                AND #FDD_RQM              ; get RQM bit
.01a63d	c9 80		cmp #$80	                CMP #$80                  ; if == 1 we can read or write data from the FIFO,depending on the DIO bit value
.01a63f	f0 c2		beq $01a603	                BEQ IFDD_READ_DATA_FIFO_READ_NEXT_DATA_step1
.01a641	ea		nop		                NOP
.01a642	ea		nop		                NOP
.01a643	ea		nop		                NOP
.01a644	80 f2		bra $01a638	                BRA READ_MAIN_STATUS_REG_FOR_TRANSFERT_3  ; Try to read the Main register again until it get the right value (will need e timout at some point)
.01a646					ALL_DATA_READ_2
.01a646	a9 0a		lda #$0a	                LDA #$A
.01a648	22 1a 44 38	jsl $38441a	                JSL UART_PUTC
.01a64c	a9 0d		lda #$0d	                LDA #$D
.01a64e	22 1a 44 38	jsl $38441a	                JSL UART_PUTC
.01a652	22 6c a6 01	jsl $01a66c	                JSL IFDD_PRINT_FDD_MS_REG
.01a656	a9 00		lda #$00	                LDA #0
.01a658					IFDD_READ_DATA_FIFO_RETURN_ERROR
.01a658	48		pha		                PHA
.01a659	48		pha		                PHA             ; begin setdbr macro
.01a65a	08		php		                PHP
.01a65b	e2 20		sep #$20	                SEP #$20        ; set A short
.01a65d	a9 01		lda #$01	                LDA #`Text_Stop_Rx_FIFO
.01a65f	48		pha		                PHA
.01a660	ab		plb		                PLB
.01a661	28		plp		                PLP
.01a662	68		pla		                PLA             ; end setdbr macro
.01a663	a2 f3 a9	ldx #$a9f3	                LDX #<>Text_Stop_Rx_FIFO
.01a666	22 3d 44 38	jsl $38443d	                JSL UART_PUTS
.01a66a	68		pla		                PLA
.01a66b	6b		rtl		                RTL
.01a66c					IFDD_PRINT_FDD_MS_REG
.01a66c	08		php		                PHP
.01a66d	0b		phd		                PHD
.01a66e	c2 30		rep #$30	                REP #$30        ; set A&X long
.01a670	da		phx		                PHX
.01a671	48		pha		                PHA
.01a672	48		pha		                PHA             ; begin setdbr macro
.01a673	08		php		                PHP
.01a674	e2 20		sep #$20	                SEP #$20        ; set A short
.01a676	a9 01		lda #$01	                LDA #`Text_FDD_MAIN_STATUE
.01a678	48		pha		                PHA
.01a679	ab		plb		                PLB
.01a67a	28		plp		                PLP
.01a67b	68		pla		                PLA             ; end setdbr macro
.01a67c	a2 a3 aa	ldx #$aaa3	                LDX #<>Text_FDD_MAIN_STATUE
.01a67f	22 3d 44 38	jsl $38443d	                JSL UART_PUTS
.01a683	e2 20		sep #$20	                SEP #$20        ; set A short
.01a685	48		pha		                PHA             ; begin setdbr macro
.01a686	08		php		                PHP
.01a687	e2 20		sep #$20	                SEP #$20        ; set A short
.01a689	a9 af		lda #$af	                LDA #`FDD_MAIN_STATUE
.01a68b	48		pha		                PHA
.01a68c	ab		plb		                PLB
.01a68d	28		plp		                PLP
.01a68e	68		pla		                PLA             ; end setdbr macro
.01a68f	ad f4 13	lda $af13f4	                LDA FDD_MAIN_STATUE
.01a692	22 73 44 38	jsl $384473	                JSL UART_PUTHEX_2
.01a696	a9 0a		lda #$0a	                LDA #$A
.01a698	22 1a 44 38	jsl $38441a	                JSL UART_PUTC
.01a69c	a9 0d		lda #$0d	                LDA #$D
.01a69e	22 1a 44 38	jsl $38441a	                JSL UART_PUTC
.01a6a2	c2 30		rep #$30	                REP #$30        ; set A&X long
.01a6a4	68		pla		                PLA
.01a6a5	fa		plx		                PLX
.01a6a6	2b		pld		                PLD
.01a6a7	28		plp		                PLP
.01a6a8	6b		rtl		                RTL
.01a6a9					IFDD_PRINT_REG
.01a6a9	e2 20		sep #$20	                SEP #$20        ; set A short
.01a6ab	48		pha		                PHA             ; begin setdbr macro
.01a6ac	08		php		                PHP
.01a6ad	e2 20		sep #$20	                SEP #$20        ; set A short
.01a6af	a9 01		lda #$01	                LDA #`Text_FDD_STATUS_A
.01a6b1	48		pha		                PHA
.01a6b2	ab		plb		                PLB
.01a6b3	28		plp		                PLP
.01a6b4	68		pla		                PLA             ; end setdbr macro
.01a6b5	a2 4b aa	ldx #$aa4b	                LDX #<>Text_FDD_STATUS_A
.01a6b8	22 3d 44 38	jsl $38443d	                JSL UART_PUTS
.01a6bc	48		pha		                PHA             ; begin setdbr macro
.01a6bd	08		php		                PHP
.01a6be	e2 20		sep #$20	                SEP #$20        ; set A short
.01a6c0	a9 af		lda #$af	                LDA #`FDD_STATUS_A
.01a6c2	48		pha		                PHA
.01a6c3	ab		plb		                PLB
.01a6c4	28		plp		                PLP
.01a6c5	68		pla		                PLA             ; end setdbr macro
.01a6c6	ad f0 13	lda $af13f0	                LDA FDD_STATUS_A
.01a6c9	22 4e 44 38	jsl $38444e	                JSL UART_PUTHEX
.01a6cd	a9 0a		lda #$0a	                LDA #$A
.01a6cf	22 1a 44 38	jsl $38441a	                JSL UART_PUTC
.01a6d3	a9 0d		lda #$0d	                LDA #$D
.01a6d5	22 1a 44 38	jsl $38441a	                JSL UART_PUTC
.01a6d9	48		pha		                PHA             ; begin setdbr macro
.01a6da	08		php		                PHP
.01a6db	e2 20		sep #$20	                SEP #$20        ; set A short
.01a6dd	a9 01		lda #$01	                LDA #`Text_FDD_STATUS_B
.01a6df	48		pha		                PHA
.01a6e0	ab		plb		                PLB
.01a6e1	28		plp		                PLP
.01a6e2	68		pla		                PLA             ; end setdbr macro
.01a6e3	a2 61 aa	ldx #$aa61	                LDX #<>Text_FDD_STATUS_B
.01a6e6	22 3d 44 38	jsl $38443d	                JSL UART_PUTS
.01a6ea	48		pha		                PHA             ; begin setdbr macro
.01a6eb	08		php		                PHP
.01a6ec	e2 20		sep #$20	                SEP #$20        ; set A short
.01a6ee	a9 af		lda #$af	                LDA #`FDD_STATUS_B
.01a6f0	48		pha		                PHA
.01a6f1	ab		plb		                PLB
.01a6f2	28		plp		                PLP
.01a6f3	68		pla		                PLA             ; end setdbr macro
.01a6f4	ad f1 13	lda $af13f1	                LDA FDD_STATUS_B
.01a6f7	22 4e 44 38	jsl $38444e	                JSL UART_PUTHEX
.01a6fb	a9 0a		lda #$0a	                LDA #$A
.01a6fd	22 1a 44 38	jsl $38441a	                JSL UART_PUTC
.01a701	a9 0d		lda #$0d	                LDA #$D
.01a703	22 1a 44 38	jsl $38441a	                JSL UART_PUTC
.01a707	48		pha		                PHA             ; begin setdbr macro
.01a708	08		php		                PHP
.01a709	e2 20		sep #$20	                SEP #$20        ; set A short
.01a70b	a9 01		lda #$01	                LDA #`Text_FDD_DIGITAL_OUTPUT
.01a70d	48		pha		                PHA
.01a70e	ab		plb		                PLB
.01a70f	28		plp		                PLP
.01a710	68		pla		                PLA             ; end setdbr macro
.01a711	a2 77 aa	ldx #$aa77	                LDX #<>Text_FDD_DIGITAL_OUTPUT
.01a714	22 3d 44 38	jsl $38443d	                JSL UART_PUTS
.01a718	48		pha		                PHA             ; begin setdbr macro
.01a719	08		php		                PHP
.01a71a	e2 20		sep #$20	                SEP #$20        ; set A short
.01a71c	a9 af		lda #$af	                LDA #`FDD_DIGITAL_OUTPUT
.01a71e	48		pha		                PHA
.01a71f	ab		plb		                PLB
.01a720	28		plp		                PLP
.01a721	68		pla		                PLA             ; end setdbr macro
.01a722	ad f2 13	lda $af13f2	                LDA FDD_DIGITAL_OUTPUT
.01a725	22 4e 44 38	jsl $38444e	                JSL UART_PUTHEX
.01a729	a9 0a		lda #$0a	                LDA #$A
.01a72b	22 1a 44 38	jsl $38441a	                JSL UART_PUTC
.01a72f	a9 0d		lda #$0d	                LDA #$D
.01a731	22 1a 44 38	jsl $38441a	                JSL UART_PUTC
.01a735	48		pha		                PHA             ; begin setdbr macro
.01a736	08		php		                PHP
.01a737	e2 20		sep #$20	                SEP #$20        ; set A short
.01a739	a9 01		lda #$01	                LDA #`Text_FDD_TAPE_DRIVER
.01a73b	48		pha		                PHA
.01a73c	ab		plb		                PLB
.01a73d	28		plp		                PLP
.01a73e	68		pla		                PLA             ; end setdbr macro
.01a73f	a2 8d aa	ldx #$aa8d	                LDX #<>Text_FDD_TAPE_DRIVER
.01a742	22 3d 44 38	jsl $38443d	                JSL UART_PUTS
.01a746	48		pha		                PHA             ; begin setdbr macro
.01a747	08		php		                PHP
.01a748	e2 20		sep #$20	                SEP #$20        ; set A short
.01a74a	a9 af		lda #$af	                LDA #`FDD_TAPE_DRIVER
.01a74c	48		pha		                PHA
.01a74d	ab		plb		                PLB
.01a74e	28		plp		                PLP
.01a74f	68		pla		                PLA             ; end setdbr macro
.01a750	ad f3 13	lda $af13f3	                LDA FDD_TAPE_DRIVER
.01a753	22 4e 44 38	jsl $38444e	                JSL UART_PUTHEX
.01a757	a9 0a		lda #$0a	                LDA #$A
.01a759	22 1a 44 38	jsl $38441a	                JSL UART_PUTC
.01a75d	a9 0d		lda #$0d	                LDA #$D
.01a75f	22 1a 44 38	jsl $38441a	                JSL UART_PUTC
.01a763	48		pha		                PHA             ; begin setdbr macro
.01a764	08		php		                PHP
.01a765	e2 20		sep #$20	                SEP #$20        ; set A short
.01a767	a9 01		lda #$01	                LDA #`Text_FDD_MAIN_STATUE
.01a769	48		pha		                PHA
.01a76a	ab		plb		                PLB
.01a76b	28		plp		                PLP
.01a76c	68		pla		                PLA             ; end setdbr macro
.01a76d	a2 a3 aa	ldx #$aaa3	                LDX #<>Text_FDD_MAIN_STATUE
.01a770	22 3d 44 38	jsl $38443d	                JSL UART_PUTS
.01a774	48		pha		                PHA             ; begin setdbr macro
.01a775	08		php		                PHP
.01a776	e2 20		sep #$20	                SEP #$20        ; set A short
.01a778	a9 af		lda #$af	                LDA #`FDD_MAIN_STATUE
.01a77a	48		pha		                PHA
.01a77b	ab		plb		                PLB
.01a77c	28		plp		                PLP
.01a77d	68		pla		                PLA             ; end setdbr macro
.01a77e	ad f4 13	lda $af13f4	                LDA FDD_MAIN_STATUE
.01a781	22 4e 44 38	jsl $38444e	                JSL UART_PUTHEX
.01a785	a9 0a		lda #$0a	                LDA #$A
.01a787	22 1a 44 38	jsl $38441a	                JSL UART_PUTC
.01a78b	a9 0d		lda #$0d	                LDA #$D
.01a78d	22 1a 44 38	jsl $38441a	                JSL UART_PUTC
.01a791	48		pha		                PHA             ; begin setdbr macro
.01a792	08		php		                PHP
.01a793	e2 20		sep #$20	                SEP #$20        ; set A short
.01a795	a9 01		lda #$01	                LDA #`Text_FDD_DIGITAL_INPUT
.01a797	48		pha		                PHA
.01a798	ab		plb		                PLB
.01a799	28		plp		                PLP
.01a79a	68		pla		                PLA             ; end setdbr macro
.01a79b	a2 b9 aa	ldx #$aab9	                LDX #<>Text_FDD_DIGITAL_INPUT
.01a79e	22 3d 44 38	jsl $38443d	                JSL UART_PUTS
.01a7a2	48		pha		                PHA             ; begin setdbr macro
.01a7a3	08		php		                PHP
.01a7a4	e2 20		sep #$20	                SEP #$20        ; set A short
.01a7a6	a9 af		lda #$af	                LDA #`FDD_DIGITAL_INPUT
.01a7a8	48		pha		                PHA
.01a7a9	ab		plb		                PLB
.01a7aa	28		plp		                PLP
.01a7ab	68		pla		                PLA             ; end setdbr macro
.01a7ac	ad f7 13	lda $af13f7	                LDA FDD_DIGITAL_INPUT
.01a7af	22 4e 44 38	jsl $38444e	                JSL UART_PUTHEX
.01a7b3	a9 0a		lda #$0a	                LDA #$A
.01a7b5	22 1a 44 38	jsl $38441a	                JSL UART_PUTC
.01a7b9	a9 0d		lda #$0d	                LDA #$D
.01a7bb	22 1a 44 38	jsl $38441a	                JSL UART_PUTC
.01a7bf	a9 0a		lda #$0a	                LDA #$A
.01a7c1	22 1a 44 38	jsl $38441a	                JSL UART_PUTC
.01a7c5	a9 0d		lda #$0d	                LDA #$D
.01a7c7	22 1a 44 38	jsl $38441a	                JSL UART_PUTC
.01a7cb	6b		rtl		                RTL
>01a7cc	2d 2d 2d 2d 2d 2d 2d 2d		Text_INIT_AT              .text "----------------- FDD INIT_AT -----------------",$A,$D,0
>01a7d4	2d 2d 2d 2d 2d 2d 2d 2d 2d 20 46 44 44 20 49 4e
>01a7e4	49 54 5f 41 54 20 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d
>01a7f4	2d 2d 2d 2d 2d 2d 2d 0a 0d 00
>01a7fe	2d 2d 2d 2d 2d 2d 2d 2d		Text_RECALIBRATE          .text "--------------- FDD RECALIBRATE ---------------",$A,$D,0
>01a806	2d 2d 2d 2d 2d 2d 2d 20 46 44 44 20 52 45 43 41
>01a816	4c 49 42 52 41 54 45 20 2d 2d 2d 2d 2d 2d 2d 2d
>01a826	2d 2d 2d 2d 2d 2d 2d 0a 0d 00
>01a830	2d 2d 2d 2d 2d 2d 2d 2d		Text_READ_ID              .text "------------------- READ_ID -------------------",$A,$D,0
>01a838	2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 20 52 45 41 44
>01a848	5f 49 44 20 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d
>01a858	2d 2d 2d 2d 2d 2d 2d 0a 0d 00
>01a862	2d 2d 2d 2d 2d 2d 2d 2d		Text_READ                 .text "--------------------- READ --------------------",$A,$D,0
>01a86a	2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 20 52 45
>01a87a	41 44 20 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d
>01a88a	2d 2d 2d 2d 2d 2d 2d 0a 0d 00
>01a894	2d 2d 2d 2d 2d 2d 2d 2d		Text_SENS_INTERRUPT_STATUS .text "------------ SENS_INTERRUPT_STATUS ------------",$A,$D,0
>01a89c	2d 2d 2d 2d 20 53 45 4e 53 5f 49 4e 54 45 52 52
>01a8ac	55 50 54 5f 53 54 41 54 55 53 20 2d 2d 2d 2d 2d
>01a8bc	2d 2d 2d 2d 2d 2d 2d 0a 0d 00
>01a8c6	2d 2d 2d 2d 2d 2d 2d 2d		Text_FORMAT               .text "-------------------- FORMAT -------------------",$A,$D,0
>01a8ce	2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 20 46 4f 52
>01a8de	4d 41 54 20 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d
>01a8ee	2d 2d 2d 2d 2d 2d 2d 0a 0d 00
>01a8f8	2d 2d 2d 2d 2d 2d 2d 2d		Text_SEEK                 .text "--------------------- SEEK --------------------",$A,$D,0
>01a900	2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 20 53 45
>01a910	45 4b 20 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d
>01a920	2d 2d 2d 2d 2d 2d 2d 0a 0d 00
>01a92a	2d 2d 2d 2d 2d 2d 2d 2d		Text_SPECIFY               .text "------------------- SPECIFY ------------------",$A,$D,0
>01a932	2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 20 53 50 45 43
>01a942	49 46 59 20 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d
>01a952	2d 2d 2d 2d 2d 2d 0a 0d 00
>01a95b	2d 2d 2d 2d 2d 2d 2d 2d		Text_MAKE_IT_READY        .text "---------------- MAKE_IT_READY ----------------",$A,$D,0
>01a963	2d 2d 2d 2d 2d 2d 2d 2d 20 4d 41 4b 45 5f 49 54
>01a973	5f 52 45 41 44 59 20 2d 2d 2d 2d 2d 2d 2d 2d 2d
>01a983	2d 2d 2d 2d 2d 2d 2d 0a 0d 00
>01a98d	2d 20 53 45 4e 44 20 43		Text_SEND_CMD         .text "- SEND CMD Start -",$A,$D,0
>01a995	4d 44 20 53 74 61 72 74 20 2d 0a 0d 00
>01a9a2	2d 20 54 58 20 43 4d 44		Text_Stop_Tx_CMD          .text "- TX CMD Stop -",$A,$D,0
>01a9aa	20 53 74 6f 70 20 2d 0a 0d 00
>01a9b4	2d 20 52 58 20 52 45 53		Text_Start_Rx_CMD         .text "- RX RESULT Start -",$A,$D,0
>01a9bc	55 4c 54 20 53 74 61 72 74 20 2d 0a 0d 00
>01a9ca	2d 20 52 58 20 52 45 53		Text_Stop_Rx_CMD          .text "- RX RESULT Stop -",$A,$D,0
>01a9d2	55 4c 54 20 53 74 6f 70 20 2d 0a 0d 00
>01a9df	2d 20 52 58 20 46 49 46		Text_Start_Rx_FIFO        .text "- RX FIFO Start -",$A,$D,0
>01a9e7	4f 20 53 74 61 72 74 20 2d 0a 0d 00
>01a9f3	2d 20 52 58 20 46 49 46		Text_Stop_Rx_FIFO         .text "- RX FIFO Stop -",$A,$D,0
>01a9fb	4f 20 53 74 6f 70 20 2d 0a 0d 00
>01aa06	2d 20 46 44 44 5f 45 52		Text_ERROR                .text "- FDD_ERROR : ",$A,$D,0
>01aa0e	52 4f 52 20 3a 20 0a 0d 00
>01aa17	0a 0d 00			Text_EOL                  .text $A,$D,0
>01aa1a	4e 62 20 70 61 72 61 6d		Text_CMD_Parametter_Number .text "Nb parametter : ",0
>01aa22	65 74 74 65 72 20 3a 20 00
>01aa2b	50 61 72 61 6d 20 00		Text_CMD_Parametter       .text "Param ",0
>01aa32	4e 62 20 72 65 73 75 6c		Text_CMD_Result_Number    .text "Nb result : ",0
>01aa3a	74 20 3a 20 00
>01aa3f	52 65 73 75 6c 74 20 00		Text_CMD_Result           .text "Result ",0
>01aa47	20 3a 20 00			Text_duble_dot             .text " : ",0
>01aa4b	46 44 44 5f 53 54 41 54		Text_FDD_STATUS_A         .text "FDD_STATUS_A       0x",0
>01aa53	55 53 5f 41 20 20 20 20 20 20 20 30 78 00
>01aa61	46 44 44 5f 53 54 41 54		Text_FDD_STATUS_B         .text "FDD_STATUS_B       0x",0
>01aa69	55 53 5f 42 20 20 20 20 20 20 20 30 78 00
>01aa77	46 44 44 5f 44 49 47 49		Text_FDD_DIGITAL_OUTPUT   .text "FDD_DIGITAL_OUTPUT 0x",0
>01aa7f	54 41 4c 5f 4f 55 54 50 55 54 20 30 78 00
>01aa8d	46 44 44 5f 54 41 50 45		Text_FDD_TAPE_DRIVER      .text "FDD_TAPE_DRIVER    0x",0
>01aa95	5f 44 52 49 56 45 52 20 20 20 20 30 78 00
>01aaa3	46 44 44 5f 4d 41 49 4e		Text_FDD_MAIN_STATUE      .text "FDD_MAIN_STATUE    0x",0
>01aaab	5f 53 54 41 54 55 45 20 20 20 20 30 78 00
>01aab9	46 44 44 5f 44 49 47 49		Text_FDD_DIGITAL_INPUT    .text "FDD_DIGITAL_INPUT  0x",0
>01aac1	54 41 4c 5f 49 4e 50 55 54 20 20 30 78 00

;******  Return to file: src\kernel.asm

.390400					IBOOT
.390400	18		clc		                CLC           ; clear the carry flag
.390401	fb		xce		                XCE           ; move carry to emulation flag.
.390402	78		sei		                SEI
.390403	c2 30		rep #$30	                REP #$30        ; set A&X long
.390405	a9 ff fe	lda #$feff	                LDA #STACK_END   ; initialize stack pointer
.390408	1b		tcs		                TAS
.390409	48		pha		                PHA             ; begin setdp macro
.39040a	08		php		                PHP
.39040b	c2 20		rep #$20	                REP #$20        ; set A long
.39040d	a9 00 00	lda #$0000	                LDA #0         ; set DP to page 0
.390410	5b		tcd		                TCD
.390411	28		plp		                PLP
.390412	68		pla		                PLA             ; end setdp macro
.390413	e2 20		sep #$20	                SEP #$20        ; set A short
.390415	a2 00 00	ldx #$0000	                LDX #$0000
.390418	a9 00		lda #$00	                LDA #$00
.39041a					CLEAR_MEM_LOOP
.39041a	95 00		sta $00,x	                STA $0000, X
.39041c	e8		inx		                INX
.39041d	e0 00 01	cpx #$0100	                CPX #$0100
.390420	d0 f8		bne $39041a	                BNE CLEAR_MEM_LOOP
.390422	ea		nop		                NOP
.390423	a9 ff		lda #$ff	                LDA #$FF
.390425	8f 48 01 00	sta $000148	                STA @lINT_EDGE_REG0
.390429	8f 49 01 00	sta $000149	                STA @lINT_EDGE_REG1
.39042d	8f 4a 01 00	sta $00014a	                STA @lINT_EDGE_REG2
.390431	8f 4b 01 00	sta $00014b	                STA @lINT_EDGE_REG3
.390435	8f 4c 01 00	sta $00014c	                STA @lINT_MASK_REG0
.390439	8f 4d 01 00	sta $00014d	                STA @lINT_MASK_REG1
.39043d	8f 4e 01 00	sta $00014e	                STA @lINT_MASK_REG2
.390441	8f 4f 01 00	sta $00014f	                STA @lINT_MASK_REG3
.390445	c2 30		rep #$30	                REP #$30        ; set A&X long
.390447	a9 00 a0	lda #$a000	                LDA #<>SCREEN_PAGE0      ; store the initial screen buffer location
.39044a	85 0c		sta $0c		                STA SCREENBEGIN
.39044c	85 17		sta $17		                STA CURSORPOS
.39044e	a9 00 c0	lda #$c000	                LDA #<>CS_COLOR_MEM_PTR   ; Set the initial COLOR cursor position
.390451	85 1f		sta $1f		                STA COLORPOS
.390453	e2 20		sep #$20	                SEP #$20        ; set A short
.390455	a9 af		lda #$af	                LDA #`SCREEN_PAGE0
.390457	85 0e		sta $0e		                STA SCREENBEGIN+2
.390459	85 19		sta $19		                STA CURSORPOS+2
.39045b	a9 af		lda #$af	                LDA #`CS_COLOR_MEM_PTR    ; Set the initial COLOR cursor position
.39045d	85 21		sta $21		                STA COLORPOS+2
.39045f	e2 20		sep #$20	                SEP #$20        ; set A short
.390461	a9 00		lda #$00	                LDA #$00
.390463	8f 87 0f 00	sta $000f87	                STA KEYBOARD_SC_FLG     ; Clear the Keyboard Flag
.390467	a9 9f		lda #$9f	                LDA #$9F ; Channel Two - No Atteniation
.390469	8d 00 f1	sta $aff100	                STA $AFF100
.39046c	a9 bf		lda #$bf	                LDA #$BF ; Channel Two - No Atteniation
.39046e	8d 00 f1	sta $aff100	                STA $AFF100
.390471	a9 df		lda #$df	                LDA #$DF ; Channel Two - No Atteniation
.390473	8d 00 f1	sta $aff100	                STA $AFF100
.390476	a9 ff		lda #$ff	                LDA #$FF ; Channel Two - No Atteniation
.390478	8d 00 f1	sta $aff100	                STA $AFF100
.39047b	c2 30		rep #$30	                REP #$30        ; set A&X long
.39047d	a2 48 00	ldx #$0048	                LDX #72
.390480	86 0f		stx $0f		                STX COLS_VISIBLE
.390482	a0 34 00	ldy #$0034	                LDY #52
.390485	84 13		sty $13		                STY LINES_VISIBLE
.390487	a2 80 00	ldx #$0080	                LDX #128
.39048a	86 11		stx $11		                STX COLS_PER_LINE
.39048c	a0 40 00	ldy #$0040	                LDY #64
.39048f	84 15		sty $15		                STY LINES_MAX
.390491	a9 ed 00	lda #$00ed	                LDA #$ED                  ; Set the default text color to light gray on dark gray
.390494	85 1e		sta $1e		                STA CURCOLOR
.390496	22 20 12 39	jsl $391220	                JSL INITMOUSEPOINTER
.39049a	22 bc 10 38	jsl $3810bc	                JSL INITCURSOR
.39049e	22 cc 10 38	jsl $3810cc	                JSL INITVKYTXTMODE
.3904a2	22 f5 11 39	jsl $3911f5	                JSL IINITFONTSET
.3904a6	22 e3 0e 39	jsl $390ee3	                JSL ICLRSCREEN  ; Clear Screen and Set a standard color in Color Memory
.3904aa	a9 01 00	lda #$0001	                LDA #CHAN_COM1    ; Initialize COM1
.3904ad	22 45 43 38	jsl $384345	                JSL UART_SELECT
.3904b1	22 b1 43 38	jsl $3843b1	                JSL UART_INIT
.3904b5	a9 02 00	lda #$0002	                LDA #CHAN_COM2    ; Initialize COM2
.3904b8	22 45 43 38	jsl $384345	                JSL UART_SELECT
.3904bc	22 b1 43 38	jsl $3843b1	                JSL UART_INIT
.3904c0	a9 00 00	lda #$0000	                LDA #0
.3904c3	22 38 10 38	jsl $381038	                JSL SETIN
.3904c7	22 3c 10 38	jsl $38103c	                JSL SETOUT
.3904cb	c2 20		rep #$20	                REP #$20        ; set A long
.3904cd	a2 00 00	ldx #$0000	                LDX #0
.3904d0	a0 00 00	ldy #$0000	                LDY #0
.3904d3	22 04 0e 39	jsl $390e04	                JSL ILOCATE
.3904d7	c2 30		rep #$30	                REP #$30        ; set A&X long
.3904d9					greet
.3904d9	48		pha		                PHA             ; begin setdbr macro
.3904da	08		php		                PHP
.3904db	e2 20		sep #$20	                SEP #$20        ; set A short
.3904dd	a9 39		lda #$39	                LDA #`greet_msg
.3904df	48		pha		                PHA
.3904e0	ab		plb		                PLB
.3904e1	28		plp		                PLP
.3904e2	68		pla		                PLA             ; end setdbr macro
.3904e3	a2 fd 18	ldx #$18fd	                LDX #<>greet_msg
.3904e6	22 d4 0b 39	jsl $390bd4	                JSL IPRINT       ; print the first line
.3904ea	22 0e 0f 39	jsl $390f0e	                JSL ICOLORFLAG  ; This is to set the Color Memory for the Logo
.3904ee	48		pha		                PHA             ; begin setdp macro
.3904ef	08		php		                PHP
.3904f0	c2 20		rep #$20	                REP #$20        ; set A long
.3904f2	a9 00 00	lda #$0000	                LDA #0         ; set DP to page 0
.3904f5	5b		tcd		                TCD
.3904f6	28		plp		                PLP
.3904f7	68		pla		                PLA             ; end setdp macro
.3904f8	22 3c 9a 01	jsl $019a3c	                JSL FDD_Test
.3904fc	80 fe		bra $3904fc	test_end_loop_FDD:   BRA test_end_loop_FDD
.3904fe	a9 01 00	lda #$0001	                LDA FAT32_SD
.390501	8f f7 08 01	sta $0108f7	                STA FAT32_SD_FDD_HDD_Sell ; sellect the SD card as storage
.390505	22 e1 14 01	jsl $0114e1	                JSL ISD_INIT
.390509	a9 50 00	lda #$0050	LDA #$50
.39050c	22 42 45 38	jsl $384542	JSL IPRINT_HEX
.390510	a9 0d 00	lda #$000d	LDA #$0D
.390513	22 f4 0b 39	jsl $390bf4	JSL IPUTC
.390517	22 2f 09 01	jsl $01092f	                JSL FAT32_init
.39051b	a9 60 00	lda #$0060	LDA #$60
.39051e	22 42 45 38	jsl $384542	JSL IPRINT_HEX
.390522	a9 0d 00	lda #$000d	LDA #$0D
.390525	22 f4 0b 39	jsl $390bf4	JSL IPUTC
.390529	22 ab 0a 01	jsl $010aab	                JSL FAT32_DIR_CMD
.39052d	a9 61 00	lda #$0061	LDA #$61
.390530	22 42 45 38	jsl $384542	JSL IPRINT_HEX
.390534	a9 0d 00	lda #$000d	LDA #$0D
.390537	22 f4 0b 39	jsl $390bf4	JSL IPUTC
.39053b	22 76 09 01	jsl $010976	                JSL FAT32_Open_Creat_Write_File
.39053f	a9 62 00	lda #$0062	LDA #$62
.390542	22 42 45 38	jsl $384542	JSL IPRINT_HEX
.390546	a9 0d 00	lda #$000d	LDA #$0D
.390549	22 f4 0b 39	jsl $390bf4	JSL IPUTC
.39054d	22 1e 0a 01	jsl $010a1e	                JSL FAT32_Open_Read_Display_File
.390551	da		phx		                PHX
.390552	48		pha		                PHA
.390553	80 1b		bra $390570	                BRA TEST_TEXT_7998
>390555	0d 41 63 74 69 76 61 74		                text_7998 .text $0d,"Activate the BMP engine  ",0
>39055d	65 20 74 68 65 20 42 4d 50 20 65 6e 67 69 6e 65
>39056d	20 20 00
.390570					                TEST_TEXT_7998:
.390570	a2 55 05	ldx #$0555	                LDX #<>text_7998
.390573	a9 39 00	lda #$0039	                LDA #`text_7998
.390576	22 25 45 38	jsl $384525	                JSL IPUTS_ABS       ; print the first line
.39057a	a9 0d 00	lda #$000d	                LDA #$0D
.39057d	22 f4 0b 39	jsl $390bf4	                JSL IPUTC
.390581	68		pla		                PLA
.390582	fa		plx		                PLX
.390583	20 88 05	jsr $390588	                JSR INIT_DISPLAY
.390586					GAME_LOOP:
.390586	80 fe		bra $390586	                BRA GAME_LOOP

;******  Processing file: src\display.asm

.390588					INIT_DISPLAY
.390588	e2 20		sep #$20	                SEP #$20        ; set A short
.39058a	a9 00		lda #$00	                LDA #0
.39058c	8f 04 00 af	sta $af0004	                STA BORDER_CTRL_REG
.390590	a9 0c		lda #$0c	                LDA #Mstr_Ctrl_Graph_Mode_En + Mstr_Ctrl_Bitmap_En; + Mstr_Ctrl_TileMap_En + Mstr_Ctrl_Sprite_En ; + Mstr_Ctrl_Text_Mode_En + Mstr_Ctrl_Text_Overlay
.390592	8f 00 00 af	sta $af0000	                STA MASTER_CTRL_REG_L
.390596	c2 30		rep #$30	                REP #$30        ; set A&X long
.390598	a2 00 00	ldx #$0000	                LDX #<>$0
.39059b	a2 00 00	ldx #$0000	                LDX #<>$0
.39059e	a9 00 00	lda #$0000	                LDA #$0
.3905a1					              erase_Byte_00:
.3905a1	9f 00 00 b0	sta $b00000,x	                STA @l $B00000,x
.3905a5	e8		inx		                INX
.3905a6	e0 00 00	cpx #$0000	                CPX #0
.3905a9	d0 f6		bne $3905a1	                BNE erase_Byte_00
.3905ab					              erase_Byte_01:
.3905ab	9f 00 00 b1	sta $b10000,x	                STA @l $B10000,x
.3905af	e8		inx		                INX
.3905b0	e0 00 00	cpx #$0000	                CPX #0
.3905b3	d0 f6		bne $3905ab	                BNE erase_Byte_01
.3905b5					              erase_Byte_02:
.3905b5	9f 00 00 b2	sta $b20000,x	                STA @l $B20000,x
.3905b9	e8		inx		                INX
.3905ba	e0 00 00	cpx #$0000	                CPX #0
.3905bd	d0 f6		bne $3905b5	                BNE erase_Byte_02
.3905bf					              erase_Byte_03:
.3905bf	9f 00 00 b3	sta $b30000,x	                STA @l $B30000,x
.3905c3	e8		inx		                INX
.3905c4	e0 00 00	cpx #$0000	                CPX #0
.3905c7	d0 f6		bne $3905bf	                BNE erase_Byte_03
.3905c9					              erase_Byte_04:
.3905c9	9f 00 00 b4	sta $b40000,x	                STA @l $B40000,x
.3905cd	e8		inx		                INX
.3905ce	e0 00 00	cpx #$0000	                CPX #0
.3905d1	d0 f6		bne $3905c9	                BNE erase_Byte_04
.3905d3	c2 30		rep #$30	                REP #$30        ; set A&X long
.3905d5	a2 82 06	ldx #$0682	                LDX #<>PALETTE
.3905d8	a0 00 20	ldy #$2000	                LDY #<>GRPH_LUT0_PTR
.3905db	a9 00 04	lda #$0400	                LDA #1024
.3905de	54 af 39	mvn $39,$af	                MVN <`PALETTE,<`GRPH_LUT0_PTR
.3905e1	a2 82 06	ldx #$0682	                LDX #<>PALETTE
.3905e4	a0 00 24	ldy #$2400	                LDY #<>GRPH_LUT1_PTR
.3905e7	a9 00 04	lda #$0400	                LDA #1024
.3905ea	54 af 39	mvn $39,$af	                MVN <`PALETTE,<`GRPH_LUT1_PTR
.3905ed	a2 00 00	ldx #$0000	                LDX #<>$1B0000
.3905f0	a0 00 00	ldy #$0000	                LDY #<>$B00000
.3905f3	a9 00 80	lda #$8000	                LDA #$8000
.3905f6	54 b0 1b	mvn $1b,$b0	                MVN <`$1B0000,<`$B00000
.3905f9	a2 00 80	ldx #$8000	                LDX #<>$1B0000+$8000
.3905fc	a0 00 80	ldy #$8000	                LDY #<>$B08000
.3905ff	a9 00 80	lda #$8000	                LDA #$8000
.390602	54 b0 1b	mvn $1b,$b0	                MVN <`$1B0000,<`$B08000
.390605	a2 00 00	ldx #$0000	                LDX #<>$1C0000
.390608	a0 00 00	ldy #$0000	                LDY #<>$B10000
.39060b	a9 00 80	lda #$8000	                LDA #$8000
.39060e	54 b1 1c	mvn $1c,$b1	                MVN <`$1C0000,<`$B10000
.390611	a2 00 80	ldx #$8000	                LDX #<>$1C0000+$8000
.390614	a0 00 80	ldy #$8000	                LDY #<>$B18000
.390617	a9 00 80	lda #$8000	                LDA #$8000
.39061a	54 b1 1c	mvn $1c,$b1	                MVN <`$1C0000,<`$B18000
.39061d	a2 00 00	ldx #$0000	                LDX #<>$1D0000
.390620	a0 00 00	ldy #$0000	                LDY #<>$B20000
.390623	a9 00 80	lda #$8000	                LDA #$8000
.390626	54 b2 1d	mvn $1d,$b2	                MVN <`$1D0000,<`$B20000
.390629	a2 00 80	ldx #$8000	                LDX #<>$1D0000+$8000
.39062c	a0 00 80	ldy #$8000	                LDY #<>$B28000
.39062f	a9 00 80	lda #$8000	                LDA #$8000
.390632	54 b2 1d	mvn $1d,$b2	                MVN <`$1D0000,<`$B28000
.390635	a2 00 00	ldx #$0000	                LDX #<>$1E0000
.390638	a0 00 00	ldy #$0000	                LDY #<>$B30000
.39063b	a9 00 80	lda #$8000	                LDA #$8000
.39063e	54 b3 1e	mvn $1e,$b3	                MVN <`$1E0000,<`$B30000
.390641	a2 00 80	ldx #$8000	                LDX #<>$1E0000+$8000
.390644	a0 00 80	ldy #$8000	                LDY #<>$B38000
.390647	a9 00 80	lda #$8000	                LDA #$8000
.39064a	54 b3 1e	mvn $1e,$b3	                MVN <`$1E0000,<`$B38000
.39064d	a2 00 00	ldx #$0000	                LDX #<>$1F0000
.390650	a0 00 00	ldy #$0000	                LDY #<>$B40000
.390653	a9 00 b0	lda #$b000	                LDA #$B000
.390656	54 b4 1f	mvn $1f,$b4	                MVN <`$1F0000,<`$B40000
.390659	e2 20		sep #$20	                SEP #$20        ; set A short
.39065b	a9 03		lda #$03	                LDA #1+2
.39065d	8f 40 01 af	sta $af0140	                STA @l BM_CONTROL_REG
.390661	a9 00		lda #$00	                LDA #00
.390663	8f 41 01 af	sta $af0141	                STA @l BM_START_ADDY_L
.390667	8f 42 01 af	sta $af0142	                STA @l BM_START_ADDY_M
.39066b	a9 00		lda #$00	                LDA #00
.39066d	8f 43 01 af	sta $af0143	                STA @l BM_START_ADDY_H
.390671	c2 20		rep #$20	                REP #$20        ; set A long
.390673	a9 80 02	lda #$0280	                LDA #640
.390676	8f 44 01 af	sta $af0144	                STA @l BM_X_SIZE_L
.39067a	a9 e0 01	lda #$01e0	                LDA #480
.39067d	8f 46 01 af	sta $af0146	                STA @l BM_Y_SIZE_L
.390681	60		rts		                RTS
.390682					PALETTE
>390682	00 00 00 00 00 00 80 00		.binary "assets/halflife.pal"
>39068a	00 80 00 00 00 80 80 00 80 00 00 00 80 00 80 00
>39069a	80 80 00 00 c0 c0 c0 00 c0 dc c0 00 f0 ca a6 00
>3906aa	00 20 40 00 00 20 60 00 00 20 80 00 00 20 a0 00
>3906ba	00 20 c0 00 00 20 e0 00 00 40 00 00 00 40 20 00
>3906ca	00 40 40 00 00 40 60 00 00 40 80 00 00 40 a0 00
>3906da	00 40 c0 00 00 40 e0 00 00 60 00 00 00 60 20 00
>3906ea	00 60 40 00 00 60 60 00 00 60 80 00 00 60 a0 00
>3906fa	00 60 c0 00 00 60 e0 00 00 80 00 00 00 80 20 00
>39070a	00 80 40 00 00 80 60 00 00 80 80 00 00 80 a0 00
>39071a	00 80 c0 00 00 80 e0 00 00 a0 00 00 00 a0 20 00
>39072a	00 a0 40 00 00 a0 60 00 00 a0 80 00 00 a0 a0 00
>39073a	00 a0 c0 00 00 a0 e0 00 00 c0 00 00 00 c0 20 00
>39074a	00 c0 40 00 00 c0 60 00 00 c0 80 00 00 c0 a0 00
>39075a	00 c0 c0 00 00 c0 e0 00 00 e0 00 00 00 e0 20 00
>39076a	00 e0 40 00 00 e0 60 00 00 e0 80 00 00 e0 a0 00
>39077a	00 e0 c0 00 00 e0 e0 00 40 00 00 00 40 00 20 00
>39078a	40 00 40 00 40 00 60 00 40 00 80 00 40 00 a0 00
>39079a	40 00 c0 00 40 00 e0 00 40 20 00 00 40 20 20 00
>3907aa	40 20 40 00 40 20 60 00 40 20 80 00 40 20 a0 00
>3907ba	40 20 c0 00 40 20 e0 00 40 40 00 00 40 40 20 00
>3907ca	40 40 40 00 40 40 60 00 40 40 80 00 40 40 a0 00
>3907da	40 40 c0 00 40 40 e0 00 40 60 00 00 40 60 20 00
>3907ea	40 60 40 00 40 60 60 00 40 60 80 00 40 60 a0 00
>3907fa	40 60 c0 00 40 60 e0 00 40 80 00 00 40 80 20 00
>39080a	40 80 40 00 40 80 60 00 40 80 80 00 40 80 a0 00
>39081a	40 80 c0 00 40 80 e0 00 40 a0 00 00 40 a0 20 00
>39082a	40 a0 40 00 40 a0 60 00 40 a0 80 00 40 a0 a0 00
>39083a	40 a0 c0 00 40 a0 e0 00 40 c0 00 00 40 c0 20 00
>39084a	40 c0 40 00 40 c0 60 00 40 c0 80 00 40 c0 a0 00
>39085a	40 c0 c0 00 40 c0 e0 00 40 e0 00 00 40 e0 20 00
>39086a	40 e0 40 00 40 e0 60 00 40 e0 80 00 40 e0 a0 00
>39087a	40 e0 c0 00 40 e0 e0 00 80 00 00 00 80 00 20 00
>39088a	80 00 40 00 80 00 60 00 80 00 80 00 80 00 a0 00
>39089a	80 00 c0 00 80 00 e0 00 80 20 00 00 80 20 20 00
>3908aa	80 20 40 00 80 20 60 00 80 20 80 00 80 20 a0 00
>3908ba	80 20 c0 00 80 20 e0 00 80 40 00 00 80 40 20 00
>3908ca	80 40 40 00 80 40 60 00 80 40 80 00 80 40 a0 00
>3908da	80 40 c0 00 80 40 e0 00 80 60 00 00 80 60 20 00
>3908ea	80 60 40 00 80 60 60 00 80 60 80 00 80 60 a0 00
>3908fa	80 60 c0 00 80 60 e0 00 80 80 00 00 80 80 20 00
>39090a	80 80 40 00 80 80 60 00 80 80 80 00 80 80 a0 00
>39091a	80 80 c0 00 80 80 e0 00 80 a0 00 00 80 a0 20 00
>39092a	80 a0 40 00 80 a0 60 00 80 a0 80 00 80 a0 a0 00
>39093a	80 a0 c0 00 80 a0 e0 00 80 c0 00 00 80 c0 20 00
>39094a	80 c0 40 00 80 c0 60 00 80 c0 80 00 80 c0 a0 00
>39095a	80 c0 c0 00 80 c0 e0 00 80 e0 00 00 80 e0 20 00
>39096a	80 e0 40 00 80 e0 60 00 80 e0 80 00 80 e0 a0 00
>39097a	80 e0 c0 00 80 e0 e0 00 c0 00 00 00 c0 00 20 00
>39098a	c0 00 40 00 c0 00 60 00 c0 00 80 00 c0 00 a0 00
>39099a	c0 00 c0 00 c0 00 e0 00 c0 20 00 00 c0 20 20 00
>3909aa	c0 20 40 00 c0 20 60 00 c0 20 80 00 c0 20 a0 00
>3909ba	c0 20 c0 00 c0 20 e0 00 c0 40 00 00 c0 40 20 00
>3909ca	c0 40 40 00 c0 40 60 00 c0 40 80 00 c0 40 a0 00
>3909da	c0 40 c0 00 c0 40 e0 00 c0 60 00 00 c0 60 20 00
>3909ea	c0 60 40 00 c0 60 60 00 c0 60 80 00 c0 60 a0 00
>3909fa	c0 60 c0 00 c0 60 e0 00 c0 80 00 00 c0 80 20 00
>390a0a	c0 80 40 00 c0 80 60 00 c0 80 80 00 c0 80 a0 00
>390a1a	c0 80 c0 00 c0 80 e0 00 c0 a0 00 00 c0 a0 20 00
>390a2a	c0 a0 40 00 c0 a0 60 00 c0 a0 80 00 c0 a0 a0 00
>390a3a	c0 a0 c0 00 c0 a0 e0 00 c0 c0 00 00 c0 c0 20 00
>390a4a	c0 c0 40 00 c0 c0 60 00 c0 c0 80 00 c0 c0 a0 00
>390a5a	f0 fb ff 00 a4 a0 a0 00 80 80 80 00 00 00 ff 00
>390a6a	00 ff 00 00 00 ff ff 00 ff 00 00 00 ff 00 ff 00
>390a7a	ff ff 00 00 ff ff ff 00

;******  Return to file: src\kernel.asm

.390a82	a9 63 00	lda #$0063	LDA #$63
.390a85	22 42 45 38	jsl $384542	JSL IPRINT_HEX
.390a89	a9 0d 00	lda #$000d	LDA #$0D
.390a8c	22 ab 0c 02	jsl $020cab	                JSL FAT_32_test_fat_code ; test if the function to get the next fat entry is working as expected
.390a90	22 f4 0b 39	jsl $390bf4	JSL IPUTC
.390a94	a9 0d 00	lda #$000d	LDA #$0D
.390a97	22 f4 0b 39	jsl $390bf4	JSL IPUTC
.390a9b	80 1a		bra $390ab7	                BRA test_end_loop
.390a9d	22 2f 09 01	jsl $01092f	                JSL FAT32_init  ; initialise the FAT so get the MBR / boot sector / first Root directory cluster
.390aa1	22 ab 0a 01	jsl $010aab	                JSL FAT32_DIR_CMD
.390aa5	a9 57 00	lda #$0057	                LDA #$57
.390aa8	22 42 45 38	jsl $384542	                JSL IPRINT_HEX
.390aac	a9 01 00	lda #$0001	                LDA FAT32_SD
.390aaf	8f f7 08 01	sta $0108f7	                STA FAT32_SD_FDD_HDD_Sell ; sellect the SD card as storage
.390ab3	22 9c 0e 01	jsl $010e9c	                JSL IFAT32_READ_MBR
.390ab7	80 fe		bra $390ab7	test_end_loop:   BRA test_end_loop
.390ab9	e2 20		sep #$20	                SEP #$20        ; set A short
.390abb	c2 10		rep #$10	                REP #$10        ; set X long
.390abd	a9 9f		lda #$9f	                LDA #$9F ; Channel Two - No Atteniation
.390abf	8f 00 f1 af	sta $aff100	                STA $AFF100
.390ac3	a9 bf		lda #$bf	                LDA #$BF ; Channel Two - No Atteniation
.390ac5	8f 00 f1 af	sta $aff100	                STA $AFF100
.390ac9	a9 df		lda #$df	                LDA #$DF ; Channel Two - No Atteniation
.390acb	8f 00 f1 af	sta $aff100	                STA $AFF100
.390acf	a9 ff		lda #$ff	                LDA #$FF ; Channel Two - No Atteniation
.390ad1	8f 00 f1 af	sta $aff100	                STA $AFF100
.390ad5	a9 83		lda #$83	                LDA #$83 ; Channel Zero - No Atteniation
.390ad7	8f 00 f1 af	sta $aff100	                STA $AFF100
.390adb	a9 12		lda #$12	                LDA #$12 ; Channel Zero - No Atteniation
.390add	8f 00 f1 af	sta $aff100	                STA $AFF100
.390ae1	a9 90		lda #$90	                LDA #$90 ; Channel One - No Atteniation
.390ae3	8f 00 f1 af	sta $aff100	                STA $AFF100
.390ae7	a2 00 40	ldx #$4000	                LDX #16384      ; 400ms
.390aea	22 92 18 39	jsl $391892	          		 	JSL ILOOP_MS
.390aee	a9 9f		lda #$9f	                LDA #$9F ; Channel Two - No Atteniation
.390af0	8f 00 f1 af	sta $aff100	                STA $AFF100
.390af4	58		cli		                CLI                   ; Make sure no Interrupt will come and fuck up Init before this point.
.390af5	e2 20		sep #$20	                SEP #$20        ; set A short
.390af7	c2 10		rep #$10	                REP #$10        ; set X long
.390af9	48		pha		                PHA             ; begin setdbr macro
.390afa	08		php		                PHP
.390afb	e2 20		sep #$20	                SEP #$20        ; set A short
.390afd	a9 39		lda #$39	                LDA #`greet_msg
.390aff	48		pha		                PHA
.390b00	ab		plb		                PLB
.390b01	28		plp		                PLP
.390b02	68		pla		                PLA             ; end setdbr macro
.390b03	af 0e e8 af	lda $afe80e	                LDA @lDIP_BOOTMODE    ; {HD_INSTALLED, 5'b0_0000, BOOT_MODE[1], BOOT_MODE[0]}
.390b07	29 03		and #$03	                AND #%00000011        ; Look at the mode bits
.390b09	c9 00		cmp #$00	                CMP #DIP_BOOT_IDE     ; DIP set for IDE?
.390b0b	f0 14		beq $390b21	                BEQ BOOTIDE           ; Yes: Boot from the IDE
.390b0d	c9 01		cmp #$01	                CMP #DIP_BOOT_SDCARD  ; DIP set for SD card?
.390b0f	f0 0b		beq $390b1c	                BEQ BOOTSDC           ; Yes: try to boot from the SD card
.390b11	c9 02		cmp #$02	                CMP #DIP_BOOT_FLOPPY  ; DIP set for floppy?
.390b13	f0 11		beq $390b26	                BEQ BOOTFLOPPY        ; Yes: try to boot from the floppy
.390b15	5c 00 00 3a	jmp $3a0000	BOOTBASIC       JML BASIC             ; Cold start of the BASIC interpreter (or its replacement)
.390b19	ea		nop		CREDIT_LOCK     NOP
.390b1a	80 fd		bra $390b19	                BRA CREDIT_LOCK
.390b1c					BOOTSDC
.390b1c	a2 a2 1c	ldx #$1ca2	                LDX #<>sdcard_notimpl ; Print a message saying SD card booting is not implemented
.390b1f	80 08		bra $390b29	                BRA PR_BOOT_ERROR
.390b21					BOOTIDE
.390b21	a2 cf 1c	ldx #$1ccf	                LDX #<>ide_notimpl    ; Print a message saying SD card booting is not implemented
.390b24	80 03		bra $390b29	                BRA PR_BOOT_ERROR
.390b26					BOOTFLOPPY
.390b26	a2 fe 1c	ldx #$1cfe	                LDX #<>floppy_notimpl ; Print a message saying SD card booting is not implemented
.390b29	22 d4 0b 39	jsl $390bd4	PR_BOOT_ERROR   JSL IPRINT
.390b2d	ea		nop		LOOP_FOREVER    NOP
.390b2e	80 fd		bra $390b2d	                BRA LOOP_FOREVER
.390b30					IBREAK
.390b30	48		pha		                PHA             ; begin setdp macro
.390b31	08		php		                PHP
.390b32	c2 20		rep #$20	                REP #$20        ; set A long
.390b34	a9 00 00	lda #$0000	                LDA #0         ; set DP to page 0
.390b37	5b		tcd		                TCD
.390b38	28		plp		                PLP
.390b39	68		pla		                PLA             ; end setdp macro
.390b3a	68		pla		                PLA             ; Pull .Y and stuff it in the CPUY variable
.390b3b	8f 48 02 00	sta $000248	                STA CPUY
.390b3f	68		pla		                PLA             ; Pull .X and stuff it in the CPUY variable
.390b40	8f 46 02 00	sta $000246	                STA CPUX
.390b44	68		pla		                PLA             ; Pull .A and stuff it in the CPUY variable
.390b45	8f 44 02 00	sta $000244	                STA CPUA
.390b49	68		pla		                PLA
.390b4a	8f 4c 02 00	sta $00024c	                STA CPUDP       ; Pull Direct page
.390b4e	e2 20		sep #$20	                SEP #$20        ; set A short
.390b50	68		pla		                PLA             ; Pull Data Bank (8 bits)
.390b51	8f 4e 02 00	sta $00024e	                STA CPUDBR
.390b55	68		pla		                PLA             ; Pull Flags (8 bits)
.390b56	8f 4f 02 00	sta $00024f	                STA CPUFLAGS
.390b5a	c2 20		rep #$20	                REP #$20        ; set A long
.390b5c	68		pla		                PLA             ; Pull Program Counter (16 bits)
.390b5d	8f 40 02 00	sta $000240	                STA CPUPC
.390b61	e2 20		sep #$20	                SEP #$20        ; set A short
.390b63	68		pla		                PLA             ; Pull Program Bank (8 bits)
.390b64	8f 42 02 00	sta $000242	                STA CPUPBR
.390b68	c2 20		rep #$20	                REP #$20        ; set A long
.390b6a	3b		tsc		                TSA             ; Get the stack
.390b6b	8f 4a 02 00	sta $00024a	                STA CPUSTACK    ; Store the stack at immediately before the interrupt was asserted
.390b6f	a9 ff fe	lda #$feff	                LDA #<>STACK_END   ; initialize stack pointer back to the bootup value
.390b72	1b		tcs		                TAS
.390b73	5c 04 00 3a	jmp $3a0004	                JML MONITOR
.390b77					IREADY
.390b77	48		pha		                PHA             ; begin setdbr macro
.390b78	08		php		                PHP
.390b79	e2 20		sep #$20	                SEP #$20        ; set A short
.390b7b	a9 39		lda #$39	                LDA #`ready_msg
.390b7d	48		pha		                PHA
.390b7e	ab		plb		                PLB
.390b7f	28		plp		                PLP
.390b80	68		pla		                PLA             ; end setdbr macro
.390b81	e2 20		sep #$20	                SEP #$20        ; set A short
.390b83	a2 30 1d	ldx #$1d30	                LDX #<>ready_msg
.390b86	22 d4 0b 39	jsl $390bd4	                JSL IPRINT
.390b8a					IREADYWAIT
.390b8a	22 a4 0b 39	jsl $390ba4	                JSL IGETCHE
.390b8e	80 fa		bra $390b8a	                BRA IREADYWAIT
.390b90	db		stp		IKEYDOWN        STP             ; Keyboard key pressed
.390b91	db		stp		IRETURN         STP
.390b92	08		php		ISETIN          PHP
.390b93	e2 20		sep #$20	                SEP #$20        ; set A short
.390b95	8f 04 07 00	sta $000704	                STA @lCHAN_IN   ; Save the channel number
.390b99	28		plp		                PLP
.390b9a	6b		rtl		                RTL
.390b9b	08		php		ISETOUT         PHP
.390b9c	e2 20		sep #$20	                SEP #$20        ; set A short
.390b9e	8f 03 07 00	sta $000703	                STA @lCHAN_OUT  ; Save the channel number
.390ba2	28		plp		                PLP
.390ba3	6b		rtl		                RTL
.390ba4	22 ad 0b 39	jsl $390bad	IGETCHE         JSL IGETCHW
.390ba8	22 f4 0b 39	jsl $390bf4	                JSL IPUTC
.390bac	6b		rtl		                RTL
.390bad					IGETCHW
.390bad	08		php		                PHP
.390bae	e2 20		sep #$20	                SEP #$20        ; set A short
.390bb0	af 04 07 00	lda $000704	                LDA @lCHAN_IN       ; Get the current input channel
.390bb4	f0 17		beq $390bcd	                BEQ getc_keyboard   ; If it's keyboard, read from the key buffer
.390bb6	c9 01		cmp #$01	                CMP #CHAN_COM1      ; Check to see if it's the COM1 port
.390bb8	f0 09		beq $390bc3	                BEQ getc_uart       ; Yes: handle reading from the UART
.390bba	c9 02		cmp #$02	                CMP #CHAN_COM2      ; Check to see if it's the COM2 port
.390bbc	f0 05		beq $390bc3	                BEQ getc_uart       ; Yes: handle reading from the UART
.390bbe	a9 00		lda #$00	                LDA #0              ; Return 0 if no valid device
.390bc0	28		plp		                PLP
.390bc1	38		sec		                SEC                 ; And return carry set
.390bc2	6b		rtl		                RTL
.390bc3	22 45 43 38	jsl $384345	getc_uart       JSL UART_SELECT     ; Select the correct COM port
.390bc7	22 f9 43 38	jsl $3843f9	                JSL UART_GETC       ; Get the charater from the COM port
.390bcb	80 04		bra $390bd1	                BRA done
.390bcd	22 02 43 38	jsl $384302	getc_keyboard   JSL KBD_GETC        ; Get the character from the keyboard
.390bd1	28		plp		done            PLP
.390bd2	18		clc		                CLC                 ; Return carry clear for valid data
.390bd3	6b		rtl		                RTL
.390bd4	22 dd 0b 39	jsl $390bdd	IPRINT          JSL IPUTS
.390bd8	22 1a 0d 39	jsl $390d1a	                JSL IPRINTCR
.390bdc	6b		rtl		                RTL
.390bdd	48		pha		IPUTS           PHA
.390bde	08		php		                PHP
.390bdf	e2 20		sep #$20	                SEP #$20        ; set A short
.390be1	c2 10		rep #$10	                REP #$10        ; set X long
.390be3	bd 00 00	lda $390000,x	iputs1          LDA $0,b,x      ; read from the string
.390be6	f0 08		beq $390bf0	                BEQ iputs_done
.390be8	22 f4 0b 39	jsl $390bf4	iputs2          JSL IPUTC
.390bec	e8		inx		iputs3          INX
.390bed	4c e3 0b	jmp $390be3	                JMP iputs1
.390bf0	e8		inx		iputs_done      INX
.390bf1	28		plp		                PLP
.390bf2	68		pla		                PLA
.390bf3	6b		rtl		                RTL
.390bf4					IPUTC
.390bf4	da		phx		                PHX
.390bf5	5a		phy		                PHY
.390bf6	0b		phd		                PHD
.390bf7	8b		phb		                PHB
.390bf8	08		php		                PHP                 ; stash the flags (we'll be changing M)
.390bf9	48		pha		                PHA             ; begin setdp macro
.390bfa	08		php		                PHP
.390bfb	c2 20		rep #$20	                REP #$20        ; set A long
.390bfd	a9 00 00	lda #$0000	                LDA #0         ; set DP to page 0
.390c00	5b		tcd		                TCD
.390c01	28		plp		                PLP
.390c02	68		pla		                PLA             ; end setdp macro
.390c03	48		pha		                PHA             ; begin setdbr macro
.390c04	08		php		                PHP
.390c05	e2 20		sep #$20	                SEP #$20        ; set A short
.390c07	a9 00		lda #$00	                LDA #0
.390c09	48		pha		                PHA
.390c0a	ab		plb		                PLB
.390c0b	28		plp		                PLP
.390c0c	68		pla		                PLA             ; end setdbr macro
.390c0d	e2 20		sep #$20	                SEP #$20        ; set A short
.390c0f	c2 10		rep #$10	                REP #$10        ; set X long
.390c11	48		pha		                PHA                 ; Save the character to print
.390c12	af 03 07 00	lda $000703	                LDA @lCHAN_OUT      ; Check the output channel #
.390c16	f0 16		beq $390c2e	                BEQ putc_screen     ; If it's 0: print to the screen
.390c18	c9 01		cmp #$01	                CMP #CHAN_COM1      ; Check to see if it's the COM1 port
.390c1a	f0 07		beq $390c23	                BEQ putc_uart       ; Yes: handle printing to the UART
.390c1c	c9 02		cmp #$02	                CMP #CHAN_COM2      ; Check to see if it's the COM2 port
.390c1e	f0 03		beq $390c23	                BEQ putc_uart       ; Yes: handle printing to the UART
.390c20	68		pla		                PLA                 ; Otherwise, just exit
.390c21	80 4f		bra $390c72	                BRA done
.390c23	22 45 43 38	jsl $384345	putc_uart       JSL UART_SELECT     ; Point to the correct UART
.390c27	68		pla		                PLA                 ; Recover the character to send
.390c28	22 1a 44 38	jsl $38441a	                JSL UART_PUTC       ; Send the character
.390c2c	80 44		bra $390c72	                BRA done
.390c2e	68		pla		putc_screen     PLA                 ; Get the character to print
.390c2f	c9 0a		cmp #$0a	                CMP #CHAR_LF        ; Linefeed moves cursor down one line
.390c31	f0 61		beq $390c94	                BEQ go_down
.390c33	c9 20		cmp #$20	                CMP #$20
.390c35	90 19		bcc $390c50	                BCC check_ctrl0     ; [$00..$1F]: check for arrows
.390c37	c9 7f		cmp #$7f	                CMP #$7F
.390c39	f0 3d		beq $390c78	                BEQ do_del
.390c3b	b0 02		bcs $390c3f	                BCS check_A0        ; [$20..$7E]: print it
.390c3d	80 29		bra $390c68	                BRA printc
.390c3f	c9 a0		cmp #$a0	check_A0        CMP #$A0
.390c41	90 02		bcc $390c45	                BCC check_ctrl1
.390c43	80 23		bra $390c68	                BRA printc          ; [$A0..$FF]: print it
.390c45	c9 91		cmp #$91	check_ctrl1     CMP #CHAR_DOWN      ; If the down arrow key was pressed
.390c47	f0 4b		beq $390c94	                BEQ go_down         ; ... move the cursor down one row
.390c49	c9 9d		cmp #$9d	                CMP #CHAR_LEFT      ; If the left arrow key was pressed
.390c4b	f0 59		beq $390ca6	                BEQ go_left         ; ... move the cursor left one column
.390c4d	4c 72 0c	jmp $390c72	                JMP done
.390c50	c9 09		cmp #$09	check_ctrl0     CMP #CHAR_TAB       ; If it's a TAB...
.390c52	f0 58		beq $390cac	                BEQ do_TAB          ; ... move to the next TAB stop
.390c54	c9 08		cmp #$08	                CMP #CHAR_BS        ; If it's a backspace...
.390c56	f0 2c		beq $390c84	                BEQ backspace       ; ... move the cursor back and replace with a space
.390c58	c9 0d		cmp #$0d	                CMP #CHAR_CR        ; If the carriage return was pressed
.390c5a	f0 32		beq $390c8e	                BEQ do_cr           ; ... move cursor down and to the first column
.390c5c	c9 11		cmp #$11	                CMP #CHAR_UP        ; If the up arrow key was pressed
.390c5e	f0 3a		beq $390c9a	                BEQ go_up           ; ... move the cursor up one row
.390c60	c9 1d		cmp #$1d	                CMP #CHAR_RIGHT     ; If the right arrow key was pressed
.390c62	f0 3c		beq $390ca0	                BEQ go_right        ; ... move the cursor right one column
.390c64	c9 0f		cmp #$0f	                CMP #CHAR_INS       ; If the insert key was pressed
.390c66	f0 16		beq $390c7e	                BEQ do_ins          ; ... insert a space
.390c68	87 17		sta [$17]	printc          STA [CURSORPOS]     ; Save the character on the screen
.390c6a	a5 1e		lda $1e		                LDA CURCOLOR        ; Set the color based on CURCOLOR
.390c6c	87 1f		sta [$1f]	                STA [COLORPOS]
.390c6e	22 60 0d 39	jsl $390d60	                JSL ICSRRIGHT       ; And advance the cursor
.390c72	28		plp		done            PLP
.390c73	ab		plb		                PLB
.390c74	2b		pld		                PLD
.390c75	7a		ply		                PLY
.390c76	fa		plx		                PLX
.390c77	6b		rtl		                RTL
.390c78	22 d3 0c 39	jsl $390cd3	do_del          JSL SCRSHIFTLL      ; Shift the current line left one space into the cursor
.390c7c	80 f4		bra $390c72	                BRA done
.390c7e	22 f6 0c 39	jsl $390cf6	do_ins          JSL SCRSHIFTLR      ; Shift the current line right one space from the cursor
.390c82	80 ee		bra $390c72	                BRA done
.390c84	22 93 0d 39	jsl $390d93	backspace       JSL ICSRLEFT
.390c88	22 d3 0c 39	jsl $390cd3	                JSL SCRSHIFTLL      ; Shift the current line left one space into the cursor
.390c8c	80 e4		bra $390c72	                BRA done
.390c8e	22 1a 0d 39	jsl $390d1a	do_cr           JSL IPRINTCR        ; Move the cursor to the beginning of the next line
.390c92	80 de		bra $390c72	                BRA done
.390c94	22 df 0d 39	jsl $390ddf	go_down         JSL ICSRDOWN        ; Move the cursor down one row (might force a scroll)
.390c98	80 d8		bra $390c72	                BRA done
.390c9a	22 b9 0d 39	jsl $390db9	go_up           JSL ICSRUP          ; Move the cursor up one line
.390c9e	80 d2		bra $390c72	                BRA done
.390ca0	22 60 0d 39	jsl $390d60	go_right        JSL ICSRRIGHT       ; Move the cursor right one column
.390ca4	80 cc		bra $390c72	                BRA done
.390ca6	22 93 0d 39	jsl $390d93	go_left         JSL ICSRLEFT        ; Move the cursor left one column
.390caa	80 c6		bra $390c72	                BRA done
.390cac					do_TAB
.390cac	c2 20		rep #$20	                REP #$20        ; set A long
.390cae	a5 1a		lda $1a		                LDA CURSORX         ; Get the current column
.390cb0	29 f8 ff	and #$fff8	                AND #$FFF8          ; See which group of 8 it's in
.390cb3	18		clc		                CLC
.390cb4	69 08 00	adc #$0008	                ADC #$0008          ; And move it to the next one
.390cb7	aa		tax		                TAX
.390cb8	a4 1c		ldy $1c		                LDY CURSORY
.390cba	e2 20		sep #$20	                SEP #$20        ; set A short
.390cbc	e4 0f		cpx $0f		set_xy          CPX COLS_VISIBLE    ; Check if we're still on screen horizontally
.390cbe	90 04		bcc $390cc4	                BCC check_row       ; Yes: check the row
.390cc0	a2 00 00	ldx #$0000	                LDX #0              ; No: move to the first column...
.390cc3	c8		iny		                INY                 ; ... and the next row
.390cc4	c4 13		cpy $13		check_row       CPY LINES_VISIBLE   ; Check if we're still on the screen vertically
.390cc6	90 05		bcc $390ccd	                BCC do_locate       ; Yes: reposition the cursor
.390cc8	22 50 0e 39	jsl $390e50	                JSL ISCROLLUP       ; No: scroll the screen
.390ccc	88		dey		                DEY                 ; And set the row to the last one
.390ccd	22 04 0e 39	jsl $390e04	do_locate       JSL ILOCATE         ; Set the cursor position
.390cd1	80 9f		bra $390c72	                BRA done
.390cd3	da		phx		SCRSHIFTLL      PHX
.390cd4	5a		phy		                PHY
.390cd5	48		pha		                PHA
.390cd6	08		php		                PHP
.390cd7	48		pha		                PHA             ; begin setdp macro
.390cd8	08		php		                PHP
.390cd9	c2 20		rep #$20	                REP #$20        ; set A long
.390cdb	a9 00 00	lda #$0000	                LDA #0         ; set DP to page 0
.390cde	5b		tcd		                TCD
.390cdf	28		plp		                PLP
.390ce0	68		pla		                PLA             ; end setdp macro
.390ce1	c2 30		rep #$30	                REP #$30        ; set A&X long
.390ce3	a5 17		lda $17		                LDA CURSORPOS       ; Get the current cursor position
.390ce5	a8		tay		                TAY                 ; Set it as the destination
.390ce6	aa		tax		                TAX
.390ce7	e8		inx		                INX                 ; And set the next cell as the source
.390ce8	38		sec		                SEC                 ; Calculate the length of the block to move
.390ce9	a9 7f 00	lda #$007f	                LDA #127            ; as 127 - X
.390cec	e5 1a		sbc $1a		                SBC CURSORX
.390cee	54 af af	mvn $af,$af	                MVN $AF, $AF        ; And move the block
.390cf1	28		plp		                PLP
.390cf2	68		pla		                PLA
.390cf3	7a		ply		                PLY
.390cf4	fa		plx		                PLX
.390cf5	6b		rtl		                RTL
.390cf6	da		phx		SCRSHIFTLR      PHX
.390cf7	48		pha		                PHA
.390cf8	08		php		                PHP
.390cf9	c2 30		rep #$30	                REP #$30        ; set A&X long
.390cfb	a5 17		lda $17		                LDA CURSORPOS       ; Get the current cursor position
.390cfd	29 80 ff	and #$ff80	                AND #$FF80          ; Mask off the column bits
.390d00	09 7f 00	ora #$007f	                ORA #$007F          ; And compute the address of the last cell
.390d03	a8		tay		                TAY                 ; And set that as the destination address
.390d04	3a		dec a		                DEC A               ; Compute the address of the character to the left
.390d05	aa		tax		                TAX                 ; And make it the source
.390d06	38		sec		                SEC                 ; Calculate the length of the block to move
.390d07	a9 7f 00	lda #$007f	                LDA #127            ; as 127 - X
.390d0a	e5 1a		sbc $1a		                SBC CURSORX
.390d0c	44 af af	mvp $af,$af	                MVP $AF, $AF        ; And move the block
.390d0f	e2 20		sep #$20	                SEP #$20        ; set A short
.390d11	a9 20		lda #$20	                LDA #CHAR_SP        ; Put a blank space at the cursor position
.390d13	87 17		sta [$17]	                STA [CURSORPOS]
.390d15	28		plp		                PLP
.390d16	68		pla		                PLA
.390d17	fa		plx		                PLX
.390d18	6b		rtl		                RTL
.390d19					IPUTB
.390d19	6b		rtl		                RTL
.390d1a					IPRINTCR
.390d1a	da		phx		                PHX
.390d1b	5a		phy		                PHY
.390d1c	08		php		                PHP
.390d1d	e2 20		sep #$20	                SEP #$20        ; set A short
.390d1f	af 03 07 00	lda $000703	                LDA @lCHAN_OUT
.390d23	f0 1c		beq $390d41	                BEQ scr_printcr
.390d25	c9 01		cmp #$01	                CMP #CHAN_COM1      ; Check to see if it's the COM1 port
.390d27	f0 06		beq $390d2f	                BEQ uart_printcr    ; Yes: handle printing to the UART
.390d29	c9 02		cmp #$02	                CMP #CHAN_COM2      ; Check to see if it's the COM2 port
.390d2b	f0 02		beq $390d2f	                BEQ uart_printcr    ; Yes: handle printing to the UART
.390d2d	80 1c		bra $390d4b	                BRA done
.390d2f	22 45 43 38	jsl $384345	uart_printcr    JSL UART_SELECT
.390d33	a9 0d		lda #$0d	                LDA #CHAR_CR
.390d35	22 f4 0b 39	jsl $390bf4	                JSL IPUTC
.390d39	a9 0a		lda #$0a	                LDA #CHAR_LF
.390d3b	22 f4 0b 39	jsl $390bf4	                JSL IPUTC
.390d3f	80 0a		bra $390d4b	                BRA done
.390d41	a2 00 00	ldx #$0000	scr_printcr     LDX #0
.390d44	a4 1c		ldy $1c		                LDY CURSORY
.390d46	c8		iny		                INY
.390d47	22 04 0e 39	jsl $390e04	                JSL ILOCATE
.390d4b	28		plp		done            PLP
.390d4c	7a		ply		                PLY
.390d4d	fa		plx		                PLX
.390d4e	6b		rtl		                RTL
.390d4f	da		phx		ICSRHOME        PHX
.390d50	5a		phy		                PHY
.390d51	08		php		                PHP
.390d52	a2 00 00	ldx #$0000	                LDX #0
.390d55	a0 00 00	ldy #$0000	                LDY #0
.390d58	22 04 0e 39	jsl $390e04	                JSL ILOCATE
.390d5c	28		plp		                PLP
.390d5d	7a		ply		                PLY
.390d5e	fa		plx		                PLX
.390d5f	6b		rtl		                RTL
.390d60	da		phx		ICSRRIGHT       PHX
.390d61	5a		phy		                PHY
.390d62	48		pha		                PHA
.390d63	0b		phd		                PHD
.390d64	08		php		                PHP
.390d65	c2 20		rep #$20	                REP #$20        ; set A long
.390d67	c2 10		rep #$10	                REP #$10        ; set X long
.390d69	48		pha		                PHA             ; begin setdp macro
.390d6a	08		php		                PHP
.390d6b	c2 20		rep #$20	                REP #$20        ; set A long
.390d6d	a9 00 00	lda #$0000	                LDA #$0         ; set DP to page 0
.390d70	5b		tcd		                TCD
.390d71	28		plp		                PLP
.390d72	68		pla		                PLA             ; end setdp macro
.390d73	a6 1a		ldx $1a		                LDX CURSORX           ; Get the new column
.390d75	e8		inx		                INX
.390d76	a4 1c		ldy $1c		                LDY CURSORY           ; Get the current row
.390d78	e4 0f		cpx $0f		                CPX COLS_VISIBLE      ; Are we off screen?
.390d7a	90 0d		bcc $390d89	                BCC icsrright_nowrap  ; No: just set the position
.390d7c	a2 00 00	ldx #$0000	                LDX #0                ; Yes: move to the first column
.390d7f	c8		iny		                INY                   ; And move to the next row
.390d80	c4 13		cpy $13		                CPY LINES_VISIBLE     ; Are we still off screen?
.390d82	90 05		bcc $390d89	                BCC icsrright_nowrap  ; No: just set the position
.390d84	88		dey		                DEY                   ; Yes: lock to the last row
.390d85	22 50 0e 39	jsl $390e50	                JSL ISCROLLUP         ; But scroll the screen up
.390d89					icsrright_nowrap
.390d89	22 04 0e 39	jsl $390e04	                JSL ILOCATE           ; Set the cursor position
.390d8d	28		plp		                PLP
.390d8e	2b		pld		                PLD
.390d8f	68		pla		                PLA
.390d90	7a		ply		                PLY
.390d91	fa		plx		                PLX
.390d92	6b		rtl		                RTL
.390d93					ICSRLEFT
.390d93	da		phx		                PHX
.390d94	5a		phy		                PHY
.390d95	48		pha		                PHA
.390d96	0b		phd		                PHD
.390d97	08		php		                PHP
.390d98	c2 30		rep #$30	                REP #$30        ; set A&X long
.390d9a	48		pha		                PHA             ; begin setdp macro
.390d9b	08		php		                PHP
.390d9c	c2 20		rep #$20	                REP #$20        ; set A long
.390d9e	a9 00 00	lda #$0000	                LDA #$0         ; set DP to page 0
.390da1	5b		tcd		                TCD
.390da2	28		plp		                PLP
.390da3	68		pla		                PLA             ; end setdp macro
.390da4	a5 1a		lda $1a		                LDA CURSORX
.390da6	f0 0b		beq $390db3	                BEQ icsrleft_done_already_zero ; Check that we are not already @ Zero
.390da8	a6 1a		ldx $1a		                LDX CURSORX
.390daa	ca		dex		                DEX
.390dab	86 1a		stx $1a		                STX CURSORX
.390dad	a4 1c		ldy $1c		                LDY CURSORY
.390daf	22 04 0e 39	jsl $390e04	                JSL ILOCATE
.390db3					icsrleft_done_already_zero
.390db3	28		plp		                PLP
.390db4	2b		pld		                PLD
.390db5	68		pla		                PLA
.390db6	7a		ply		                PLY
.390db7	fa		plx		                PLX
.390db8	6b		rtl		                RTL
.390db9					ICSRUP
.390db9	da		phx		                PHX
.390dba	5a		phy		                PHY
.390dbb	48		pha		                PHA
.390dbc	0b		phd		                PHD
.390dbd	08		php		                PHP
.390dbe	c2 30		rep #$30	                REP #$30        ; set A&X long
.390dc0	48		pha		                PHA             ; begin setdp macro
.390dc1	08		php		                PHP
.390dc2	c2 20		rep #$20	                REP #$20        ; set A long
.390dc4	a9 00 00	lda #$0000	                LDA #$0         ; set DP to page 0
.390dc7	5b		tcd		                TCD
.390dc8	28		plp		                PLP
.390dc9	68		pla		                PLA             ; end setdp macro
.390dca	a5 1c		lda $1c		                LDA CURSORY
.390dcc	f0 0b		beq $390dd9	                BEQ isrup_done_already_zero ; Check if we are not already @ Zero
.390dce	a4 1c		ldy $1c		                LDY CURSORY
.390dd0	88		dey		                DEY
.390dd1	84 1c		sty $1c		                STY CURSORY
.390dd3	a6 1a		ldx $1a		                LDX CURSORX
.390dd5	22 04 0e 39	jsl $390e04	                JSL ILOCATE
.390dd9					isrup_done_already_zero
.390dd9	28		plp		                PLP
.390dda	2b		pld		                PLD
.390ddb	68		pla		                PLA
.390ddc	7a		ply		                PLY
.390ddd	fa		plx		                PLX
.390dde	6b		rtl		                RTL
.390ddf	da		phx		ICSRDOWN        PHX
.390de0	5a		phy		                PHY
.390de1	0b		phd		                PHD
.390de2	c2 30		rep #$30	                REP #$30        ; set A&X long
.390de4	48		pha		                PHA             ; begin setdp macro
.390de5	08		php		                PHP
.390de6	c2 20		rep #$20	                REP #$20        ; set A long
.390de8	a9 00 00	lda #$0000	                LDA #$0         ; set DP to page 0
.390deb	5b		tcd		                TCD
.390dec	28		plp		                PLP
.390ded	68		pla		                PLA             ; end setdp macro
.390dee	a6 1a		ldx $1a		                LDX CURSORX                 ; Get the current column
.390df0	a4 1c		ldy $1c		                LDY CURSORY                 ; Get the new row
.390df2	c8		iny		                INY
.390df3	c4 13		cpy $13		                CPY LINES_VISIBLE           ; Check to see if we're off screen
.390df5	90 05		bcc $390dfc	                BCC icsrdown_noscroll       ; No: go ahead and set the position
.390df7	88		dey		                DEY                         ; Yes: go back to the last row
.390df8	22 50 0e 39	jsl $390e50	                JSL ISCROLLUP               ; But scroll the screen up
.390dfc					icsrdown_noscroll
.390dfc	22 04 0e 39	jsl $390e04	                JSL ILOCATE                 ; And set the cursor position
.390e00	2b		pld		                PLD
.390e01	7a		ply		                PLY
.390e02	fa		plx		                PLX
.390e03	6b		rtl		                RTL
.390e04	48		pha		ILOCATE         PHA
.390e05	0b		phd		                PHD
.390e06	08		php		                PHP
.390e07	48		pha		                PHA             ; begin setdp macro
.390e08	08		php		                PHP
.390e09	c2 20		rep #$20	                REP #$20        ; set A long
.390e0b	a9 00 00	lda #$0000	                LDA #0         ; set DP to page 0
.390e0e	5b		tcd		                TCD
.390e0f	28		plp		                PLP
.390e10	68		pla		                PLA             ; end setdp macro
.390e11	c2 30		rep #$30	                REP #$30        ; set A&X long
.390e13					ilocate_scroll
.390e13	c4 13		cpy $13		                CPY LINES_VISIBLE
.390e15	90 07		bcc $390e1e	                BCC ilocate_scrolldone
.390e17	22 50 0e 39	jsl $390e50	                JSL ISCROLLUP
.390e1b	88		dey		                DEY
.390e1c	80 f5		bra $390e13	                BRA ilocate_scroll
.390e1e					ilocate_scrolldone
.390e1e	86 1a		stx $1a		                STX CURSORX
.390e20	84 1c		sty $1c		                STY CURSORY
.390e22	a5 0c		lda $0c		                LDA SCREENBEGIN
.390e24					ilocate_row
.390e24	c0 00 00	cpy #$0000	                CPY #$0
.390e27	f0 08		beq $390e31	                BEQ ilocate_right
.390e29	18		clc		ilocate_down    CLC
.390e2a	65 11		adc $11		                ADC COLS_PER_LINE
.390e2c	88		dey		                DEY
.390e2d	f0 02		beq $390e31	                BEQ ilocate_right
.390e2f	80 f8		bra $390e29	                BRA ilocate_down
.390e31	18		clc		ilocate_right   CLC
.390e32	65 1a		adc $1a		                ADC CURSORX             ; move the cursor right X columns
.390e34	85 17		sta $17		                STA CURSORPOS
.390e36	a4 1c		ldy $1c		                LDY CURSORY
.390e38	98		tya		                TYA
.390e39	8f 16 00 af	sta $af0016	                STA @lVKY_TXT_CURSOR_Y_REG_L  ;Store in Vicky's registers
.390e3d	8a		txa		                TXA
.390e3e	8f 14 00 af	sta $af0014	                STA @lVKY_TXT_CURSOR_X_REG_L  ;Store in Vicky's register
.390e42	c2 20		rep #$20	                REP #$20        ; set A long
.390e44	18		clc		                CLC
.390e45	a5 17		lda $17		                LDA CURSORPOS
.390e47	69 00 20	adc #$2000	                ADC #<>(CS_COLOR_MEM_PTR - CS_TEXT_MEM_PTR)
.390e4a	85 1f		sta $1f		                STA COLORPOS
.390e4c	28		plp		ilocate_done    PLP
.390e4d	2b		pld		                PLD
.390e4e	68		pla		                PLA
.390e4f	6b		rtl		                RTL
.390e50					ISCROLLUP
.390e50	48		pha		                PHA
.390e51	da		phx		                PHX
.390e52	5a		phy		                PHY
.390e53	8b		phb		                PHB
.390e54	08		php		                PHP
.390e55	c2 30		rep #$30	                REP #$30        ; set A&X long
.390e57	18		clc		                CLC
.390e58	a0 00 a0	ldy #$a000	                LDY #$A000
.390e5b	a2 80 a0	ldx #$a080	                LDX #$A080
.390e5e	a9 7f 1f	lda #$1f7f	                LDA #128 * 63 - 1
.390e61	54 af af	mvn $af,$af	                MVN $AF,$AF
.390e64	c2 30		rep #$30	                REP #$30        ; set A&X long
.390e66	a0 00 c0	ldy #$c000	                LDY #$C000
.390e69	a2 80 c0	ldx #$c080	                LDX #$C080
.390e6c	a9 7f 1f	lda #$1f7f	                LDA #128 * 63 - 1
.390e6f	54 af af	mvn $af,$af	                MVN $AF,$AF
.390e72	28		plp		                PLP
.390e73	ab		plb		                PLB
.390e74	7a		ply		                PLY
.390e75	fa		plx		                PLX
.390e76	68		pla		                PLA
.390e77	6b		rtl		                RTL
.390e78	08		php		IPRINTH         PHP
.390e79	48		pha		                PHA
.390e7a					iprinth1
.390e7a	e2 20		sep #$20	                SEP #$20        ; set A short
.390e7c	bd 00 00	lda $0000,x	                LDA #0,b,x      ; Read the value to be printed
.390e7f	4a		lsr a		                LSR
.390e80	4a		lsr a		                LSR
.390e81	4a		lsr a		                LSR
.390e82	4a		lsr a		                LSR
.390e83	22 d2 0e 39	jsl $390ed2	                JSL iprint_digit
.390e87	bd 00 00	lda $0000,x	                LDA #0,b,x
.390e8a	22 d2 0e 39	jsl $390ed2	                JSL iprint_digit
.390e8e	ca		dex		                DEX
.390e8f	88		dey		                DEY
.390e90	d0 e8		bne $390e7a	                BNE iprinth1
.390e92	68		pla		                PLA
.390e93	28		plp		                PLP
.390e94	6b		rtl		                RTL
.390e95					IPRINTAH
.390e95	48		pha		                PHA
.390e96	08		php		                PHP
.390e97	8f 44 02 00	sta $000244	                STA @lCPUA            ; Save A where we can use it multiple times
.390e9b	08		php		                PHP                   ; Get the processor status into A
.390e9c	e2 20		sep #$20	                SEP #$20        ; set A short
.390e9e	c2 10		rep #$10	                REP #$10        ; set X long
.390ea0	68		pla		                PLA
.390ea1	29 20		and #$20	                AND #%00100000        ; Is M = 1?
.390ea3	c9 20		cmp #$20	                CMP #%00100000
.390ea5	f0 14		beq $390ebb	                BEQ eight_bit
.390ea7	af 46 02 00	lda $000246	                LDA @lCPUA+2          ; Get nibble [15..12]
.390eab	4a		lsr a		                LSR A
.390eac	4a		lsr a		                LSR A
.390ead	4a		lsr a		                LSR A
.390eae	4a		lsr a		                LSR A
.390eaf	22 d2 0e 39	jsl $390ed2	                JSL iprint_digit      ; And print it
.390eb3	af 46 02 00	lda $000246	                LDA @lCPUA+2          ; Get nibble [11..8]
.390eb7	22 d2 0e 39	jsl $390ed2	                JSL iprint_digit      ; And print it
.390ebb	af 44 02 00	lda $000244	eight_bit       LDA @lCPUA            ; Get nibble [7..4]
.390ebf	4a		lsr a		                LSR A
.390ec0	4a		lsr a		                LSR A
.390ec1	4a		lsr a		                LSR A
.390ec2	4a		lsr a		                LSR A
.390ec3	22 d2 0e 39	jsl $390ed2	                JSL iprint_digit      ; And print it
.390ec7	af 44 02 00	lda $000244	                LDA @lCPUA            ; Get nibble [3..0]
.390ecb	22 d2 0e 39	jsl $390ed2	                JSL iprint_digit      ; And print it
.390ecf	28		plp		                PLP
.390ed0	68		pla		                PLA
.390ed1	6b		rtl		                RTL
.390ed2	da		phx		iprint_digit    PHX
.390ed3	c2 20		rep #$20	                REP #$20        ; set A long
.390ed5	29 0f 00	and #$000f	                AND #$0F
.390ed8	aa		tax		                TAX
.390ed9	bf 44 1d 39	lda $391d44,x	                LDA hex_digits,X
.390edd	22 f4 0b 39	jsl $390bf4	                JSL IPUTC       ; Print the digit
.390ee1	fa		plx		                PLX
.390ee2	6b		rtl		                RTL
.390ee3	48		pha		ICLRSCREEN	    PHA
.390ee4	da		phx		                PHX
.390ee5	08		php		                PHP
.390ee6	e2 20		sep #$20	                SEP #$20        ; set A short
.390ee8	c2 10		rep #$10	                REP #$10        ; set X long
.390eea	a2 00 00	ldx #$0000	                LDX #$0000		          ; Only Use One Pointer
.390eed	a9 20		lda #$20	                LDA #$20		            ; Fill the Entire Screen with Space
.390eef	9f 00 a0 af	sta $afa000,x	iclearloop0	    STA CS_TEXT_MEM_PTR, x	;
.390ef3	e8		inx		                inx
.390ef4	e0 00 20	cpx #$2000	                cpx #$2000
.390ef7	d0 f6		bne $390eef	                bne iclearloop0
.390ef9	a2 00 00	ldx #$0000	                LDX	#$0000		          ; Only Use One Pointer
.390efc	af 1e 00 00	lda $00001e	                LDA @lCURCOLOR          ; Fill the Color Memory with the current color
.390f00	9f 00 c0 af	sta $afc000,x	iclearloop1	    STA CS_COLOR_MEM_PTR, x	;
.390f04	e8		inx		                inx
.390f05	e0 00 20	cpx #$2000	                cpx #$2000
.390f08	d0 f6		bne $390f00	                bne iclearloop1
.390f0a	28		plp		                PLP
.390f0b	fa		plx		                PLX
.390f0c	68		pla		                PLA
.390f0d	6b		rtl		                RTL
.390f0e	48		pha		ICOLORFLAG      PHA
.390f0f	da		phx		                PHX
.390f10	08		php		                PHP
.390f11	e2 30		sep #$30	                SEP #$30        ; set A&X short
.390f13	a2 00		ldx #$00	                LDX #$00
.390f15	bf 2f 1a 39	lda $391a2f,x	iclearloop2	    LDA @lgreet_clr_line1,x
.390f19	9f 00 c0 af	sta $afc000,x	                STA CS_COLOR_MEM_PTR,x
.390f1d	bf 59 1a 39	lda $391a59,x	                LDA @lgreet_clr_line2,x
.390f21	9f 80 c0 af	sta $afc080,x	                STA CS_COLOR_MEM_PTR + $80,x
.390f25	bf 83 1a 39	lda $391a83,x	                LDA @lgreet_clr_line3,x
.390f29	9f 00 c1 af	sta $afc100,x	                STA CS_COLOR_MEM_PTR + $100,x
.390f2d	bf ad 1a 39	lda $391aad,x	                LDA @lgreet_clr_line4,x
.390f31	9f 80 c1 af	sta $afc180,x	                STA CS_COLOR_MEM_PTR + $180,x
.390f35	bf d7 1a 39	lda $391ad7,x	                LDA @lgreet_clr_line5,x
.390f39	9f 00 c2 af	sta $afc200,x	                STA CS_COLOR_MEM_PTR + $200,x
.390f3d	e8		inx		                inx
.390f3e	e0 2a		cpx #$2a	                cpx #42
.390f40	d0 d3		bne $390f15	                bne iclearloop2
.390f42	28		plp		                PLP
.390f43	fa		plx		                PLX
.390f44	68		pla		                PLA
.390f45	6b		rtl		                RTL
.390f46	0b		phd		IINITCHLUT		  PHD
.390f47	08		php		                PHP
.390f48	48		pha		                PHA
.390f49	da		phx		                PHX
.390f4a	e2 20		sep #$20	                SEP #$20        ; set A short
.390f4c	e2 10		sep #$10	                SEP #$10        ; set X short
.390f4e	a2 00		ldx #$00					        LDX	#$00
.390f50	bf 01 1b 39	lda $391b01,x	lutinitloop0	  LDA @lfg_color_lut,x		; get Local Data
.390f54	9f 40 1f af	sta $af1f40,x	                STA FG_CHAR_LUT_PTR,x	; Write in LUT Memory
.390f58	e8		inx		                inx
.390f59	e0 40		cpx #$40	                cpx #$40
.390f5b	d0 f3		bne $390f50	                bne lutinitloop0
.390f5d	a2 00		ldx #$00	                LDX	#$00
.390f5f	bf 41 1b 39	lda $391b41,x	lutinitloop1	  LDA @lbg_color_lut,x		; get Local Data
.390f63	9f 80 1f af	sta $af1f80,x	                STA BG_CHAR_LUT_PTR,x	; Write in LUT Memory
.390f67	e8		inx		                INX
.390f68	e0 40		cpx #$40	                CPX #$40
.390f6a	d0 f3		bne $390f5f	                bne lutinitloop1
.390f6c	c2 20		rep #$20	                REP #$20        ; set A long
.390f6e	c2 10		rep #$10	                REP #$10        ; set X long
.390f70	fa		plx		                PLX
.390f71	68		pla		                PLA
.390f72	28		plp		                PLP
.390f73	2b		pld		                PLD
.390f74	6b		rtl		                RTL
.390f75					IINITGAMMATABLE
.390f75	e2 20		sep #$20	                SEP #$20        ; set A short
.390f77	c2 10		rep #$10	                REP #$10        ; set X long
.390f79	a2 00 00	ldx #$0000	                ldx #$0000
.390f7c	bf 00 22 39	lda $392200,x	initgammaloop   LDA GAMMA_1_8_Tbl, x
.390f80	9f 00 40 af	sta $af4000,x	                STA GAMMA_B_LUT_PTR, x
.390f84	9f 00 41 af	sta $af4100,x	                STA GAMMA_G_LUT_PTR, x
.390f88	9f 00 42 af	sta $af4200,x	                STA GAMMA_R_LUT_PTR, x
.390f8c	e8		inx		                inx
.390f8d	e0 00 01	cpx #$0100	                cpx #$0100
.390f90	d0 ea		bne $390f7c	                bne initgammaloop
.390f92	c2 30		rep #$30	                REP #$30        ; set A&X long
.390f94	6b		rtl		                RTL
.390f95	48		pha		IINITALLLUT     PHA
.390f96	da		phx		                PHX
.390f97	a2 00 00	ldx #$0000	                LDX #$0000
.390f9a	e2 20		sep #$20	                SEP #$20        ; set A short
.390f9c	a9 00		lda #$00	                LDA #$00
.390f9e	85 0a		sta $0a		                STA $0A     ; Temp Location
.390fa0					iinit_lut_loop
.390fa0	86 02		stx $02		                STX $02
.390fa2	a6 0a		ldx $0a		                LDX $0A
.390fa4	bf 00 21 39	lda $392100,x	                LDA GAMMA_2_2_Tbl, x
.390fa8	49 55		eor #$55	                EOR  #$55
.390faa	a6 02		ldx $02		                LDX $02
.390fac	9f 00 20 af	sta $af2000,x	                STA @lGRPH_LUT0_PTR, x
.390fb0	9f 00 24 af	sta $af2400,x	                STA @lGRPH_LUT1_PTR, x
.390fb4	9f 00 28 af	sta $af2800,x	                STA @lGRPH_LUT2_PTR, x
.390fb8	9f 00 2c af	sta $af2c00,x	                STA @lGRPH_LUT3_PTR, x
.390fbc	9f 00 30 af	sta $af3000,x	                STA @lGRPH_LUT4_PTR, x
.390fc0	9f 00 34 af	sta $af3400,x	                STA @lGRPH_LUT5_PTR, x
.390fc4	9f 00 38 af	sta $af3800,x	                STA @lGRPH_LUT6_PTR, x
.390fc8	9f 00 3c af	sta $af3c00,x	                STA @lGRPH_LUT7_PTR, x
.390fcc	e8		inx		                inx
.390fcd	86 02		stx $02		                STX $02
.390fcf	a6 0a		ldx $0a		                LDX $0A
.390fd1	bf 00 23 39	lda $392300,x	                LDA RANDOM_LUT_Tbl, x
.390fd5	a6 02		ldx $02		                LDX $02
.390fd7	9f 00 20 af	sta $af2000,x	                STA @lGRPH_LUT0_PTR, x
.390fdb	9f 00 24 af	sta $af2400,x	                STA @lGRPH_LUT1_PTR, x
.390fdf	9f 00 28 af	sta $af2800,x	                STA @lGRPH_LUT2_PTR, x
.390fe3	9f 00 2c af	sta $af2c00,x	                STA @lGRPH_LUT3_PTR, x
.390fe7	9f 00 30 af	sta $af3000,x	                STA @lGRPH_LUT4_PTR, x
.390feb	9f 00 34 af	sta $af3400,x	                STA @lGRPH_LUT5_PTR, x
.390fef	9f 00 38 af	sta $af3800,x	                STA @lGRPH_LUT6_PTR, x
.390ff3	9f 00 3c af	sta $af3c00,x	                STA @lGRPH_LUT7_PTR, x
.390ff7	e8		inx		                inx
.390ff8	86 02		stx $02		                STX $02
.390ffa	a6 0a		ldx $0a		                LDX $0A
.390ffc	bf 00 22 39	lda $392200,x	                LDA GAMMA_1_8_Tbl, x
.391000	49 aa		eor #$aa	                EOR  #$AA
.391002	a6 02		ldx $02		                LDX $02
.391004	9f 00 20 af	sta $af2000,x	                STA @lGRPH_LUT0_PTR, x
.391008	9f 00 24 af	sta $af2400,x	                STA @lGRPH_LUT1_PTR, x
.39100c	9f 00 28 af	sta $af2800,x	                STA @lGRPH_LUT2_PTR, x
.391010	9f 00 2c af	sta $af2c00,x	                STA @lGRPH_LUT3_PTR, x
.391014	9f 00 30 af	sta $af3000,x	                STA @lGRPH_LUT4_PTR, x
.391018	9f 00 34 af	sta $af3400,x	                STA @lGRPH_LUT5_PTR, x
.39101c	9f 00 38 af	sta $af3800,x	                STA @lGRPH_LUT6_PTR, x
.391020	9f 00 3c af	sta $af3c00,x	                STA @lGRPH_LUT7_PTR, x
.391024	e8		inx		                inx
.391025	a9 ff		lda #$ff	                LDA #$FF
.391027	9f 00 20 af	sta $af2000,x	                STA @lGRPH_LUT0_PTR, x
.39102b	9f 00 24 af	sta $af2400,x	                STA @lGRPH_LUT1_PTR, x
.39102f	9f 00 28 af	sta $af2800,x	                STA @lGRPH_LUT2_PTR, x
.391033	9f 00 2c af	sta $af2c00,x	                STA @lGRPH_LUT3_PTR, x
.391037	9f 00 30 af	sta $af3000,x	                STA @lGRPH_LUT4_PTR, x
.39103b	9f 00 34 af	sta $af3400,x	                STA @lGRPH_LUT5_PTR, x
.39103f	9f 00 38 af	sta $af3800,x	                STA @lGRPH_LUT6_PTR, x
.391043	9f 00 3c af	sta $af3c00,x	                STA @lGRPH_LUT7_PTR, x
.391047	e6 0a		inc $0a		                inc $0A
.391049	e8		inx		                inx
.39104a	e0 00 04	cpx #$0400	                cpx #$0400
.39104d	f0 03		beq $391052	                beq iinit_lut_exit
.39104f	82 4e ff	brl $390fa0	                brl iinit_lut_loop
.391052					iinit_lut_exit
.391052	c2 30		rep #$30	                REP #$30        ; set A&X long
.391054	fa		plx		                PLX
.391055	68		pla		                PLA
.391056	6b		rtl		                RTL
.391057	48		pha		IINITVKYTXTMODE PHA
.391058	e2 20		sep #$20	                SEP #$20        ; set A short
.39105a	a9 01		lda #$01	                LDA #Mstr_Ctrl_Text_Mode_En      ;Okay, this Enables the Text Mode (Video Display)
.39105c	8f 00 00 af	sta $af0000	                STA MASTER_CTRL_REG_L
.391060	a9 20		lda #$20	                LDA #$20
.391062	8f 05 00 af	sta $af0005	                STA BORDER_COLOR_B
.391066	8f 07 00 af	sta $af0007	                STA BORDER_COLOR_R
.39106a	a9 00		lda #$00	                LDA #$00
.39106c	8f 06 00 af	sta $af0006	                STA BORDER_COLOR_G
.391070	a9 01		lda #$01	                LDA #Border_Ctrl_Enable   ; Enable the Border
.391072	8f 04 00 af	sta $af0004	                STA BORDER_CTRL_REG
.391076	a9 01		lda #$01	                LDA #Mstr_Ctrl_Text_Mode_En
.391078	8f 00 00 af	sta $af0000	                STA MASTER_CTRL_REG_L
.39107c	c2 30		rep #$30	                REP #$30        ; set A&X long
.39107e	68		pla		                PLA
.39107f	6b		rtl		                RTL
.391080					IINITVKYGRPMODE
.391080	48		pha		                PHA
.391081	e2 20		sep #$20	                SEP #$20        ; set A short
.391083	a9 00		lda #$00	                LDA #$00          ; Enable Bit-Map and uses LUT0
.391085	8f 40 01 af	sta $af0140	                STA @lBM_CONTROL_REG
.391089	a9 00		lda #$00	                LDA #$00          ;; (L)Load Base Address of where Bitmap begins
.39108b	8f 41 01 af	sta $af0141	                STA @lBM_START_ADDY_L
.39108f	a9 c0		lda #$c0	                LDA #$C0
.391091	8f 42 01 af	sta $af0142	                STA @lBM_START_ADDY_M
.391095	a9 00		lda #$00	                LDA #$00
.391097	8f 43 01 af	sta $af0143	                STA @lBM_START_ADDY_H ; This address is always base from
.39109b	a9 80		lda #$80	                LDA #$80
.39109d	8f 44 01 af	sta $af0144	                STA BM_X_SIZE_L
.3910a1	a9 02		lda #$02	                LDA #$02
.3910a3	8f 45 01 af	sta $af0145	                STA BM_X_SIZE_H         ; $0280 = 640
.3910a7	a9 e0		lda #$e0	                LDA #$E0
.3910a9	8f 46 01 af	sta $af0146	                STA BM_Y_SIZE_L
.3910ad	a9 01		lda #$01	                LDA #$01
.3910af	8f 47 01 af	sta $af0147	                STA BM_Y_SIZE_H         ; $01E0 = 480
.3910b3	c2 30		rep #$30	                REP #$30        ; set A&X long
.3910b5	68		pla		                PLA
.3910b6	6b		rtl		                RTL
.3910b7					IINITTILEMODE
.3910b7	6b		rtl		                RTL
.3910b8	48		pha		IINITSPRITE     PHA
.3910b9	e2 20		sep #$20	                SEP #$20        ; set A short
.3910bb	a9 03		lda #$03	                LDA #$03    ; Enable 17 Sprites
.3910bd	8f 00 02 af	sta $af0200	                STA SP00_CONTROL_REG
.3910c1	8f 08 02 af	sta $af0208	                STA SP01_CONTROL_REG
.3910c5	8f 10 02 af	sta $af0210	                STA SP02_CONTROL_REG
.3910c9	8f 18 02 af	sta $af0218	                STA SP03_CONTROL_REG
.3910cd	8f 20 02 af	sta $af0220	                STA SP04_CONTROL_REG
.3910d1	8f 28 02 af	sta $af0228	                STA SP05_CONTROL_REG
.3910d5	8f 30 02 af	sta $af0230	                STA SP06_CONTROL_REG
.3910d9	8f 38 02 af	sta $af0238	                STA SP07_CONTROL_REG
.3910dd	8f 40 02 af	sta $af0240	                STA SP08_CONTROL_REG
.3910e1	8f 48 02 af	sta $af0248	                STA SP09_CONTROL_REG
.3910e5	8f 50 02 af	sta $af0250	                STA SP10_CONTROL_REG
.3910e9	8f 58 02 af	sta $af0258	                STA SP11_CONTROL_REG
.3910ed	8f 60 02 af	sta $af0260	                STA SP12_CONTROL_REG
.3910f1	8f 68 02 af	sta $af0268	                STA SP13_CONTROL_REG
.3910f5	8f 70 02 af	sta $af0270	                STA SP14_CONTROL_REG
.3910f9	8f 78 02 af	sta $af0278	                STA SP15_CONTROL_REG
.3910fd	8f 80 02 af	sta $af0280	                STA SP16_CONTROL_REG
.391101	a9 09		lda #$09	                LDA #$09
.391103	8f 03 02 af	sta $af0203	                STA SP00_ADDY_PTR_H
.391107	8f 0b 02 af	sta $af020b	                STA SP01_ADDY_PTR_H
.39110b	8f 13 02 af	sta $af0213	                STA SP02_ADDY_PTR_H
.39110f	8f 1b 02 af	sta $af021b	                STA SP03_ADDY_PTR_H
.391113	8f 23 02 af	sta $af0223	                STA SP04_ADDY_PTR_H
.391117	8f 2b 02 af	sta $af022b	                STA SP05_ADDY_PTR_H
.39111b	8f 33 02 af	sta $af0233	                STA SP06_ADDY_PTR_H
.39111f	8f 3b 02 af	sta $af023b	                STA SP07_ADDY_PTR_H
.391123	8f 43 02 af	sta $af0243	                STA SP08_ADDY_PTR_H
.391127	8f 4b 02 af	sta $af024b	                STA SP09_ADDY_PTR_H
.39112b	8f 53 02 af	sta $af0253	                STA SP10_ADDY_PTR_H
.39112f	8f 5b 02 af	sta $af025b	                STA SP11_ADDY_PTR_H
.391133	8f 63 02 af	sta $af0263	                STA SP12_ADDY_PTR_H
.391137	8f 6b 02 af	sta $af026b	                STA SP13_ADDY_PTR_H
.39113b	8f 73 02 af	sta $af0273	                STA SP14_ADDY_PTR_H
.39113f	8f 7b 02 af	sta $af027b	                STA SP15_ADDY_PTR_H
.391143	8f 83 02 af	sta $af0283	                STA SP16_ADDY_PTR_H
.391147	a9 00		lda #$00	                LDA #$00
.391149	8f 02 02 af	sta $af0202	                STA SP00_ADDY_PTR_M
.39114d	a9 04		lda #$04	                LDA #$04
.39114f	8f 0a 02 af	sta $af020a	                STA SP01_ADDY_PTR_M
.391153	a9 08		lda #$08	                LDA #$08
.391155	8f 12 02 af	sta $af0212	                STA SP02_ADDY_PTR_M
.391159	a9 0c		lda #$0c	                LDA #$0C
.39115b	8f 1a 02 af	sta $af021a	                STA SP03_ADDY_PTR_M
.39115f	a9 10		lda #$10	                LDA #$10
.391161	8f 22 02 af	sta $af0222	                STA SP04_ADDY_PTR_M
.391165	a9 14		lda #$14	                LDA #$14
.391167	8f 2a 02 af	sta $af022a	                STA SP05_ADDY_PTR_M
.39116b	a9 18		lda #$18	                LDA #$18
.39116d	8f 32 02 af	sta $af0232	                STA SP06_ADDY_PTR_M
.391171	a9 1c		lda #$1c	                LDA #$1C
.391173	8f 3a 02 af	sta $af023a	                STA SP07_ADDY_PTR_M
.391177	a9 20		lda #$20	                LDA #$20
.391179	8f 42 02 af	sta $af0242	                STA SP08_ADDY_PTR_M
.39117d	a9 24		lda #$24	                LDA #$24
.39117f	8f 4a 02 af	sta $af024a	                STA SP09_ADDY_PTR_M
.391183	a9 28		lda #$28	                LDA #$28
.391185	8f 52 02 af	sta $af0252	                STA SP10_ADDY_PTR_M
.391189	a9 2c		lda #$2c	                LDA #$2C
.39118b	8f 5a 02 af	sta $af025a	                STA SP11_ADDY_PTR_M
.39118f	a9 30		lda #$30	                LDA #$30
.391191	8f 62 02 af	sta $af0262	                STA SP12_ADDY_PTR_M
.391195	a9 34		lda #$34	                LDA #$34
.391197	8f 6a 02 af	sta $af026a	                STA SP13_ADDY_PTR_M
.39119b	a9 38		lda #$38	                LDA #$38
.39119d	8f 72 02 af	sta $af0272	                STA SP14_ADDY_PTR_M
.3911a1	a9 3c		lda #$3c	                LDA #$3C
.3911a3	8f 7a 02 af	sta $af027a	                STA SP15_ADDY_PTR_M
.3911a7	a9 40		lda #$40	                LDA #$40
.3911a9	8f 82 02 af	sta $af0282	                STA SP16_ADDY_PTR_M
.3911ad	a9 00		lda #$00	                LDA #$00
.3911af	8f 01 02 af	sta $af0201	                STA SP00_ADDY_PTR_L
.3911b3	8f 09 02 af	sta $af0209	                STA SP01_ADDY_PTR_L
.3911b7	8f 11 02 af	sta $af0211	                STA SP02_ADDY_PTR_L
.3911bb	8f 19 02 af	sta $af0219	                STA SP03_ADDY_PTR_L
.3911bf	8f 21 02 af	sta $af0221	                STA SP04_ADDY_PTR_L
.3911c3	8f 29 02 af	sta $af0229	                STA SP05_ADDY_PTR_L
.3911c7	8f 31 02 af	sta $af0231	                STA SP06_ADDY_PTR_L
.3911cb	8f 39 02 af	sta $af0239	                STA SP07_ADDY_PTR_L
.3911cf	8f 41 02 af	sta $af0241	                STA SP08_ADDY_PTR_L
.3911d3	8f 49 02 af	sta $af0249	                STA SP09_ADDY_PTR_L
.3911d7	8f 51 02 af	sta $af0251	                STA SP10_ADDY_PTR_L
.3911db	8f 59 02 af	sta $af0259	                STA SP11_ADDY_PTR_L
.3911df	8f 61 02 af	sta $af0261	                STA SP12_ADDY_PTR_L
.3911e3	8f 69 02 af	sta $af0269	                STA SP13_ADDY_PTR_L
.3911e7	8f 71 02 af	sta $af0271	                STA SP14_ADDY_PTR_L
.3911eb	8f 79 02 af	sta $af0279	                STA SP15_ADDY_PTR_L
.3911ef	8f 81 02 af	sta $af0281	                STA SP16_ADDY_PTR_L
.3911f3	68		pla		                PLA
.3911f4	6b		rtl		                RTL
.3911f5					IINITFONTSET
.3911f5	e2 20		sep #$20	                SEP #$20        ; set A short
.3911f7	c2 10		rep #$10	                REP #$10        ; set X long
.3911f9	a2 00 00	ldx #$0000	                LDX #$0000
.3911fc					initFontsetbranch0
.3911fc	bf 00 f0 3f	lda $3ff000,x	                LDA @lFONT_4_BANK0,X    ; RAM Content
.391200	9f 00 80 af	sta $af8000,x	                STA @lFONT_MEMORY_BANK0,X ; Vicky FONT RAM Bank
.391204	e8		inx		                INX
.391205	e0 00 08	cpx #$0800	                CPX #$0800
.391208	d0 f2		bne $3911fc	                BNE initFontsetbranch0
.39120a	ea		nop		                NOP
.39120b	a2 00 00	ldx #$0000	                LDX #$0000
.39120e					initFontsetbranch1
.39120e	bf 00 f8 3f	lda $3ff800,x	                LDA @lFONT_4_BANK1,X
.391212	9f 00 88 af	sta $af8800,x	                STA @lFONT_MEMORY_BANK1,X ; Vicky FONT RAM Bank
.391216	e8		inx		                INX
.391217	e0 00 08	cpx #$0800	                CPX #$0800
.39121a	d0 f2		bne $39120e	                BNE initFontsetbranch1
.39121c	ea		nop		                NOP
.39121d	c2 30		rep #$30	                REP #$30        ; set A&X long
.39121f	6b		rtl		                RTL
.391220					INITMOUSEPOINTER
.391220	e2 20		sep #$20	                SEP #$20        ; set A short
.391222	c2 10		rep #$10	                REP #$10        ; set X long
.391224	a2 00 00	ldx #$0000	                LDX #$0000
.391227					FILL_MOUSE_MARKER
.391227	bf 00 24 39	lda $392400,x	                LDA @lMOUSE_POINTER_PTR,X
.39122b	9f 00 05 af	sta $af0500,x	                STA @lMOUSE_PTR_GRAP0_START, X
.39122f	e8		inx		                INX
.391230	e0 00 01	cpx #$0100	                CPX #$0100
.391233	d0 f2		bne $391227	                BNE FILL_MOUSE_MARKER
.391235	ea		nop		                nop
.391236	a9 01		lda #$01	                LDA #$01
.391238	8f 00 07 af	sta $af0700	                STA @lMOUSE_PTR_CTRL_REG_L  ; Enable Mouse, Mouse Pointer Graphic Bank 0
.39123c	c2 30		rep #$30	                REP #$30        ; set A&X long
.39123e	6b		rtl		                RTL
.39123f	48		pha		IINITCURSOR     PHA
.391240	e2 20		sep #$20	                SEP #$20        ; set A short
.391242	a9 b1		lda #$b1	                LDA #$B1      ;The Cursor Character will be a Fully Filled Block
.391244	8f 12 00 af	sta $af0012	                STA VKY_TXT_CURSOR_CHAR_REG
.391248	a9 03		lda #$03	                LDA #$03      ;Set Cursor Enable And Flash Rate @1Hz
.39124a	8f 10 00 af	sta $af0010	                STA VKY_TXT_CURSOR_CTRL_REG ;
.39124e	c2 30		rep #$30	                REP #$30        ; set A&X long
.391250	a9 00 00	lda #$0000	                LDA #$0000;
.391253	8f 14 00 af	sta $af0014	                STA VKY_TXT_CURSOR_X_REG_L; // Set the X to Position 1
.391257	a9 06 00	lda #$0006	                LDA #$0006;
.39125a	8f 16 00 af	sta $af0016	                STA VKY_TXT_CURSOR_Y_REG_L; // Set the Y to Position 6 (Below)
.39125e	68		pla		                PLA
.39125f	6b		rtl		                RTL
.391260	0b		phd		IINITSUPERIO	  PHD
.391261	08		php		                PHP
.391262	48		pha		                PHA
.391263	e2 20		sep #$20	                SEP #$20        ; set A short
.391265	a9 01		lda #$01	                LDA #$01		;Default Value - C256 Doesn't use this IO Pin
.391267	8f 23 11 af	sta $af1123	                STA GP10_REG
.39126b	af 23 11 af	lda $af1123	                LDA GP10_REG
.39126f	a9 01		lda #$01	                LDA #$01		;Default Value - C256 Doesn't use this IO Pin
.391271	8f 24 11 af	sta $af1124	                STA GP11_REG
.391275	a9 01		lda #$01	                LDA #$01		;Default Value - C256 Doesn't use this IO Pin
.391277	8f 25 11 af	sta $af1125	                STA GP12_REG
.39127b	a9 01		lda #$01	        				LDA #$01		;Default Value - C256 Doesn't use this IO Pin
.39127d	8f 26 11 af	sta $af1126	        				STA GP13_REG
.391281	a9 05		lda #$05	        				LDA #$05		;(C256 - POT A Analog BX) Bit[0] = 1, Bit[2] = 1
.391283	8f 27 11 af	sta $af1127	        				STA GP14_REG
.391287	a9 05		lda #$05	        				LDA #$05		;(C256 - POT A Analog BY) Bit[0] = 1, Bit[2] = 1
.391289	8f 28 11 af	sta $af1128	        				STA GP15_REG
.39128d	a9 05		lda #$05	        				LDA #$05		;(C256 - POT B Analog BX) Bit[0] = 1, Bit[2] = 1
.39128f	8f 29 11 af	sta $af1129	        				STA GP16_REG
.391293	a9 05		lda #$05	        				LDA #$05		;(C256 - POT B Analog BY) Bit[0] = 1, Bit[2] = 1
.391295	8f 2a 11 af	sta $af112a	        				STA GP17_REG
.391299	a9 00		lda #$00	        				LDA #$00		;(C256 - HEADPHONE MUTE) - Output GPIO - Push-Pull (1 - Headphone On, 0 - HeadPhone Off)
.39129b	8f 2b 11 af	sta $af112b	        				STA GP20_REG
.39129f	a9 01		lda #$01					        LDA #$01		;Default Value - C256 Doesn't use this IO Pin
.3912a1	8f 2f 11 af	sta $af112f					        STA GP24_REG
.3912a5	a9 05		lda #$05					        LDA #$05		;(C256 - MIDI IN) Bit[0] = 1, Bit[2] = 1 (Page 132 Manual)
.3912a7	8f 30 11 af	sta $af1130					        STA GP25_REG
.3912ab	a9 84		lda #$84				        	LDA #$84		;(C256 - MIDI OUT) Bit[2] = 1, Bit[7] = 1 (Open Drain - To be Checked)
.3912ad	8f 31 11 af	sta $af1131					        STA GP26_REG
.3912b1	a9 01		lda #$01					        LDA #$01		;Default Value - (C256 - JP1 Fanout Pin 1) Setup as GPIO Input for now
.3912b3	8f 33 11 af	sta $af1133					        STA GP30_REG
.3912b7	a9 01		lda #$01					        LDA #$01		;Default Value - (C256 - JP1 Fanout Pin 4) Setup as GPIO Input for now
.3912b9	8f 34 11 af	sta $af1134					        STA GP31_REG
.3912bd	a9 01		lda #$01					        LDA #$01		;Default Value - (C256 - JP1 Fanout Pin 3) Setup as GPIO Input for now
.3912bf	8f 35 11 af	sta $af1135					        STA GP32_REG
.3912c3	a9 01		lda #$01					        LDA #$01		;Default Value - (C256 - JP1 Fanout Pin 6) Setup as GPIO Input for now
.3912c5	8f 36 11 af	sta $af1136					        STA GP33_REG
.3912c9	a9 01		lda #$01					        LDA #$01		;Default Value - (C256 - JP1 Fanout Pin 5) Setup as GPIO Input for now
.3912cb	8f 37 11 af	sta $af1137					        STA GP34_REG
.3912cf	a9 01		lda #$01					        LDA #$01		;Default Value - (C256 - JP1 Fanout Pin 8) Setup as GPIO Input for now
.3912d1	8f 38 11 af	sta $af1138					        STA GP35_REG
.3912d5	a9 01		lda #$01					        LDA #$01		;Default Value - (C256 - JP1 Fanout Pin 7) Setup as GPIO Input for now
.3912d7	8f 39 11 af	sta $af1139					        STA GP36_REG
.3912db	a9 01		lda #$01					        LDA #$01		;Default Value - (C256 - JP1 Fanout Pin 10) Setup as GPIO Input for now
.3912dd	8f 3a 11 af	sta $af113a					        STA GP37_REG
.3912e1	a9 01		lda #$01					        LDA #$01		;Default Value - C256 Doesn't use this IO Pin
.3912e3	8f 3d 11 af	sta $af113d					        STA GP42_REG
.3912e7	a9 01		lda #$01				          LDA #$01		;(C256 - INPUT PLL CLK INTERRUPT) Default Value - Will keep it as an input for now, no real usage for now
.3912e9	8f 3e 11 af	sta $af113e					        STA GP43_REG
.3912ed	a9 05		lda #$05					        LDA #$05		;(C256 - UART2 - RI2) - Input - Set Secondary Function
.3912ef	8f 3f 11 af	sta $af113f					        STA GP50_REG
.3912f3	a9 05		lda #$05					        LDA #$05		;(C256 - UART2 - DCD2) - Input - Set Secondary Function
.3912f5	8f 40 11 af	sta $af1140					        STA GP51_REG
.3912f9	a9 05		lda #$05					        LDA #$05		;(C256 - UART2 - RXD2) - Input - Set Secondary Function
.3912fb	8f 41 11 af	sta $af1141					        STA GP52_REG
.3912ff	a9 04		lda #$04					        LDA #$04		;(C256 - UART2 - TXD2) - Output - Set Secondary Function
.391301	8f 42 11 af	sta $af1142					        STA GP53_REG
.391305	a9 05		lda #$05					        LDA #$05		;(C256 - UART2 - DSR2) - Input - Set Secondary Function
.391307	8f 43 11 af	sta $af1143					        STA GP54_REG
.39130b	a9 04		lda #$04					        LDA #$04		;(C256 - UART2 - RTS2) - Output - Set Secondary Function
.39130d	8f 44 11 af	sta $af1144					        STA GP55_REG
.391311	a9 05		lda #$05					        LDA #$05		;(C256 - UART2 - CTS2) - Input - Set Secondary Function
.391313	8f 45 11 af	sta $af1145					        STA GP56_REG
.391317	a9 04		lda #$04					        LDA #$04		;(C256 - UART2 - DTR2) - Output - Set Secondary Function
.391319	8f 46 11 af	sta $af1146					        STA GP57_REG
.39131d	a9 84		lda #$84					        LDA #$84		;(C256 - LED1) - Open Drain - Output
.39131f	8f 47 11 af	sta $af1147					        STA GP60_REG
.391323	a9 84		lda #$84					        LDA #$84		;(C256 - LED2) - Open Drain - Output
.391325	8f 48 11 af	sta $af1148					        STA GP61_REG
.391329	a9 00		lda #$00				        	LDA #$00		;GPIO Data Register (GP10..GP17) - Not Used
.39132b	8f 4b 11 af	sta $af114b					        STA GP1_REG
.39132f	a9 01		lda #$01					        LDA #$01		;GPIO Data Register (GP20..GP27) - Bit[0] - Headphone Mute (Enabling it)
.391331	8f 4c 11 af	sta $af114c					        STA GP2_REG
.391335	a9 00		lda #$00					        LDA #$00		;GPIO Data Register (GP30..GP37) - Since it is in Output mode, nothing to write here.
.391337	8f 4d 11 af	sta $af114d					        STA GP3_REG
.39133b	a9 00		lda #$00					        LDA #$00		;GPIO Data Register (GP40..GP47)  - Not Used
.39133d	8f 4e 11 af	sta $af114e					        STA GP4_REG
.391341	a9 00		lda #$00					        LDA #$00		;GPIO Data Register (GP50..GP57)  - Not Used
.391343	8f 4f 11 af	sta $af114f					        STA GP5_REG
.391347	a9 00		lda #$00					        LDA #$00		;GPIO Data Register (GP60..GP61)  - Not Used
.391349	8f 50 11 af	sta $af1150					        STA GP6_REG
.39134d	a9 01		lda #$01					        LDA #$01		;LED1 Output - Already setup by Vicky Init Phase, for now, I will leave it alone
.39134f	8f 5d 11 af	sta $af115d					        STA LED1_REG
.391353	a9 02		lda #$02					        LDA #$02		;LED2 Output - However, I will setup this one, to make sure the Code works (Full On, when Code was ran)
.391355	8f 5e 11 af	sta $af115e					        STA LED2_REG
.391359	c2 20		rep #$20	                REP #$20        ; set A long
.39135b	68		pla		                PLA
.39135c	28		plp						        PLP
.39135d	2b		pld					        	PLD
.39135e	6b		rtl		                RTL
.39135f	0b		phd		IINITKEYBOARD	  PHD
.391360	08		php						        PHP
.391361	48		pha						        PHA
.391362	da		phx						        PHX
.391363	e2 20		sep #$20	                SEP #$20        ; set A short
.391365	c2 10		rep #$10	                REP #$10        ; set X long
.391367	18		clc		                CLC
.391368	20 18 14	jsr $391418	                JSR Poll_Inbuf ;
.39136b	a9 aa		lda #$aa					        LDA #$AA			;Send self test command
.39136d	8f 64 10 af	sta $af1064					        STA KBD_CMD_BUF
.391371	20 23 14	jsr $391423	                JSR Poll_Outbuf ;
.391374	af 60 10 af	lda $af1060					        LDA KBD_OUT_BUF		;Check self test result
.391378	c9 55		cmp #$55					        CMP #$55
.39137a	f0 03		beq $39137f					        BEQ	passAAtest
.39137c	82 89 00	brl $391408	                BRL initkb_loop_out
.39137f					passAAtest
.39137f	a9 ab		lda #$ab					        LDA #$AB			;Send test Interface command
.391381	8f 64 10 af	sta $af1064					        STA KBD_CMD_BUF
.391385	20 23 14	jsr $391423	                JSR Poll_Outbuf ;
.391388	af 60 10 af	lda $af1060					        LDA KBD_OUT_BUF		;Display Interface test results
.39138c	c9 00		cmp #$00					        CMP #$00			;Should be 00
.39138e	f0 03		beq $391393					        BEQ	passABtest
.391390	82 75 00	brl $391408	                BRL initkb_loop_out
.391393					passABtest
.391393	a9 60		lda #$60	                LDA #$60            ; Send Command 0x60 so to Enable Interrupt
.391395	8f 64 10 af	sta $af1064	                STA KBD_CMD_BUF
.391399	20 18 14	jsr $391418	                JSR Poll_Inbuf ;
.39139c	a9 69		lda #$69	                LDA #%01101001      ; Enable Interrupt
.39139e	8f 60 10 af	sta $af1060	                STA KBD_DATA_BUF
.3913a2	20 18 14	jsr $391418	                JSR Poll_Inbuf ;
.3913a5	a9 ff		lda #$ff	                LDA #$FF      ; Send Keyboard Reset command
.3913a7	8f 60 10 af	sta $af1060	                STA KBD_DATA_BUF
.3913ab	a2 ff ff	ldx #$ffff	                LDX #$FFFF
.3913ae	ca		dex		DLY_LOOP1       DEX
.3913af	ea		nop		                NOP
.3913b0	ea		nop		                NOP
.3913b1	ea		nop		                NOP
.3913b2	ea		nop		                NOP
.3913b3	ea		nop		                NOP
.3913b4	ea		nop		                NOP
.3913b5	ea		nop		                NOP
.3913b6	ea		nop		                NOP
.3913b7	e0 00 00	cpx #$0000	                CPX #$0000
.3913ba	d0 f2		bne $3913ae	                BNE DLY_LOOP1
.3913bc	20 23 14	jsr $391423	                JSR Poll_Outbuf ;
.3913bf	af 60 10 af	lda $af1060	                LDA KBD_OUT_BUF   ; Read Output Buffer
.3913c3					DO_CMD_F4_AGAIN
.3913c3	20 18 14	jsr $391418	                JSR Poll_Inbuf ;
.3913c6	a9 f4		lda #$f4					        LDA #$F4			; Enable the Keyboard
.3913c8	8f 60 10 af	sta $af1060					        STA KBD_DATA_BUF
.3913cc	20 23 14	jsr $391423	                JSR Poll_Outbuf ;
.3913cf	af 60 10 af	lda $af1060					        LDA KBD_OUT_BUF		; Clear the Output buffer
.3913d3	c9 fa		cmp #$fa	                CMP #$FA
.3913d5	d0 ec		bne $3913c3	                BNE DO_CMD_F4_AGAIN
.3913d7	20 2e 14	jsr $39142e	                JSR INIT_MOUSE
.3913da	af 40 01 00	lda $000140	                LDA @lINT_PENDING_REG0  ; Read the Pending Register &
.3913de	29 80		and #$80	                AND #FNX0_INT07_MOUSE
.3913e0	8f 40 01 00	sta $000140	                STA @lINT_PENDING_REG0  ; Writing it back will clear the Active Bit
.3913e4	af 41 01 00	lda $000141	                LDA @lINT_PENDING_REG1  ; Read the Pending Register &
.3913e8	29 01		and #$01	                AND #FNX1_INT00_KBD
.3913ea	8f 41 01 00	sta $000141	                STA @lINT_PENDING_REG1  ; Writing it back will clear the Active Bit
.3913ee	af 4d 01 00	lda $00014d	                LDA @lINT_MASK_REG1
.3913f2	29 fe		and #$fe	                AND #~FNX1_INT00_KBD
.3913f4	8f 4d 01 00	sta $00014d	                STA @lINT_MASK_REG1
.3913f8	af 4c 01 00	lda $00014c	                LDA @lINT_MASK_REG0
.3913fc	29 7f		and #$7f	                AND #~FNX0_INT07_MOUSE
.3913fe	8f 4c 01 00	sta $00014c	                STA @lINT_MASK_REG0
.391402	a2 fd 1b	ldx #$1bfd	                LDX #<>Success_kb_init
.391405	38		sec		                SEC
.391406	b0 03		bcs $39140b	                BCS InitSuccess
.391408	a2 0f 1c	ldx #$1c0f	initkb_loop_out LDX #<>Failed_kb_init
.39140b	22 d4 0b 39	jsl $390bd4	InitSuccess     JSL IPRINT       ; print Message
.39140f	c2 20		rep #$20	                REP #$20        ; set A long
.391411	c2 10		rep #$10	                REP #$10        ; set X long
.391413	fa		plx		                PLX
.391414	68		pla		                PLA
.391415	28		plp						        PLP
.391416	2b		pld						        PLD
.391417	6b		rtl		                RTL
.391418					Poll_Inbuf
.391418	af 64 10 af	lda $af1064	                LDA STATUS_PORT		; Load Status Byte
.39141c	29 02		and #$02					        AND	#<INPT_BUF_FULL	; Test bit $02 (if 0, Empty)
.39141e	c9 02		cmp #$02					        CMP #<INPT_BUF_FULL
.391420	f0 f6		beq $391418					        BEQ Poll_Inbuf
.391422	60		rts		                RTS
.391423					Poll_Outbuf
.391423	af 64 10 af	lda $af1064	                LDA STATUS_PORT
.391427	29 01		and #$01	                AND #OUT_BUF_FULL ; Test bit $01 (if 1, Full)
.391429	c9 01		cmp #$01	                CMP #OUT_BUF_FULL
.39142b	d0 f6		bne $391423	                BNE Poll_Outbuf
.39142d	60		rts		                RTS
.39142e					INIT_MOUSE
.39142e	20 18 14	jsr $391418	                JSR Poll_Inbuf
.391431	a9 a8		lda #$a8	                LDA #$A8          ; Enable the second PS2 Channel
.391433	8f 64 10 af	sta $af1064	                STA KBD_CMD_BUF
.391437					DO_CMD_A9_AGAIN
.391437	20 18 14	jsr $391418	                JSR Poll_Inbuf
.39143a	a9 a9		lda #$a9	                LDA #$A9          ; Tests second PS2 Channel
.39143c	8f 64 10 af	sta $af1064	                STA KBD_CMD_BUF
.391440	20 23 14	jsr $391423	                JSR Poll_Outbuf ;
.391443	af 60 10 af	lda $af1060					        LDA KBD_OUT_BUF		; Clear the Output buffer
.391447	c9 00		cmp #$00	                CMP #$00
.391449	d0 ec		bne $391437	                BNE DO_CMD_A9_AGAIN
.39144b	20 18 14	jsr $391418	                JSR Poll_Inbuf
.39144e	a9 20		lda #$20	                LDA #$20
.391450	8f 64 10 af	sta $af1064	                STA KBD_CMD_BUF
.391454	20 23 14	jsr $391423	                JSR Poll_Outbuf ;
.391457	af 60 10 af	lda $af1060	                LDA KBD_OUT_BUF
.39145b	09 02		ora #$02	                ORA #$02
.39145d	48		pha		                PHA
.39145e	20 18 14	jsr $391418	                JSR Poll_Inbuf
.391461	a9 60		lda #$60	                LDA #$60
.391463	8f 64 10 af	sta $af1064	                STA KBD_CMD_BUF
.391467	20 18 14	jsr $391418	                JSR Poll_Inbuf ;
.39146a	68		pla		                PLA
.39146b	8f 60 10 af	sta $af1060	                STA KBD_DATA_BUF
.39146f	a9 f6		lda #$f6	                LDA #$F6        ;Tell the mouse to use default settings
.391471	20 94 14	jsr $391494	                JSR MOUSE_WRITE
.391474	20 a7 14	jsr $3914a7	                JSR MOUSE_READ
.391477	a9 e8		lda #$e8	                LDA #$E8
.391479	20 94 14	jsr $391494	                JSR MOUSE_WRITE
.39147c	20 a7 14	jsr $3914a7	                JSR MOUSE_READ
.39147f	a9 00		lda #$00	                LDA #$00
.391481	20 94 14	jsr $391494	                JSR MOUSE_WRITE
.391484	20 a7 14	jsr $3914a7	                JSR MOUSE_READ
.391487	a9 f4		lda #$f4	                LDA #$F4        ; Enable the Mouse
.391489	20 94 14	jsr $391494	                JSR MOUSE_WRITE
.39148c	20 a7 14	jsr $3914a7	                JSR MOUSE_READ
.39148f	a9 00		lda #$00	                LDA #$00
.391491	85 e0		sta $e0		                STA MOUSE_PTR
.391493	60		rts		                RTS
.391494					MOUSE_WRITE
.391494	48		pha		                PHA
.391495	20 18 14	jsr $391418	                JSR Poll_Inbuf
.391498	a9 d4		lda #$d4	                LDA #$D4
.39149a	8f 64 10 af	sta $af1064	                STA KBD_CMD_BUF
.39149e	20 18 14	jsr $391418	                JSR Poll_Inbuf
.3914a1	68		pla		                PLA
.3914a2	8f 60 10 af	sta $af1060	                STA KBD_DATA_BUF
.3914a6	60		rts		                RTS
.3914a7					MOUSE_READ
.3914a7	20 23 14	jsr $391423	                JSR Poll_Outbuf ;
.3914aa	af 60 10 af	lda $af1060	                LDA KBD_INPT_BUF
.3914ae	60		rts		                RTS
.3914af	48		pha		INITRTC         PHA
.3914b0	e2 20		sep #$20	                SEP #$20        ; set A short
.3914b2	af 0e 08 af	lda $af080e	                LDA @lRTC_CTRL
.3914b6	00		brk #		                BRK
.3914b7	c2 20		rep #$20	                REP #$20        ; set A long
.3914b9	68		pla		                PLA
.3914ba	6b		rtl		                RTL
.3914bb					ITESTSID
.3914bb	a9 0f 00	lda #$000f	                LDA #$0F
.3914be	8f 18 e4 af	sta $afe418	                STA SID0_MODE_VOL
.3914c2	a9 be 00	lda #$00be	                LDA #$BE
.3914c5	8f 05 e4 af	sta $afe405	                STA SID0_V1_ATCK_DECY
.3914c9	a9 f8 00	lda #$00f8	                LDA #$F8
.3914cc	8f 06 e4 af	sta $afe406	                STA SID0_V1_SSTN_RLSE
.3914d0	a9 11 00	lda #$0011	                LDA #$11
.3914d3	8f 01 e4 af	sta $afe401	                STA SID0_V1_FREQ_HI
.3914d7	a9 25 00	lda #$0025	                LDA #$25
.3914da	8f 00 e4 af	sta $afe400	                STA SID0_V1_FREQ_LO
.3914de	a9 11 00	lda #$0011	                LDA #$11
.3914e1	8f 04 e4 af	sta $afe404	                STA SID0_V1_CTRL
.3914e5	a9 08 00	lda #$0008	                LDA #$08
.3914e8	8f 03 e4 af	sta $afe403	                STA SID0_V1_PW_HI   ;G1
.3914ec	a9 00 00	lda #$0000	                LDA #$00
.3914ef	8f 01 e4 af	sta $afe401	                STA SID0_V1_FREQ_HI
.3914f3	a9 c6 00	lda #$00c6	                LDA #$C6
.3914f6	8f 06 e4 af	sta $afe406	                STA SID0_V1_SSTN_RLSE
.3914fa	a9 08 00	lda #$0008	                LDA #$08
.3914fd	8f 0a e4 af	sta $afe40a	                STA SID0_V2_PW_HI   ;G1
.391501	a9 00 00	lda #$0000	                LDA #$00
.391504	8f 08 e4 af	sta $afe408	                STA SID0_V2_FREQ_HI
.391508	a9 08 00	lda #$0008	                LDA #$08
.39150b	8f 0c e4 af	sta $afe40c	                STA SID0_V2_ATCK_DECY
.39150f	a9 c6 00	lda #$00c6	                LDA #$C6
.391512	8f 0d e4 af	sta $afe40d	                STA SID0_V2_SSTN_RLSE
.391516	a9 08 00	lda #$0008	                LDA #$08
.391519	8f 11 e4 af	sta $afe411	                STA SID0_V3_PW_HI   ;G1
.39151d	a9 00 00	lda #$0000	                LDA #$00
.391520	8f 0f e4 af	sta $afe40f	                STA SID0_V3_FREQ_HI
.391524	a9 08 00	lda #$0008	                LDA #$08
.391527	8f 13 e4 af	sta $afe413	                STA SID0_V3_ATCK_DECY
.39152b	a9 c6 00	lda #$00c6	                LDA #$C6
.39152e	8f 14 e4 af	sta $afe414	                STA SID0_V3_SSTN_RLSE
.391532	a9 36 00	lda #$0036	                LDA #$36              ;Left Side (Rev A of Board)
.391535	8f 00 e4 af	sta $afe400	                STA SID0_V1_FREQ_LO
.391539	a9 01 00	lda #$0001	                LDA #$01
.39153c	8f 01 e4 af	sta $afe401	                STA SID0_V1_FREQ_HI   ;G1
.391540	a9 00 00	lda #$0000	                LDA #$00              ;Left Side (Rev A of Board)
.391543	8f 02 e4 af	sta $afe402	                STA SID0_V1_PW_LO
.391547	a9 08 00	lda #$0008	                LDA #$08
.39154a	8f 03 e4 af	sta $afe403	                STA SID0_V1_PW_HI   ;G1
.39154e	a9 08 00	lda #$0008	                LDA #$08
.391551	8f 04 e4 af	sta $afe404	                STA SID0_V1_CTRL    ; Reset
.391555	a9 0c 00	lda #$000c	                LDA #$0C
.391558	8f 07 e4 af	sta $afe407	                STA SID0_V2_FREQ_LO
.39155c	a9 04 00	lda #$0004	                LDA #$04
.39155f	8f 08 e4 af	sta $afe408	                STA SID0_V2_FREQ_HI   ;B1
.391563	a9 00 00	lda #$0000	                LDA #$00              ;Left Side (Rev A of Board)
.391566	8f 09 e4 af	sta $afe409	                STA SID0_V2_PW_LO
.39156a	a9 08 00	lda #$0008	                LDA #$08
.39156d	8f 0a e4 af	sta $afe40a	                STA SID0_V2_PW_HI   ;G1
.391571	a9 08 00	lda #$0008	                LDA #$08
.391574	8f 0b e4 af	sta $afe40b	                STA SID0_V2_CTRL    ; Reset
.391578	a9 00 00	lda #$0000	                LDA #$00
.39157b	8f 0e e4 af	sta $afe40e	                STA SID0_V3_FREQ_LO
.39157f	a9 08 00	lda #$0008	                LDA #$08
.391582	8f 0f e4 af	sta $afe40f	                STA SID0_V3_FREQ_HI   ;D
.391586	a9 00 00	lda #$0000	                LDA #$00              ;Left Side (Rev A of Board)
.391589	8f 10 e4 af	sta $afe410	                STA SID0_V3_PW_LO
.39158d	a9 08 00	lda #$0008	                LDA #$08
.391590	8f 11 e4 af	sta $afe411	                STA SID0_V3_PW_HI   ;G1
.391594	a9 08 00	lda #$0008	                LDA #$08
.391597	8f 12 e4 af	sta $afe412	                STA SID0_V3_CTRL    ; Reset
.39159b	a9 10 00	lda #$0010	                LDA #$10
.39159e	8f 04 e4 af	sta $afe404	                STA SID0_V1_CTRL    ; Triangle
.3915a2	8f 0b e4 af	sta $afe40b	                STA SID0_V2_CTRL    ; Triangle
.3915a6	8f 12 e4 af	sta $afe412	                STA SID0_V3_CTRL    ; Triangle
.3915aa	6b		rtl		                RTL
.3915ab	48		pha		IINITCODEC      PHA
.3915ac	c2 20		rep #$20	                REP #$20        ; set A long
.3915ae	a9 00 1a	lda #$1a00	                LDA #%0001101000000000     ;R13 - Turn On Headphones
.3915b1	8f 00 e9 af	sta $afe900	                STA CODEC_DATA_LO
.3915b5	a9 01 00	lda #$0001	                LDA #$0001
.3915b8	8f 02 e9 af	sta $afe902	                STA CODEC_WR_CTRL             ; Execute the Write
.3915bc	20 3b 16	jsr $39163b	                JSR CODEC_TRF_FINISHED
.3915bf	a9 0f 2a	lda #$2a0f	                LDA #%0010101000001111       ;R21 - Enable All the Analog In
.3915c2	8f 00 e9 af	sta $afe900	                STA CODEC_DATA_LO
.3915c6	a9 01 00	lda #$0001	                LDA #$0001
.3915c9	8f 02 e9 af	sta $afe902	                STA CODEC_WR_CTRL             ; Execute the Write
.3915cd	20 3b 16	jsr $39163b	                JSR CODEC_TRF_FINISHED
.3915d0	a9 01 23	lda #$2301	                LDA #%0010001100000001      ;R17 - Enable All the Analog In
.3915d3	8f 00 e9 af	sta $afe900	                STA CODEC_DATA_LO
.3915d7	a9 01 00	lda #$0001	                LDA #$0001
.3915da	8f 02 e9 af	sta $afe902	                STA CODEC_WR_CTRL             ; Execute the Write
.3915de	20 3b 16	jsr $39163b	                JSR CODEC_TRF_FINISHED
.3915e1	a9 07 2c	lda #$2c07	                LDA #%0010110000000111      ;R22 - Enable all Analog Out
.3915e4	8f 00 e9 af	sta $afe900	                STA CODEC_DATA_LO
.3915e8	a9 01 00	lda #$0001	                LDA #$0001
.3915eb	8f 02 e9 af	sta $afe902	                STA CODEC_WR_CTRL             ; Execute the Write
.3915ef	20 3b 16	jsr $39163b	                JSR CODEC_TRF_FINISHED
.3915f2	a9 02 14	lda #$1402	                LDA #%0001010000000010      ;R10 - DAC Interface Control
.3915f5	8f 00 e9 af	sta $afe900	                STA CODEC_DATA_LO
.3915f9	a9 01 00	lda #$0001	                LDA #$0001
.3915fc	8f 02 e9 af	sta $afe902	                STA CODEC_WR_CTRL             ; Execute the Write
.391600	20 3b 16	jsr $39163b	                JSR CODEC_TRF_FINISHED
.391603	a9 02 16	lda #$1602	                LDA #%0001011000000010      ;R11 - ADC Interface Control
.391606	8f 00 e9 af	sta $afe900	                STA CODEC_DATA_LO
.39160a	a9 01 00	lda #$0001	                LDA #$0001
.39160d	8f 02 e9 af	sta $afe902	                STA CODEC_WR_CTRL             ; Execute the Write
.391611	20 3b 16	jsr $39163b	                JSR CODEC_TRF_FINISHED
.391614	a9 d5 19	lda #$19d5	                LDA #%0001100111010101      ;R12 - Master Mode Control
.391617	8f 00 e9 af	sta $afe900	                STA CODEC_DATA_LO
.39161b	a9 01 00	lda #$0001	                LDA #$0001
.39161e	8f 02 e9 af	sta $afe902	                STA CODEC_WR_CTRL             ; Execute the Write
.391622	20 3b 16	jsr $39163b	                JSR CODEC_TRF_FINISHED
.391625	68		pla		                PLA
.391626	6b		rtl		                RTL
.391627					IRESETCODEC
.391627	c2 20		rep #$20	                REP #$20        ; set A long
.391629	a9 00 2e	lda #$2e00	                LDA #$2E00      ;R22 - Enable all Analog Out
.39162c	8f 00 e9 af	sta $afe900	                STA CODEC_DATA_LO
.391630	a9 01 00	lda #$0001	                LDA #$0001
.391633	8f 02 e9 af	sta $afe902	                STA CODEC_WR_CTRL             ; Execute the Write
.391637	20 3b 16	jsr $39163b	                JSR CODEC_TRF_FINISHED
.39163a	6b		rtl		                RTL
.39163b					CODEC_TRF_FINISHED
.39163b	e2 20		sep #$20	                SEP #$20        ; set A short
.39163d	af 02 e9 af	lda $afe902	CODEC_LOOP      LDA CODEC_WR_CTRL
.391641	29 01		and #$01	                AND #$01
.391643	c9 01		cmp #$01	                CMP #$01
.391645	f0 f6		beq $39163d	                BEQ CODEC_LOOP
.391647	c2 20		rep #$20	                REP #$20        ; set A long
.391649	60		rts		                RTS
.39164a					IBM_FILL_SCREEN
.39164a	c2 30		rep #$30	                REP #$30        ; set A&X long
.39164c	a9 00 00	lda #$0000	                LDA #$0000
.39164f	a2 00 00	ldx #$0000	                LDX #$0000
.391652					BM_FILL_SCREEN_LOOPY
.391652	a0 00 00	ldy #$0000	                LDY #$0000
.391655	e2 20		sep #$20	                SEP #$20        ; set A short
.391657					BM_FILL_SCREEN_LOOPX
.391657	97 48		sta [$48],y	                STA [BMP_PRSE_DST_PTR],Y    ; This is where the Pixel Go, Video Memory
.391659	c8		iny		                INY
.39165a	c4 40		cpy $40		                CPY BM_CLEAR_SCRN_X              ; Transfer the First line
.39165c	d0 f9		bne $391657	                BNE BM_FILL_SCREEN_LOOPX
.39165e	20 69 16	jsr $391669	                JSR BM_FILL_COMPUTE_Y_DST
.391661	e8		inx		                INX
.391662	e4 42		cpx $42		                CPX BM_CLEAR_SCRN_Y
.391664	d0 ec		bne $391652	                BNE BM_FILL_SCREEN_LOOPY
.391666	c2 30		rep #$30	                REP #$30        ; set A&X long
.391668	6b		rtl		                RTL
.391669					BM_FILL_COMPUTE_Y_DST
.391669	c2 20		rep #$20	                REP #$20        ; set A long
.39166b	a5 48		lda $48		                LDA BMP_PRSE_DST_PTR        ; Right now it is set @ $020000 (128K) + File Size
.39166d	8f 20 01 00	sta $000120	                STA @lADDER32_A_LL
.391671	a5 4a		lda $4a		                LDA BMP_PRSE_DST_PTR+2      ; Right now it is set @ $020000 (128K)
.391673	8f 22 01 00	sta $000122	                STA @lADDER32_A_HL
.391677	a9 80 02	lda #$0280	                LDA #$280        ; Right now it is set @ $020000 (128K) + File Size
.39167a	8f 24 01 00	sta $000124	                STA @lADDER32_B_LL
.39167e	a9 00 00	lda #$0000	                LDA #$0000
.391681	8f 26 01 00	sta $000126	                STA @lADDER32_B_HL
.391685	af 28 01 00	lda $000128	                LDA @lADDER32_R_LL
.391689	85 48		sta $48		                STA BMP_PRSE_DST_PTR
.39168b	af 2a 01 00	lda $00012a	                LDA @lADDER32_R_HL
.39168f	85 4a		sta $4a		                STA BMP_PRSE_DST_PTR+2
.391691	a9 00 00	lda #$0000	                LDA #$0000
.391694	60		rts		                RTS
.391695					IBMP_PARSER
.391695	c2 30		rep #$30	                REP #$30        ; set A&X long
.391697	a0 00 00	ldy #$0000	                LDY #$0000
.39169a	b7 44		lda [$44],y	                LDA [BMP_PRSE_SRC_PTR],Y
.39169c	c9 42 4d	cmp #$4d42	                CMP #$4D42
.39169f	f0 03		beq $3916a4	                BEQ IBMP_PARSER_CONT
.3916a1	82 04 01	brl $3917a8	                BRL BMP_PARSER_END_WITH_ERROR
.3916a4					IBMP_PARSER_CONT
.3916a4	a0 02 00	ldy #$0002	                LDY #$0002
.3916a7	b7 44		lda [$44],y	                LDA [BMP_PRSE_SRC_PTR],Y    ; File Size Low Short
.3916a9	8f 20 01 00	sta $000120	                STA @lADDER32_A_LL          ; Store in 32Bit Adder (A)
.3916ad	a0 04 00	ldy #$0004	                LDY #$0004
.3916b0	b7 44		lda [$44],y	                LDA [BMP_PRSE_SRC_PTR],Y    ; File Size High Short
.3916b2	8f 22 01 00	sta $000122	                STA @lADDER32_A_HL          ; Store in 32Bit Adder (A)
.3916b6	a9 ff ff	lda #$ffff	                LDA #$FFFF                  ; Store -1 in Adder (B)
.3916b9	8f 24 01 00	sta $000124	                STA @lADDER32_B_LL
.3916bd	8f 26 01 00	sta $000126	                STA @lADDER32_B_HL
.3916c1	18		clc		                CLC
.3916c2	af 28 01 00	lda $000128	                LDA @lADDER32_R_LL
.3916c6	85 50		sta $50		                STA BMP_FILE_SIZE
.3916c8	af 2a 01 00	lda $00012a	                LDA @lADDER32_R_HL
.3916cc	85 52		sta $52		                STA BMP_FILE_SIZE+2
.3916ce	a0 12 00	ldy #$0012	                LDY #$0012
.3916d1	b7 44		lda [$44],y	                LDA [BMP_PRSE_SRC_PTR],Y    ; The X SIze is 32bits in BMP, but 16bits will suffice
.3916d3	85 40		sta $40		                STA BMP_X_SIZE
.3916d5	a0 16 00	ldy #$0016	                LDY #$0016
.3916d8	b7 44		lda [$44],y	                LDA [BMP_PRSE_SRC_PTR],Y    ; The X SIze is 32bits in BMP, but 16bits will suffice
.3916da	85 42		sta $42		                STA BMP_Y_SIZE
.3916dc	a0 2e 00	ldy #$002e	                LDY #$002E
.3916df	b7 44		lda [$44],y	                LDA [BMP_PRSE_SRC_PTR],Y    ; The X SIze is 32bits in BMP, but 16bits will suffice
.3916e1	0a		asl a		                ASL A; Multiply by 2
.3916e2	0a		asl a		                ASL A; Multiply by 2
.3916e3	85 4c		sta $4c		                STA BMP_COLOR_PALET         ;
.3916e5	e0 00 00	cpx #$0000	                CPX #$0000
.3916e8	d0 05		bne $3916ef	                BNE BMP_LUT1_PICK
.3916ea	20 b0 17	jsr $3917b0	                JSR BMP_PARSER_UPDATE_LUT0   ; Go Upload the LUT0
.3916ed	80 08		bra $3916f7	                BRA DONE_TRANSFER_LUT;
.3916ef					  BMP_LUT1_PICK
.3916ef	e0 01 00	cpx #$0001	                CPX #$0001
.3916f2	d0 03		bne $3916f7	                BNE BMP_LUT2_PICK
.3916f4	20 e0 17	jsr $3917e0	                JSR BMP_PARSER_UPDATE_LUT1   ; Go Upload the LUT1
.3916f7					  BMP_LUT2_PICK
.3916f7					  DONE_TRANSFER_LUT
.3916f7	a5 56		lda $56		                LDA BMP_POSITION_Y
.3916f9	8f 00 01 00	sta $000100	                STA @lM0_OPERAND_A
.3916fd	a5 4e		lda $4e		                LDA SCRN_X_STRIDE
.3916ff	8f 02 01 00	sta $000102	                STA @lM0_OPERAND_B
.391703	af 04 01 00	lda $000104	                LDA @lM0_RESULT
.391707	8f 20 01 00	sta $000120	                STA @lADDER32_A_LL          ; Store in 32Bit Adder (A)
.39170b	af 06 01 00	lda $000106	                LDA @lM0_RESULT+2
.39170f	8f 22 01 00	sta $000122	                STA @lADDER32_A_HL          ; Store in 32Bit Adder (A)
.391713	a5 54		lda $54		                LDA BMP_POSITION_X
.391715	8f 24 01 00	sta $000124	                STA @lADDER32_B_LL          ; Put the X Position Adder (B)
.391719	a9 00 00	lda #$0000	                LDA #$0000
.39171c	8f 26 01 00	sta $000126	                STA @lADDER32_B_HL
.391720	af 28 01 00	lda $000128	                LDA @lADDER32_R_LL          ; Put the Results in TEMP
.391724	85 f0		sta $f0		                STA USER_TEMP
.391726	af 2a 01 00	lda $00012a	                LDA @lADDER32_R_HL          ; Put the Results in TEMP
.39172a	85 f2		sta $f2		                STA USER_TEMP+2
.39172c	a5 48		lda $48		                LDA BMP_PRSE_DST_PTR
.39172e	8f 20 01 00	sta $000120	                STA @lADDER32_A_LL          ; Store in 32Bit Adder (A)
.391732	a5 4a		lda $4a		                LDA BMP_PRSE_DST_PTR+2
.391734	8f 22 01 00	sta $000122	                STA @lADDER32_A_HL          ; Store in 32Bit Adder (A)
.391738	a5 f0		lda $f0		                LDA USER_TEMP
.39173a	8f 24 01 00	sta $000124	                STA @lADDER32_B_LL          ; Store in 32Bit Adder (B)
.39173e	a5 f2		lda $f2		                LDA USER_TEMP+2
.391740	8f 26 01 00	sta $000126	                STA @lADDER32_B_HL          ; Store in 32Bit Adder (B)
.391744	af 28 01 00	lda $000128	                LDA @lADDER32_R_LL          ; Put the Results in BMP_PRSE_DST_PTR
.391748	85 48		sta $48		                STA BMP_PRSE_DST_PTR
.39174a	af 2a 01 00	lda $00012a	                LDA @lADDER32_R_HL          ; Put the Results in BMP_PRSE_DST_PTR
.39174e	85 4a		sta $4a		                STA BMP_PRSE_DST_PTR+2
.391750	a5 44		lda $44		                LDA BMP_PRSE_SRC_PTR        ; Right now it is set @ $020000 (128K)
.391752	8f 20 01 00	sta $000120	                STA @lADDER32_A_LL
.391756	a5 46		lda $46		                LDA BMP_PRSE_SRC_PTR+2        ; Right now it is set @ $020000 (128K)
.391758	8f 22 01 00	sta $000122	                STA @lADDER32_A_HL
.39175c	a5 50		lda $50		                LDA BMP_FILE_SIZE
.39175e	8f 24 01 00	sta $000124	                STA @lADDER32_B_LL
.391762	a5 52		lda $52		                LDA BMP_FILE_SIZE+2
.391764	8f 26 01 00	sta $000126	                STA @lADDER32_B_HL
.391768	af 28 01 00	lda $000128	                LDA @lADDER32_R_LL
.39176c	85 44		sta $44		                STA BMP_PRSE_SRC_PTR
.39176e	af 2a 01 00	lda $00012a	                LDA @lADDER32_R_HL
.391772	85 46		sta $46		                STA BMP_PRSE_SRC_PTR+2
.391774	a5 44		lda $44		                LDA BMP_PRSE_SRC_PTR        ; Right now it is set @ $020000 (128K) + File Size
.391776	8f 20 01 00	sta $000120	                STA @lADDER32_A_LL
.39177a	a5 46		lda $46		                LDA BMP_PRSE_SRC_PTR+2      ; Right now it is set @ $020000 (128K)
.39177c	8f 22 01 00	sta $000122	                STA @lADDER32_A_HL
.391780	18		clc		                CLC
.391781	a5 40		lda $40		                LDA BMP_X_SIZE              ; Load The Size in X of the image and Make it negative
.391783	49 ff ff	eor #$ffff	                EOR #$FFFF                  ; Inverse all bit
.391786	69 01 00	adc #$0001	                ADC #$0001                  ; Add 0 ()
.391789	8f 24 01 00	sta $000124	                STA @lADDER32_B_LL          ; Store the Results in reg B of ADDER32
.39178d	a9 ff ff	lda #$ffff	                LDA #$FFFF
.391790	8f 26 01 00	sta $000126	                STA @lADDER32_B_HL          ; Store in the Reminder of the 32Bits B Register
.391794	af 28 01 00	lda $000128	                LDA @lADDER32_R_LL
.391798	85 44		sta $44		                STA BMP_PRSE_SRC_PTR
.39179a	af 2a 01 00	lda $00012a	                LDA @lADDER32_R_HL
.39179e	85 46		sta $46		                STA BMP_PRSE_SRC_PTR+2
.3917a0	20 10 18	jsr $391810	                JSR BMP_PARSER_DMA_SHIT_OUT  ; We are going to start with the slow method
.3917a3	a2 4b 1c	ldx #$1c4b	                LDX #<>bmp_parser_msg0
.3917a6	80 03		bra $3917ab	                BRA BMP_PARSER_END_NO_ERROR
.3917a8					BMP_PARSER_END_WITH_ERROR
.3917a8	a2 37 1c	ldx #$1c37	                LDX #<>bmp_parser_err0
.3917ab					BMP_PARSER_END_NO_ERROR
.3917ab	22 d4 0b 39	jsl $390bd4	                JSL IPRINT       ; print the first line
.3917af	6b		rtl		                RTL
.3917b0					BMP_PARSER_UPDATE_LUT0
.3917b0	38		sec		                SEC
.3917b1	a0 7a 00	ldy #$007a	                LDY #$007A
.3917b4	a2 00 00	ldx #$0000	                LDX #$0000
.3917b7	e2 20		sep #$20	                SEP #$20        ; set A short
.3917b9					BMP_PARSER_UPDATE_LOOP
.3917b9	b7 44		lda [$44],y	                LDA [BMP_PRSE_SRC_PTR],Y    ; First Pixel is Red
.3917bb	9f 00 20 af	sta $af2000,x	                STA @lGRPH_LUT0_PTR+0, X      ; The look-up Table point to a pixel Blue
.3917bf	c8		iny		                INY
.3917c0	b7 44		lda [$44],y	                LDA [BMP_PRSE_SRC_PTR],Y    ; Second Pixel is Green
.3917c2	9f 01 20 af	sta $af2001,x	                STA @lGRPH_LUT0_PTR+1, X      ; The look-up Table point to a pixel Blue
.3917c6	c8		iny		                INY
.3917c7	b7 44		lda [$44],y	                LDA [BMP_PRSE_SRC_PTR],Y    ; Third Pixel is Blue
.3917c9	9f 02 20 af	sta $af2002,x	                STA @lGRPH_LUT0_PTR+2, X      ; The look-up Table point to a pixel Blue
.3917cd	c8		iny		                INY
.3917ce	a9 80		lda #$80	                LDA #$80
.3917d0	9f 03 20 af	sta $af2003,x	                STA @lGRPH_LUT0_PTR+3, X      ; The look-up Table point to a pixel Blue
.3917d4	c8		iny		                INY ; For the Alpha Value, nobody cares
.3917d5	e8		inx		                INX
.3917d6	e8		inx		                INX
.3917d7	e8		inx		                INX
.3917d8	e8		inx		                INX
.3917d9	e4 4c		cpx $4c		                CPX BMP_COLOR_PALET         ; Apparently sometime there is less than 256 Values in the lookup
.3917db	d0 dc		bne $3917b9	                BNE BMP_PARSER_UPDATE_LOOP
.3917dd	c2 20		rep #$20	                REP #$20        ; set A long
.3917df	60		rts		                RTS
.3917e0					BMP_PARSER_UPDATE_LUT1
.3917e0	38		sec		                SEC
.3917e1	a0 36 00	ldy #$0036	                LDY #$0036
.3917e4	a2 00 00	ldx #$0000	                LDX #$0000
.3917e7	e2 20		sep #$20	                SEP #$20        ; set A short
.3917e9					PALETTE_LUT1_LOOP
.3917e9	b7 44		lda [$44],y	                LDA [BMP_PRSE_SRC_PTR],Y    ; First Pixel is Red
.3917eb	9f 00 24 af	sta $af2400,x	                STA @lGRPH_LUT1_PTR+0, X      ; The look-up Table point to a pixel Blue
.3917ef	c8		iny		                INY
.3917f0	b7 44		lda [$44],y	                LDA [BMP_PRSE_SRC_PTR],Y    ; Second Pixel is Green
.3917f2	9f 01 24 af	sta $af2401,x	                STA @lGRPH_LUT1_PTR+1, X      ; The look-up Table point to a pixel Blue
.3917f6	c8		iny		                INY
.3917f7	b7 44		lda [$44],y	                LDA [BMP_PRSE_SRC_PTR],Y    ; Third Pixel is Blue
.3917f9	9f 02 24 af	sta $af2402,x	                STA @lGRPH_LUT1_PTR+2, X      ; The look-up Table point to a pixel Blue
.3917fd	c8		iny		                INY
.3917fe	a9 80		lda #$80	                LDA #$80
.391800	9f 03 24 af	sta $af2403,x	                STA @lGRPH_LUT1_PTR+3, X      ; The look-up Table point to a pixel Blue
.391804	c8		iny		                INY ; For the Alpha Value, nobody cares
.391805	e8		inx		                INX
.391806	e8		inx		                INX
.391807	e8		inx		                INX
.391808	e8		inx		                INX
.391809	e4 4c		cpx $4c		                CPX BMP_COLOR_PALET         ; Apparently sometime there is less than 256 Values in the lookup
.39180b	d0 dc		bne $3917e9	                BNE PALETTE_LUT1_LOOP
.39180d	c2 20		rep #$20	                REP #$20        ; set A long
.39180f	60		rts		                RTS
.391810					BMP_PARSER_DMA_SHIT_OUT
.391810	a2 00 00	ldx #$0000	                LDX #$0000
.391813					BMP_PARSER_LOOPY
.391813	a0 00 00	ldy #$0000	                LDY #$0000
.391816	e2 20		sep #$20	                SEP #$20        ; set A short
.391818					BMP_PARSER_LOOPX
.391818	b7 44		lda [$44],y	                LDA [BMP_PRSE_SRC_PTR],Y    ; Load First Pixel Y (will be linear)
.39181a	97 48		sta [$48],y	                STA [BMP_PRSE_DST_PTR],Y    ; This is where the Pixel Go, Video Memory
.39181c	c8		iny		                INY
.39181d	c4 40		cpy $40		                CPY BMP_X_SIZE              ; Transfer the First line
.39181f	d0 f7		bne $391818	                BNE BMP_PARSER_LOOPX
.391821	20 2d 18	jsr $39182d	                JSR BMP_PARSER_COMPUTE_Y_SRC
.391824	20 48 18	jsr $391848	                JSR BMP_PARSER_COMPUTE_Y_DST
.391827	e8		inx		                INX
.391828	e4 42		cpx $42		                CPX BMP_Y_SIZE
.39182a	d0 e7		bne $391813	                BNE BMP_PARSER_LOOPY
.39182c	60		rts		                RTS
.39182d					BMP_PARSER_COMPUTE_Y_SRC
.39182d	c2 20		rep #$20	                REP #$20        ; set A long
.39182f	a5 44		lda $44		                LDA BMP_PRSE_SRC_PTR        ; Right now it is set @ $020000 (128K) + File Size
.391831	8f 20 01 00	sta $000120	                STA @lADDER32_A_LL
.391835	a5 46		lda $46		                LDA BMP_PRSE_SRC_PTR+2      ; Right now it is set @ $020000 (128K)
.391837	8f 22 01 00	sta $000122	                STA @lADDER32_A_HL
.39183b	af 28 01 00	lda $000128	                LDA @lADDER32_R_LL
.39183f	85 44		sta $44		                STA BMP_PRSE_SRC_PTR
.391841	af 2a 01 00	lda $00012a	                LDA @lADDER32_R_HL
.391845	85 46		sta $46		                STA BMP_PRSE_SRC_PTR+2
.391847	60		rts		                RTS
.391848					BMP_PARSER_COMPUTE_Y_DST
.391848	c2 20		rep #$20	                REP #$20        ; set A long
.39184a	18		clc		                CLC
.39184b	a5 48		lda $48		                LDA BMP_PRSE_DST_PTR
.39184d	65 4e		adc $4e		                ADC SCRN_X_STRIDE        ; In Normal Circumstances, it is 640
.39184f	85 48		sta $48		                STA BMP_PRSE_DST_PTR
.391851	a5 4a		lda $4a		                LDA BMP_PRSE_DST_PTR+2
.391853	69 00 00	adc #$0000	                ADC #$0000
.391856	85 4a		sta $4a		                STA BMP_PRSE_DST_PTR+2
.391858	60		rts		                RTS
.391859	ea		nop		ILOOP           NOP
.39185a	ea		nop		                NOP
.39185b	ea		nop		                NOP
.39185c	ea		nop		                NOP
.39185d	ea		nop		                NOP
.39185e	ea		nop		                NOP
.39185f	ea		nop		                NOP
.391860	ea		nop		                NOP
.391861	ea		nop		                NOP
.391862	ea		nop		                NOP
.391863	6b		rtl		                RTL
.391864	22 59 18 39	jsl $391859	ILOOP_1         JSL ILOOP
.391868	22 59 18 39	jsl $391859	                JSL ILOOP
.39186c	22 59 18 39	jsl $391859	                JSL ILOOP
.391870	22 59 18 39	jsl $391859	                JSL ILOOP
.391874	22 59 18 39	jsl $391859	                JSL ILOOP
.391878	22 59 18 39	jsl $391859	                JSL ILOOP
.39187c	22 59 18 39	jsl $391859	                JSL ILOOP
.391880	22 59 18 39	jsl $391859	                JSL ILOOP
.391884	22 59 18 39	jsl $391859	                JSL ILOOP
.391888	22 59 18 39	jsl $391859	                JSL ILOOP
.39188c	6b		rtl		                RTL
.39188d	22 64 18 39	jsl $391864	ILOOP_1MS       JSL ILOOP_1
.391891	6b		rtl		                RTL
.391892	e0 00 00	cpx #$0000	ILOOP_MS        CPX #0
.391895	f0 07		beq $39189e	                BEQ LOOP_MS_END
.391897	22 8d 18 39	jsl $39188d	                JSL ILOOP_1MS
.39189b	ca		dex		                DEX
.39189c	80 f4		bra $391892	                BRA ILOOP_MS
.39189e	6b		rtl		LOOP_MS_END     RTL
.39189f					SHOW_CREDITS
.39189f	48		pha		                PHA
.3918a0	da		phx		                PHX
.3918a1	5a		phy		                PHY
.3918a2	08		php		                PHP
.3918a3	e2 20		sep #$20	                SEP #$20        ; set A short
.3918a5	c2 10		rep #$10	                REP #$10        ; set X long
.3918a7	af 10 00 af	lda $af0010	                LDA @lVKY_TXT_CURSOR_CTRL_REG   ; Disable the cursor
.3918ab	29 fe		and #$fe	                AND #~Vky_Cursor_Enable
.3918ad	8f 10 00 af	sta $af0010	                STA @lVKY_TXT_CURSOR_CTRL_REG
.3918b1	a2 00 00	ldx #$0000	                LDX #0
.3918b4	bf 00 00 3b	lda $3b0000,x	credit_loop     LDA @lCREDITS_TEXT,X            ; Copy a byte of text
.3918b8	9f 00 a0 af	sta $afa000,x	                STA @lCS_TEXT_MEM_PTR,X
.3918bc	bf 00 20 3b	lda $3b2000,x	                LDA @lCREDITS_COLOR,X           ; Copy a byte of color
.3918c0	9f 00 c0 af	sta $afc000,x	                STA @lCS_COLOR_MEM_PTR,X
.3918c4	e8		inx		                INX
.3918c5	e0 00 20	cpx #$2000	                CPX #128 * 64
.3918c8	d0 ea		bne $3918b4	                BNE credit_loop
.3918ca	22 ad 0b 39	jsl $390bad	                JSL IGETCHW                     ; Wait for a keypress
.3918ce	22 e3 0e 39	jsl $390ee3	                JSL ICLRSCREEN                  ; Then clear the screen and return
.3918d2	22 4f 0d 39	jsl $390d4f	                JSL ICSRHOME                    ; Move cursor to the home position
.3918d6	af 10 00 af	lda $af0010	                LDA @lVKY_TXT_CURSOR_CTRL_REG   ; Enable the cursor
.3918da	09 01		ora #$01	                ORA #Vky_Cursor_Enable
.3918dc	8f 10 00 af	sta $af0010	                STA @lVKY_TXT_CURSOR_CTRL_REG
.3918e0	28		plp		                PLP
.3918e1	7a		ply		                PLY
.3918e2	fa		plx		                PLX
.3918e3	68		pla		                PLA
.3918e4	6b		rtl		                RTL
.3918e5	00		brk #		IRESTORE        BRK ; Warm boot routine
.3918e6	00		brk #		ISCINIT         BRK ;
.3918e7	00		brk #		IIOINIT         BRK ;
.3918e8	00		brk #		IPUTBLOCK       BRK ; Ouput a binary block to the currently selected channel
.3918e9	00		brk #		ISETLFS         BRK ; Obsolete (done in OPEN)
.3918ea	00		brk #		ISETNAM         BRK ; Obsolete (done in OPEN)
.3918eb	00		brk #		IOPEN           BRK ; Open a channel for reading and/or writing. Use SETLFS and SETNAM to set the channels and filename first.
.3918ec	00		brk #		ICLOSE          BRK ; Close a channel
.3918ed	00		brk #		IGETB           BRK ; Get a byte from input channel. Return 0 if no input. Carry is set if no input.
.3918ee	00		brk #		IGETBLOCK       BRK ; Get a X byes from input channel. If Carry is set, wait. If Carry is clear, do not wait.
.3918ef	00		brk #		IGETCH          BRK ; Get a character from the input channel. A=0 and Carry=1 if no data is wating
.3918f0	00		brk #		IGETS           BRK ; Get a string from the input channel. NULL terminates
.3918f1	00		brk #		IGETLINE        BRK ; Get a line of text from input channel. CR or NULL terminates.
.3918f2	00		brk #		IGETFIELD       BRK ; Get a field from the input channel. Value in A, CR, or NULL terminates
.3918f3	00		brk #		ITRIM           BRK ; Removes spaces at beginning and end of string.
.3918f4	00		brk #		IPRINTC         BRK ; Print character to screen. Handles terminal commands
.3918f5	00		brk #		IPRINTS         BRK ; Print string to screen. Handles terminal commands
.3918f6	00		brk #		IPRINTF         BRK ; Print a float value
.3918f7	00		brk #		IPRINTI         BRK ; Prints integer value in TEMP
.3918f8	00		brk #		IPRINTAI        BRK ; Prints integer value in A
.3918f9	00		brk #		IPUSHKEY        BRK ;
.3918fa	00		brk #		IPUSHKEYS       BRK ;
.3918fb	00		brk #		ISCRREADLINE    BRK ; Loads the MCMDADDR/BCMDADDR variable with the address of the current line on the screen. This is called when the RETURN key is pressed and is the first step in processing an immediate mode command.
.3918fc	00		brk #		ISCRGETWORD     BRK ; Read a current word on the screen. A word ends with a space, punctuation (except _), or any control character (value < 32). Loads the address into CMPTEXT_VAL and length into CMPTEXT_LEN variables.
.3918fd					KERNEL_DATA
>3918fd	20 20 20 20 0b 0c 0b 0c		greet_msg       .text $20, $20, $20, $20, $0B, $0C, $0B, $0C, $0B, $0C, $0B, $0C, $0B, $0C, " FFFFFFF MMMMMMMM XX    XXX " ,$0D
>391905	0b 0c 0b 0c 0b 0c 20 46 46 46 46 46 46 46 20 4d
>391915	4d 4d 4d 4d 4d 4d 4d 20 58 58 20 20 20 20 58 58
>391925	58 20 0d
>391928	20 20 20 0b 0c 0b 0c 0b		                .text $20, $20, $20, $0B, $0C, $0B, $0C, $0B, $0C, $0B, $0C, $0B, $0C, $20, "FF      MM MM MM   XX XXX   ",$0D
>391930	0c 0b 0c 0b 0c 20 46 46 20 20 20 20 20 20 4d 4d
>391940	20 4d 4d 20 4d 4d 20 20 20 58 58 20 58 58 58 20
>391950	20 20 0d
>391953	20 20 0b 0c 0b 0c 0b 0c		                .text $20, $20, $0B, $0C, $0B, $0C, $0B, $0C, $0B, $0C, $0B, $0C, $20, "FFFFF   MM MM MM    XXX      ",$0D
>39195b	0b 0c 0b 0c 20 46 46 46 46 46 20 20 20 4d 4d 20
>39196b	4d 4d 20 4d 4d 20 20 20 20 58 58 58 20 20 20 20
>39197b	20 20 0d
>39197e	20 0b 0c 0b 0c 0b 0c 0b		                .text $20, $0B, $0C, $0B, $0C, $0B, $0C, $0B, $0C, $0B, $0C, $20, "FF      MM MM MM  XXX  XX     ",$0D
>391986	0c 0b 0c 20 46 46 20 20 20 20 20 20 4d 4d 20 4d
>391996	4d 20 4d 4d 20 20 58 58 58 20 20 58 58 20 20 20
>3919a6	20 20 0d
>3919a9	0b 0c 0b 0c 0b 0c 0b 0c		                .text $0B, $0C, $0B, $0C, $0B, $0C, $0B, $0C, $0B, $0C, $20, "FF      MM MM MM XXX     XX    ",$0D
>3919b1	0b 0c 20 46 46 20 20 20 20 20 20 4d 4d 20 4d 4d
>3919c1	20 4d 4d 20 58 58 58 20 20 20 20 20 58 58 20 20
>3919d1	20 20 0d
>3919d4	0d 43 32 35 36 20 46 4f		                .text $0D, "C256 FOENIX FMX -- 3,670,016 Bytes Free", $0D
>3919dc	45 4e 49 58 20 46 4d 58 20 2d 2d 20 33 2c 36 37
>3919ec	30 2c 30 31 36 20 42 79 74 65 73 20 46 72 65 65
>3919fc	0d
>3919fd	77 77 77 2e 63 32 35 36		                .text "www.c256foenix.com - Kernel Date: "
>391a05	66 6f 65 6e 69 78 2e 63 6f 6d 20 2d 20 4b 65 72
>391a15	6e 65 6c 20 44 61 74 65 3a 20

;******  Processing file: src\version.asm

>391a1f	4d 61 72 63 68 20 30 33		.text "March 03, 2020"
>391a27	2c 20 32 30 32 30

;******  Return to file: src\kernel.asm

>391a2d	0d 00				                .text $0D,$00
.391a2f					old_pc_style_stat
>391a2f	1d 1d 1d 1d 1d 1d 8d 8d		greet_clr_line1 .text $1D, $1D, $1D, $1D, $1D, $1D, $8D, $8D, $4D, $4D, $2D, $2D, $5D, $5D, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD
>391a37	4d 4d 2d 2d 5d 5d fd fd fd fd fd fd fd fd fd fd
>391a47	fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd
>391a57	fd fd
>391a59	1d 1d 1d 1d 1d 8d 8d 4d		greet_clr_line2 .text $1D, $1D, $1D, $1D, $1D, $8D, $8D, $4D, $4D, $2D, $2D, $5D, $5D, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD
>391a61	4d 2d 2d 5d 5d fd fd fd fd fd fd fd fd fd fd fd
>391a71	fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd
>391a81	fd fd
>391a83	1d 1d 1d 1d 8d 8d 4d 4d		greet_clr_line3 .text $1D, $1D, $1D, $1D, $8D, $8D, $4D, $4D, $2D, $2D, $5D, $5D, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD
>391a8b	2d 2d 5d 5d fd fd fd fd fd fd fd fd fd fd fd fd
>391a9b	fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd
>391aab	fd fd
>391aad	1d 1d 1d 8d 8d 4d 4d 2d		greet_clr_line4 .text $1D, $1D, $1D, $8D, $8D, $4D, $4D, $2D, $2D, $5D, $5D, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD
>391ab5	2d 5d 5d fd fd fd fd fd fd fd fd fd fd fd fd fd
>391ac5	fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd
>391ad5	fd fd
>391ad7	1d 1d 8d 8d 4d 4d 2d 2d		greet_clr_line5 .text $1D, $1D, $8D, $8D, $4D, $4D, $2D, $2D, $5D, $5D, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD
>391adf	5d 5d fd fd fd fd fd fd fd fd fd fd fd fd fd fd
>391aef	fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd
>391aff	fd fd
>391b01	00 00 00 ff			fg_color_lut	  .text $00, $00, $00, $FF
>391b05	00 00 80 ff			                .text $00, $00, $80, $FF
>391b09	00 80 00 ff			                .text $00, $80, $00, $FF
>391b0d	80 00 00 ff			                .text $80, $00, $00, $FF
>391b11	00 80 80 ff			                .text $00, $80, $80, $FF
>391b15	80 80 00 ff			                .text $80, $80, $00, $FF
>391b19	80 00 80 ff			                .text $80, $00, $80, $FF
>391b1d	80 80 80 ff			                .text $80, $80, $80, $FF
>391b21	00 45 ff ff			                .text $00, $45, $FF, $FF
>391b25	13 45 8b ff			                .text $13, $45, $8B, $FF
>391b29	00 00 20 ff			                .text $00, $00, $20, $FF
>391b2d	00 20 00 ff			                .text $00, $20, $00, $FF
>391b31	20 00 00 ff			                .text $20, $00, $00, $FF
>391b35	20 20 20 ff			                .text $20, $20, $20, $FF
>391b39	40 40 40 ff			                .text $40, $40, $40, $FF
>391b3d	ff ff ff ff			                .text $FF, $FF, $FF, $FF
>391b41	00 00 00 ff			bg_color_lut	  .text $00, $00, $00, $FF
>391b45	00 00 80 ff			                .text $00, $00, $80, $FF
>391b49	00 80 00 ff			                .text $00, $80, $00, $FF
>391b4d	80 00 00 ff			                .text $80, $00, $00, $FF
>391b51	00 20 20 ff			                .text $00, $20, $20, $FF
>391b55	20 20 00 ff			                .text $20, $20, $00, $FF
>391b59	20 00 20 ff			                .text $20, $00, $20, $FF
>391b5d	20 20 20 ff			                .text $20, $20, $20, $FF
>391b61	1e 69 d2 ff			                .text $1E, $69, $D2, $FF
>391b65	13 45 8b ff			                .text $13, $45, $8B, $FF
>391b69	00 00 20 ff			                .text $00, $00, $20, $FF
>391b6d	00 20 00 ff			                .text $00, $20, $00, $FF
>391b71	40 00 00 ff			                .text $40, $00, $00, $FF
>391b75	10 10 10 ff			                .text $10, $10, $10, $FF
>391b79	40 40 40 ff			                .text $40, $40, $40, $FF
>391b7d	ff ff ff ff			                .text $FF, $FF, $FF, $FF
>391b81	43 6d 64 20 30 78 41 41		pass_tst0xAAmsg .text "Cmd 0xAA Test passed...", $0D, $00
>391b89	20 54 65 73 74 20 70 61 73 73 65 64 2e 2e 2e 0d
>391b99	00
>391b9a	43 6d 64 20 30 78 41 42		pass_tst0xABmsg .text "Cmd 0xAB Test passed...", $0D, $00
>391ba2	20 54 65 73 74 20 70 61 73 73 65 64 2e 2e 2e 0d
>391bb2	00
>391bb3	43 6d 64 20 30 78 36 30		pass_cmd0x60msg .text "Cmd 0x60 Executed.", $0D, $00
>391bbb	20 45 78 65 63 75 74 65 64 2e 0d 00
>391bc7	43 6d 64 20 30 78 46 46		pass_cmd0xFFmsg .text "Cmd 0xFF (Reset) Done.", $0D, $00
>391bcf	20 28 52 65 73 65 74 29 20 44 6f 6e 65 2e 0d 00
>391bdf	43 6d 64 20 30 78 45 45		pass_cmd0xEEmsg .text "Cmd 0xEE Echo Test passed...", $0D, $00
>391be7	20 45 63 68 6f 20 54 65 73 74 20 70 61 73 73 65
>391bf7	64 2e 2e 2e 0d 00
>391bfd	4b 65 79 62 6f 61 72 64		Success_kb_init .text "Keyboard Present", $0D, $00
>391c05	20 50 72 65 73 65 6e 74 0d 00
>391c0f	4e 6f 20 4b 65 79 62 6f		Failed_kb_init  .text "No Keyboard Attached or Failed Init...", $0D, $00
>391c17	61 72 64 20 41 74 74 61 63 68 65 64 20 6f 72 20
>391c27	46 61 69 6c 65 64 20 49 6e 69 74 2e 2e 2e 0d 00
>391c37	4e 4f 20 53 49 47 4e 41		bmp_parser_err0 .text "NO SIGNATURE FOUND.", $00
>391c3f	54 55 52 45 20 46 4f 55 4e 44 2e 00
>391c4b	42 4d 50 20 4c 4f 41 44		bmp_parser_msg0 .text "BMP LOADED.", $00
>391c53	45 44 2e 00
>391c57	45 58 45 43 55 54 49 4e		bmp_parser_msg1 .text "EXECUTING BMP PARSER", $00
>391c5f	47 20 42 4d 50 20 50 41 52 53 45 52 00
>391c6c	49 44 45 20 48 44 44 20		IDE_HDD_Present_msg0 .text "IDE HDD Present:", $00
>391c74	50 72 65 73 65 6e 74 3a 00
>391c7d	42 6f 6f 74 20 44 49 50		boot_invalid    .text "Boot DIP switch settings are invalid", $00
>391c85	20 73 77 69 74 63 68 20 73 65 74 74 69 6e 67 73
>391c95	20 61 72 65 20 69 6e 76 61 6c 69 64 00
>391ca2	42 6f 6f 74 69 6e 67 20		sdcard_notimpl  .text "Booting from SD card is not yet implemented.", $00
>391caa	66 72 6f 6d 20 53 44 20 63 61 72 64 20 69 73 20
>391cba	6e 6f 74 20 79 65 74 20 69 6d 70 6c 65 6d 65 6e
>391cca	74 65 64 2e 00
>391ccf	42 6f 6f 74 69 6e 67 20		ide_notimpl     .text "Booting from IDE drive is not yet implemented.", $00
>391cd7	66 72 6f 6d 20 49 44 45 20 64 72 69 76 65 20 69
>391ce7	73 20 6e 6f 74 20 79 65 74 20 69 6d 70 6c 65 6d
>391cf7	65 6e 74 65 64 2e 00
>391cfe	42 6f 6f 74 69 6e 67 20		floppy_notimpl  .text "Booting from floppy drive is not yet implemented.", $00
>391d06	66 72 6f 6d 20 66 6c 6f 70 70 79 20 64 72 69 76
>391d16	65 20 69 73 20 6e 6f 74 20 79 65 74 20 69 6d 70
>391d26	6c 65 6d 65 6e 74 65 64 2e 00
>391d30	0d 52 45 41 44 59 2e 00		ready_msg       .null $0D,"READY."
>391d38	41 42 4f 52 54 20 45 52		error_01        .null "ABORT ERROR"
>391d40	52 4f 52 00
>391d44	30 31 32 33 34 35 36 37		hex_digits      .text "0123456789ABCDEF",0
>391d4c	38 39 41 42 43 44 45 46 00
>391d55					.align 256
>391e00	00 1b 31 32 33 34 35 36		ScanCode_Press_Set1   .text $00, $1B, $31, $32, $33, $34, $35, $36, $37, $38, $39, $30, $2D, $3D, $08, $09    ; $00
>391e08	37 38 39 30 2d 3d 08 09
>391e10	71 77 65 72 74 79 75 69		                      .text $71, $77, $65, $72, $74, $79, $75, $69, $6F, $70, $5B, $5D, $0D, $00, $61, $73    ; $10
>391e18	6f 70 5b 5d 0d 00 61 73
>391e20	64 66 67 68 6a 6b 6c 3b		                      .text $64, $66, $67, $68, $6A, $6B, $6C, $3B, $27, $60, $00, $5C, $7A, $78, $63, $76    ; $20
>391e28	27 60 00 5c 7a 78 63 76
>391e30	62 6e 6d 2c 2e 2f 00 2a		                      .text $62, $6E, $6D, $2C, $2E, $2F, $00, $2A, $00, $20, $00, $00, $00, $00, $00, $00    ; $30
>391e38	00 20 00 00 00 00 00 00
>391e40	00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $11, $00, $00, $9D, $00, $1D, $00, $00    ; $40
>391e48	11 00 00 9d 00 1d 00 00
>391e50	91 00 00 00 00 00 00 00		                      .text $91, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $50
>391e58	00 00 00 00 00 00 00 00
>391e60	00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $60
>391e68	00 00 00 00 00 00 00 00
>391e70	00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $70
>391e78	00 00 00 00 00 00 00 00
>391e80	00 00 21 40 23 24 25 5e		ScanCode_Shift_Set1   .text $00, $00, $21, $40, $23, $24, $25, $5E, $26, $2A, $28, $29, $5F, $2B, $08, $09    ; $00
>391e88	26 2a 28 29 5f 2b 08 09
>391e90	51 57 45 52 54 59 55 49		                      .text $51, $57, $45, $52, $54, $59, $55, $49, $4F, $50, $7B, $7D, $0D, $00, $41, $53    ; $10
>391e98	4f 50 7b 7d 0d 00 41 53
>391ea0	44 46 47 48 4a 4b 4c 3a		                      .text $44, $46, $47, $48, $4A, $4B, $4C, $3A, $22, $7E, $00, $5C, $5A, $58, $43, $56    ; $20
>391ea8	22 7e 00 5c 5a 58 43 56
>391eb0	42 4e 4d 3c 3e 3f 00 18		                      .text $42, $4E, $4D, $3C, $3E, $3F, $00, $18, $00, $20, $00, $00, $00, $00, $00, $00    ; $30
>391eb8	00 20 00 00 00 00 00 00
>391ec0	00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $40
>391ec8	00 00 00 00 00 00 00 00
>391ed0	00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $50
>391ed8	00 00 00 00 00 00 00 00
>391ee0	00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $60
>391ee8	00 00 00 00 00 00 00 00
>391ef0	00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $70
>391ef8	00 00 00 00 00 00 00 00
>391f00	00 1b 31 32 33 34 35 36		ScanCode_Ctrl_Set1    .text $00, $1B, $31, $32, $33, $34, $35, $36, $37, $38, $39, $30, $2D, $3D, $08, $09    ; $00
>391f08	37 38 39 30 2d 3d 08 09
>391f10	71 77 65 72 74 79 75 69		                      .text $71, $77, $65, $72, $74, $79, $75, $69, $6F, $70, $5B, $5D, $0D, $00, $61, $73    ; $10
>391f18	6f 70 5b 5d 0d 00 61 73
>391f20	64 66 67 68 6a 6b 6c 3b		                      .text $64, $66, $67, $68, $6A, $6B, $6C, $3B, $27, $60, $00, $5C, $7A, $78, $03, $76    ; $20
>391f28	27 60 00 5c 7a 78 03 76
>391f30	62 6e 6d 2c 2e 2f 00 2a		                      .text $62, $6E, $6D, $2C, $2E, $2F, $00, $2A, $00, $20, $00, $00, $00, $00, $00, $00    ; $30
>391f38	00 20 00 00 00 00 00 00
>391f40	00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $40
>391f48	00 00 00 00 00 00 00 00
>391f50	00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $50
>391f58	00 00 00 00 00 00 00 00
>391f60	00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $60
>391f68	00 00 00 00 00 00 00 00
>391f70	00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $70
>391f78	00 00 00 00 00 00 00 00
>391f80	00 1b 31 32 33 34 35 36		ScanCode_Alt_Set1     .text $00, $1B, $31, $32, $33, $34, $35, $36, $37, $38, $39, $30, $2D, $3D, $08, $09    ; $00
>391f88	37 38 39 30 2d 3d 08 09
>391f90	71 77 65 72 74 79 75 69		                      .text $71, $77, $65, $72, $74, $79, $75, $69, $6F, $70, $5B, $5D, $0D, $00, $61, $73    ; $10
>391f98	6f 70 5b 5d 0d 00 61 73
>391fa0	64 66 67 68 6a 6b 6c 3b		                      .text $64, $66, $67, $68, $6A, $6B, $6C, $3B, $27, $60, $00, $5C, $7A, $78, $63, $76    ; $20
>391fa8	27 60 00 5c 7a 78 63 76
>391fb0	62 6e 6d 2c 2e 2f 00 2a		                      .text $62, $6E, $6D, $2C, $2E, $2F, $00, $2A, $00, $20, $00, $00, $00, $00, $00, $00    ; $30
>391fb8	00 20 00 00 00 00 00 00
>391fc0	00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $40
>391fc8	00 00 00 00 00 00 00 00
>391fd0	00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $50
>391fd8	00 00 00 00 00 00 00 00
>391fe0	00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $60
>391fe8	00 00 00 00 00 00 00 00
>391ff0	00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $70
>391ff8	00 00 00 00 00 00 00 00
>392000	00 1b 31 32 33 34 35 36		ScanCode_NumLock_Set1 .text $00, $1B, $31, $32, $33, $34, $35, $36, $37, $38, $39, $30, $2D, $3D, $08, $09    ; $00
>392008	37 38 39 30 2d 3d 08 09
>392010	71 77 65 72 74 79 75 69		                      .text $71, $77, $65, $72, $74, $79, $75, $69, $6F, $70, $5B, $5D, $0D, $00, $61, $73    ; $10
>392018	6f 70 5b 5d 0d 00 61 73
>392020	64 66 67 68 6a 6b 6c 3b		                      .text $64, $66, $67, $68, $6A, $6B, $6C, $3B, $27, $60, $00, $5C, $7A, $78, $63, $76    ; $20
>392028	27 60 00 5c 7a 78 63 76
>392030	62 6e 6d 2c 2e 2f 00 2a		                      .text $62, $6E, $6D, $2C, $2E, $2F, $00, $2A, $00, $20, $00, $00, $00, $00, $00, $00    ; $30
>392038	00 20 00 00 00 00 00 00
>392040	00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $40
>392048	00 00 00 00 00 00 00 00
>392050	00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $50
>392058	00 00 00 00 00 00 00 00
>392060	00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $60
>392068	00 00 00 00 00 00 00 00
>392070	00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $70
>392078	00 00 00 00 00 00 00 00
>392080	00 00 00 00 00 00 00 00		ScanCode_Prefix_Set1  .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $00
>392088	00 00 00 00 00 00 00 00
>392090	00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $10
>392098	00 00 00 00 00 00 00 00
>3920a0	00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $20
>3920a8	00 00 00 00 00 00 00 00
>3920b0	00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $30
>3920b8	00 00 00 00 00 00 00 00
>3920c0	00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $11, $00, $00, $9D, $00, $1D, $00, $00    ; $40
>3920c8	11 00 00 9d 00 1d 00 00
>3920d0	91 00 0f 7f 00 00 00 00		                      .text $91, $00, $0F, $7F, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $50
>3920d8	00 00 00 00 00 00 00 00
>3920e0	00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $60
>3920e8	00 00 00 00 00 00 00 00
>3920f0	00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $70
>3920f8	00 00 00 00 00 00 00 00
>392100					.align 256
>392100	00 14 1c 21 26 2a 2e 31		GAMMA_2_2_Tbl         .text  $00, $14, $1c, $21, $26, $2a, $2e, $31, $34, $37, $3a, $3d, $3f, $41, $44, $46
>392108	34 37 3a 3d 3f 41 44 46
>392110	48 4a 4c 4e 50 51 53 55		                      .text  $48, $4a, $4c, $4e, $50, $51, $53, $55, $57, $58, $5a, $5b, $5d, $5e, $60, $61
>392118	57 58 5a 5b 5d 5e 60 61
>392120	63 64 66 67 68 6a 6b 6c		                      .text  $63, $64, $66, $67, $68, $6a, $6b, $6c, $6d, $6f, $70, $71, $72, $73, $75, $76
>392128	6d 6f 70 71 72 73 75 76
>392130	77 78 79 7a 7b 7c 7d 7e		                      .text  $77, $78, $79, $7a, $7b, $7c, $7d, $7e, $80, $81, $82, $83, $84, $85, $86, $87
>392138	80 81 82 83 84 85 86 87
>392140	88 88 89 8a 8b 8c 8d 8e		                      .text  $88, $88, $89, $8a, $8b, $8c, $8d, $8e, $8f, $90, $91, $92, $93, $93, $94, $95
>392148	8f 90 91 92 93 93 94 95
>392150	96 97 98 99 99 9a 9b 9c		                      .text  $96, $97, $98, $99, $99, $9a, $9b, $9c, $9d, $9e, $9e, $9f, $a0, $a1, $a2, $a2
>392158	9d 9e 9e 9f a0 a1 a2 a2
>392160	a3 a4 a5 a5 a6 a7 a8 a8		                      .text  $a3, $a4, $a5, $a5, $a6, $a7, $a8, $a8, $a9, $aa, $ab, $ab, $ac, $ad, $ae, $ae
>392168	a9 aa ab ab ac ad ae ae
>392170	af b0 b0 b1 b2 b2 b3 b4		                      .text  $AF, $b0, $b0, $b1, $b2, $b2, $b3, $b4, $b5, $b5, $b6, $b7, $b7, $b8, $b9, $b9
>392178	b5 b5 b6 b7 b7 b8 b9 b9
>392180	ba bb bb bc bd bd be be		                      .text  $ba, $bb, $bb, $bc, $bd, $bd, $be, $be, $bf, $c0, $c0, $c1, $c2, $c2, $c3, $c4
>392188	bf c0 c0 c1 c2 c2 c3 c4
>392190	c4 c5 c5 c6 c7 c7 c8 c8		                      .text  $c4, $c5, $c5, $c6, $c7, $c7, $c8, $c8, $c9, $ca, $ca, $cb, $cb, $cc, $cd, $cd
>392198	c9 ca ca cb cb cc cd cd
>3921a0	ce ce cf d0 d0 d1 d1 d2		                      .text  $ce, $ce, $cf, $d0, $d0, $d1, $d1, $d2, $d2, $d3, $d4, $d4, $d5, $d5, $d6, $d6
>3921a8	d2 d3 d4 d4 d5 d5 d6 d6
>3921b0	d7 d8 d8 d9 d9 da da db		                      .text  $d7, $d8, $d8, $d9, $d9, $da, $da, $db, $db, $dc, $dc, $dd, $de, $de, $df, $df
>3921b8	db dc dc dd de de df df
>3921c0	e0 e0 e1 e1 e2 e2 e3 e3		                      .text  $e0, $e0, $e1, $e1, $e2, $e2, $e3, $e3, $e4, $e4, $e5, $e5, $e6, $e6, $e7, $e7
>3921c8	e4 e4 e5 e5 e6 e6 e7 e7
>3921d0	e8 e8 e9 e9 ea ea eb eb		                      .text  $e8, $e8, $e9, $e9, $ea, $ea, $eb, $eb, $ec, $ec, $ed, $ed, $ee, $ee, $ef, $ef
>3921d8	ec ec ed ed ee ee ef ef
>3921e0	f0 f0 f1 f1 f2 f2 f3 f3		                      .text  $f0, $f0, $f1, $f1, $f2, $f2, $f3, $f3, $f4, $f4, $f5, $f5, $f6, $f6, $f7, $f7
>3921e8	f4 f4 f5 f5 f6 f6 f7 f7
>3921f0	f8 f8 f9 f9 f9 fa fa fb		                      .text  $f8, $f8, $f9, $f9, $f9, $fa, $fa, $fb, $fb, $fc, $fc, $fd, $fd, $fe, $fe, $ff
>3921f8	fb fc fc fd fd fe fe ff
>392200					.align 256
>392200	00 0b 11 15 19 1c 1f 22		GAMMA_1_8_Tbl         .text  $00, $0b, $11, $15, $19, $1c, $1f, $22, $25, $27, $2a, $2c, $2e, $30, $32, $34
>392208	25 27 2a 2c 2e 30 32 34
>392210	36 38 3a 3c 3d 3f 41 43		                      .text  $36, $38, $3a, $3c, $3d, $3f, $41, $43, $44, $46, $47, $49, $4a, $4c, $4d, $4f
>392218	44 46 47 49 4a 4c 4d 4f
>392220	50 51 53 54 55 57 58 59		                      .text  $50, $51, $53, $54, $55, $57, $58, $59, $5b, $5c, $5d, $5e, $60, $61, $62, $63
>392228	5b 5c 5d 5e 60 61 62 63
>392230	64 65 67 68 69 6a 6b 6c		                      .text  $64, $65, $67, $68, $69, $6a, $6b, $6c, $6d, $6e, $70, $71, $72, $73, $74, $75
>392238	6d 6e 70 71 72 73 74 75
>392240	76 77 78 79 7a 7b 7c 7d		                      .text  $76, $77, $78, $79, $7a, $7b, $7c, $7d, $7e, $7f, $80, $81, $82, $83, $84, $84
>392248	7e 7f 80 81 82 83 84 84
>392250	85 86 87 88 89 8a 8b 8c		                      .text  $85, $86, $87, $88, $89, $8a, $8b, $8c, $8d, $8e, $8e, $8f, $90, $91, $92, $93
>392258	8d 8e 8e 8f 90 91 92 93
>392260	94 95 95 96 97 98 99 9a		                      .text  $94, $95, $95, $96, $97, $98, $99, $9a, $9a, $9b, $9c, $9d, $9e, $9f, $9f, $a0
>392268	9a 9b 9c 9d 9e 9f 9f a0
>392270	a1 a2 a3 a3 a4 a5 a6 a6		                      .text  $a1, $a2, $a3, $a3, $a4, $a5, $a6, $a6, $a7, $a8, $a9, $aa, $aa, $ab, $ac, $ad
>392278	a7 a8 a9 aa aa ab ac ad
>392280	ad ae af b0 b0 b1 b2 b3		                      .text  $ad, $ae, $af, $b0, $b0, $b1, $b2, $b3, $b3, $b4, $b5, $b6, $b6, $b7, $b8, $b8
>392288	b3 b4 b5 b6 b6 b7 b8 b8
>392290	b9 ba bb bb bc bd bd be		                      .text  $b9, $ba, $bb, $bb, $bc, $bd, $bd, $be, $bf, $bf, $c0, $c1, $c2, $c2, $c3, $c4
>392298	bf bf c0 c1 c2 c2 c3 c4
>3922a0	c4 c5 c6 c6 c7 c8 c8 c9		                      .text  $c4, $c5, $c6, $c6, $c7, $c8, $c8, $c9, $ca, $ca, $cb, $cc, $cc, $cd, $ce, $ce
>3922a8	ca ca cb cc cc cd ce ce
>3922b0	cf d0 d0 d1 d2 d2 d3 d4		                      .text  $cf, $d0, $d0, $d1, $d2, $d2, $d3, $d4, $d4, $d5, $d6, $d6, $d7, $d7, $d8, $d9
>3922b8	d4 d5 d6 d6 d7 d7 d8 d9
>3922c0	d9 da db db dc dc dd de		                      .text  $d9, $da, $db, $db, $dc, $dc, $dd, $de, $de, $df, $e0, $e0, $e1, $e1, $e2, $e3
>3922c8	de df e0 e0 e1 e1 e2 e3
>3922d0	e3 e4 e4 e5 e6 e6 e7 e7		                      .text  $e3, $e4, $e4, $e5, $e6, $e6, $e7, $e7, $e8, $e9, $e9, $ea, $ea, $eb, $ec, $ec
>3922d8	e8 e9 e9 ea ea eb ec ec
>3922e0	ed ed ee ef ef f0 f0 f1		                      .text  $ed, $ed, $ee, $ef, $ef, $f0, $f0, $f1, $f1, $f2, $f3, $f3, $f4, $f4, $f5, $f5
>3922e8	f1 f2 f3 f3 f4 f4 f5 f5
>3922f0	f6 f7 f7 f8 f8 f9 f9 fa		                      .text  $f6, $f7, $f7, $f8, $f8, $f9, $f9, $fa, $fb, $fb, $fc, $fc, $fd, $fd, $fe, $ff
>3922f8	fb fb fc fc fd fd fe ff
>392300					.align 256
>392300	1d c8 a7 ac 10 d6 52 7c		RANDOM_LUT_Tbl		    .text  $1d, $c8, $a7, $ac, $10, $d6, $52, $7c, $83, $dd, $ce, $39, $cd, $c5, $3b, $15
>392308	83 dd ce 39 cd c5 3b 15
>392310	22 55 3b 94 e0 33 1f 38						              .text  $22, $55, $3b, $94, $e0, $33, $1f, $38, $87, $12, $31, $65, $89, $27, $88, $42
>392318	87 12 31 65 89 27 88 42
>392320	b2 32 72 84 b2 b2 31 52						              .text  $b2, $32, $72, $84, $b2, $b2, $31, $52, $94, $ce, $56, $ec, $fe, $da, $58, $c9
>392328	94 ce 56 ec fe da 58 c9
>392330	c8 5b 53 2a 08 3b 19 c1						              .text  $c8, $5b, $53, $2a, $08, $3b, $19, $c1, $d0, $10, $2c, $b2, $4b, $ea, $32, $61
>392338	d0 10 2c b2 4b ea 32 61
>392340	da 34 33 8f 2b da 49 89						              .text  $da, $34, $33, $8f, $2b, $da, $49, $89, $a1, $e6, $ca, $2d, $b3, $ce, $b0, $79
>392348	a1 e6 ca 2d b3 ce b0 79
>392350	44 aa 32 82 91 e9 29 16						              .text  $44, $aa, $32, $82, $91, $e9, $29, $16, $5f, $e3, $fb, $bd, $15, $2e, $be, $f5
>392358	5f e3 fb bd 15 2e be f5
>392360	e9 4a e4 2e 60 24 94 35						              .text  $e9, $4a, $e4, $2e, $60, $24, $94, $35, $8d, $8f, $2c, $80, $0a, $5e, $99, $36
>392368	8d 8f 2c 80 0a 5e 99 36
>392370	ac ab 21 26 42 7c 5e bc						              .text  $ac, $ab, $21, $26, $42, $7c, $5e, $bc, $13, $52, $44, $2f, $e3, $ef, $44, $a2
>392378	13 52 44 2f e3 ef 44 a2
>392380	86 c1 9c 47 5f 36 6d 02						              .text  $86, $c1, $9c, $47, $5f, $36, $6d, $02, $be, $23, $02, $58, $0a, $52, $5e, $b4
>392388	be 23 02 58 0a 52 5e b4
>392390	9f 06 08 c9 97 cb 9e dd						              .text  $9f, $06, $08, $c9, $97, $cb, $9e, $dd, $d5, $cf, $3e, $df, $c4, $9e, $da, $bb
>392398	d5 cf 3e df c4 9e da bb
>3923a0	9b 5d c9 f5 d9 c3 7e 87						              .text  $9b, $5d, $c9, $f5, $d9, $c3, $7e, $87, $77, $7d, $b1, $3b, $4a, $68, $35, $6e
>3923a8	77 7d b1 3b 4a 68 35 6e
>3923b0	ee 47 ad 8f fd 73 2e 46						              .text  $ee, $47, $ad, $8f, $fd, $73, $2e, $46, $b5, $8f, $44, $63, $55, $6f, $e1, $50
>3923b8	b5 8f 44 63 55 6f e1 50
>3923c0	f4 b6 a3 4f 68 c4 a5 a4						              .text  $f4, $b6, $a3, $4f, $68, $c4, $a5, $a4, $57, $74, $b9, $bd, $05, $14, $50, $eb
>3923c8	57 74 b9 bd 05 14 50 eb
>3923d0	a5 5c 57 2f 99 dc 2e 8a						              .text  $a5, $5c, $57, $2f, $99, $dc, $2e, $8a, $44, $bc, $ec, $db, $22, $58, $fc, $be
>3923d8	44 bc ec db 22 58 fc be
>3923e0	5f 3f 50 bd 2a 36 ab ae						              .text  $5f, $3f, $50, $bd, $2a, $36, $ab, $ae, $24, $aa, $82, $11, $5c, $9f, $43, $4d
>3923e8	24 aa 82 11 5c 9f 43 4d
>3923f0	8f 0c 20 00 91 b6 45 9e						              .text  $8f, $0c, $20, $00, $91, $b6, $45, $9e, $3e, $3d, $66, $7e, $0a, $1c, $6b, $74
>3923f8	3e 3d 66 7e 0a 1c 6b 74
>392400					.align 16
>392400	00 01 01 00 00 00 00 00		MOUSE_POINTER_PTR     .text $00,$01,$01,$00,$00,$00,$00,$00,$01,$01,$01,$00,$00,$00,$00,$00
>392408	01 01 01 00 00 00 00 00
>392410	01 ff ff 01 00 00 01 01		                      .text $01,$FF,$FF,$01,$00,$00,$01,$01,$FF,$FF,$FF,$01,$00,$00,$00,$00
>392418	ff ff ff 01 00 00 00 00
>392420	01 ff ff ff 01 01 55 ff		                      .text $01,$FF,$FF,$FF,$01,$01,$55,$FF,$01,$55,$FF,$FF,$01,$00,$00,$00
>392428	01 55 ff ff 01 00 00 00
>392430	01 55 ff ff ff ff 01 55		                      .text $01,$55,$FF,$FF,$FF,$FF,$01,$55,$FF,$FF,$FF,$FF,$01,$00,$00,$00
>392438	ff ff ff ff 01 00 00 00
>392440	00 01 55 ff ff ff ff ff		                      .text $00,$01,$55,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$01,$FF,$FF,$01,$00,$00
>392448	ff ff 01 ff ff 01 00 00
>392450	00 00 01 55 ff ff ff ff		                      .text $00,$00,$01,$55,$FF,$FF,$FF,$FF,$01,$FF,$FF,$01,$FF,$01,$00,$00
>392458	01 ff ff 01 ff 01 00 00
>392460	00 00 01 01 55 ff ff ff		                      .text $00,$00,$01,$01,$55,$FF,$FF,$FF,$FF,$01,$FF,$FF,$FF,$01,$00,$00
>392468	ff 01 ff ff ff 01 00 00
>392470	00 00 01 55 01 55 ff ff		                      .text $00,$00,$01,$55,$01,$55,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$01,$01,$00
>392478	ff ff ff ff ff 01 01 00
>392480	00 00 01 55 55 55 ff ff		                      .text $00,$00,$01,$55,$55,$55,$FF,$FF,$FF,$FF,$FF,$FF,$01,$FF,$FF,$01
>392488	ff ff ff ff 01 ff ff 01
>392490	00 00 00 01 55 55 55 ff		                      .text $00,$00,$00,$01,$55,$55,$55,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$01
>392498	ff ff ff ff ff ff ff 01
>3924a0	00 00 00 00 01 55 55 55		                      .text $00,$00,$00,$00,$01,$55,$55,$55,$55,$55,$01,$FF,$FF,$55,$01,$00
>3924a8	55 55 01 ff ff 55 01 00
>3924b0	00 00 00 00 00 01 01 01		                      .text $00,$00,$00,$00,$00,$01,$01,$01,$01,$01,$55,$FF,$55,$01,$00,$00
>3924b8	01 01 55 ff 55 01 00 00
>3924c0	00 00 00 00 00 00 00 00		                      .text $00,$00,$00,$00,$00,$00,$00,$00,$01,$55,$55,$55,$01,$00,$00,$00
>3924c8	01 55 55 55 01 00 00 00
>3924d0	00 00 00 00 00 00 00 00		                      .text $00,$00,$00,$00,$00,$00,$00,$00,$01,$55,$55,$01,$00,$00,$00,$00
>3924d8	01 55 55 01 00 00 00 00
>3924e0	00 00 00 00 00 00 00 00		                      .text $00,$00,$00,$00,$00,$00,$00,$00,$00,$01,$01,$00,$00,$00,$00,$00
>3924e8	00 01 01 00 00 00 00 00
>3924f0	00 00 00 00 00 00 00 00		                      .text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>3924f8	00 00 00 00 00 00 00 00
.3ff000					FONT_4_BANK0
>3ff000	00 00 00 00 00 00 00 00		.binary "FONT/Bm437_PhoenixEGA_8x8.bin", 0, 2048
>3ff008	7e 81 a5 81 bd 99 81 7e 3c 7e db ff c3 7e 3c 00
>3ff018	00 ee fe fe 7c 38 10 00 10 38 7c fe 7c 38 10 00
>3ff028	00 3c 18 ff ff 08 18 00 10 38 7c fe fe 10 38 00
>3ff038	00 00 18 3c 18 00 00 00 ff ff e7 c3 e7 ff ff ff
>3ff048	00 3c 42 81 81 42 3c 00 ff c3 bd 7e 7e bd c3 ff
>3ff058	01 03 07 0f 1f 3f 7f ff ff fe fc f8 f0 e0 c0 80
>3ff068	04 06 07 04 04 fc f8 00 0c 0a 0d 0b f9 f9 1f 1f
>3ff078	00 92 7c 44 c6 7c 92 00 00 00 60 78 7e 78 60 00
>3ff088	00 00 06 1e 7e 1e 06 00 18 7e 18 18 18 18 7e 18
>3ff098	66 66 66 66 66 00 66 00 ff b6 76 36 36 36 36 00
>3ff0a8	7e c1 dc 22 22 1f 83 7e 00 00 00 7e 7e 00 00 00
>3ff0b8	18 7e 18 18 7e 18 00 ff 18 7e 18 18 18 18 18 00
>3ff0c8	18 18 18 18 18 7e 18 00 00 04 06 ff 06 04 00 00
>3ff0d8	00 20 60 ff 60 20 00 00 00 00 00 c0 c0 c0 ff 00
>3ff0e8	00 24 66 ff 66 24 00 00 00 00 10 38 7c fe 00 00
>3ff0f8	00 00 00 fe 7c 38 10 00 00 00 00 00 00 00 00 00
>3ff108	30 30 30 30 30 00 30 00 66 66 00 00 00 00 00 00
>3ff118	6c 6c fe 6c fe 6c 6c 00 10 7c d2 7c 86 7c 10 00
>3ff128	f0 96 fc 18 3e 72 de 00 30 48 30 78 ce cc 78 00
>3ff138	0c 0c 18 00 00 00 00 00 10 60 c0 c0 c0 60 10 00
>3ff148	10 0c 06 06 06 0c 10 00 00 54 38 fe 38 54 00 00
>3ff158	00 18 18 7e 18 18 00 00 00 00 00 00 00 00 18 70
>3ff168	00 00 00 7e 00 00 00 00 00 00 00 00 00 00 18 00
>3ff178	02 06 0c 18 30 60 c0 00 7c ce de f6 e6 e6 7c 00
>3ff188	18 38 78 18 18 18 3c 00 7c c6 06 0c 30 60 fe 00
>3ff198	7c c6 06 3c 06 c6 7c 00 0e 1e 36 66 fe 06 06 00
>3ff1a8	fe c0 c0 fc 06 06 fc 00 7c c6 c0 fc c6 c6 7c 00
>3ff1b8	fe 06 0c 18 30 60 60 00 7c c6 c6 7c c6 c6 7c 00
>3ff1c8	7c c6 c6 7e 06 c6 7c 00 00 30 00 00 00 30 00 00
>3ff1d8	00 30 00 00 00 30 20 00 00 1c 30 60 30 1c 00 00
>3ff1e8	00 00 7e 00 7e 00 00 00 00 70 18 0c 18 70 00 00
>3ff1f8	7c c6 0c 18 30 00 30 00 7c 82 9a aa aa 9e 7c 00
>3ff208	7c c6 c6 fe c6 c6 c6 00 fc 66 66 7c 66 66 fc 00
>3ff218	7c c6 c0 c0 c0 c6 7c 00 fc 66 66 66 66 66 fc 00
>3ff228	fe 62 68 78 68 62 fe 00 fe 62 68 78 68 60 f0 00
>3ff238	7c c6 c6 c0 de c6 7c 00 c6 c6 c6 fe c6 c6 c6 00
>3ff248	3c 18 18 18 18 18 3c 00 1e 0c 0c 0c 0c cc 78 00
>3ff258	c6 cc d8 f0 d8 cc c6 00 f0 60 60 60 60 62 fe 00
>3ff268	c6 ee fe d6 c6 c6 c6 00 c6 e6 f6 de ce c6 c6 00
>3ff278	7c c6 c6 c6 c6 c6 7c 00 fc 66 66 7c 60 60 f0 00
>3ff288	7c c6 c6 c6 c6 c6 7c 0c fc 66 66 7c 66 66 e6 00
>3ff298	7c c6 c0 7c 06 c6 7c 00 7e 5a 18 18 18 18 3c 00
>3ff2a8	c6 c6 c6 c6 c6 c6 7c 00 c6 c6 c6 c6 c6 6c 38 00
>3ff2b8	c6 c6 c6 c6 d6 ee c6 00 c6 6c 38 38 38 6c c6 00
>3ff2c8	66 66 66 3c 18 18 3c 00 fe c6 0c 18 30 66 fe 00
>3ff2d8	1c 18 18 18 18 18 1c 00 c0 60 30 18 0c 06 02 00
>3ff2e8	70 30 30 30 30 30 70 00 00 00 10 38 6c c6 00 00
>3ff2f8	00 00 00 00 00 00 00 ff 30 30 18 00 00 00 00 00
>3ff308	00 00 7c 06 7e c6 7e 00 c0 c0 fc c6 c6 c6 fc 00
>3ff318	00 00 7c c6 c0 c6 7c 00 06 06 7e c6 c6 c6 7e 00
>3ff328	00 00 7c c6 fe c0 7c 00 3c 66 60 f0 60 60 60 00
>3ff338	00 00 7e c6 c6 7e 06 7c c0 c0 fc c6 c6 c6 c6 00
>3ff348	18 00 38 18 18 18 3c 00 00 0c 00 1c 0c 0c cc 78
>3ff358	c0 c0 c6 d8 f0 d8 c6 00 38 18 18 18 18 18 3c 00
>3ff368	00 00 ee fe d6 c6 c6 00 00 00 fc c6 c6 c6 c6 00
>3ff378	00 00 7c c6 c6 c6 7c 00 00 00 fc c6 c6 fc c0 c0
>3ff388	00 00 7e c6 c6 7e 06 06 00 00 de 76 60 60 60 00
>3ff398	00 00 7c c0 7c 06 7c 00 18 18 7e 18 18 18 1e 00
>3ff3a8	00 00 c6 c6 c6 c6 7e 00 00 00 c6 c6 c6 6c 38 00
>3ff3b8	00 00 c6 c6 d6 fe c6 00 00 00 c6 6c 38 6c c6 00
>3ff3c8	00 00 c6 c6 c6 7e 06 7c 00 00 fe 0c 18 60 fe 00
>3ff3d8	0e 18 18 70 18 18 0e 00 18 18 18 00 18 18 18 00
>3ff3e8	e0 30 30 1c 30 30 e0 00 00 00 70 9a 0e 00 00 00
>3ff3f8	00 00 18 3c 66 ff 00 00 7c c6 c0 c0 c6 7c 18 70
>3ff408	66 00 c6 c6 c6 c6 7e 00 0e 18 7c c6 fe c0 7c 00
>3ff418	18 24 7c 06 7e c6 7e 00 66 00 7c 06 7e c6 7e 00
>3ff428	38 0c 7c 06 7e c6 7e 00 18 00 7c 06 7e c6 7e 00
>3ff438	00 00 7c c0 c0 7c 18 70 18 24 7c c6 fe c0 7c 00
>3ff448	66 00 7c c6 fe c0 7c 00 70 18 7c c6 fe c0 7c 00
>3ff458	66 00 38 18 18 18 3c 00 18 24 38 18 18 18 3c 00
>3ff468	38 0c 38 18 18 18 3c 00 66 00 7c c6 fe c6 c6 00
>3ff478	18 00 7c c6 fe c6 c6 00 0e 18 fe 60 78 60 fe 00
>3ff488	00 00 7c 1a 7e d8 7e 00 7e d8 d8 de f8 d8 de 00
>3ff498	18 24 7c c6 c6 c6 7c 00 66 00 7c c6 c6 c6 7c 00
>3ff4a8	38 0c 7c c6 c6 c6 7c 00 18 24 c6 c6 c6 c6 7e 00
>3ff4b8	38 0c c6 c6 c6 c6 7e 00 66 00 c6 c6 c6 7e 06 7c
>3ff4c8	66 7c c6 c6 c6 c6 7c 00 c6 00 c6 c6 c6 c6 7c 00
>3ff4d8	18 7c c6 c0 c6 7c 18 00 1e 32 30 78 30 70 fe 00
>3ff4e8	66 3c 18 7e 18 3c 18 00 fc c6 fc c0 cc de cc 0e
>3ff4f8	00 1c 32 30 fc 30 f0 00 0e 18 7c 06 7e c6 7e 00
>3ff508	1a 30 38 18 18 18 3c 00 0e 18 7c c6 c6 c6 7c 00
>3ff518	0e 18 c6 c6 c6 c6 7e 00 66 98 fc c6 c6 c6 c6 00
>3ff528	66 98 e6 f6 de ce c6 00 7c 06 7e c6 7e 00 fe 00
>3ff538	7c c6 c6 c6 7c 00 fe 00 18 00 18 30 60 c6 7c 00
>3ff548	00 00 fe c0 c0 c0 c0 00 00 00 fe 06 06 06 06 00
>3ff558	c0 c0 c0 de 06 0c 1e 00 c0 c0 c0 cc 1c 3e 0c 00
>3ff568	30 00 30 30 30 30 30 00 00 36 6c d8 6c 36 00 00
>3ff578	00 d8 6c 36 6c d8 00 00 aa aa aa aa aa aa aa aa
>3ff588	aa 55 aa 55 aa 55 aa 55 44 22 44 22 44 22 44 22
>3ff598	18 18 18 18 18 18 18 18 18 18 18 f8 18 18 18 18
>3ff5a8	18 18 18 f8 18 f8 18 18 36 36 36 f6 36 36 36 36
>3ff5b8	00 00 00 fe 36 36 36 36 00 00 00 f8 18 f8 18 18
>3ff5c8	36 36 36 f6 06 f6 36 36 36 36 36 36 36 36 36 36
>3ff5d8	00 00 00 fe 06 f6 36 36 36 36 36 f6 06 fe 00 00
>3ff5e8	36 36 36 fe 00 00 00 00 18 18 18 f8 18 f8 00 00
>3ff5f8	00 00 00 f8 18 18 18 18 18 18 18 1f 00 00 00 00
>3ff608	18 18 18 ff 00 00 00 00 00 00 00 ff 18 18 18 18
>3ff618	18 18 18 1f 18 18 18 18 00 00 00 ff 00 00 00 00
>3ff628	18 18 18 ff 18 18 18 18 18 18 18 1f 18 1f 18 18
>3ff638	36 36 36 37 36 36 36 36 36 36 36 37 30 3f 00 00
>3ff648	00 00 00 3f 30 37 36 36 36 36 36 f7 00 ff 00 00
>3ff658	00 00 00 ff 00 f7 36 36 36 36 36 37 30 37 36 36
>3ff668	00 00 00 ff 00 ff 00 00 36 36 36 f7 00 f7 36 36
>3ff678	18 18 18 ff 00 ff 00 00 36 36 36 ff 00 00 00 00
>3ff688	00 00 00 ff 00 ff 18 18 00 00 00 ff 36 36 36 36
>3ff698	36 36 36 3f 00 00 00 00 18 18 18 1f 18 1f 00 00
>3ff6a8	00 00 00 1f 18 1f 18 18 00 00 00 3f 36 36 36 36
>3ff6b8	36 36 36 ff 36 36 36 36 18 18 18 ff 18 ff 18 18
>3ff6c8	18 18 18 f8 00 00 00 00 00 00 00 1f 18 18 18 18
>3ff6d8	ff ff ff ff ff ff ff ff 00 00 00 00 ff ff ff ff
>3ff6e8	f0 f0 f0 f0 f0 f0 f0 f0 0f 0f 0f 0f 0f 0f 0f 0f
>3ff6f8	ff ff ff ff 00 00 00 00 00 00 77 98 98 77 00 00
>3ff708	1c 36 66 fc c6 c6 fc c0 fe 62 60 60 60 60 60 00
>3ff718	00 00 ff 66 66 66 66 00 fe 62 30 18 30 62 fe 00
>3ff728	00 00 3f 66 c6 cc 78 00 00 00 33 33 33 3e 30 f0
>3ff738	00 00 ff 18 18 18 18 00 3c 18 3c 66 66 3c 18 3c
>3ff748	00 7c c6 fe c6 7c 00 00 00 7e c3 c3 c3 66 e7 00
>3ff758	1e 19 3c 66 c6 cc 78 00 00 00 66 99 99 66 00 00
>3ff768	00 03 7c ce e6 7c c0 00 00 3e c0 fe c0 3e 00 00
>3ff778	00 7e c3 c3 c3 c3 00 00 00 fe 00 fe 00 fe 00 00
>3ff788	18 18 7e 18 18 7e 00 00 70 18 0c 18 70 00 fe 00
>3ff798	1c 30 60 30 1c 00 fe 00 00 0e 1b 18 18 18 18 18
>3ff7a8	18 18 18 18 18 d8 70 00 00 18 00 7e 00 18 00 00
>3ff7b8	00 76 dc 00 76 dc 00 00 3c 66 3c 00 00 00 00 00
>3ff7c8	00 18 3c 18 00 00 00 00 00 00 00 00 18 00 00 00
>3ff7d8	0f 0c 0c 0c ec 6c 38 00 d8 ec cc cc 00 00 00 00
>3ff7e8	f0 30 c0 f0 00 00 00 00 00 00 00 3c 3c 3c 3c 00
>3ff7f8	00 00 00 00 00 00 00 00
.3ff800					FONT_4_BANK1
>3ff800	00 00 00 00 00 00 00 00		.binary "FONT/CBM-ASCII_8x8.bin", 0, 2048
>3ff808	7c 82 aa 82 ba 92 82 7c 7c fe d6 fe c6 ee fe 7c
>3ff818	ff fd fb f5 eb d5 ab ff ff e1 fd 85 85 87 87 ff
>3ff828	ff bd db e7 e7 db bd ff ff 81 81 bd bd bd 81 ff
>3ff838	ff ff ff ff ff 81 81 ff 00 08 10 20 10 08 00 00
>3ff848	00 24 14 0c 14 24 00 00 00 8e 88 8c 88 e8 00 00
>3ff858	00 00 00 00 00 00 00 00 00 ee 88 cc 88 88 00 00
>3ff868	00 00 04 14 3c 10 00 00 00 30 4c 4c 30 00 00 00
>3ff878	00 38 28 38 28 00 00 00 ff 81 bd bd bd bd 81 ff
>3ff888	ff 55 aa 55 aa 55 aa ff ab d5 ab d5 ab d5 ab d5
>3ff898	ff 81 81 81 81 81 81 ff ff f9 e1 81 81 e1 f9 ff
>3ff8a8	ff 9f 87 81 81 87 9f ff ff e7 e7 c3 c3 81 81 ff
>3ff8b8	ff 81 81 c3 c3 e7 e7 ff 00 26 54 04 04 04 06 00
>3ff8c8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;	...repeated 3 times (48 bytes)...
>3ff908	10 10 10 10 00 10 00 00 24 24 24 00 00 00 00 00
>3ff918	24 7e 24 24 7e 24 00 00 10 3c 50 38 14 78 10 00
>3ff928	62 64 08 10 20 4c 8c 00 30 48 48 30 58 4c 4c 38
>3ff938	10 10 10 00 00 00 00 00 08 10 20 20 20 20 10 08
>3ff948	10 08 04 04 04 04 08 10 00 24 18 7e 18 24 00 00
>3ff958	00 10 10 7c 10 10 00 00 00 00 00 00 10 10 20 00
>3ff968	00 00 00 3c 00 00 00 00 00 00 00 00 18 18 00 00
>3ff978	04 04 08 08 10 10 20 20 3c 46 4a 52 62 42 3c 00
>3ff988	10 30 10 10 10 10 38 00 38 44 04 18 20 40 7c 00
>3ff998	38 44 04 18 04 44 38 00 08 18 28 48 7c 08 08 00
>3ff9a8	7c 40 78 04 04 44 38 00 38 44 40 78 44 44 38 00
>3ff9b8	7c 44 04 08 08 10 10 00 38 44 44 38 44 44 38 00
>3ff9c8	38 44 44 3c 04 44 38 00 00 00 18 00 00 18 00 00
>3ff9d8	00 00 18 00 00 18 18 30 00 08 10 20 10 08 00 00
>3ff9e8	00 00 3c 00 3c 00 00 00 00 10 08 04 08 10 00 00
>3ff9f8	38 44 04 08 10 00 10 00 38 44 4c 4c 40 44 38 00
>3ffa08	10 28 44 7c 44 44 00 00 78 44 78 44 44 78 00 00
>3ffa18	38 44 40 40 44 38 00 00 78 44 44 44 44 78 00 00
>3ffa28	7c 40 78 40 40 7c 00 00 7c 40 78 40 40 40 00 00
>3ffa38	38 44 40 4c 44 38 00 00 44 44 7c 44 44 44 00 00
>3ffa48	38 10 10 10 10 38 00 00 1c 08 08 08 48 30 00 00
>3ffa58	24 28 30 30 28 24 00 00 20 20 20 20 20 3c 00 00
>3ffa68	44 6c 7c 54 44 44 00 00 44 64 54 4c 44 44 00 00
>3ffa78	38 44 44 44 44 38 00 00 78 44 44 78 40 40 00 00
>3ffa88	38 44 44 44 44 38 0c 00 78 44 44 78 48 44 00 00
>3ffa98	3c 40 38 04 04 78 00 00 7c 10 10 10 10 10 00 00
>3ffaa8	44 44 44 44 44 38 00 00 44 44 44 44 28 10 00 00
>3ffab8	82 82 82 92 92 6c 00 00 42 24 18 18 24 42 00 00
>3ffac8	44 44 28 10 10 10 00 00 7c 08 10 20 40 7c 00 00
>3ffad8	38 20 20 20 20 20 38 00 20 20 10 10 08 08 04 04
>3ffae8	38 08 08 08 08 08 38 00 00 10 28 44 00 00 00 00
>3ffaf8	00 00 00 00 00 00 00 7e 40 20 10 00 00 00 00 00
>3ffb08	00 38 04 3c 64 3c 00 00 40 40 78 44 44 78 00 00
>3ffb18	00 00 38 40 40 38 00 00 04 04 3c 44 44 3c 00 00
>3ffb28	00 38 44 7c 40 3c 00 00 0c 10 3c 10 10 10 00 00
>3ffb38	00 00 3c 44 44 3c 04 78 40 40 78 44 44 44 00 00
>3ffb48	10 00 30 10 10 38 00 00 08 00 08 08 08 08 08 30
>3ffb58	20 20 24 38 28 24 00 00 30 10 10 10 10 10 00 00
>3ffb68	00 00 68 54 54 44 00 00 00 00 38 24 24 24 00 00
>3ffb78	00 00 38 44 44 38 00 00 00 00 78 44 44 78 40 40
>3ffb88	00 00 3c 44 44 3c 04 04 00 00 78 44 40 40 00 00
>3ffb98	00 00 1c 30 0c 38 00 00 00 10 7c 10 10 10 0c 00
>3ffba8	00 00 44 44 44 3c 00 00 00 00 42 42 24 18 00 00
>3ffbb8	00 00 82 82 92 6c 00 00 00 00 24 18 18 24 00 00
>3ffbc8	00 00 24 24 24 1c 04 38 00 00 7c 18 30 7c 00 00
>3ffbd8	0c 10 10 30 30 10 10 0c 18 18 18 00 18 18 18 00
>3ffbe8	30 08 08 0c 0c 08 08 30 00 00 32 7e 4c 00 00 00
>3ffbf8	00 00 10 28 38 00 00 00 00 00 3c 3c 3c 3c 00 00
>3ffc08	00 00 3c 24 24 3c 00 00 00 00 18 3c 3c 18 00 00
>3ffc18	00 00 18 24 24 18 00 00 18 24 24 18 00 00 00 00
>3ffc28	00 3c 42 42 66 24 66 00 00 18 00 18 0c 06 66 3c
>3ffc38	0c 12 30 7c 30 62 fc 00 1c 20 70 20 70 20 1c 00
>3ffc48	02 06 0c d8 f0 e0 c0 00 18 18 ff 00 00 ff 00 00
>3ffc58	00 00 ff 00 00 ff 18 18 24 24 24 e7 e7 24 24 24
>3ffc68	18 18 ff 00 00 ff 18 18 24 24 24 27 27 24 24 24
>3ffc78	24 24 24 e4 e4 24 24 24 00 00 00 ff ff ff ff ff
>3ffc88	00 00 ff ff ff ff ff ff 00 ff ff ff ff ff ff ff
>3ffc98	ff ff ff ff ff ff ff 00 ff ff ff ff ff ff 00 00
>3ffca8	ff ff ff ff ff 00 00 00 ff ff ff ff 00 00 00 00
>3ffcb8	f8 f8 f8 f8 f8 f8 f8 f8 fc fc fc fc fc fc fc fc
>3ffcc8	fe fe fe fe fe fe fe fe 7f 7f 7f 7f 7f 7f 7f 7f
>3ffcd8	3f 3f 3f 3f 3f 3f 3f 3f 1f 1f 1f 1f 1f 1f 1f 1f
>3ffce8	0f 0f 0f 0f 0f 0f 0f 0f 00 00 00 00 00 00 00 00
>3ffcf8	00 00 00 00 00 00 00 00 ff ff ff ff ff ff ff ff
>3ffd08	f0 f0 f0 f0 f0 f0 f0 f0 00 00 00 00 ff ff ff ff
>3ffd18	ff 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ff
>3ffd28	80 80 80 80 80 80 80 80 aa 55 aa 55 aa 55 aa 55
>3ffd38	01 01 01 01 01 01 01 01 00 00 00 00 aa 55 aa 55
>3ffd48	ff fe fc f8 f0 e0 c0 80 03 03 03 03 03 03 03 03
>3ffd58	18 18 18 1f 1f 18 18 18 00 00 00 00 0f 0f 0f 0f
>3ffd68	18 18 18 1f 1f 00 00 00 00 00 00 f8 f8 18 18 18
>3ffd78	00 00 00 00 00 00 ff ff 00 00 00 1f 1f 18 18 18
>3ffd88	18 18 18 ff ff 00 00 00 00 00 00 ff ff 18 18 18
>3ffd98	18 18 18 f8 f8 18 18 18 c0 c0 c0 c0 c0 c0 c0 c0
>3ffda8	e0 e0 e0 e0 e0 e0 e0 e0 07 07 07 07 07 07 07 07
>3ffdb8	ff ff 00 00 00 00 00 00 ff ff ff 00 00 00 00 00
>3ffdc8	00 00 00 00 00 ff ff ff 03 03 03 03 03 03 ff ff
>3ffdd8	00 00 00 00 f0 f0 f0 f0 0f 0f 0f 0f 00 00 00 00
>3ffde8	18 18 18 f8 f8 00 00 00 f0 f0 f0 f0 00 00 00 00
>3ffdf8	f0 f0 f0 f0 0f 0f 0f 0f 00 00 00 ff ff 00 00 00
>3ffe08	08 1c 3e 7f 7f 1c 3e 00 18 18 18 18 18 18 18 18
>3ffe18	00 00 00 ff ff 00 00 00 00 00 ff ff 00 00 00 00
>3ffe28	00 ff ff 00 00 00 00 00 00 00 00 00 ff ff 00 00
>3ffe38	30 30 30 30 30 30 30 30 0c 0c 0c 0c 0c 0c 0c 0c
>3ffe48	00 00 00 e0 f0 38 18 18 18 18 1c 0f 07 00 00 00
>3ffe58	18 18 38 f0 e0 00 00 00 c0 c0 c0 c0 c0 c0 ff ff
>3ffe68	c0 e0 70 38 1c 0e 07 03 03 07 0e 1c 38 70 e0 c0
>3ffe78	ff ff c0 c0 c0 c0 c0 c0 ff ff 03 03 03 03 03 03
>3ffe88	00 3c 7e 7e 7e 7e 3c 00 00 00 00 00 00 ff ff 00
>3ffe98	36 7f 7f 7f 3e 1c 08 00 60 60 60 60 60 60 60 60
>3ffea8	00 00 00 07 0f 1c 18 18 c3 e7 7e 3c 3c 7e e7 c3
>3ffeb8	00 3c 7e 66 66 7e 3c 00 18 18 66 66 18 18 3c 00
>3ffec8	06 06 06 06 06 06 06 06 08 1c 3e 7f 3e 1c 08 00
>3ffed8	18 18 18 ff ff 18 18 18 c0 c0 30 30 c0 c0 30 30
>3ffee8	18 18 18 18 18 18 18 18 00 00 03 3e 76 36 36 00
>3ffef8	ff 7f 3f 1f 0f 07 03 01 24 24 24 24 24 24 24 24
>3fff08	00 00 ff 00 00 ff 00 00 00 00 3f 20 20 27 24 24
>3fff18	00 00 ff 00 00 e7 24 24 00 00 fc 04 04 e4 24 24
>3fff28	24 24 27 20 20 3f 00 00 24 24 e7 00 00 ff 00 00
>3fff38	24 24 e4 04 04 fc 00 00 24 24 27 20 20 27 24 24
>3fff48	24 24 e4 04 04 e4 24 24 24 24 e7 00 00 e7 24 24
>3fff58	0f 0f 0f 0f f0 f0 f0 f0 01 03 07 0f 1f 3f 7f ff
>3fff68	80 c0 e0 f0 f8 fc fe ff 33 99 cc 66 33 99 cc 66
>3fff78	cc 99 33 66 cc 99 33 66 f0 f0 f0 f0 ff ff ff ff
>3fff88	0f 0f 0f 0f ff ff ff ff ff ff ff ff f0 f0 f0 f0
>3fff98	ff ff ff ff 0f 0f 0f 0f 05 0a 05 0a 00 00 00 00
>3fffa8	00 00 00 00 0a 05 0a 05 a0 50 a0 50 00 00 00 00
>3fffb8	00 00 00 00 a0 50 a0 50 0a 05 0a 05 0a 05 0a 05
>3fffc8	aa 55 aa 55 00 00 00 00 00 18 3c 7e 18 18 18 18
>3fffd8	00 10 30 7f 7f 30 10 00 00 08 0c fe fe 0c 08 00
>3fffe8	18 18 18 18 7e 3c 18 00 00 00 36 49 36 00 00 00
>3ffff8	00 00 00 00 00 00 00 00
>3a0000	5c de 57 3a 5c b7 3f 3a		.binary "binaries/basic816.bin"
>3a0008	5c e1 1e 3a 5c 96 01 3a 5c ae 00 3a 5c 2c 01 3a
>3a0018	5c 60 03 3a 5c 3a 01 3a 5c 55 01 3a 5c 5c 01 3a
>3a0028	da 08 c2 10 a2 00 00 e2 20 20 59 00 90 11 f0 0f
>3a0038	c9 0d f0 0b c9 0a f0 07 9f 00 4f 00 e8 80 ea a9
>3a0048	00 9f 00 4f 00 28 fa 60 c2 10 ae b0 08 ec ae 08
>3a0058	60 5a 08 08 c2 20 48 a9 00 08 5b 68 28 e2 20 c2
>3a0068	10 a4 b0 c4 ae 10 0d b7 ab c2 20 29 ff 00 e6 b0
>3a0078	28 7a 38 60 28 7a 18 60 8b e2 20 85 b3 08 c2 20
>3a0088	48 a9 00 08 5b 68 28 c2 20 a5 a4 d0 06 e2 20 a5
>3a0098	a6 f0 11 c2 10 a4 a9 c4 a7 f0 09 e2 20 a5 b3 97
>3a00a8	a4 c8 84 a9 ab 60 08 c2 10 e2 20 a9 01 20 1c 00
>3a00b8	a2 00 00 a9 00 9f 00 4c 00 e8 e0 00 01 d0 f6 a2
>3a00c8	00 00 20 14 00 c9 0d d0 03 4c 25 01 c9 9d d0 08
>3a00d8	e0 00 00 f0 ed ca 80 39 c9 1d d0 0e bf 00 4c 00
>3a00e8	f0 e0 e0 4f 00 f0 db e8 80 27 c9 08 d0 1a e0 00
>3a00f8	00 f0 cf da bf 01 4c 00 9f 00 4c 00 f0 06 e8 e0
>3a0108	ff 00 d0 f0 fa ca 80 0e c9 20 90 b6 9f 00 4c 00
>3a0118	e8 20 18 00 80 ac a9 08 20 18 00 80 a5 a9 00 20
>3a0128	1c 00 28 60 22 4c 10 00 60 20 14 00 48 20 18 00
>3a0138	68 60 08 e2 20 c9 00 f0 08 af 10 00 af 09 01 80
>3a0148	06 af 10 00 af 29 fe 8f 10 00 af 28 60 08 22 84
>3a0158	10 00 28 60 48 da 5a 0b 08 e2 20 c2 10 a2 00 00
>3a0168	a9 20 9f 00 a0 af af 1e 00 00 9f 00 c0 af e8 e0
>3a0178	00 20 d0 ec 08 c2 20 48 a9 00 00 5b 68 28 a2 00
>3a0188	00 a0 00 00 22 84 10 00 28 2b 7a fa 68 60 da 5a
>3a0198	0b 08 08 c2 20 48 a9 00 08 5b 68 28 c2 30 af 0c
>3a01a8	00 00 85 08 e2 20 af 0e 00 00 c2 20 29 ff 00 85
>3a01b8	0a a9 80 00 8f 08 01 00 af 1c 00 00 3a 8f 0a 01
>3a01c8	00 18 a5 08 6f 0c 01 00 85 08 a5 0a 69 00 00 85
>3a01d8	0a e2 20 a0 00 00 a2 00 00 b7 08 9f 00 4f 00 e8
>3a01e8	c8 c0 80 00 d0 f3 ca bf 00 4f 00 c9 20 d0 09 a9
>3a01f8	00 9f 00 4f 00 ca 10 ef 28 2b 7a fa 60 08 c2 10
>3a0208	e2 20 a2 00 00 bf 00 00 36 9f 00 71 3a e8 e0 18
>3a0218	00 d0 f2 28 60 08 0b 08 c2 20 48 a9 00 08 5b 68
>3a0228	28 c2 30 a2 14 00 bf 00 71 3a 85 08 e8 e8 bf 00
>3a0238	71 3a 85 0a a5 08 d0 08 a5 0a d0 04 2b 28 18 60
>3a0248	e2 20 a2 00 00 a0 00 00 b7 08 9f 00 71 3a e8 c8
>3a0258	e0 18 00 d0 f3 2b 28 38 60 08 8b 08 e2 20 48 a9
>3a0268	3a 48 ab 68 28 20 05 02 e2 20 a0 00 00 a2 00 00
>3a0278	bf 00 71 3a f0 2d d9 00 70 d0 2f e8 c8 e0 08 00
>3a0288	d0 ee c8 a2 08 00 bf 00 71 3a f0 10 d9 00 70 d0
>3a0298	19 e8 c8 e0 03 00 d0 ee ab 28 38 60 b9 00 70 f0
>3a02a8	f7 80 07 b9 00 70 c9 2e f0 d8 20 1d 02 b0 b9 ab
>3a02b8	28 18 60 0b 8b 08 08 c2 20 48 a9 00 08 5b 68 28
>3a02c8	c2 30 20 61 02 90 2c a2 10 00 bf 00 71 3a 85 08
>3a02d8	bf 02 71 3a 85 0a e2 20 a7 08 87 57 f0 10 c2 20
>3a02e8	e6 08 d0 02 e6 0a e6 57 d0 ee e6 59 80 ea 28 ab
>3a02f8	2b 38 60 28 ab 2b 18 60 e2 20 a9 48 8f 0f 00 00
>3a0308	a9 34 8f 13 00 00 a9 20 8f 08 00 af 8f 09 00 af
>3a0318	a2 00 00 a9 00 9f 28 71 3a e8 e0 12 00 d0 f6 a9
>3a0328	80 8f b2 08 00 e2 20 a9 00 8f 89 0f 00 60 08 e2
>3a0338	20 48 22 18 10 00 af 89 0f 00 29 01 d0 f8 68 28
>3a0348	60 08 c2 20 48 e2 20 a9 0d 20 18 00 c2 20 68 28
>3a0358	60 08 22 78 10 00 28 60 08 e2 20 c2 10 da 5a 8f
>3a0368	b3 08 00 af b2 08 00 29 20 f0 07 af b3 08 00 20
>3a0378	80 00 af b2 08 00 29 80 f0 07 af b3 08 00 20 36
>3a0388	03 7a fa 28 60 08 e2 20 bd 00 00 f0 06 20 18 00
>3a0398	e8 80 f5 28 60 08 c2 20 48 48 4a 4a 4a 4a 4a 4a
>3a03a8	4a 4a 20 b7 03 68 29 ff 00 20 b7 03 68 28 60 08
>3a03b8	c2 20 48 e2 20 48 4a 4a 4a 4a 20 ce 03 68 20 ce
>3a03c8	03 c2 20 68 28 60 08 c2 30 da 29 0f 00 aa bf 00
>3a03d8	60 3a 20 18 00 fa 28 60 08 e2 20 c9 5b b0 04 c9
>3a03e8	41 b0 0b c9 7b b0 04 c9 61 b0 03 28 18 60 28 38
>3a03f8	60 08 e2 20 c9 3a b0 04 c9 30 b0 03 28 18 60 28
>3a0408	38 60 08 e2 20 c9 3a b0 04 c9 30 b0 13 c9 67 b0
>3a0418	04 c9 61 b0 0b c9 47 b0 04 c9 41 b0 03 28 18 60
>3a0428	28 38 60 08 e2 20 c9 3a b0 04 c9 30 b0 12 c9 67
>3a0438	b0 04 c9 61 b0 0f c9 47 b0 04 c9 41 b0 09 28 60
>3a0448	38 e9 30 80 f9 29 df 38 e9 37 80 f2 08 e2 20 c9
>3a0458	7b b0 06 c9 61 90 02 29 df 28 60 08 e2 20 c2 10
>3a0468	bd 00 00 f0 09 20 54 04 9d 00 00 e8 80 f2 28 60
>3a0478	08 0b 08 c2 20 48 a9 00 08 5b 68 28 c2 20 48 06
>3a0488	21 26 23 a5 21 85 0c a5 23 85 0e 06 0c 26 0e 06
>3a0498	0c 26 0e 18 a5 21 65 0c 85 21 a5 23 65 0e 85 23
>3a04a8	68 2b 28 60 08 0b 08 c2 20 48 a9 00 08 5b 68 28
>3a04b8	c2 20 a5 21 8f 12 01 00 a9 0a 00 8f 10 01 00 af
>3a04c8	14 01 00 85 21 64 23 af 16 01 00 85 27 64 29 e2
>3a04d8	20 a9 00 85 25 85 2b 2b 28 60 08 c2 20 a5 21 d0
>3a04e8	08 a5 23 d0 04 28 e2 02 60 28 c2 02 60 08 e2 20
>3a04f8	a5 25 c9 00 d0 02 28 60 08 c2 20 48 a9 00 08 5b
>3a0508	68 28 e2 20 a9 04 8f d0 08 00 dc d1 08 08 e2 20
>3a0518	a5 25 c9 02 d0 02 28 60 08 c2 20 48 a9 00 08 5b
>3a0528	68 28 e2 20 a9 04 8f d0 08 00 dc d1 08 08 e2 20
>3a0538	a5 25 c9 00 d0 08 c2 20 a5 23 d0 17 28 60 08 c2
>3a0548	20 48 a9 00 08 5b 68 28 e2 20 a9 04 8f d0 08 00
>3a0558	dc d1 08 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9
>3a0568	09 8f d0 08 00 dc d1 08 08 e2 20 a5 25 c9 00 d0
>3a0578	0e a5 24 d0 1f a5 23 d0 1b a5 22 d0 17 28 60 08
>3a0588	c2 20 48 a9 00 08 5b 68 28 e2 20 a9 04 8f d0 08
>3a0598	00 dc d1 08 08 c2 20 48 a9 00 08 5b 68 28 e2 20
>3a05a8	a9 09 8f d0 08 00 dc d1 08 08 0b 08 c2 20 48 a9
>3a05b8	00 08 5b 68 28 c2 30 64 21 64 23 e2 20 64 25 a7
>3a05c8	00 c9 26 f0 3a e2 20 a7 00 20 f9 03 90 6c 20 78
>3a05d8	04 38 e9 30 c2 20 29 ff 00 18 65 21 85 21 a5 23
>3a05e8	69 00 00 85 23 20 82 19 80 db 08 c2 20 48 a9 00
>3a05f8	08 5b 68 28 e2 20 a9 02 8f d0 08 00 dc d1 08 20
>3a0608	82 19 a7 00 c9 48 f0 04 c9 68 d0 de 20 82 19 e2
>3a0618	20 a7 00 20 0a 04 90 22 20 2b 04 c2 20 06 21 26
>3a0628	23 06 21 26 23 06 21 26 23 06 21 26 23 29 ff 00
>3a0638	18 65 21 85 21 20 82 19 80 d5 2b 28 60 08 c2 30
>3a0648	38 a5 04 e5 18 a8 e2 20 b7 18 f0 10 c9 20 f0 06
>3a0658	c9 09 f0 02 28 60 88 c0 ff ff d0 ec a9 00 60 08
>3a0668	0b 08 c2 20 48 a9 00 08 5b 68 28 c2 30 a5 18 85
>3a0678	00 e2 20 a5 1a 85 02 20 a3 19 a7 00 20 f9 03 90
>3a0688	0c 20 b1 05 c2 20 a5 21 85 d4 20 a3 19 c2 20 a5
>3a0698	00 85 18 e2 20 a5 02 85 1a 20 b5 06 e2 20 20 26
>3a06a8	07 c9 00 f0 05 20 a5 08 80 f4 2b 28 60 08 c2 20
>3a06b8	a5 18 85 00 a5 1a 85 02 a2 00 00 e2 20 a0 00 00
>3a06c8	e0 00 00 f0 0d b7 00 f0 53 c9 3a f0 04 c9 20 d0
>3a06d8	33 c8 b7 00 f0 46 c9 52 f0 10 c9 72 d0 26 b7 00
>3a06e8	f0 3a c9 52 f0 04 c9 72 d0 1a c8 b7 00 f0 2d c9
>3a06f8	45 f0 04 c9 65 d0 0d c8 b7 00 f0 20 c9 4d f0 0a
>3a0708	c9 6d f0 06 e8 20 82 19 80 b3 a7 00 c9 3a d0 03
>3a0718	20 82 19 a9 03 85 1c a9 8e 20 a5 08 28 60 08 0b
>3a0728	08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 7f 85 1c
>3a0738	c2 10 20 5a 08 a5 1c d0 03 4c c9 07 c2 20 a5 18
>3a0748	85 00 e2 20 a5 1a 85 02 c2 20 64 04 64 06 e2 30
>3a0758	a0 00 b7 00 f0 da c9 8e f0 d6 c8 c4 1c 90 f3 c2
>3a0768	10 a7 00 c9 22 d0 05 20 e1 07 80 28 a5 1c c9 01
>3a0778	f0 19 c2 20 a5 00 c5 18 d0 08 e2 20 a5 02 c5 1a
>3a0788	f0 09 e2 20 a7 04 20 13 3a b0 09 e2 20 20 f1 07
>3a0798	c9 00 d0 11 c2 20 a5 00 85 04 e2 20 a5 02 85 06
>3a07a8	20 82 19 80 a9 c9 81 d0 18 20 45 06 c9 00 f0 14
>3a07b8	89 80 10 0b 20 46 09 c9 30 f0 04 a9 af 80 02 a9
>3a07c8	81 2b 28 60 08 c2 20 48 a9 00 08 5b 68 28 e2 20
>3a07d8	a9 02 8f d0 08 00 dc d1 08 08 e2 20 20 82 19 a7
>3a07e8	00 f0 04 c9 22 d0 f5 28 60 08 0b c2 30 da 5a 08
>3a07f8	c2 20 48 a9 00 08 5b 68 28 a9 70 09 85 08 e2 20
>3a0808	a9 3a 85 0a a2 80 00 e2 20 a0 01 00 b7 08 f0 26
>3a0818	c5 1c d0 29 c2 30 a0 02 00 b7 08 85 0c e2 20 a9
>3a0828	3a 85 0e e2 10 a0 00 b7 00 20 54 04 d7 0c d0 0d
>3a0838	c8 c4 1c 90 f2 8a c2 10 7a fa 2b 28 60 c2 30 18
>3a0848	a5 08 69 08 00 85 08 e2 20 a5 0a 69 00 85 0a e8
>3a0858	80 b5 08 0b 8b 08 c2 20 48 a9 00 08 5b 68 28 c2
>3a0868	30 a9 70 09 85 08 a9 3a 00 85 0a 64 0c e2 20 a0
>3a0878	01 00 b7 08 f0 1d c5 1c b0 06 c5 0c 90 02 85 0c
>3a0888	c2 20 18 a5 08 69 08 00 85 08 a5 0a 69 00 00 85
>3a0898	0a 80 da e2 20 a5 0c 85 1c ab 2b 28 60 08 0b 08
>3a08a8	c2 20 48 a9 00 08 5b 68 28 e2 20 87 00 c2 20 18
>3a08b8	a5 00 69 01 00 85 08 a5 02 69 00 00 85 0a e2 10
>3a08c8	a4 1c 88 e2 20 b7 08 87 08 f0 13 c2 20 18 a5 08
>3a08d8	69 01 00 85 08 a5 0a 69 00 00 85 0a 80 e5 2b 28
>3a08e8	60 08 c2 30 29 7f 00 0a 0a 0a 18 69 70 09 aa 28
>3a08f8	60 08 8b 0b 08 c2 20 48 a9 00 08 5b 68 28 08 e2
>3a0908	20 48 a9 3a 48 ab 68 28 e2 20 c2 10 20 e9 08 bd
>3a0918	00 00 c2 20 29 0f 00 2b ab 28 60 08 8b 0b 08 c2
>3a0928	20 48 a9 00 08 5b 68 28 08 e2 20 48 a9 3a 48 ab
>3a0938	68 28 c2 30 20 e9 08 bd 04 00 2b ab 28 60 08 8b
>3a0948	0b 08 c2 20 48 a9 00 08 5b 68 28 08 e2 20 48 a9
>3a0958	3a 48 ab 68 28 e2 20 c2 10 20 e9 08 bd 00 00 c2
>3a0968	20 29 f0 00 2b ab 28 60 03 01 10 60 6a 1f 00 00
>3a0978	03 01 12 60 9f 1f 00 00 02 01 14 60 ad 1f 00 00
>3a0988	02 01 16 60 c6 1f 00 00 02 03 18 60 d9 1f 00 00
>3a0998	00 01 1c 60 00 00 00 00 04 01 1e 60 1b 20 00 00
>3a09a8	04 01 20 60 51 20 00 00 04 01 22 60 36 20 00 00
>3a09b8	05 03 24 60 0a 20 00 00 06 03 28 60 ec 1f 00 00
>3a09c8	07 02 2c 60 fb 1f 00 00 ff 01 2f 60 00 00 00 00
>3a09d8	40 01 31 60 00 00 00 00 20 03 33 60 b4 2c 00 00
>3a09e8	20 05 37 60 4b 30 00 00 20 03 3d 60 aa 2f 00 00
>3a09f8	20 04 41 60 5e 2f 00 00 20 03 46 60 55 2f 00 00
>3a0a08	20 02 4a 60 01 2f 00 00 50 04 4d 60 00 00 00 00
>3a0a18	50 04 52 60 00 00 00 00 20 05 57 60 62 2e 00 00
>3a0a28	20 06 5d 60 c7 2e 00 00 20 03 64 60 cb 2c 00 00
>3a0a38	50 02 68 60 00 00 00 00 50 04 6b 60 00 00 00 00
>3a0a48	20 04 70 60 ab 2d 00 00 20 02 75 60 c5 2c 00 00
>3a0a58	20 04 78 60 c8 2c 00 00 50 05 7d 60 00 00 00 00
>3a0a68	50 05 83 60 00 00 00 00 20 04 89 60 c2 2c 00 00
>3a0a78	20 03 8e 60 a0 2f 00 00 20 04 92 60 9f 2c 00 00
>3a0a88	20 04 97 60 43 2c 00 00 20 05 9c 60 ed 2b 00 00
>3a0a98	20 05 a2 60 8e 2b 00 00 20 03 a8 60 8a 2b 00 00
>3a0aa8	20 04 ac 60 7f 2a 00 00 20 04 b1 60 7d 2b 00 00
>3a0ab8	20 07 b6 60 81 2b 00 00 20 03 be 60 e6 29 00 00
>3a0ac8	20 04 c2 60 5f 29 00 00 04 02 c7 60 a4 20 00 00
>3a0ad8	04 02 ca 60 87 20 00 00 04 02 cd 60 6c 20 00 00
>3a0ae8	30 01 d0 60 d2 31 00 00 30 03 d2 60 7e 35 00 00
>3a0af8	30 04 d6 60 c4 35 00 00 30 05 db 60 41 36 00 00
>3a0b08	30 05 e1 60 fd 35 00 00 30 04 e7 60 76 36 00 00
>3a0b18	30 03 ec 60 c1 36 00 00 30 03 f0 60 fc 36 00 00
>3a0b28	30 03 f4 60 71 37 00 00 30 03 f8 60 e6 37 00 00
>3a0b38	30 03 fc 60 16 38 00 00 30 04 00 61 f7 34 00 00
>3a0b48	30 03 05 61 96 34 00 00 30 04 09 61 4f 34 00 00
>3a0b58	30 03 0e 61 03 34 00 00 30 05 12 61 58 33 00 00
>3a0b68	30 06 18 61 95 32 00 00 30 04 1f 61 f4 31 00 00
>3a0b78	10 03 24 61 9a 38 00 00 10 03 28 61 65 38 00 00
>3a0b88	10 04 2c 61 27 39 00 00 10 04 31 61 b1 38 00 00
>3a0b98	10 03 36 61 99 39 00 00 10 07 3a 61 62 38 00 00
>3a0ba8	20 03 42 61 f5 28 00 00 20 05 46 61 3b 28 00 00
>3a0bb8	20 09 4c 61 04 22 00 00 20 09 56 61 9f 21 00 00
>3a0bc8	20 0a 60 61 cd 21 00 00 20 07 6b 61 31 21 00 00
>3a0bd8	30 08 73 61 06 31 00 00 20 07 7c 61 c3 20 00 00
>3a0be8	30 08 84 61 6c 31 00 00 20 08 8d 61 1b 23 00 00
>3a0bf8	20 08 96 61 81 22 00 00 20 06 9f 61 5c 23 00 00
>3a0c08	20 09 a6 61 1a 24 00 00 20 04 b0 61 ad 25 00 00
>3a0c18	20 04 b5 61 f3 25 00 00 20 04 ba 61 59 26 00 00
>3a0c28	20 06 bf 61 f5 26 00 00 20 08 c6 61 78 27 00 00
>3a0c38	20 0a cf 61 ac 27 00 00 00 00 00 00 00 00 00 00
>3a0c48	08 0b 08 c2 20 48 a9 00 08 5b 68 28 c2 30 a9 ff
>3a0c58	ff 85 b7 e2 20 a9 35 85 b9 c2 20 64 b4 64 ba e2
>3a0c68	20 64 b6 64 bc 2b 28 60 5a 08 e2 20 85 e7 c2 10
>3a0c78	86 8d c2 20 a5 0e 48 a5 0c 48 a5 12 48 a5 10 48
>3a0c88	20 20 0d b0 03 20 a4 0c 20 ac 0e c2 20 68 85 10
>3a0c98	68 85 12 68 85 0c 68 85 0e 28 7a 60 08 0b 08 c2
>3a0ca8	20 48 a9 00 08 5b 68 28 e2 20 a6 8d ca 86 0c e8
>3a0cb8	c2 30 38 a5 b7 e5 0c 85 bd e2 20 a5 b9 e9 00 85
>3a0cc8	bf 20 ac 0e e2 20 a5 e7 a0 00 00 97 c0 a9 00 a0
>3a0cd8	01 00 97 c0 a0 02 00 97 c0 c2 20 a9 00 00 97 c0
>3a0ce8	c2 20 18 a5 b7 69 01 00 a0 05 00 97 c0 e2 20 c8
>3a0cf8	c8 a5 b9 69 00 97 c0 c2 20 a5 bd 85 b4 e2 20 a5
>3a0d08	bf 85 b6 c2 20 38 a5 c0 e9 01 00 85 b7 e2 20 a5
>3a0d18	c2 e9 00 85 b9 2b 28 60 08 0b 08 c2 20 48 a9 00
>3a0d28	08 5b 68 28 c2 30 c2 20 a5 ba 85 c6 e2 20 a5 bc
>3a0d38	85 c8 a5 c6 d0 17 e2 20 a5 c8 d0 11 c2 20 a9 00
>3a0d48	00 85 cc e2 20 a9 00 85 ce 2b 28 18 60 c2 20 a0
>3a0d58	05 00 b7 c6 85 c9 e2 20 c8 c8 b7 c6 85 cb c2 20
>3a0d68	18 a5 c6 65 8d 85 0c e2 20 a5 c8 69 00 85 0e c2
>3a0d78	20 18 a5 0c 69 08 00 85 0c e2 20 a5 0e 69 00 85
>3a0d88	0e c2 20 a5 0c c5 c9 d0 28 e2 20 a5 0e c5 cb d0
>3a0d98	20 c2 20 a5 cc d0 5d e2 20 a5 ce d0 57 c2 20 a0
>3a0da8	02 00 b7 c6 85 ba e2 20 c8 c8 b7 c6 85 bc 4c 5d
>3a0db8	0e c2 20 a5 0c 69 08 00 85 10 e2 20 a5 0e 69 00
>3a0dc8	85 12 e2 20 a5 c3 c5 10 b0 3e 90 08 c2 20 a5 c3
>3a0dd8	c5 10 b0 34 c2 20 a5 c6 85 cc e2 20 a5 c8 85 ce
>3a0de8	c2 20 a0 02 00 b7 cc 85 c6 e2 20 c8 c8 b7 cc 85
>3a0df8	c8 4c 3a 0d c2 20 a0 02 00 b7 c6 97 cc e2 20 c8
>3a0e08	c8 b7 c6 97 cc 4c 5d 0e c2 20 a0 05 00 b7 c6 97
>3a0e18	0c e2 20 c8 c8 b7 c6 97 0c c2 20 a0 02 00 b7 c6
>3a0e28	97 0c e2 20 c8 c8 b7 c6 97 0c c2 20 a5 cc d0 14
>3a0e38	e2 20 a5 cc d0 0e c2 20 a5 0c 85 ba e2 20 a5 0e
>3a0e48	85 bc 80 11 c2 20 a0 02 00 a5 0c 97 cc e2 20 c8
>3a0e58	c8 a5 0e 97 cc c2 20 a5 c6 85 c0 e2 20 a5 c8 85
>3a0e68	c2 c2 20 a5 c0 85 b4 e2 20 a5 c2 85 b6 c2 20 a0
>3a0e78	05 00 a5 0c 97 c0 e2 20 c8 c8 a5 0e 97 c0 c2 20
>3a0e88	a0 02 00 a9 00 00 97 c0 e2 20 c8 c8 97 c0 e2 20
>3a0e98	a5 e7 e2 20 a0 00 00 97 c0 a0 01 00 a9 00 97 c0
>3a0ea8	2b 28 38 60 08 c2 20 38 a5 bd e9 08 00 85 c0 e2
>3a0eb8	20 a5 bf e9 00 85 c2 28 60 08 e2 20 a5 c2 f0 04
>3a0ec8	c9 36 b0 12 c2 20 a5 c0 f0 0c e2 20 a0 01 00 b7
>3a0ed8	c0 1a 97 c0 28 60 00 ea 08 e2 20 a5 c2 f0 04 c9
>3a0ee8	17 b0 17 c2 20 a5 c0 f0 11 e2 20 a0 01 00 b7 c0
>3a0ef8	3a 97 c0 d0 03 20 04 0f 28 60 00 ea 08 c2 20 a5
>3a0f08	ba d0 21 e2 20 a5 bc d0 1b a5 c2 85 bc c2 20 a5
>3a0f18	c0 85 ba a9 00 00 a0 02 00 97 c0 c8 c8 e2 20 97
>3a0f28	c0 4c eb 0f e2 20 a5 bc c5 c2 90 28 c2 20 a5 ba
>3a0f38	c5 c0 90 20 c2 20 a5 ba a0 02 00 97 c0 e2 20 c8
>3a0f48	c8 a5 bc 97 c0 c2 20 a5 c0 85 ba e2 20 a5 c2 85
>3a0f58	bc 4c eb 0f c2 20 a5 ba 85 08 e2 20 a5 bc 85 0a
>3a0f68	e2 20 a0 04 00 b7 08 c5 c5 90 32 d0 0b c2 20 a0
>3a0f78	02 00 b7 08 c5 c3 90 25 c2 20 a0 02 00 b7 08 97
>3a0f88	c0 e2 20 c8 c8 b7 08 97 c0 c2 20 a5 c0 a0 02 00
>3a0f98	97 08 e2 20 a5 c2 c8 c8 97 08 4c eb 0f c2 20 a0
>3a0fa8	02 00 b7 08 d0 08 e2 20 c8 c8 b7 08 f0 19 c2 20
>3a0fb8	a0 02 00 b7 08 85 0c e2 20 c8 c8 b7 08 85 0a c2
>3a0fc8	20 a5 0c 85 08 80 99 c2 20 a5 c0 a0 02 00 97 08
>3a0fd8	e2 20 c8 c8 a5 c2 97 08 a9 00 97 c0 c2 20 a0 02
>3a0fe8	00 97 c0 20 f0 0f 28 60 08 c2 20 a5 ba 85 c0 e2
>3a0ff8	20 a5 bc 85 c2 c2 20 a5 c0 d0 09 e2 20 a5 c2 d0
>3a1008	03 4c 93 10 c2 20 a0 02 00 b7 c0 85 0c e2 20 c8
>3a1018	c8 b7 c0 85 0e c2 20 a0 05 00 b7 c0 85 10 e2 20
>3a1028	c8 c8 b7 c0 85 12 c2 20 a5 0c c5 10 d0 08 e2 20
>3a1038	a5 0e c5 12 f0 1f c2 20 a0 02 00 b7 c0 85 0c e2
>3a1048	20 c8 c8 b7 c0 85 0e c2 20 a5 0c 85 c0 e2 20 a5
>3a1058	0e 85 c2 80 a0 c2 20 a0 02 00 b7 c0 85 0c e2 20
>3a1068	c8 c8 b7 c0 85 0e c2 20 a0 02 00 b7 0c 97 c0 e2
>3a1078	20 c8 c8 b7 0c 97 c0 c2 20 a0 05 00 b7 0c 97 c0
>3a1088	e2 20 c8 c8 b7 0c 97 c0 4c 0c 10 28 60 08 c2 10
>3a1098	e2 20 64 14 a5 df 1a 1a 85 15 e2 20 a5 e0 85 16
>3a10a8	c5 b9 90 1f f0 08 c2 20 a5 14 c5 b7 90 15 08 c2
>3a10b8	20 48 a9 00 08 5b 68 28 e2 20 a9 03 8f d0 08 00
>3a10c8	dc d1 08 28 60 c9 00 d0 05 c0 01 00 f0 05 09 30
>3a10d8	97 14 c8 60 08 c2 30 64 0c a5 23 10 1a 18 a5 21
>3a10e8	49 ff ff 69 01 00 85 21 a5 23 49 ff ff 69 00 00
>3a10f8	85 23 a9 ff ff 85 0c 64 10 64 12 a2 1f 00 f8 06
>3a1108	21 26 23 a5 10 65 10 85 10 a5 12 65 12 85 12 ca
>3a1118	10 ed d8 e2 20 20 95 10 a0 00 00 a5 0c f0 04 a9
>3a1128	2d 80 02 a9 20 97 14 c8 a2 03 00 b5 10 29 f0 4a
>3a1138	4a 4a 4a 20 cd 10 b5 10 29 0f 20 cd 10 ca 10 eb
>3a1148	c0 01 00 d0 04 a9 30 87 14 a9 00 97 14 28 60 00
>3a1158	ea 08 e2 20 c2 10 a0 00 00 bd 00 00 f0 04 e8 c8
>3a1168	80 f7 28 60 08 0b 8b 08 c2 20 48 a9 00 08 5b 68
>3a1178	28 e2 20 c2 10 08 c2 20 48 e2 20 a5 23 48 ab c2
>3a1188	20 68 28 a6 21 20 59 11 84 0c 08 c2 20 48 e2 20
>3a1198	a5 29 48 ab c2 20 68 28 a6 27 20 59 11 c2 20 98
>3a11a8	38 65 0c aa e2 20 a9 02 20 70 0c c2 20 a5 b4 85
>3a11b8	08 e2 20 a5 b6 85 0a a0 00 00 08 c2 20 48 e2 20
>3a11c8	a5 23 48 ab c2 20 68 28 a6 21 bd 00 00 f0 06 97
>3a11d8	08 e8 c8 80 f5 e2 20 08 c2 20 48 e2 20 a5 29 48
>3a11e8	ab c2 20 68 28 a6 27 bd 00 00 97 08 f0 04 e8 c8
>3a11f8	80 f5 c2 20 a5 08 85 21 e2 20 a5 0a 85 23 a9 02
>3a1208	85 25 ab 2b 28 60 08 0b 8b 08 c2 20 48 a9 00 08
>3a1218	5b 68 28 c2 30 08 c2 20 48 e2 20 a5 23 48 ab c2
>3a1228	20 68 28 a6 21 20 59 11 98 aa e8 e2 20 a9 02 20
>3a1238	70 0c c2 20 a5 bd 85 08 e2 20 a5 bf 85 0a a0 00
>3a1248	00 b7 21 97 08 f0 03 c8 80 f7 a5 08 85 21 a5 09
>3a1258	85 22 a5 0a 85 23 a9 00 85 24 ab 2b 28 60 08 e2
>3a1268	20 c2 10 a0 00 00 b7 21 f0 05 c8 80 f9 84 90 c2
>3a1278	30 c4 27 90 13 f0 11 a5 8d 30 0d f0 0b c4 8d b0
>3a1288	12 a5 27 d0 0e 4c e7 12 20 95 10 e2 20 a9 00 87
>3a1298	14 80 39 20 95 10 c2 30 18 a5 21 65 27 85 21 a5
>3a12a8	23 69 00 00 85 23 a0 00 00 e2 20 a7 21 97 14 f0
>3a12b8	1b c2 20 18 a5 21 69 01 00 85 21 a5 23 69 00 00
>3a12c8	85 23 c8 c4 8d d0 e2 a9 00 00 97 14 c2 20 a5 14
>3a12d8	85 21 a5 16 85 23 e2 20 a9 02 85 25 20 0e 12 28
>3a12e8	60 48 5a 0b 08 08 c2 20 48 a9 00 08 5b 68 28 c2
>3a12f8	30 a9 00 00 85 00 85 18 a9 01 00 85 02 85 1a ad
>3a1308	8a 0f 30 20 a0 02 00 b7 18 f0 0f c5 53 90 10 c5
>3a1318	57 f0 02 b0 05 20 41 13 80 e5 28 2b 7a 68 60 20
>3a1328	4b 1a 80 db 08 c2 20 48 a9 00 08 5b 68 28 e2 20
>3a1338	a9 01 8f d0 08 00 dc d1 08 08 c2 30 85 21 64 23
>3a1348	20 dc 10 a5 14 1a 85 21 a5 16 85 23 20 b6 30 18
>3a1358	a5 18 69 04 00 85 00 a5 1a 69 00 00 85 02 e2 20
>3a1368	a9 20 20 18 00 c2 20 20 80 13 90 fb e2 20 a9 0d
>3a1378	20 18 00 20 4b 1a 28 60 08 0b 8b 08 c2 20 48 a9
>3a1388	00 08 5b 68 28 08 e2 20 48 a9 00 48 ab 68 28 e2
>3a1398	20 c2 10 a7 00 f0 3a 30 05 20 18 00 80 29 c2 20
>3a13a8	29 7f 00 0a 0a 0a 18 69 70 09 85 08 a9 3a 00 69
>3a13b8	00 00 85 0a 08 e2 20 48 a9 3a 48 ab 68 28 a0 02
>3a13c8	00 b7 08 aa 20 8d 03 c2 20 20 82 19 ab 2b 28 18
>3a13d8	60 ab 2b 28 38 60 08 c2 20 a9 ff 6f 85 1d a9 ff
>3a13e8	7f 85 1f a9 ff ff 85 21 85 23 85 27 85 29 e2 20
>3a13f8	85 25 85 2b 28 60 08 0b 8b 08 c2 20 48 a9 00 08
>3a1408	5b 68 28 08 e2 20 48 a9 00 48 ab 68 28 c2 30 5a
>3a1418	a4 1d bd 00 00 99 00 00 bd 02 00 99 02 00 e2 20
>3a1428	bd 04 00 99 04 00 c2 20 38 98 e9 05 00 85 1d 7a
>3a1438	ab 2b 28 60 08 0b 8b 08 c2 20 48 a9 00 08 5b 68
>3a1448	28 08 e2 20 48 a9 00 48 ab 68 28 c2 30 5a 18 a5
>3a1458	1d 69 05 00 85 1d a8 b9 00 00 9d 00 00 b9 02 00
>3a1468	9d 02 00 e2 20 b9 04 00 9d 04 00 bd 00 00 7a ab
>3a1478	2b 28 60 08 0b 8b 08 c2 20 48 a9 00 08 5b 68 28
>3a1488	08 e2 20 48 a9 00 48 ab 68 28 e2 20 c2 10 5a a4
>3a1498	1f 99 00 00 88 84 1f 7a ab 2b 28 60 08 0b 8b 08
>3a14a8	c2 20 48 a9 00 08 5b 68 28 08 e2 20 48 a9 00 48
>3a14b8	ab 68 28 e2 20 c2 10 5a a4 1f c8 84 1f b9 00 00
>3a14c8	c2 20 29 ff 00 7a ab 2b 28 60 08 e2 20 a9 01 20
>3a14d8	7b 14 28 60 5a 08 8b 08 e2 20 48 a9 00 48 ab 68
>3a14e8	28 e2 20 a4 1f b9 01 00 c9 01 d0 08 c2 20 e6 1f
>3a14f8	ab 28 7a 60 08 c2 20 48 a9 00 08 5b 68 28 e2 20
>3a1508	a9 02 8f d0 08 00 dc d1 08 08 0b 8b c2 20 48 08
>3a1518	c2 20 48 a9 00 08 5b 68 28 08 e2 20 48 a9 00 48
>3a1528	ab 68 28 e2 20 c2 10 a4 1f c0 ff 7f f0 11 20 f9
>3a1538	08 85 0c b9 01 00 20 f9 08 c5 0c f0 02 90 08 c2
>3a1548	20 68 ab 2b 28 18 60 c2 20 68 ab 2b 28 38 60 4c
>3a1558	b1 05 08 e2 20 a9 00 8f 00 4d 00 a2 01 00 20 dc
>3a1568	16 20 35 05 c2 20 a5 21 9f 00 4d 00 e2 20 af 00
>3a1578	4d 00 1a 30 34 8f 00 4d 00 e8 e8 20 a3 19 e2 20
>3a1588	a7 00 c9 8d f0 09 c9 2c d0 0a 20 82 19 80 cf 20
>3a1598	82 19 28 60 08 c2 20 48 a9 00 08 5b 68 28 e2 20
>3a15a8	a9 02 8f d0 08 00 dc d1 08 08 c2 20 48 a9 00 08
>3a15b8	5b 68 28 e2 20 a9 0a 8f d0 08 00 dc d1 08 08 20
>3a15c8	73 3c 90 23 e2 20 a5 e7 29 80 d0 06 20 e7 3a 4c
>3a15d8	ed 15 e2 20 a9 8c 20 7b 1a 20 d2 14 20 5a 15 20
>3a15e8	32 3f 20 dc 14 28 60 08 c2 20 48 a9 00 08 5b 68
>3a15f8	28 e2 20 a9 02 8f d0 08 00 dc d1 08 08 0b 08 c2
>3a1608	20 48 a9 00 08 5b 68 28 e2 20 c2 10 20 82 19 a0
>3a1618	00 00 b7 00 f0 24 c9 22 f0 03 c8 80 f5 84 0c e2
>3a1628	20 a9 02 a6 0c e8 20 70 0c a0 00 00 c4 0c f0 1f
>3a1638	a7 00 97 bd c8 20 82 19 80 f2 08 c2 20 48 a9 00
>3a1648	08 5b 68 28 e2 20 a9 02 8f d0 08 00 dc d1 08 a9
>3a1658	00 97 bd c2 20 a5 bd 85 21 e2 20 a5 bf 85 23 a9
>3a1668	02 85 25 20 82 19 2b 28 60 08 e2 20 a7 00 c2 20
>3a1678	29 ff 00 20 23 09 85 2d 20 d2 14 08 e2 20 48 a9
>3a1688	00 48 ab 68 28 20 95 16 20 dc 14 28 60 20 82 19
>3a1698	6c 2d 08 08 0b 8b c2 20 48 08 c2 20 48 a9 00 08
>3a16a8	5b 68 28 c2 30 a2 27 08 20 3c 14 a2 21 08 20 3c
>3a16b8	14 20 a4 14 20 23 09 85 2d 08 e2 20 48 a9 00 48
>3a16c8	ab 68 28 20 d9 16 a2 21 08 20 fe 13 68 ab 2b 28
>3a16d8	60 6c 2d 08 08 08 c2 20 48 a9 00 08 5b 68 28 08
>3a16e8	e2 20 48 a9 00 48 ab 68 28 c2 10 da e2 20 a7 00
>3a16f8	d0 03 4c 9f 17 30 33 c9 20 d0 03 4c 99 17 c9 3a
>3a1708	b0 04 c9 30 b0 56 c9 26 f0 52 c9 22 d0 03 4c b2
>3a1718	17 c9 5b b0 07 c9 41 90 03 4c be 17 c9 7b b0 07
>3a1728	c9 61 90 03 4c be 17 4c 9f 17 c9 8c f0 40 c9 8d
>3a1738	f0 41 20 46 09 c9 30 d0 0c 20 71 16 a2 21 08 20
>3a1748	fe 13 4c f4 16 c9 00 d0 4e a7 00 a6 1f e0 ff 7f
>3a1758	f0 05 20 11 15 b0 12 20 7b 14 80 35 c2 20 20 57
>3a1768	15 a2 21 08 20 fe 13 80 83 20 9b 16 80 dd 20 7b
>3a1778	14 80 1e e2 20 a4 1f c0 ff 7f f0 46 a4 1f b9 01
>3a1788	00 c9 01 f0 3d c9 8c f0 05 20 9b 16 80 ee 20 a4
>3a1798	14 20 82 19 4c f4 16 a6 1f e0 ff 7f b0 24 bd 01
>3a17a8	00 c9 01 f0 1d 20 9b 16 80 ed 20 04 16 a2 21 08
>3a17b8	20 fe 13 4c f4 16 20 c6 15 a2 21 08 20 fe 13 4c
>3a17c8	f4 16 a2 21 08 20 3c 14 fa 28 60 08 0b 8b 08 e2
>3a17d8	20 48 a9 00 48 ab 68 28 08 c2 20 48 a9 00 08 5b
>3a17e8	68 28 c2 30 a9 fd 5f 85 31 ab 2b 28 60 08 0b 08
>3a17f8	c2 20 48 a9 00 08 5b 68 28 c2 30 92 31 c6 31 c6
>3a1808	31 2b 28 60 08 c2 30 29 ff 00 20 f5 17 28 60 08
>3a1818	0b 08 c2 20 48 a9 00 08 5b 68 28 c2 30 e6 31 e6
>3a1828	31 b2 31 2b 28 60 e2 20 c2 10 20 49 03 af d0 08
>3a1838	00 0a c2 20 29 ff 00 a8 08 e2 20 48 a9 3a 48 ab
>3a1848	68 28 be 80 18 20 8d 03 c2 20 a5 d4 f0 27 a2 98
>3a1858	18 20 8d 03 08 e2 20 48 a9 00 48 ab 68 28 c2 20
>3a1868	af d4 08 00 8f 21 08 00 a9 00 00 8f 23 08 00 20
>3a1878	d6 30 20 49 03 4c 29 1f 9c 18 9f 18 a5 18 b2 18
>3a1888	c0 18 ce 18 e1 18 f7 18 07 19 16 19 23 19 34 19
>3a1898	20 61 74 00 4f 4b 00 42 72 65 61 6b 00 53 79 6e
>3a18a8	74 61 78 20 65 72 72 6f 72 00 4f 75 74 20 6f 66
>3a18b8	20 6d 65 6d 6f 72 79 00 54 79 70 65 20 6d 69 73
>3a18c8	6d 61 74 63 68 00 56 61 72 69 61 62 6c 65 20 6e
>3a18d8	6f 74 20 66 6f 75 6e 64 00 4c 69 6e 65 20 6e 75
>3a18e8	6d 62 65 72 20 6e 6f 74 20 66 6f 75 6e 64 00 53
>3a18f8	74 61 63 6b 20 75 6e 64 65 72 66 6c 6f 77 00 53
>3a1908	74 61 63 6b 20 6f 76 65 72 66 6c 6f 77 00 4f 75
>3a1918	74 20 6f 66 20 72 61 6e 67 65 00 49 6c 6c 65 67
>3a1928	61 6c 20 61 72 67 75 6d 65 6e 74 00 46 69 6c 65
>3a1938	20 6e 6f 74 20 66 6f 75 6e 64 00 08 0b 08 c2 20
>3a1948	48 a9 00 08 5b 68 28 e2 20 a9 00 85 cf 2b 28 60
>3a1958	0b 08 08 c2 20 48 a9 00 08 5b 68 28 08 c2 20 a9
>3a1968	2e 18 8f d1 08 00 e2 20 a9 3a 8f d3 08 00 28 20
>3a1978	a0 2f 20 81 2b 64 2f 28 2b 60 08 0b 08 c2 20 48
>3a1988	a9 00 08 5b 68 28 c2 20 18 a5 00 69 01 00 85 00
>3a1998	e2 20 a5 02 69 00 85 02 2b 28 60 08 0b 08 c2 20
>3a19a8	48 a9 00 08 5b 68 28 e2 20 a7 00 f0 0f c9 20 f0
>3a19b8	06 c9 09 f0 02 80 05 20 82 19 80 ed 2b 28 60 08
>3a19c8	e2 20 a7 00 f0 09 c9 3a f0 05 20 82 19 80 f3 28
>3a19d8	60 08 e2 20 64 34 a7 00 f0 19 c5 35 f0 2c c9 98
>3a19e8	f0 1e c9 9c f0 1a c9 9b f0 1a c9 9d f0 16 20 82
>3a19f8	19 80 e3 20 4b 1a c2 20 a5 d4 f0 1d e2 20 80 d6
>3a1a08	e6 34 80 ea c6 34 30 26 80 e4 a5 33 30 06 a5 34
>3a1a18	f0 02 80 da 20 82 19 28 60 08 c2 20 48 a9 00 08
>3a1a28	5b 68 28 e2 20 a9 02 8f d0 08 00 dc d1 08 08 c2
>3a1a38	20 48 a9 00 08 5b 68 28 e2 20 a9 02 8f d0 08 00
>3a1a48	dc d1 08 08 c2 30 a0 00 00 b7 18 85 0c 18 a5 18
>3a1a58	65 0c 85 18 a5 1a 69 00 00 85 1a a0 02 00 b7 18
>3a1a68	85 d4 18 a5 18 69 04 00 85 00 a5 1a 69 00 00 85
>3a1a78	02 28 60 08 e2 20 48 20 a3 19 68 e2 20 c7 00 d0
>3a1a88	08 20 82 19 20 a3 19 28 60 08 c2 20 48 a9 00 08
>3a1a98	5b 68 28 e2 20 a9 02 8f d0 08 00 dc d1 08 08 e2
>3a1aa8	20 20 a3 19 e2 20 a7 00 f0 10 c9 3a f0 0c c5 35
>3a1ab8	f0 05 20 82 19 80 ef 28 38 60 28 18 60 5a 08 e2
>3a1ac8	20 a0 00 00 b7 00 f0 0d c9 3a f0 07 c9 20 d0 05
>3a1ad8	c8 80 f1 a9 00 28 7a 60 08 0b 8b 08 c2 20 48 a9
>3a1ae8	00 08 5b 68 28 20 de 13 e2 20 a9 00 85 d9 ad 8a
>3a1af8	0f 30 41 a7 00 c9 3a d0 03 20 82 19 20 a3 19 a7
>3a1b08	00 d0 03 4c 7c 1b 20 e0 03 b0 3e a7 00 10 10 20
>3a1b18	46 09 85 0c c9 20 d0 03 4c 6a 1b a5 cf f0 3d 08
>3a1b28	c2 20 48 a9 00 08 5b 68 28 e2 20 a9 02 8f d0 08
>3a1b38	00 dc d1 08 08 c2 20 48 a9 00 08 5b 68 28 e2 20
>3a1b48	a9 01 8f d0 08 00 dc d1 08 20 aa 2f 4c 7c 1b 08
>3a1b58	e2 20 48 a9 00 48 ab 68 28 6c 2d 08 a5 0c c9 10
>3a1b68	d0 bd a7 00 20 23 09 c2 20 85 2d 20 de 13 20 82
>3a1b78	19 20 57 1b ab 2b 28 60 08 58 20 43 19 20 d3 17
>3a1b88	e2 20 9c 8a 0f c2 20 a5 18 85 00 a5 1a 85 02 4c
>3a1b98	be 1b 08 c2 20 a0 02 00 b7 18 85 d4 e2 20 a5 d9
>3a1ba8	c9 03 f0 12 c2 20 18 a5 18 69 04 00 85 00 e2 20
>3a1bb8	a5 1a 69 00 85 02 c2 20 20 e0 1a e2 20 a5 d9 c9
>3a1bc8	03 f0 f3 c9 00 d0 27 e2 20 20 a3 19 a7 00 f0 1e
>3a1bd8	c9 3a f0 15 08 c2 20 48 a9 00 08 5b 68 28 e2 20
>3a1be8	a9 02 8f d0 08 00 dc d1 08 20 82 19 80 c8 28 60
>3a1bf8	08 58 e2 20 a9 80 85 cf 9c 8a 0f 20 d3 17 c2 30
>3a1c08	64 2f a0 02 00 b7 18 f0 29 20 9a 1b e2 20 a5 d9
>3a1c18	c9 01 f0 1e c9 02 f0 ea c9 03 f0 e6 c2 20 a0 00
>3a1c28	00 18 a5 18 77 18 85 18 e2 20 a5 1a 69 00 85 1a
>3a1c38	80 d0 e2 20 a9 00 85 cf 28 60 08 c2 30 c2 20 a9
>3a1c48	00 00 85 08 a9 01 00 85 0a c2 20 a0 02 00 b7 08
>3a1c58	f0 31 c5 21 f0 1e b0 2b c2 20 a0 00 00 18 a5 08
>3a1c68	77 08 85 0c e2 20 a5 0a 69 00 85 0a c2 20 a5 0c
>3a1c78	85 08 80 d7 c2 20 a5 08 85 18 e2 20 a5 0a 85 1a
>3a1c88	28 38 60 28 18 60 08 e2 20 a7 0c 87 08 c2 20 a5
>3a1c98	0c c5 00 d0 08 e2 20 a5 0e c5 02 f0 26 c2 20 18
>3a1ca8	a5 0c 69 01 00 85 0c e2 20 a5 0e 69 00 85 0e c2
>3a1cb8	20 18 a5 08 69 01 00 85 08 e2 20 a5 0a 69 00 85
>3a1cc8	0a 80 c4 28 60 08 e2 20 a7 0c 87 08 c2 20 a5 0c
>3a1cd8	c5 00 d0 06 a5 0e c5 02 f0 26 c2 20 38 a5 0c e9
>3a1ce8	01 00 85 0c e2 20 a5 0e e9 00 85 0e c2 20 38 a5
>3a1cf8	08 e9 01 00 85 08 e2 20 a5 0a e9 00 85 0a 80 c6
>3a1d08	28 60 08 a0 00 00 c2 20 18 a5 08 77 08 85 0c e2
>3a1d18	20 a5 0a 69 00 85 0e c2 20 18 a5 d6 69 04 00 85
>3a1d28	00 e2 20 a5 d8 69 00 85 02 a0 00 00 c2 20 38 a5
>3a1d38	d6 f7 08 85 d6 e2 20 a5 d8 e9 00 85 d8 20 8e 1c
>3a1d48	20 a0 2f 28 60 08 08 c2 20 48 a9 00 08 5b 68 28
>3a1d58	c2 30 a0 02 00 97 d6 18 a5 d6 69 04 00 85 08 e2
>3a1d68	20 a5 d8 69 00 85 0a e2 20 a0 00 00 b7 18 97 08
>3a1d78	f0 03 c8 80 f7 c2 20 98 18 69 05 00 85 0c c2 20
>3a1d88	a0 00 00 a5 0c 97 d6 c2 20 18 a5 d6 65 0c 85 0c
>3a1d98	e2 20 a5 d8 69 00 85 d8 c2 20 a5 0c 85 d6 c2 20
>3a1da8	a0 00 00 a9 00 00 97 d6 c8 c0 05 00 d0 f8 20 a0
>3a1db8	2f 28 60 0b 08 08 c2 20 48 a9 00 08 5b 68 28 c2
>3a1dc8	30 a9 00 00 85 08 a9 01 00 85 0a a0 02 00 b7 08
>3a1dd8	f0 1d c5 d4 f0 25 b0 1d a0 00 00 18 a5 08 77 08
>3a1de8	85 0c a5 0a 69 00 00 85 0a a5 0c 85 08 80 dc a9
>3a1df8	00 00 28 2b 60 a9 01 00 28 2b 60 a9 02 00 28 2b
>3a1e08	60 08 c2 30 a9 05 00 85 10 a0 00 00 e2 20 b7 18
>3a1e18	f0 07 c2 20 e6 10 c8 80 f3 c2 20 a5 08 85 00 a5
>3a1e28	0a 85 02 18 a5 d6 69 04 00 85 0c a5 d8 69 00 00
>3a1e38	85 0e 18 a5 d6 65 10 85 d6 a5 d8 69 00 00 85 d8
>3a1e48	18 a5 d6 69 04 00 85 08 a5 d8 69 00 00 85 0a 20
>3a1e58	cd 1c c2 20 a5 10 a0 00 00 97 00 a5 d4 a0 02 00
>3a1e68	97 00 18 a5 00 69 04 00 85 00 a5 02 69 00 00 85
>3a1e78	02 a0 00 00 e2 20 b7 18 97 00 f0 03 c8 80 f7 20
>3a1e88	a0 2f 28 60 08 c2 30 85 d4 20 bb 1d c9 00 00 f0
>3a1e98	2c c9 01 00 f0 22 c2 20 a5 08 48 a5 0a 48 20 0a
>3a1ea8	1d 68 85 0a 68 85 08 a5 18 85 00 a5 1a 85 02 20
>3a1eb8	a3 19 e2 20 a7 00 f0 0a 20 09 1e 80 05 a5 d4 20
>3a1ec8	4d 1d 28 60 8b 08 08 e2 20 48 a9 3a 48 ab 68 28
>3a1ed8	a2 da 61 20 8d 03 28 ab 60 08 e2 30 a9 01 20 1c
>3a1ee8	00 20 31 01 f0 06 c9 0d f0 02 80 f5 28 60 0b 08
>3a1ef8	08 c2 20 48 a9 00 08 5b 68 28 c2 30 64 d4 a9 00
>3a1f08	4f 85 18 a9 00 00 85 1a 20 67 06 c2 20 a5 d4 d0
>3a1f18	05 20 80 1b 80 07 20 8c 1e 28 2b 38 60 28 2b 18
>3a1f28	60 c2 30 a2 ff fe 9a 20 cc 1e 20 08 00 20 0c 00
>3a1f38	a9 00 00 20 1c 00 20 f6 1e b0 ef 80 ea e2 20 a5
>3a1f48	25 c5 2b d0 06 c2 20 29 ff 00 60 c2 20 08 c2 20
>3a1f58	48 a9 00 08 5b 68 28 e2 20 a9 04 8f d0 08 00 dc
>3a1f68	d1 08 20 45 1f c2 20 c9 00 00 f0 1d c9 02 00 d0
>3a1f78	03 4c 6c 11 08 c2 20 48 a9 00 08 5b 68 28 e2 20
>3a1f88	a9 04 8f d0 08 00 dc d1 08 18 a5 21 65 27 85 21
>3a1f98	a5 23 65 29 85 23 60 38 a5 21 e5 27 85 21 a5 23
>3a1fa8	e5 29 85 23 60 a5 21 8f 08 01 00 a5 27 8f 0a 01
>3a1fb8	00 af 0c 01 00 85 21 af 0e 01 00 85 23 60 a5 21
>3a1fc8	8f 12 01 00 a5 27 8f 10 01 00 af 14 01 00 85 21
>3a1fd8	60 a5 21 8f 12 01 00 a5 27 8f 10 01 00 af 16 01
>3a1fe8	00 85 21 60 c2 20 a5 21 25 27 85 21 a5 23 25 29
>3a1ff8	85 23 60 c2 20 a5 21 05 27 85 21 a5 23 05 29 85
>3a2008	23 60 c2 20 a5 21 49 ff ff 85 21 a5 23 49 ff ff
>3a2018	85 23 60 c2 20 a5 23 c5 29 90 0b a5 21 c5 27 90
>3a2028	05 64 21 64 23 60 a9 ff ff 85 21 85 23 60 c2 20
>3a2038	a5 29 c5 23 90 0b a5 27 c5 21 90 05 64 21 64 23
>3a2048	60 a9 ff ff 85 21 85 23 60 c2 20 a5 29 c5 23 d0
>3a2058	0e a5 27 c5 21 d0 08 a9 ff ff 85 21 85 23 60 64
>3a2068	21 64 23 60 c2 20 a5 29 c5 23 d0 0e a5 27 c5 21
>3a2078	d0 08 a9 ff ff 85 21 85 23 60 64 21 64 23 60 c2
>3a2088	20 a5 23 c5 29 90 10 d0 06 a5 21 c5 27 90 08 a9
>3a2098	ff ff 85 21 85 23 60 64 21 64 23 60 c2 20 a5 23
>3a20a8	c5 29 90 0f f0 05 64 21 64 23 60 a5 21 c5 27 f0
>3a20b8	02 b0 f3 a9 ff ff 85 21 85 23 60 08 e2 20 20 dc
>3a20c8	16 20 70 05 20 ac 04 a5 21 0a 0a 0a 0a 05 27 85
>3a20d8	0c a9 2c 20 7b 1a 20 dc 16 20 70 05 20 ac 04 a5
>3a20e8	21 0a 0a 0a 0a 05 27 85 0d a9 2c 20 7b 1a 20 dc
>3a20f8	16 20 70 05 20 ac 04 a5 21 0a 0a 0a 0a 05 27 85
>3a2108	0e af 0e 08 af 09 08 8f 0e 08 af a5 0c 8f 04 08
>3a2118	af a5 0d 8f 02 08 af a5 0e 8f 00 08 af af 0e 08
>3a2128	af 29 f7 8f 0e 08 af 28 60 08 e2 20 20 dc 16 20
>3a2138	70 05 20 ac 04 a5 21 0a 0a 0a 0a 05 27 85 0c a9
>3a2148	2c 20 7b 1a 20 dc 16 20 70 05 20 ac 04 a5 21 0a
>3a2158	0a 0a 0a 05 27 85 0d a9 2c 20 7b 1a 20 dc 16 20
>3a2168	70 05 20 ac 04 a5 21 0a 0a 0a 0a 05 27 85 0e af
>3a2178	0e 08 af 09 08 8f 0e 08 af a5 0c 8f 06 08 af a5
>3a2188	0d 8f 09 08 af a5 0e 8f 0a 08 af af 0e 08 af 29
>3a2198	f7 8f 0e 08 af 28 60 08 20 dc 16 20 70 05 e2 20
>3a21a8	a5 21 29 0f 0a 0a 0a 0a 8f 53 08 00 a9 2c 20 7b
>3a21b8	1a 20 dc 16 20 70 05 a5 21 29 0f 0f 53 08 00 8f
>3a21c8	1e 00 00 28 60 08 e2 20 20 dc 16 20 70 05 a5 21
>3a21d8	48 a9 2c 20 7b 1a 20 dc 16 20 70 05 a5 21 48 a9
>3a21e8	2c 20 7b 1a 20 dc 16 20 70 05 a5 21 8f 08 00 af
>3a21f8	68 8f 09 00 af 68 8f 0a 00 af 28 60 08 e2 20 20
>3a2208	dc 16 20 f5 04 a5 21 f0 1e a9 01 8f 04 00 af a9
>3a2218	20 8f 08 00 af 8f 09 00 af a9 48 8f 0f 00 00 a9
>3a2228	34 8f 13 00 00 80 12 a9 00 8f 04 00 af a9 50 8f
>3a2238	0f 00 00 a9 3c 8f 13 00 00 a9 2c 85 35 20 a6 1a
>3a2248	90 35 20 82 19 20 dc 16 20 70 05 a5 21 48 a9 2c
>3a2258	20 7b 1a 20 dc 16 20 70 05 a5 21 48 a9 2c 20 7b
>3a2268	1a 20 dc 16 20 70 05 a5 21 8f 05 00 af 68 8f 06
>3a2278	00 af 68 8f 07 00 af 28 60 08 c2 20 20 dc 16 20
>3a2288	70 05 a9 af 00 85 9e a5 21 c9 0a 00 b0 5c 0a aa
>3a2298	bf 07 23 3a 85 9c a9 2c 00 20 7b 1a 20 dc 16 20
>3a22a8	70 05 a5 21 0a 0a 18 65 9c 85 9c a9 2c 00 20 7b
>3a22b8	1a 20 dc 16 20 70 05 a0 02 00 a5 21 e2 20 97 9c
>3a22c8	a9 2c 20 7b 1a 20 dc 16 20 70 05 a0 01 00 a5 21
>3a22d8	e2 20 97 9c a9 2c 20 7b 1a 20 dc 16 20 70 05 a0
>3a22e8	00 00 a5 21 e2 20 97 9c 28 60 08 c2 20 48 a9 00
>3a22f8	08 5b 68 28 e2 20 a9 0a 8f d0 08 00 dc d1 08 00
>3a2308	20 00 24 00 28 00 2c 00 30 00 34 00 38 00 3c 40
>3a2318	1f 80 1f 08 20 dc 16 20 70 05 a5 21 8f 00 00 af
>3a2328	c2 20 a9 80 02 8f 20 71 3a a9 e0 01 8f 22 71 3a
>3a2338	af 20 71 3a 8f 08 01 00 af 22 71 3a 8f 0a 01 00
>3a2348	af 0c 01 00 8f 24 71 3a e2 20 af 0e 01 00 8f 26
>3a2358	71 3a 28 60 08 c2 20 20 dc 16 20 70 05 c2 20 a5
>3a2368	21 85 53 a9 2c 00 20 7b 1a 20 dc 16 20 70 05 e2
>3a2378	20 a5 53 d0 05 a5 21 0a 80 04 a5 21 38 2a 8f 40
>3a2388	01 af c2 20 a9 2c 00 85 35 20 a6 1a b0 18 c2 20
>3a2398	08 c2 20 a9 00 00 85 21 a9 b0 00 85 23 e2 20 a9
>3a23a8	00 85 25 28 80 08 c2 20 20 82 19 20 dc 16 e2 20
>3a23b8	38 a5 23 8f 1a 71 3a e9 b0 30 42 8f 43 01 af 8f
>3a23c8	1e 71 3a a5 21 8f 18 71 3a 8f 41 01 af 8f 1c 71
>3a23d8	3a a5 22 8f 42 01 af 8f 1d 71 3a 8f 19 71 3a a9
>3a23e8	00 8f 1f 71 3a 8f 1b 71 3a c2 20 af 20 71 3a 8f
>3a23f8	44 01 af af 22 71 3a 8f 46 01 af 28 60 08 c2 20
>3a2408	48 a9 00 08 5b 68 28 e2 20 a9 0a 8f d0 08 00 dc
>3a2418	d1 08 08 c2 20 af 1c 71 3a 8f 05 04 af af 24 71
>3a2428	3a 8f 08 04 af e2 20 af 1e 71 3a 8f 07 04 af af
>3a2438	26 71 3a 8f 0a 04 af a9 00 8f 01 04 af a9 85 8f
>3a2448	00 04 af af 01 04 af 30 fa a9 00 8f 00 04 af 28
>3a2458	60 08 c2 20 a5 5b 8f 08 01 00 af 20 71 3a 8f 0a
>3a2468	01 00 18 af 0c 01 00 65 57 85 0c af 0e 01 00 69
>3a2478	00 00 85 0e 18 a5 0c 6f 18 71 3a 85 9c a5 0e 6f
>3a2488	1a 71 3a 85 9e e2 20 a5 53 87 9c 28 60 c2 20 a9
>3a2498	01 00 85 da 38 a5 5f e5 57 85 67 10 0b 49 ff ff
>3a24a8	1a 85 67 a9 ff ff 85 da a9 01 00 85 dc 38 a5 63
>3a24b8	e5 5b 85 6b 10 0b 49 ff ff 1a 85 6b a9 ff ff 85
>3a24c8	dc a5 6b c5 67 b0 04 a5 67 80 06 a5 6b 49 ff ff
>3a24d8	1a 48 0a 68 6a 85 6f 20 59 24 a5 57 c5 5f d0 06
>3a24e8	a5 5b c5 63 f0 36 a5 6f 85 73 a5 67 49 ff ff 1a
>3a24f8	c5 73 10 10 f0 0e 38 a5 6f e5 6b 85 6f 18 a5 57
>3a2508	65 da 85 57 a5 73 c5 6b 10 cd f0 cb 18 a5 6f 65
>3a2518	67 85 6f 18 a5 5b 65 dc 85 5b 80 bb 60 08 a9 00
>3a2528	00 8f 00 04 af c2 20 a5 5b 8f 08 01 00 af 20 71
>3a2538	3a 8f 0a 01 00 18 af 0c 01 00 65 57 85 0c e2 20
>3a2548	af 0e 01 00 69 00 85 0e c2 20 18 af 1c 71 3a 65
>3a2558	0c 8f 05 04 af e2 20 af 1e 71 3a 65 0e 8f 07 04
>3a2568	af c2 20 38 a5 5f e5 57 85 0c 8f 08 04 af 38 af
>3a2578	20 71 3a 8f 0e 04 af 38 a5 63 e5 5b 8f 0a 04 af
>3a2588	a9 01 00 8f 0c 04 af e2 20 af 53 08 00 8f 01 04
>3a2598	af a9 87 8f 00 04 af af 01 04 af 30 fa a9 00 8f
>3a25a8	00 04 af 28 60 08 08 c2 20 48 a9 00 08 5b 68 28
>3a25b8	08 e2 20 48 a9 00 48 ab 68 28 c2 30 20 dc 16 20
>3a25c8	f5 04 a5 21 85 53 a9 2c 00 20 7b 1a 20 dc 16 20
>3a25d8	f5 04 a5 21 85 57 a9 2c 00 20 7b 1a 20 dc 16 20
>3a25e8	70 05 a5 21 85 5b 20 59 24 28 60 08 08 c2 20 48
>3a25f8	a9 00 08 5b 68 28 08 e2 20 48 a9 00 48 ab 68 28
>3a2608	c2 30 20 dc 16 20 f5 04 a5 21 85 57 a9 2c 00 20
>3a2618	7b 1a 20 dc 16 20 f5 04 a5 21 85 5b a9 2c 00 20
>3a2628	7b 1a 20 dc 16 20 f5 04 a5 21 85 5f a9 2c 00 20
>3a2638	7b 1a 20 dc 16 20 f5 04 a5 21 85 63 a9 2c 00 20
>3a2648	7b 1a 20 dc 16 20 70 05 a5 21 85 53 20 95 24 28
>3a2658	60 08 08 c2 20 48 a9 00 08 5b 68 28 08 e2 20 48
>3a2668	a9 00 48 ab 68 28 c2 30 20 dc 16 20 f5 04 a5 21
>3a2678	85 57 a9 2c 00 20 7b 1a 20 dc 16 20 f5 04 a5 21
>3a2688	85 5b a9 2c 00 20 7b 1a 20 dc 16 20 f5 04 a5 21
>3a2698	85 5f a9 2c 00 20 7b 1a 20 dc 16 20 f5 04 a5 21
>3a26a8	85 63 a9 2c 00 20 7b 1a 20 dc 16 20 70 05 a5 21
>3a26b8	85 53 20 25 25 28 60 08 e2 20 a5 21 c9 12 b0 18
>3a26c8	0a 0a 0a 18 69 00 85 9c a9 02 69 00 85 9d a9 af
>3a26d8	69 00 85 9e 64 9f 28 60 08 c2 20 48 a9 00 08 5b
>3a26e8	68 28 e2 20 a9 09 8f d0 08 00 dc d1 08 08 e2 20
>3a26f8	20 dc 16 20 70 05 20 bf 26 a5 21 8f 26 71 3a a9
>3a2708	2c 20 7b 1a 20 dc 16 20 70 05 a5 21 c9 08 b0 4b
>3a2718	48 a9 2c 20 7b 1a 20 dc 16 20 f5 04 c2 20 38 a5
>3a2728	21 e9 00 00 85 21 a5 23 e9 b0 00 85 23 30 2c c2
>3a2738	20 a5 21 a0 01 00 97 9c e2 20 a5 23 c8 c8 97 9c
>3a2748	af 26 71 3a aa bf 28 71 3a 29 f1 85 0c 68 0a 29
>3a2758	0e 05 0c 87 9c 9f 28 71 3a 28 60 08 c2 20 48 a9
>3a2768	00 08 5b 68 28 e2 20 a9 09 8f d0 08 00 dc d1 08
>3a2778	08 c2 20 20 dc 16 20 70 05 20 bf 26 a9 2c 00 20
>3a2788	7b 1a 20 dc 16 20 f5 04 a5 21 a0 04 00 97 9c a9
>3a2798	2c 00 20 7b 1a 20 dc 16 20 f5 04 a5 21 a0 06 00
>3a27a8	97 9c 28 60 08 c2 20 20 dc 16 20 70 05 20 bf 26
>3a27b8	a5 21 8f 26 71 3a a9 2c 00 20 7b 1a 20 dc 16 20
>3a27c8	f5 04 a5 21 48 a9 2c 00 85 35 20 a6 1a b0 1c af
>3a27d8	26 71 3a aa bf 28 71 3a 29 fe 00 85 0c 68 29 01
>3a27e8	00 05 0c 9f 28 71 3a 87 9c 80 31 e2 20 20 82 19
>3a27f8	20 dc 16 20 70 05 a5 21 c9 08 b0 22 0a 0a 0a 0a
>3a2808	85 0c 68 29 01 05 0c 85 0c af 26 71 3a aa bf 28
>3a2818	71 3a 29 8e 05 0c 87 9c 9f 28 71 3a 28 60 08 c2
>3a2828	20 48 a9 00 08 5b 68 28 e2 20 a9 09 8f d0 08 00
>3a2838	dc d1 08 08 20 a3 19 e2 20 a7 00 d0 03 4c cf 28
>3a2848	c9 3a d0 03 4c cf 28 c9 22 d0 0b 20 04 16 20 b6
>3a2858	30 a9 3b 20 7b 1a 20 e0 03 90 37 20 73 3c 90 32
>3a2868	a9 3f 20 18 00 a9 20 20 18 00 20 10 00 e2 20 a5
>3a2878	e7 c9 02 f0 32 c9 00 f0 51 c9 01 f0 4c 08 c2 20
>3a2888	48 a9 00 08 5b 68 28 e2 20 a9 04 8f d0 08 00 dc
>3a2898	d1 08 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 02
>3a28a8	8f d0 08 00 dc d1 08 c2 20 a9 00 4c 85 21 a9 00
>3a28b8	00 85 23 e2 20 a9 02 85 25 20 0e 12 c2 20 20 10
>3a28c8	3c a9 0d 00 20 18 00 28 60 ea c2 20 a5 00 85 3e
>3a28d8	a5 02 85 40 a9 00 4c 85 00 a9 00 00 85 02 20 b1
>3a28e8	05 c2 20 a5 3e 85 00 a5 40 85 02 80 cf 08 20 a3
>3a28f8	19 e2 20 a7 00 f0 49 c9 3a f0 45 20 e0 03 90 42
>3a2908	20 73 3c 90 3d 20 14 00 e2 20 8f 00 4e 00 a9 00
>3a2918	8f 01 4e 00 c2 20 a9 00 4e 85 21 a9 00 00 85 23
>3a2928	e2 20 a9 02 85 25 20 0e 12 20 10 3c 20 a3 19 a7
>3a2938	00 f0 0d c9 3a f0 09 c9 2c d0 07 20 82 19 80 ae
>3a2948	28 60 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 02
>3a2958	8f d0 08 00 dc d1 08 08 20 dc 16 20 f5 04 e2 20
>3a2968	a9 5c 85 a0 c2 20 a5 21 85 a1 e2 20 a5 23 85 a3
>3a2978	e2 20 a9 2c 85 35 20 a6 1a 90 41 20 82 19 20 dc
>3a2988	16 20 35 05 c2 20 a5 21 85 53 e2 20 a9 2c 85 35
>3a2998	20 a6 1a 90 27 20 82 19 20 dc 16 20 35 05 c2 20
>3a29a8	a5 21 85 57 e2 20 a9 2c 85 35 20 a6 1a 90 0d 20
>3a29b8	82 19 20 dc 16 20 35 05 c2 20 a4 21 a6 57 a5 53
>3a29c8	22 a0 08 00 20 c7 19 28 60 08 c2 20 48 a9 00 08
>3a29d8	5b 68 28 e2 20 a9 04 8f d0 08 00 dc d1 08 08 e2
>3a29e8	20 20 a3 19 20 73 3c 90 64 a9 8c 20 7b 1a a9 01
>3a29f8	20 7b 14 a2 01 00 a9 00 8f 00 4d 00 20 dc 16 20
>3a2a08	35 05 c2 20 a5 21 9f 00 4d 00 e2 20 af 00 4d 00
>3a2a18	1a 8f 00 4d 00 30 4b e8 e8 20 a3 19 a7 00 c9 2c
>3a2a28	f0 25 c9 8d d0 27 20 82 19 20 21 3d c2 20 a5 bd
>3a2a38	85 21 e2 20 a5 bf 85 23 64 24 a5 e7 09 80 85 e7
>3a2a48	85 25 20 10 3c 28 60 20 82 19 4c 04 2a 08 c2 20
>3a2a58	48 a9 00 08 5b 68 28 e2 20 a9 02 8f d0 08 00 dc
>3a2a68	d1 08 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 0a
>3a2a78	8f d0 08 00 dc d1 08 08 20 a3 19 e2 20 a7 00 f0
>3a2a88	28 c9 3a f0 24 20 e0 03 90 21 20 73 3c 90 1c 20
>3a2a98	c8 2a 20 10 3c 20 a3 19 a7 00 f0 0d c9 3a f0 09
>3a2aa8	c9 2c d0 07 20 82 19 80 cf 28 60 08 c2 20 48 a9
>3a2ab8	00 08 5b 68 28 e2 20 a9 02 8f d0 08 00 dc d1 08
>3a2ac8	08 a5 02 85 40 a5 00 85 3e a5 1a 85 44 a5 18 85
>3a2ad8	42 c2 20 a5 38 d0 04 a5 36 f0 44 a5 36 85 00 a5
>3a2ae8	38 85 02 a5 3a 85 18 a5 3c 85 1a e2 20 a7 00 f0
>3a2af8	49 c9 3a f0 45 c9 2c d0 03 20 82 19 20 a3 19 a7
>3a2b08	00 c9 22 f0 44 20 f9 03 b0 44 08 c2 20 48 a9 00
>3a2b18	08 5b 68 28 e2 20 a9 02 8f d0 08 00 dc d1 08 c2
>3a2b28	20 a9 00 00 85 18 a9 01 00 85 1a 18 a5 18 69 04
>3a2b38	00 85 00 a5 1a 69 00 00 85 02 e2 20 a9 80 85 33
>3a2b48	a9 a8 85 35 20 d9 19 80 b3 20 04 16 80 03 20 57
>3a2b58	15 c2 20 a5 00 85 36 a5 02 85 38 a5 18 85 3a a5
>3a2b68	1a 85 3c a5 42 85 18 a5 44 85 1a a5 3e 85 00 a5
>3a2b78	40 85 02 28 60 20 c7 19 60 64 36 64 38 64 3a 64
>3a2b88	3c 60 20 24 00 60 20 dc 16 c2 20 a5 23 48 a5 21
>3a2b98	48 e2 20 a7 00 c9 2c d0 22 20 82 19 20 dc 16 c2
>3a2ba8	20 a5 24 d0 2b 68 85 08 68 85 0a c2 20 a5 21 87
>3a2bb8	08 e2 20 a0 02 00 a5 23 97 08 60 08 c2 20 48 a9
>3a2bc8	00 08 5b 68 28 e2 20 a9 02 8f d0 08 00 dc d1 08
>3a2bd8	08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 09 8f d0
>3a2be8	08 00 dc d1 08 20 dc 16 c2 20 a5 23 48 a5 21 48
>3a2bf8	e2 20 a7 00 c9 2c d0 19 20 82 19 20 dc 16 c2 20
>3a2c08	a5 23 d0 22 68 85 08 68 85 0a c2 20 a5 21 87 08
>3a2c18	60 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 02 8f
>3a2c28	d0 08 00 dc d1 08 08 c2 20 48 a9 00 08 5b 68 28
>3a2c38	e2 20 a9 09 8f d0 08 00 dc d1 08 20 dc 16 c2 20
>3a2c48	a5 23 48 a5 21 48 e2 20 a7 00 c9 2c d0 1f 20 82
>3a2c58	19 20 dc 16 e2 20 a5 22 d0 28 c2 20 a5 23 d0 22
>3a2c68	68 85 08 68 85 0a e2 20 a5 21 87 08 60 08 c2 20
>3a2c78	48 a9 00 08 5b 68 28 e2 20 a9 02 8f d0 08 00 dc
>3a2c88	d1 08 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 09
>3a2c98	8f d0 08 00 dc d1 08 08 c2 20 48 a9 00 08 5b 68
>3a2ca8	28 e2 20 a9 01 8f d0 08 00 dc d1 08 08 e2 20 a7
>3a2cb8	00 f0 05 20 82 19 80 f7 28 60 08 28 60 08 28 60
>3a2cc8	08 28 60 08 c2 20 a5 1a 20 f5 17 a5 18 20 f5 17
>3a2cd8	a5 02 48 a5 00 48 20 c7 19 a5 02 20 f5 17 a5 00
>3a2ce8	20 f5 17 68 85 00 68 85 02 20 a3 19 20 73 3c b0
>3a2cf8	15 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 05 8f
>3a2d08	d0 08 00 dc d1 08 e2 20 a5 e7 20 0c 18 a5 e6 20
>3a2d18	0c 18 c2 20 a5 e4 20 f5 17 20 a3 19 e2 20 a7 00
>3a2d28	c9 87 d0 6a a5 e7 c9 00 f0 04 c9 01 f0 00 20 82
>3a2d38	19 20 dc 16 20 10 3c e2 20 a9 99 20 7b 1a 20 dc
>3a2d48	16 c2 20 a5 25 20 f5 17 a5 23 20 f5 17 a5 21 20
>3a2d58	f5 17 e2 20 a9 9a 85 35 20 a6 1a 90 1b 20 82 19
>3a2d68	20 dc 16 e2 20 a5 25 20 f5 17 c2 20 a5 23 20 f5
>3a2d78	17 a5 21 20 f5 17 80 14 c2 20 a9 00 00 20 f5 17
>3a2d88	a9 00 00 20 f5 17 a9 01 00 20 f5 17 28 60 08 c2
>3a2d98	20 48 a9 00 08 5b 68 28 e2 20 a9 02 8f d0 08 00
>3a2da8	dc d1 08 08 8b 08 e2 20 48 a9 00 48 ab 68 28 08
>3a2db8	c2 20 48 a9 00 08 5b 68 28 c2 30 a4 31 c8 c8 c2
>3a2dc8	20 b9 0c 00 85 e4 b9 0e 00 e2 20 85 e6 b9 10 00
>3a2dd8	85 e7 c2 20 5a 20 e7 3a 7a c2 20 b9 00 00 85 27
>3a2de8	b9 02 00 85 29 e2 20 b9 04 00 85 2b c2 20 5a 20
>3a2df8	6a 1f 20 10 3c 7a c2 20 b9 06 00 85 27 b9 08 00
>3a2e08	85 29 e2 20 b9 0a 00 85 2b c2 20 b9 02 00 30 0a
>3a2e18	20 a4 20 20 e2 04 f0 28 80 08 20 87 20 20 e2 04
>3a2e28	f0 1e c2 20 b9 12 00 85 00 b9 14 00 85 02 b9 16
>3a2e38	00 85 18 b9 18 00 85 1a e2 20 a9 03 85 d9 80 17
>3a2e48	a2 21 08 20 3c 14 c2 20 18 a5 31 69 1a 00 85 31
>3a2e58	a5 33 69 00 00 85 33 ab 28 60 08 a5 18 48 a5 1a
>3a2e68	48 20 a3 19 20 b1 05 a5 21 f0 26 20 42 1c 90 38
>3a2e78	e2 20 a9 02 85 d9 20 c7 19 c2 20 68 20 f5 17 68
>3a2e88	20 f5 17 a5 02 20 f5 17 a5 00 20 f5 17 e6 2f 28
>3a2e98	60 68 68 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9
>3a2ea8	02 8f d0 08 00 dc d1 08 68 68 08 c2 20 48 a9 00
>3a2eb8	08 5b 68 28 e2 20 a9 06 8f d0 08 00 dc d1 08 08
>3a2ec8	c2 30 a5 2f f0 1e 20 17 18 85 00 20 17 18 85 02
>3a2ed8	20 17 18 85 18 20 17 18 85 1a c6 2f e2 20 a9 03
>3a2ee8	85 d9 28 60 08 c2 20 48 a9 00 08 5b 68 28 e2 20
>3a2ef8	a9 07 8f d0 08 00 dc d1 08 08 20 dc 16 20 e2 04
>3a2f08	f0 1c e2 20 a9 94 20 7b 1a 20 b1 05 20 e2 04 f0
>3a2f18	12 20 42 1c 90 22 e2 20 a9 02 85 d9 80 03 20 c7
>3a2f28	19 28 60 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9
>3a2f38	02 8f d0 08 00 dc d1 08 08 c2 20 48 a9 00 08 5b
>3a2f48	68 28 e2 20 a9 06 8f d0 08 00 dc d1 08 08 e2 20
>3a2f58	a9 01 85 d9 28 60 08 20 a3 19 20 b1 05 a5 21 f0
>3a2f68	0d 20 42 1c 90 1d e2 20 a9 02 85 d9 28 60 08 c2
>3a2f78	20 48 a9 00 08 5b 68 28 e2 20 a9 02 8f d0 08 00
>3a2f88	dc d1 08 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9
>3a2f98	06 8f d0 08 00 dc d1 08 20 de 13 20 48 0c 20 e6
>3a2fa8	39 60 08 a7 00 10 03 20 82 19 20 73 3c b0 03 4c
>3a2fb8	21 30 e2 20 20 c5 1a c9 8c d0 0e a9 8c 20 7b 1a
>3a2fc8	a9 00 8f 00 4d 00 20 5a 15 20 a3 19 e2 20 a7 00
>3a2fd8	c9 87 f0 03 4c 21 30 20 82 19 a5 e7 48 a5 e6 48
>3a2fe8	a5 e5 48 a5 e4 48 20 dc 16 68 85 e4 68 85 e5 68
>3a2ff8	85 e6 68 85 e7 29 80 f0 1b 20 59 3a 90 30 c2 20
>3a3008	a0 09 00 b7 08 85 bd e2 20 c8 c8 b7 08 85 bf 20
>3a3018	e4 3e 80 03 20 10 3c 28 60 08 c2 20 48 a9 00 08
>3a3028	5b 68 28 e2 20 a9 02 8f d0 08 00 dc d1 08 08 c2
>3a3038	20 48 a9 00 08 5b 68 28 e2 20 a9 05 8f d0 08 00
>3a3048	dc d1 08 08 e2 20 20 c5 1a c9 00 f0 5c 20 dc 16
>3a3058	e2 20 a5 25 c9 ff f0 14 c9 02 d0 05 20 b6 30 80
>3a3068	0b c9 00 d0 05 20 d6 30 80 02 80 40 20 a3 19 a7
>3a3078	00 f0 36 c9 3a f0 32 c9 2c f0 19 c9 3b f0 1a 08
>3a3088	c2 20 48 a9 00 08 5b 68 28 e2 20 a9 02 8f d0 08
>3a3098	00 dc d1 08 a9 09 20 18 00 20 82 19 20 a3 19 a7
>3a30a8	00 f0 09 c9 3a f0 05 80 a4 20 49 03 28 60 08 8b
>3a30b8	08 c2 20 48 a9 00 08 5b 68 28 e2 20 c2 10 a0 00
>3a30c8	00 b7 21 f0 06 20 18 00 c8 80 f6 ab 28 60 08 c2
>3a30d8	20 20 dc 10 a5 14 85 21 a5 16 85 23 20 b6 30 28
>3a30e8	60 08 e2 20 85 b3 4a 4a 4a 4a 29 0f 18 69 30 97
>3a30f8	14 c8 a5 b3 29 0f 18 69 30 97 14 c8 28 60 e2 20
>3a3108	a9 8c 20 7b 1a 08 20 dc 16 e2 20 c2 10 af 0e 08
>3a3118	af 09 08 8f 0e 08 af 20 95 10 a0 00 00 af 06 08
>3a3128	af 20 e9 30 a9 2f 97 14 c8 af 09 08 af 20 e9 30
>3a3138	a9 2f 97 14 c8 af 0a 08 af 20 e9 30 a9 00 97 14
>3a3148	af 0e 08 af 29 f7 8f 0e 08 af c2 20 a5 14 85 21
>3a3158	a5 16 85 23 e2 20 a9 02 85 25 20 0e 12 28 e2 20
>3a3168	20 82 19 60 e2 20 a9 8c 20 7b 1a 08 20 dc 16 e2
>3a3178	20 c2 10 af 0e 08 af 09 08 8f 0e 08 af 20 95 10
>3a3188	a0 00 00 af 04 08 af 20 e9 30 a9 3a 97 14 c8 af
>3a3198	02 08 af 20 e9 30 a9 3a 97 14 c8 af 00 08 af 20
>3a31a8	e9 30 a9 00 97 14 af 0e 08 af 29 f7 8f 0e 08 af
>3a31b8	c2 20 a5 14 85 21 a5 16 85 23 e2 20 a9 02 85 25
>3a31c8	20 0e 12 28 e2 20 20 82 19 60 08 c2 20 20 dc 16
>3a31d8	20 f5 04 c2 20 a5 21 49 ff ff 85 21 a5 23 49 ff
>3a31e8	ff 85 23 e6 21 d0 03 e6 23 00 28 60 e2 20 a9 8c
>3a31f8	20 7b 1a 08 c2 30 20 dc 16 20 15 05 c2 20 a5 23
>3a3208	48 a5 21 48 20 a3 19 e2 20 a7 00 c9 2c f0 03 4c
>3a3218	6b 32 20 82 19 20 dc 16 20 35 05 c2 20 a5 21 48
>3a3228	20 a3 19 e2 20 a7 00 c9 2c f0 03 4c 6b 32 20 82
>3a3238	19 20 dc 16 20 35 05 c2 20 a5 21 85 8d e2 20 a5
>3a3248	23 85 8f c2 20 68 85 27 a9 00 00 85 29 68 85 21
>3a3258	68 85 23 e2 20 a9 02 85 25 20 66 12 e2 20 20 82
>3a3268	19 28 60 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9
>3a3278	02 8f d0 08 00 dc d1 08 08 c2 20 48 a9 00 08 5b
>3a3288	68 28 e2 20 a9 09 8f d0 08 00 dc d1 08 e2 20 a9
>3a3298	8c 20 7b 1a 08 c2 30 20 dc 16 e2 20 a5 25 c9 02
>3a32a8	f0 03 4c 19 33 c2 20 a5 23 48 a5 21 48 20 a3 19
>3a32b8	e2 20 a7 00 c9 2c f0 03 4c 2e 33 20 82 19 20 dc
>3a32c8	16 e2 20 a5 25 c9 00 d0 48 c2 20 a5 21 85 8d c2
>3a32d8	20 68 85 21 68 85 23 e2 20 a9 02 85 25 e2 20 a0
>3a32e8	00 00 b7 21 f0 03 c8 80 f9 c2 20 98 38 e5 8d 30
>3a32f8	09 85 27 a9 00 00 85 29 80 07 a9 00 00 85 27 85
>3a3308	29 e2 20 a9 00 85 2b 20 66 12 e2 20 20 82 19 28
>3a3318	60 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 04 8f
>3a3328	d0 08 00 dc d1 08 08 c2 20 48 a9 00 08 5b 68 28
>3a3338	e2 20 a9 02 8f d0 08 00 dc d1 08 08 c2 20 48 a9
>3a3348	00 08 5b 68 28 e2 20 a9 09 8f d0 08 00 dc d1 08
>3a3358	e2 20 a9 8c 20 7b 1a 08 c2 30 20 dc 16 e2 20 a5
>3a3368	25 c9 02 f0 03 4c c4 33 c2 20 a5 23 48 a5 21 48
>3a3378	20 a3 19 e2 20 a7 00 c9 2c f0 03 4c d9 33 20 82
>3a3388	19 20 dc 16 e2 20 a5 25 c9 00 d0 30 c2 20 a5 21
>3a3398	85 8d c2 20 a9 00 00 85 27 a9 00 00 85 29 e2 20
>3a33a8	a9 00 85 2b c2 20 68 85 21 68 85 23 e2 20 a9 02
>3a33b8	85 25 20 66 12 e2 20 20 82 19 28 60 08 c2 20 48
>3a33c8	a9 00 08 5b 68 28 e2 20 a9 04 8f d0 08 00 dc d1
>3a33d8	08 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 02 8f
>3a33e8	d0 08 00 dc d1 08 08 c2 20 48 a9 00 08 5b 68 28
>3a33f8	e2 20 a9 09 8f d0 08 00 dc d1 08 e2 20 a9 8c 20
>3a3408	7b 1a 20 dc 16 c2 10 e2 20 a5 25 c9 02 d0 23 c2
>3a3418	20 a5 00 85 3e a5 02 85 40 a5 21 85 00 a5 23 85
>3a3428	02 20 b1 05 a5 3e 85 00 a5 40 85 02 e2 20 20 82
>3a3438	19 60 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 04
>3a3448	8f d0 08 00 dc d1 08 e2 20 a9 8c 20 7b 1a 08 20
>3a3458	dc 16 c2 10 e2 20 a5 25 c9 00 d0 1d 20 dc 10 c2
>3a3468	20 a5 14 85 21 a5 16 85 23 e2 20 a9 02 85 25 20
>3a3478	0e 12 28 e2 20 20 82 19 60 08 c2 20 48 a9 00 08
>3a3488	5b 68 28 e2 20 a9 04 8f d0 08 00 dc d1 08 e2 20
>3a3498	a9 8c 20 7b 1a 08 20 dc 16 20 15 05 c2 20 64 0c
>3a34a8	64 0e e2 30 a0 00 b7 21 c9 20 f0 04 c9 24 d0 03
>3a34b8	c8 80 f3 b7 21 20 0a 04 90 1e c2 20 06 0c 26 0e
>3a34c8	06 0c 26 0e 06 0c 26 0e 06 0c 26 0e e2 20 20 2b
>3a34d8	04 05 0c 85 0c c8 80 db c2 20 a5 0c 85 21 a5 0e
>3a34e8	85 23 e2 20 a9 00 85 25 28 e2 20 20 82 19 60 e2
>3a34f8	20 a9 8c 20 7b 1a 08 20 dc 16 20 f5 04 20 95 10
>3a3508	e2 30 a0 ff a9 00 97 14 88 a5 21 29 0f aa bf 00
>3a3518	60 3a 97 14 88 a5 21 29 f0 4a 4a 4a 4a aa bf 00
>3a3528	60 3a 97 14 88 a5 22 85 21 a5 23 85 22 a5 24 85
>3a3538	23 a9 00 85 24 a5 21 d0 d0 a5 22 d0 cc a5 23 d0
>3a3548	c8 98 38 65 14 85 21 a5 15 85 22 a5 16 85 23 a5
>3a3558	17 85 24 a9 02 85 25 20 0e 12 28 e2 20 20 82 19
>3a3568	60 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 04 8f
>3a3578	d0 08 00 dc d1 08 e2 20 a9 8c 20 7b 1a 20 dc 16
>3a3588	e2 20 a5 25 c9 02 d0 1f 8b a5 23 48 ab c2 10 a6
>3a3598	21 20 59 11 ab 84 21 c2 20 64 23 e2 20 a9 00 85
>3a35a8	25 e2 20 20 82 19 60 08 c2 20 48 a9 00 08 5b 68
>3a35b8	28 e2 20 a9 04 8f d0 08 00 dc d1 08 e2 20 a9 8c
>3a35c8	20 7b 1a 20 dc 16 e2 20 a5 25 c9 00 d0 12 e2 20
>3a35d8	a7 21 85 21 64 22 64 23 64 2e e2 20 20 82 19 60
>3a35e8	08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 04 8f d0
>3a35f8	08 00 dc d1 08 e2 20 a9 8c 20 7b 1a 20 dc 16 e2
>3a3608	20 a5 25 c9 00 d0 1d c2 20 a7 21 85 0c e2 20 a0
>3a3618	02 00 b7 21 85 23 64 24 c2 20 a5 0c 85 21 e2 20
>3a3628	20 82 19 60 08 c2 20 48 a9 00 08 5b 68 28 e2 20
>3a3638	a9 04 8f d0 08 00 dc d1 08 e2 20 a9 8c 20 7b 1a
>3a3648	20 dc 16 e2 20 a5 25 c9 00 d0 0e c2 20 a7 21 85
>3a3658	21 64 23 e2 20 20 82 19 60 08 c2 20 48 a9 00 08
>3a3668	5b 68 28 e2 20 a9 04 8f d0 08 00 dc d1 08 e2 20
>3a3678	a9 8c 20 7b 1a 20 dc 16 e2 20 a5 25 c9 00 d0 24
>3a3688	20 95 10 a5 21 87 14 a9 00 a0 01 00 97 14 c2 20
>3a3698	a5 14 85 21 a5 16 85 23 e2 20 a9 02 85 25 e2 20
>3a36a8	20 82 19 60 08 c2 20 48 a9 00 08 5b 68 28 e2 20
>3a36b8	a9 04 8f d0 08 00 dc d1 08 e2 20 a9 8c 20 7b 1a
>3a36c8	20 dc 16 e2 20 a5 25 c9 02 d0 14 a7 21 85 21 64
>3a36d8	22 64 23 64 24 a9 00 85 25 e2 20 20 82 19 60 08
>3a36e8	c2 20 48 a9 00 08 5b 68 28 e2 20 a9 04 8f d0 08
>3a36f8	00 dc d1 08 e2 20 a9 8c 20 7b 1a 20 dc 16 e2 20
>3a3708	a5 25 c9 00 d0 39 e2 20 a5 24 d0 48 a5 23 d0 44
>3a3718	a5 22 d0 40 c2 10 20 95 10 a4 21 e2 20 a9 00 97
>3a3728	14 88 30 07 a9 20 97 14 88 10 fb a9 02 85 25 c2
>3a3738	20 a5 14 85 21 a5 16 85 23 e2 20 20 82 19 60 08
>3a3748	c2 20 48 a9 00 08 5b 68 28 e2 20 a9 04 8f d0 08
>3a3758	00 dc d1 08 08 c2 20 48 a9 00 08 5b 68 28 e2 20
>3a3768	a9 09 8f d0 08 00 dc d1 08 e2 20 a9 8c 20 7b 1a
>3a3778	20 dc 16 e2 20 a5 25 c9 00 d0 39 e2 20 a5 24 d0
>3a3788	48 a5 23 d0 44 a5 22 d0 40 c2 10 20 95 10 a4 21
>3a3798	e2 20 a9 00 97 14 88 30 07 a9 09 97 14 88 10 fb
>3a37a8	a9 02 85 25 c2 20 a5 14 85 21 a5 16 85 23 e2 20
>3a37b8	20 82 19 60 08 c2 20 48 a9 00 08 5b 68 28 e2 20
>3a37c8	a9 04 8f d0 08 00 dc d1 08 08 c2 20 48 a9 00 08
>3a37d8	5b 68 28 e2 20 a9 09 8f d0 08 00 dc d1 08 e2 20
>3a37e8	a9 8c 20 7b 1a 20 dc 16 20 f5 04 c2 20 a5 23 10
>3a37f8	17 49 ff ff 85 23 a5 21 49 ff ff 18 69 01 00 85
>3a3808	21 a5 23 69 00 00 85 23 e2 20 20 82 19 60 e2 20
>3a3818	a9 8c 20 7b 1a 20 dc 16 e2 20 a5 25 c9 00 d0 25
>3a3828	c2 20 a5 23 30 12 d0 04 a5 21 f0 13 a9 00 00 85
>3a3838	23 a9 01 00 85 21 80 07 a9 ff ff 85 23 85 21 e2
>3a3848	20 20 82 19 60 08 c2 20 48 a9 00 08 5b 68 28 e2
>3a3858	20 a9 04 8f d0 08 00 dc d1 08 00 ea 60 08 0b 08
>3a3868	c2 20 48 a9 00 08 5b 68 28 c2 30 c2 20 a9 00 00
>3a3878	85 d6 e2 20 a9 01 85 d8 c2 30 a9 00 00 a0 00 00
>3a3888	97 d6 a0 02 00 97 d6 a0 04 00 97 d6 20 58 19 2b
>3a3898	28 60 8b 08 c2 20 a9 00 00 85 18 a9 01 00 85 1a
>3a38a8	20 58 19 20 f8 1b 28 ab 60 08 c2 20 64 53 a9 ff
>3a38b8	7f 85 57 20 49 03 20 c5 1a 29 ff 00 c9 00 00 f0
>3a38c8	2c c9 81 00 f0 1a 20 a3 19 20 b1 05 a5 21 85 53
>3a38d8	20 c5 1a 29 ff 00 c9 00 00 f0 12 c9 81 00 d0 2a
>3a38e8	20 7b 1a 20 a3 19 20 b1 05 a5 21 85 57 a5 1a 48
>3a38f8	a5 18 48 a5 02 48 a5 00 48 20 e9 12 68 85 00 68
>3a3908	85 02 68 85 18 68 85 1a 28 60 08 c2 20 48 a9 00
>3a3918	08 5b 68 28 e2 20 a9 02 8f d0 08 00 dc d1 08 08
>3a3928	20 dc 16 20 15 05 e2 20 c2 10 a0 00 00 a2 00 00
>3a3938	b7 21 9f 00 70 3a f0 04 e8 c8 80 f4 c2 30 a9 00
>3a3948	00 85 ab 85 57 e2 20 a9 02 85 ad 85 59 c2 20 64
>3a3958	b0 20 65 38 20 bb 02 90 23 c2 20 a2 0c 00 bf 00
>3a3968	71 3a 85 ae 20 50 00 10 11 20 28 00 20 f6 1e e2
>3a3978	20 a9 2e 20 18 00 c2 20 80 ea 28 60 08 c2 20 48
>3a3988	a9 00 08 5b 68 28 e2 20 a9 0b 8f d0 08 00 dc d1
>3a3998	08 08 e2 20 20 49 03 20 05 02 a2 00 00 bf 00 71
>3a39a8	3a f0 09 20 18 00 e8 e0 08 00 d0 f1 a9 2e 20 18
>3a39b8	00 a2 08 00 bf 00 71 3a f0 09 20 18 00 e8 e0 0b
>3a39c8	00 d0 f1 20 49 03 a2 14 00 bf 00 71 3a d0 08 e8
>3a39d8	e8 bf 00 71 3a f0 05 20 1d 02 b0 be 28 60 08 08
>3a39e8	c2 20 48 a9 00 08 5b 68 28 c2 20 64 e1 64 e4 e2
>3a39f8	20 64 e3 64 e6 64 e7 c2 20 38 a5 d6 69 04 00 85
>3a3a08	de e2 20 a5 d8 69 00 85 e0 28 60 c9 5f f0 1a c9
>3a3a18	3a b0 04 c9 30 b0 12 c9 5b b0 04 c9 41 b0 0a c9
>3a3a28	7b b0 04 c9 61 b0 02 18 60 38 60 08 e2 20 c2 10
>3a3a38	a0 00 00 b7 0c f0 0a d7 e4 d0 13 c8 c0 08 00 d0
>3a3a48	f2 b7 e4 20 54 04 20 13 3a b0 03 28 38 60 28 18
>3a3a58	60 08 e2 20 c2 10 a0 00 00 a2 00 00 b7 e4 f0 0b
>3a3a68	20 54 04 9f 00 4e 00 c8 e8 80 f1 a9 00 9f 00 4e
>3a3a78	00 c2 20 a9 00 4e 85 e4 e2 20 a9 00 85 e6 c2 20
>3a3a88	a5 e1 85 08 d0 06 e2 20 a5 e3 f0 4d e2 20 a5 e3
>3a3a98	85 0a a5 e7 a0 00 00 d7 08 d0 17 c2 20 18 a5 08
>3a3aa8	69 01 00 85 0c e2 20 a5 0a 69 00 85 0e 20 33 3a
>3a3ab8	b0 2a a0 0d 00 c2 20 b7 08 85 0c c8 c8 e2 20 b7
>3a3ac8	08 85 0e d0 06 c2 20 a5 0c f0 0e c2 20 a5 0c 85
>3a3ad8	08 e2 20 a5 0e 85 0a 80 b9 28 18 60 28 38 60 08
>3a3ae8	20 59 3a b0 15 08 c2 20 48 a9 00 08 5b 68 28 e2
>3a3af8	20 a9 05 8f d0 08 00 dc d1 08 c2 30 a0 09 00 b7
>3a3b08	08 85 21 c8 c8 b7 08 85 23 e2 20 a0 00 00 b7 08
>3a3b18	85 25 28 60 08 c2 20 18 a5 de 69 10 00 85 08 e2
>3a3b28	20 a5 e0 69 00 85 0a c5 b9 90 1d c2 20 a5 08 c5
>3a3b38	b7 90 15 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9
>3a3b48	09 8f d0 08 00 dc d1 08 c2 20 a5 de 85 bd e2 20
>3a3b58	a5 e0 85 bf c2 20 a5 08 85 de e2 20 a5 0a 85 e0
>3a3b68	28 60 08 e2 20 a5 25 c5 e7 f0 15 08 c2 20 48 a9
>3a3b78	00 08 5b 68 28 e2 20 a9 04 8f d0 08 00 dc d1 08
>3a3b88	c2 10 20 1c 3b c2 30 18 a5 bd 69 01 00 85 08 e2
>3a3b98	20 a5 bf 69 00 85 0a a0 00 00 a9 00 97 08 c8 c0
>3a3ba8	08 00 d0 f8 a0 00 00 b7 e4 f0 10 20 54 04 20 13
>3a3bb8	3a 90 08 97 08 c8 c0 08 00 d0 ec c2 20 a0 09 00
>3a3bc8	a5 21 97 bd a5 23 c8 c8 97 bd a5 e1 a0 0d 00 97
>3a3bd8	bd c8 c8 e2 20 a5 e3 97 bd c2 20 a5 bd 85 e1 e2
>3a3be8	20 a5 bf 85 e3 e2 20 a0 00 00 a5 25 97 bd c9 02
>3a3bf8	f0 02 28 60 c2 20 a5 21 85 bd e2 20 a5 23 85 bf
>3a3c08	20 ac 0e 20 c1 0e 80 ea 08 c2 30 a5 e1 d0 06 e2
>3a3c18	20 a5 e3 f0 05 20 59 3a b0 05 20 6a 3b 80 17 e2
>3a3c28	20 a5 25 c9 02 f0 11 c2 30 a0 09 00 a5 21 97 08
>3a3c38	c8 c8 a5 23 97 08 28 60 a0 09 00 b7 08 85 bd c8
>3a3c48	c8 e2 20 b7 08 85 bf 20 ac 0e 20 e0 0e e2 20 a5
>3a3c58	25 c9 02 f0 02 80 d0 c2 20 a5 21 85 bd e2 20 a5
>3a3c68	23 85 bf 20 ac 0e 20 c1 0e 80 bc 08 20 a3 19 e2
>3a3c78	20 a7 00 20 e0 03 90 42 c2 20 a5 00 85 e4 e2 20
>3a3c88	a5 02 85 e6 20 82 19 a7 00 f0 0d c9 24 f0 14 c9
>3a3c98	25 f0 09 20 13 3a b0 ec a9 00 80 0c 20 82 19 a9
>3a3ca8	00 80 05 20 82 19 a9 02 85 e7 20 c5 1a c9 8c d0
>3a3cb8	06 a5 e7 09 80 85 e7 28 38 60 28 18 60 08 c2 20
>3a3cc8	48 a9 00 08 5b 68 28 c2 20 a5 21 85 0c a5 23 64
>3a3cd8	0e 64 21 64 23 e2 20 64 26 a9 01 85 25 c2 20 a5
>3a3ce8	0c f0 35 10 0e e2 20 a9 80 85 26 c2 20 49 ff ff
>3a3cf8	1a 85 0c e2 20 e6 24 c2 20 46 0e 66 0c e2 20 66
>3a3d08	23 66 22 66 21 c2 20 a5 0c c9 01 00 d0 e5 e2 20
>3a3d18	06 26 66 23 66 22 66 21 60 08 20 ac 0e c2 20 a9
>3a3d28	01 00 85 21 a9 00 00 85 23 e2 20 af 00 4d 00 c2
>3a3d38	20 29 ff 00 85 8d a8 a2 01 00 c2 20 bf 00 4d 00
>3a3d48	85 27 a9 00 00 85 29 20 ad 1f e8 e8 88 d0 eb c2
>3a3d58	20 a9 04 00 85 27 a9 00 00 85 29 20 ad 1f e2 20
>3a3d68	af 00 4d 00 85 0c a9 00 85 0d c2 20 06 0c 38 a5
>3a3d78	21 65 0c 85 21 a5 23 69 00 00 85 23 d0 29 e2 20
>3a3d88	a5 e7 09 80 a6 21 20 70 0c e2 20 af 00 4d 00 87
>3a3d98	bd a0 01 00 a2 00 00 e2 20 bf 01 4d 00 97 bd e4
>3a3da8	8d f0 19 e8 c8 80 f0 08 c2 20 48 a9 00 08 5b 68
>3a3db8	28 e2 20 a9 09 8f d0 08 00 dc d1 08 e2 20 38 a5
>3a3dc8	bd 67 bd 85 08 a5 be 69 00 85 09 a5 bf 69 00 85
>3a3dd8	0a 64 0b c2 20 a0 05 00 b7 c0 85 0c e2 20 c8 c8
>3a3de8	b7 c0 85 0e 64 0f e2 20 a9 00 87 08 c2 20 18 a5
>3a3df8	08 69 01 00 85 08 a5 0a 69 00 00 85 0a c5 0e d0
>3a3e08	e5 a5 08 c5 0c d0 df 28 60 08 c2 20 64 08 64 0a
>3a3e18	e2 20 af 00 4d 00 85 8d 64 8e a2 01 00 e2 20 a7
>3a3e28	bd c5 8d f0 15 08 c2 20 48 a9 00 08 5b 68 28 e2
>3a3e38	20 a9 0a 8f d0 08 00 dc d1 08 c9 01 f0 3a a0 01
>3a3e48	00 e2 20 bf 00 4d 00 85 21 64 22 64 23 64 24 b7
>3a3e58	bd 85 27 64 28 64 29 64 2a a5 21 c5 27 b0 68 20
>3a3e68	ad 1f c2 20 18 a5 08 65 21 85 08 a5 0a 65 23 85
>3a3e78	0a e8 e8 c8 c4 8d d0 c9 e2 20 18 bf 00 4d 00 85
>3a3e88	8e 65 08 85 08 a5 09 69 00 85 09 c2 20 a5 0a 69
>3a3e98	00 00 85 0a c2 20 06 08 26 0a 06 08 26 0a e2 20
>3a3ea8	38 a5 08 65 8d 85 08 a5 09 69 00 85 09 c2 20 a5
>3a3eb8	0a 69 00 00 85 0a 18 a5 08 65 bd 85 08 e2 20 a5
>3a3ec8	0a 65 bf 85 0a 28 60 08 c2 20 48 a9 00 08 5b 68
>3a3ed8	28 e2 20 a9 09 8f d0 08 00 dc d1 08 08 20 ac 0e
>3a3ee8	e2 20 a0 00 00 b7 c0 29 7f c5 25 d0 28 a5 25 48
>3a3ef8	c2 20 a5 23 48 a5 21 48 20 11 3e 68 85 21 68 85
>3a3f08	23 e2 20 68 85 25 c2 20 a5 21 87 08 a0 02 00 a5
>3a3f18	23 97 08 28 60 08 c2 20 48 a9 00 08 5b 68 28 e2
>3a3f28	20 a9 04 8f d0 08 00 dc d1 08 08 20 ac 0e f4 00
>3a3f38	00 f4 00 00 e2 20 48 20 11 3e e2 20 68 c2 20 68
>3a3f48	68 c2 20 a7 08 85 21 a0 02 00 b7 08 85 23 e2 20
>3a3f58	a0 00 00 b7 c0 29 7f 85 25 28 60 5c 84 57 3a 5c
>3a3f68	c2 56 3a 5c 85 57 3a 5c 44 48 3a 5c a1 48 3a 5c
>3a3f78	d4 47 3a 5c 5a 47 3a 5c d7 4c 3a 5c ce 43 3a 5c
>3a3f88	f2 46 3a 5c ad 46 3a 5c 37 46 3a 5c 87 57 3a 5c
>3a3f98	dc 44 3a 5c 32 43 3a 5c 88 57 3a 5c 0a 44 3a 5c
>3a3fa8	89 57 3a 5c 80 57 3a 5c f0 45 3a 5c 8a 57 3a 18
>3a3fb8	fb c2 20 a9 ff fe 1b 58 5c c4 3f 3a c2 30 22 32
>3a3fc8	43 3a 20 08 00 20 0c 00 8b e2 20 a9 00 48 ab a2
>3a3fd8	00 4f 20 63 04 ab 22 67 3f 3a 22 6f 3f 3a 80 e2
>3a3fe8	08 8b e2 20 a9 3a 48 ab c2 10 a2 fb 3f 20 8d 03
>3a3ff8	ab 28 6b 41 20 3c 73 74 61 72 74 3e 20 3c 61 73
>3a4008	73 65 6d 62 6c 79 3e 0d 20 20 41 73 73 65 6d 62
>3a4018	6c 65 20 61 20 70 72 6f 67 72 61 6d 0d 0d 43 20
>3a4028	3c 73 74 61 72 74 31 3e 20 3c 73 74 61 72 74 32
>3a4038	3e 20 5b 6c 65 6e 20 28 31 20 69 66 20 62 6c 61
>3a4048	6e 6b 29 5d 0d 20 20 43 6f 6d 70 61 72 65 20 74
>3a4058	6f 20 73 65 63 74 69 6f 6e 73 20 6f 66 20 6d 65
>3a4068	6d 6f 72 79 0d 0d 44 20 3c 73 74 61 72 74 3e 20
>3a4078	5b 65 6e 64 5d 0d 20 20 44 69 73 61 73 73 65 6d
>3a4088	62 6c 65 20 61 20 70 72 6f 67 72 61 6d 0d 0d 46
>3a4098	20 3c 73 74 61 72 74 3e 20 3c 65 6e 64 3e 20 3c
>3a40a8	62 79 74 65 3e 0d 20 20 46 69 6c 6c 20 61 20 62
>3a40b8	6c 6f 63 6b 20 6f 66 20 6d 65 6d 6f 72 79 20 77
>3a40c8	69 74 68 20 61 20 62 79 74 65 0d 0d 47 20 5b 61
>3a40d8	64 64 72 65 73 73 5d 0d 20 20 53 74 61 72 74 20
>3a40e8	65 78 65 63 75 74 69 6f 6e 20 61 74 20 61 20 6c
>3a40f8	6f 63 61 74 69 6f 6e 0d 0d 4a 20 5b 61 64 64 72
>3a4108	65 73 73 5d 20 2d 20 4a 75 6d 70 20 74 6f 20 61
>3a4118	20 6c 6f 63 61 74 69 6f 6e 20 69 6e 20 6d 65 6d
>3a4128	6f 72 79 0d 20 20 4a 75 6d 70 20 74 6f 20 61 20
>3a4138	6c 6f 63 61 74 69 6f 6e 20 69 6e 20 6d 65 6d 6f
>3a4148	72 79 0d 0d 48 20 3c 73 74 61 72 74 3e 20 3c 65
>3a4158	6e 64 3e 20 3c 62 79 74 65 3e 20 5b 62 79 74 65
>3a4168	5d 2e 2e 0d 20 20 48 75 6e 74 20 66 6f 72 20 76
>3a4178	61 6c 75 65 73 20 69 6e 20 6d 65 6d 6f 72 79 0d
>3a4188	0d 4d 20 3c 73 74 61 72 74 3e 20 5b 65 6e 64 5d
>3a4198	0d 20 20 44 75 6d 70 20 74 68 65 20 76 61 6c 75
>3a41a8	65 20 69 6e 20 6d 65 6d 6f 72 79 0d 0d 52 20 2d
>3a41b8	20 44 69 73 70 6c 61 79 20 74 68 65 20 76 61 6c
>3a41c8	75 65 73 20 6f 66 20 74 68 65 20 72 65 67 69 73
>3a41d8	74 65 72 73 0d 0d 3b 20 3c 50 43 3e 20 3c 41 3e
>3a41e8	20 3c 58 3e 20 3c 59 3e 20 3c 53 50 3e 20 3c 44
>3a41f8	42 52 3e 20 3c 44 50 3e 20 3c 4e 56 4d 58 44 49
>3a4208	5a 43 3e 0d 20 20 43 68 61 6e 67 65 20 74 68 65
>3a4218	20 63 6f 6e 74 65 6e 74 73 20 6f 66 20 74 68 65
>3a4228	20 72 65 67 69 73 74 65 72 73 0d 0d 54 20 3c 73
>3a4238	74 61 72 74 3e 20 3c 65 6e 64 3e 20 3c 64 65 73
>3a4248	74 69 6e 61 74 69 6f 6e 3e 0d 20 20 54 72 61 6e
>3a4258	73 66 65 72 20 28 63 6f 70 79 29 20 64 61 74 61
>3a4268	20 77 69 74 68 69 6e 20 6d 65 6d 6f 72 79 0d 0d
>3a4278	57 20 3c 62 79 74 65 3e 0d 20 20 53 65 74 20 74
>3a4288	68 65 20 72 65 67 69 73 74 65 72 20 77 69 64 74
>3a4298	68 20 66 6c 61 67 73 20 66 6f 72 20 74 68 65 20
>3a42a8	64 69 73 61 73 73 65 6d 62 6c 65 72 0d 0d 58 20
>3a42b8	2d 20 52 65 74 75 72 6e 20 74 6f 20 42 41 53 49
>3a42c8	43 0d 0d 3e 20 3c 73 74 61 72 74 3e 20 3c 62 79
>3a42d8	74 65 3e 20 5b 62 79 74 65 5d 2e 2e 2e 0d 20 20
>3a42e8	45 64 69 74 20 64 61 74 61 20 69 6e 20 6d 65 6d
>3a42f8	6f 72 79 0d 0d 3f 20 2d 20 44 69 73 70 6c 61 79
>3a4308	20 61 20 73 68 6f 72 74 20 68 65 6c 70 20 73 63
>3a4318	72 65 65 6e 0d 0d 00 08 08 c2 20 48 a9 46 08 5b
>3a4328	68 28 e2 20 a5 0d 85 4e 28 6b 08 e2 20 48 a9 3a
>3a4338	48 ab 68 28 a2 9a 57 20 8d 03 e2 20 a9 3b 20 18
>3a4348	00 a9 20 20 18 00 c2 30 08 e2 20 48 a9 00 48 ab
>3a4358	68 28 a0 03 00 a2 42 02 20 59 03 c2 20 a9 20 00
>3a4368	20 18 00 af 44 02 00 20 9d 03 a9 20 00 20 18 00
>3a4378	af 46 02 00 20 9d 03 a9 20 00 20 18 00 af 48 02
>3a4388	00 20 9d 03 a9 20 00 20 18 00 af 4a 02 00 20 9d
>3a4398	03 a9 20 00 20 18 00 af 4e 02 00 20 b7 03 a9 20
>3a43a8	00 20 18 00 20 18 00 af 4c 02 00 20 9d 03 a9 20
>3a43b8	00 20 18 00 08 e2 20 ad 4f 02 22 18 56 3a 28 20
>3a43c8	49 03 20 49 03 6b 08 0b 08 c2 20 48 a9 46 08 5b
>3a43d8	68 28 e2 20 a5 15 87 0d e2 20 a5 0f c5 13 d0 0e
>3a43e8	c2 20 a5 0d c5 11 d0 06 20 49 03 2b 28 6b c2 20
>3a43f8	18 a5 0d 69 01 00 85 0d e2 20 a5 0e 69 00 85 0e
>3a4408	80 d0 08 0b 08 c2 20 48 a9 46 08 5b 68 28 e2 20
>3a4418	a5 0f c5 17 90 45 c2 20 a5 0d c5 15 90 3d e2 20
>3a4428	a7 0d 87 15 a5 0f c5 13 d0 0b c2 20 a5 0d c5 11
>3a4438	d0 03 4c c1 44 c2 20 18 a5 0d 69 01 00 85 0d e2
>3a4448	20 a5 0e 69 00 85 0e c2 20 18 a5 15 69 01 00 85
>3a4458	15 e2 20 a5 16 69 00 85 16 80 c3 c2 20 38 a5 11
>3a4468	e5 0d 85 19 e2 20 a5 13 e5 0f 85 1b c2 20 18 a5
>3a4478	19 65 15 85 15 e2 20 a5 1b 65 17 85 17 e2 20 a7
>3a4488	11 87 15 a5 13 c5 0f d0 0a c2 20 a5 11 c5 0d d0
>3a4498	02 80 26 c2 20 38 a5 11 e9 01 00 85 11 e2 20 a5
>3a44a8	12 e9 00 85 12 c2 20 38 a5 15 e9 01 00 85 15 e2
>3a44b8	20 a5 16 e9 00 85 16 80 c4 20 49 03 2b 28 6b 08
>3a44c8	e2 20 c9 21 90 0b c9 7f 90 04 c9 a0 90 03 28 38
>3a44d8	6b 28 18 6b 08 8b 0b 08 c2 20 48 a9 46 08 5b 68
>3a44e8	28 e2 20 a5 31 c9 02 b0 16 c9 01 90 20 c2 20 18
>3a44f8	a5 0d 69 00 01 85 11 e2 20 a5 0f 69 00 85 13 c2
>3a4508	20 a5 0d 85 32 e2 20 a5 0f 85 34 80 12 c2 20 18
>3a4518	a5 32 69 00 01 85 11 e2 20 a5 34 69 00 85 13 e2
>3a4528	20 a0 00 00 c2 20 a5 32 85 19 e2 20 a5 34 85 1b
>3a4538	e2 20 a7 19 22 c7 44 3a b0 02 a9 3f 99 7c 08 c2
>3a4548	20 18 a5 19 69 01 00 85 19 e2 20 a5 1b 69 00 85
>3a4558	1b c8 c0 08 00 90 db a9 00 99 7c 08 a9 3e 20 18
>3a4568	00 a9 20 20 18 00 e2 20 a5 34 20 b7 03 a9 3a 20
>3a4578	18 00 c2 20 a5 32 20 9d 03 c2 20 a9 08 00 85 47
>3a4588	e2 20 a9 20 20 18 00 a7 32 20 b7 03 22 f7 55 3a
>3a4598	e2 20 c6 47 d0 ea a9 20 20 18 00 a9 20 20 18 00
>3a45a8	08 e2 20 48 a9 00 48 ab 68 28 a2 7c 08 20 8d 03
>3a45b8	20 49 03 a5 34 c5 13 90 0f c2 20 a5 32 c5 11 90
>3a45c8	07 20 49 03 2b ab 28 6b 4c 27 45 08 8d 90 08 e2
>3a45d8	20 bd 00 00 99 00 00 ad 90 08 f0 0a c8 e8 e8 e8
>3a45e8	e8 ce 90 08 80 eb 28 6b 08 0b 8b 08 c2 20 48 a9
>3a45f8	46 08 5b 68 28 08 e2 20 48 a9 00 48 ab 68 28 c2
>3a4608	30 a5 0d 85 32 a5 0f 85 34 e2 20 a5 31 3a 85 47
>3a4618	a2 57 08 a0 7c 08 22 d3 45 3a a0 00 00 b9 7c 08
>3a4628	87 32 22 f7 55 3a c8 c4 47 d0 f2 ab 2b 28 6b 08
>3a4638	0b 8b 08 c2 20 48 a9 46 08 5b 68 28 08 e2 20 48
>3a4648	a9 00 48 ab 68 28 e2 20 c2 10 a5 31 3a 3a 85 47
>3a4658	a2 5b 08 a0 7c 08 22 d3 45 3a c2 20 a5 0d 85 32
>3a4668	a5 0f 85 34 c2 20 a5 34 c5 13 d0 06 a5 32 c5 11
>3a4678	f0 2c e2 20 a0 00 00 b7 32 d9 7c 08 d0 1a c8 c4
>3a4688	47 d0 f4 c2 20 a5 32 85 4a a5 34 85 4c 22 a1 50
>3a4698	3a e2 20 a9 20 20 18 00 22 f7 55 3a 80 c6 20 49
>3a46a8	03 ab 2b 28 6b 08 c2 20 48 a9 46 08 5b 68 28 e2
>3a46b8	20 a5 31 f0 0e c2 30 a5 0d 8f 40 02 00 a5 0f 8f
>3a46c8	42 02 00 af 46 02 00 aa af 48 02 00 a8 af 4a 02
>3a46d8	00 1b af 4c 02 00 5b e2 20 a9 3a 48 a9 46 48 a9
>3a46e8	ed 48 4c 24 47 ea 5c 04 00 3a 08 c2 20 48 a9 46
>3a46f8	08 5b 68 28 e2 20 a5 31 f0 c9 c2 30 a5 0d 8f 40
>3a4708	02 00 a5 0f 8f 42 02 00 af 46 02 00 aa af 48 02
>3a4718	00 a8 af 4a 02 00 1b af 4c 02 00 5b e2 20 af 4e
>3a4728	02 00 48 ab a9 5c 8f a0 08 00 af 42 02 00 8f a3
>3a4738	08 00 af 41 02 00 8f a2 08 00 af 40 02 00 8f a1
>3a4748	08 00 af 4f 02 00 48 c2 20 af 44 02 00 28 5c a0
>3a4758	08 00 08 0b 8b 08 e2 20 48 a9 3a 48 ab 68 28 08
>3a4768	c2 20 48 a9 46 08 5b 68 28 c2 10 e2 20 a5 31 c9
>3a4778	02 f0 0c c9 03 d0 11 c2 20 a5 15 85 47 80 11 c2
>3a4788	20 a9 01 00 85 47 80 08 a2 8b 57 20 8d 03 80 35
>3a4798	a5 0d 85 4a a5 0f 85 4c a0 00 00 e2 20 a7 4a d7
>3a47a8	11 f0 09 22 a1 50 3a a9 20 20 18 00 c2 20 18 a5
>3a47b8	4a 69 01 00 85 4a a5 4c 69 00 00 85 4c c8 c4 47
>3a47c8	d0 d9 20 49 03 20 49 03 ab 2b 28 6b 08 0b 8b 08
>3a47d8	e2 20 48 a9 00 48 ab 68 28 08 c2 20 48 a9 46 08
>3a47e8	5b 68 28 e2 20 a5 31 f0 4f a6 0d 8e 40 02 a6 0f
>3a47f8	8e 42 02 c9 01 f0 41 a6 11 8e 44 02 c9 02 f0 38
>3a4808	a6 15 8e 46 02 c9 03 f0 2f a6 19 8e 48 02 c9 04
>3a4818	f0 26 a6 1d 8e 4a 02 c9 05 f0 1d e2 10 a6 21 8e
>3a4828	4e 02 c9 06 f0 12 c2 10 a6 25 8e 4c 02 c9 07 f0
>3a4838	07 e2 10 a6 29 8e 4f 02 ab 2b 28 6b 08 0b 8b 08
>3a4848	c2 20 48 a9 46 08 5b 68 28 e2 20 c2 10 a2 00 00
>3a4858	bf cb 57 3a f0 18 c7 08 f0 03 e8 80 f3 c2 20 8a
>3a4868	0a aa bf 7a 48 3a 8f 2d 08 00 22 9e 48 3a ab 2b
>3a4878	28 6b 73 3f 7b 3f 7f 3f 83 3f 87 3f 8b 3f 8f 3f
>3a4888	93 3f 97 3f 9b 3f 77 3f 9f 3f a3 3f a7 3f 1f 43
>3a4898	ab 3f af 3f e8 3f 6c 2d 08 08 8b 0b 08 c2 20 48
>3a48a8	a9 46 08 5b 68 28 e2 20 a5 31 c9 02 b0 03 4c 47
>3a48b8	4a c2 20 a5 0d 85 32 a5 0f 85 34 c2 20 22 49 4c
>3a48c8	3a c9 ff ff f0 10 85 54 e2 20 a5 31 c9 03 f0 36
>3a48d8	a9 13 85 4f 80 4c 20 49 03 08 e2 20 48 a9 3a 48
>3a48e8	ab 68 28 c2 10 a2 7e 4a 20 8d 03 4c 47 4a 20 49
>3a48f8	03 08 e2 20 48 a9 3a 48 ab 68 28 c2 10 a2 8d 4a
>3a4908	20 8d 03 4c 47 4a e2 20 22 7f 4c 3a c9 ff f0 de
>3a4918	85 4f c9 03 f0 62 c9 0b f0 5e c9 13 f0 04 c9 08
>3a4928	f0 00 22 77 4b 3a b0 03 4c 10 4a 87 32 22 f7 55
>3a4938	3a 08 e2 20 48 a9 00 48 ab 68 28 c2 20 a5 32 85
>3a4948	56 a5 34 85 58 e2 20 a5 4f c9 12 f0 6c c9 16 f0
>3a4958	68 c9 14 f0 7c 29 3f c9 02 d0 03 4c 3e 4a c2 20
>3a4968	29 ff 00 aa e2 20 bf 3d 55 3a c9 03 f0 57 c9 02
>3a4978	f0 5f c9 01 f0 67 80 71 c2 20 a5 54 c9 b5 51 f0
>3a4988	26 c9 19 52 f0 2a c9 99 51 f0 1c c9 9d 51 f0 17
>3a4998	c9 a5 51 f0 12 c9 8d 51 f0 0d c9 a1 51 f0 08 c9
>3a49a8	89 51 f0 03 4c 2a 49 e2 20 a9 12 85 4f 4c 2a 49
>3a49b8	e2 20 a9 16 85 4f 4c 2a 49 22 ba 4a 3a 90 60 c9
>3a49c8	02 f0 0e 80 18 a0 02 00 b9 96 08 97 56 22 f7 55
>3a49d8	3a a0 01 00 b9 96 08 97 56 22 f7 55 3a a0 00 00
>3a49e8	b9 96 08 97 56 22 f7 55 3a e2 20 a9 41 20 18 00
>3a49f8	a9 20 20 18 00 a6 32 86 4a a6 34 86 4c 22 a1 50
>3a4a08	3a a9 20 20 18 00 80 37 20 49 03 08 e2 20 48 a9
>3a4a18	3a 48 ab 68 28 c2 10 a2 4b 4a 20 8d 03 80 20 20
>3a4a28	49 03 08 e2 20 48 a9 3a 48 ab 68 28 c2 10 a2 9b
>3a4a38	4a 20 8d 03 80 09 a5 4f 29 c0 d0 95 4c e5 49 2b
>3a4a48	ab 28 6b 41 64 64 72 65 73 73 69 6e 67 20 6d 6f
>3a4a58	64 65 20 6e 6f 74 20 64 65 66 69 6e 65 64 20 66
>3a4a68	6f 72 20 74 68 61 74 20 69 6e 73 74 72 75 63 74
>3a4a78	69 6f 6e 2e 0d 00 42 61 64 20 6d 6e 65 6d 6f 6e
>3a4a88	69 63 2e 0d 00 42 61 64 20 6f 70 65 72 61 6e 64
>3a4a98	2e 0d 00 52 65 6c 61 74 69 76 65 20 6f 66 66 73
>3a4aa8	65 74 20 69 73 20 74 6f 6f 20 6c 61 72 67 65 2e
>3a4ab8	0d 00 08 0b 08 c2 20 48 a9 46 08 5b 68 28 e2 20
>3a4ac8	a5 4f c9 12 f0 0a c2 20 18 a5 32 69 02 00 80 08
>3a4ad8	c2 20 18 a5 32 69 01 00 85 4a a5 34 69 00 00 85
>3a4ae8	4c 38 a5 50 e5 4a 85 50 a5 52 e5 4c 85 52 e2 20
>3a4af8	a5 4f c9 16 f0 1e a5 50 30 0c a5 51 d0 2a a5 52
>3a4b08	d0 26 a9 01 80 26 a5 51 c9 ff d0 1c a5 52 c9 ff
>3a4b18	d0 16 80 18 a5 51 30 06 a5 52 d0 0c 80 0e a5 52
>3a4b28	c9 ff d0 04 a9 02 80 04 2b 28 18 6b 2b 28 38 6b
>3a4b38	08 0b c2 10 da 08 c2 20 48 a9 46 08 5b 68 28 e2
>3a4b48	20 a2 00 00 df 00 60 3a f0 08 e8 e0 10 00 f0 1b
>3a4b58	80 f2 c2 20 06 50 26 52 06 50 26 52 06 50 26 52
>3a4b68	06 50 26 52 e2 20 8a 05 50 85 50 fa 2b 28 6b 0b
>3a4b78	8b 08 c2 20 48 a9 46 08 5b 68 28 08 e2 20 48 a9
>3a4b88	3a 48 ab 68 28 e2 20 a5 4f 29 3f 85 4a c2 30 a2
>3a4b98	00 00 a0 00 00 bd 3b 52 f0 1b c5 54 d0 0d e2 20
>3a4ba8	b9 3d 54 29 3f c5 4a f0 07 c2 20 e8 e8 c8 80 e5
>3a4bb8	98 38 ab 2b 6b 18 ab 2b 6b 08 0b 08 c2 20 48 a9
>3a4bc8	46 08 5b 68 28 e2 20 c2 10 a0 00 00 64 50 64 52
>3a4bd8	b7 03 f0 11 c9 64 f0 19 48 b7 36 85 4a 68 c5 4a
>3a4be8	d0 0b c8 80 eb b7 36 d0 04 2b 28 38 6b 2b 28 18
>3a4bf8	6b e2 20 b7 36 c9 3a b0 04 c9 30 b0 14 c9 47 b0
>3a4c08	04 c9 41 b0 0c c9 67 b0 e4 c9 61 b0 02 80 de 29
>3a4c18	df 22 38 4b 3a 80 cb 0b 08 c2 20 48 a9 46 08 5b
>3a4c28	68 28 a0 00 00 e2 20 b7 03 f0 03 c8 80 f9 c2 20
>3a4c38	c8 5a 68 18 65 03 85 03 a5 05 69 00 00 85 05 2b
>3a4c48	6b 0b 08 c2 20 48 a9 46 08 5b 68 28 c2 20 a5 11
>3a4c58	85 36 a5 13 85 38 a9 c9 50 85 03 a9 3a 00 85 05
>3a4c68	22 c1 4b 3a b0 0d 22 1f 4c 3a a7 03 d0 f2 a9 ff
>3a4c78	ff 80 02 a5 03 2b 6b 08 0b 08 c2 20 48 a9 46 08
>3a4c88	5b 68 28 c2 30 a5 15 85 36 a5 17 85 38 a9 55 55
>3a4c98	85 03 a9 3a 00 85 05 22 c1 4b 3a b0 22 22 1f 4c
>3a4ca8	3a c2 20 18 a5 03 69 01 00 85 03 a5 05 69 00 00
>3a4cb8	85 05 e2 20 a7 03 d0 df c2 20 a9 ff ff 80 0d 22
>3a4cc8	1f 4c 3a e2 20 a7 03 c2 20 29 ff 00 2b 28 6b 08
>3a4cd8	8b 0b 08 c2 20 48 a9 46 08 5b 68 28 e2 20 a5 31
>3a4ce8	c9 02 b0 16 c9 01 90 20 c2 20 18 a5 0d 69 00 01
>3a4cf8	85 11 e2 20 a5 0f 69 00 85 13 c2 20 a5 0d 85 32
>3a4d08	e2 20 a5 0f 85 34 80 12 c2 20 18 a5 32 69 00 01
>3a4d18	85 11 e2 20 a5 34 69 00 85 13 22 3d 4d 3a e2 20
>3a4d28	a5 34 c5 13 90 f4 c2 20 a5 32 c5 11 90 ec 20 49
>3a4d38	03 2b ab 28 6b 08 0b e2 20 a9 41 20 18 00 a9 20
>3a4d48	20 18 00 08 c2 20 48 a9 78 08 5b 68 28 c2 20 a5
>3a4d58	00 85 18 e2 20 a5 02 85 1a 22 a1 50 3a a9 20 20
>3a4d68	18 00 c2 20 18 a5 00 69 01 00 85 18 e2 20 a5 02
>3a4d78	69 00 85 1a e2 20 c2 10 a7 00 c9 c2 d0 0b 48 a7
>3a4d88	18 49 ff 2f 94 08 00 80 0b c9 e2 d0 0c 48 a7 18
>3a4d98	0f 94 08 00 8f 94 08 00 68 c2 20 29 ff 00 0a aa
>3a4da8	bf 3b 52 3a aa 22 1b 50 3a e2 20 a7 00 aa bf 3d
>3a4db8	54 3a 22 f7 55 3a 22 c8 4d 3a 20 49 03 2b 28 6b
>3a4dc8	08 e2 20 48 29 3f 0a c2 10 aa 68 7c d6 4d 06 4e
>3a4dd8	21 4e 28 4e 4d 4e 54 4e 6f 4e 91 4e a2 4e df 4e
>3a4de8	e7 4e f8 4e 09 4f 10 4f 35 4f 62 4f ce 4e b3 4e
>3a4df8	80 4e 55 4f 5f 4f 73 4f a2 4f 50 4f b3 4f a9 28
>3a4e08	20 18 00 22 ca 4f 3a a9 2c 20 18 00 a9 58 20 18
>3a4e18	00 a9 29 20 18 00 4c c4 4f 22 ca 4f 3a 4c c4 4f
>3a4e28	e2 20 48 a9 23 20 18 00 68 29 c0 c9 00 f0 0f 4a
>3a4e38	4a 2f 94 08 00 d0 07 22 d4 4f 3a 4c c4 4f 22 ca
>3a4e48	4f 3a 4c c4 4f 22 d4 4f 3a 4c c4 4f a9 28 20 18
>3a4e58	00 22 ca 4f 3a a9 29 20 18 00 a9 2c 20 18 00 a9
>3a4e68	59 20 18 00 4c c4 4f 22 ca 4f 3a a9 2c 20 18 00
>3a4e78	a9 58 20 18 00 4c c4 4f 22 ca 4f 3a a9 2c 20 18
>3a4e88	00 a9 59 20 18 00 4c c4 4f 22 d4 4f 3a a9 2c 20
>3a4e98	18 00 a9 59 20 18 00 4c c4 4f 22 d4 4f 3a a9 2c
>3a4ea8	20 18 00 a9 58 20 18 00 4c c4 4f a9 28 20 18 00
>3a4eb8	22 d4 4f 3a a9 2c 20 18 00 a9 58 20 18 00 a9 29
>3a4ec8	20 18 00 4c c4 4f a9 28 20 18 00 22 ca 4f 3a a9
>3a4ed8	29 20 18 00 4c c4 4f a9 41 20 18 00 4c c8 4f 22
>3a4ee8	ca 4f 3a a9 2c 20 18 00 a9 53 20 18 00 4c c4 4f
>3a4ef8	a9 5b 20 18 00 22 ca 4f 3a a9 5d 20 18 00 4c c4
>3a4f08	4f 22 e2 4f 3a 4c c8 4f a9 28 20 18 00 22 ca 4f
>3a4f18	3a a9 2c 20 18 00 a9 53 20 18 00 a9 29 20 18 00
>3a4f28	a9 2c 20 18 00 a9 59 20 18 00 4c c4 4f a9 5b 20
>3a4f38	18 00 22 ca 4f 3a a9 5d 20 18 00 a9 2c 20 18 00
>3a4f48	a9 59 20 18 00 4c c4 4f a0 02 00 80 03 a0 01 00
>3a4f58	22 48 50 3a 4c c8 4f 4c c8 4f 22 e2 4f 3a a9 2c
>3a4f68	20 18 00 a9 58 20 18 00 4c c8 4f a9 23 20 18 00
>3a4f78	8b a5 02 48 ab a6 00 e8 a0 01 00 22 59 03 3a a9
>3a4f88	2c 20 18 00 a9 23 20 18 00 a6 00 a0 01 00 22 59
>3a4f98	03 3a ab 22 f7 55 3a 4c c4 4f a9 28 20 18 00 22
>3a4fa8	d4 4f 3a a9 29 20 18 00 4c c4 4f a9 5b 20 18 00
>3a4fb8	22 d4 4f 3a a9 5d 20 18 00 4c c4 4f 22 f7 55 3a
>3a4fc8	28 6b 08 e2 20 a7 00 20 b7 03 28 6b 08 c2 30 a7
>3a4fd8	00 20 9d 03 22 f7 55 3a 28 6b 08 8b 0b c2 30 5a
>3a4fe8	08 c2 20 48 a9 78 08 5b 68 28 08 e2 20 48 a9 00
>3a4ff8	48 ab 68 28 e2 20 a0 00 00 a7 00 99 90 08 22 f7
>3a5008	55 3a c8 c0 03 00 d0 f1 22 a1 50 3a c2 30 7a 2b
>3a5018	ab 28 6b 08 8b e2 20 c2 10 08 e2 20 48 a9 3a 48
>3a5028	ab 68 28 bd 00 00 20 18 00 e8 bd 00 00 20 18 00
>3a5038	e8 bd 00 00 20 18 00 e8 a9 20 20 18 00 ab 28 6b
>3a5048	08 0b 08 c2 20 48 a9 78 08 5b 68 28 e2 20 c0 02
>3a5058	00 f0 14 a7 00 85 18 30 06 64 19 64 1a 80 1e a9
>3a5068	ff 85 19 85 1a 80 16 a7 00 85 18 22 f7 55 3a a7
>3a5078	00 85 19 30 04 64 1a 80 04 a9 ff 85 1a c2 20 38
>3a5088	a5 00 65 18 85 18 e2 20 a5 02 65 1a 85 1a 22 a1
>3a5098	50 3a 22 f7 55 3a 2b 28 6b 08 0b c2 20 48 08 c2
>3a50a8	20 48 a9 46 08 5b 68 28 e2 20 a5 4c 20 b7 03 e2
>3a50b8	20 a9 3a 20 18 00 c2 20 a5 4a 20 9d 03 68 2b 28
>3a50c8	6b 4f 52 41 00 41 4e 44 00 45 4f 52 00 41 44 43
>3a50d8	00 53 54 41 00 4c 44 41 00 43 4d 50 00 53 42 43
>3a50e8	00 41 53 4c 00 52 4f 4c 00 4c 53 52 00 52 4f 52
>3a50f8	00 53 54 58 00 4c 44 58 00 44 45 43 00 49 4e 43
>3a5108	00 42 49 54 00 4a 4d 50 00 53 54 59 00 4c 44 59
>3a5118	00 43 50 59 00 43 50 58 00 42 52 4b 00 4a 53 52
>3a5128	00 52 54 49 00 52 54 53 00 50 48 50 00 50 4c 50
>3a5138	00 50 48 41 00 50 4c 41 00 44 45 59 00 54 41 59
>3a5148	00 49 4e 59 00 49 4e 58 00 43 4c 43 00 53 45 43
>3a5158	00 43 4c 49 00 53 45 49 00 54 59 41 00 43 4c 56
>3a5168	00 43 4c 44 00 53 45 44 00 54 58 41 00 54 58 53
>3a5178	00 54 41 58 00 54 53 58 00 44 45 58 00 4e 4f 50
>3a5188	00 42 50 4c 00 42 4d 49 00 42 56 43 00 42 56 53
>3a5198	00 42 43 43 00 42 43 53 00 42 4e 45 00 42 45 51
>3a51a8	00 54 53 42 00 54 52 42 00 53 54 5a 00 42 52 41
>3a51b8	00 50 48 59 00 50 4c 59 00 50 48 58 00 50 4c 58
>3a51c8	00 50 48 44 00 50 4c 44 00 50 48 4b 00 52 54 4c
>3a51d8	00 50 48 42 00 50 4c 42 00 57 41 49 00 58 42 41
>3a51e8	00 54 43 53 00 54 53 43 00 54 43 44 00 54 44 43
>3a51f8	00 54 58 59 00 54 59 58 00 53 54 50 00 58 43 45
>3a5208	00 43 4f 50 00 4a 53 4c 00 57 44 4d 00 50 45 52
>3a5218	00 42 52 4c 00 52 45 50 00 53 45 50 00 4d 56 50
>3a5228	00 4d 56 4e 00 50 45 49 00 50 45 41 00 4a 4d 4c
>3a5238	00 00 00 21 51 c9 50 09 52 c9 50 a9 51 c9 50 e9
>3a5248	50 c9 50 31 51 c9 50 e9 50 c9 51 a9 51 c9 50 e9
>3a5258	50 c9 50 89 51 c9 50 c9 50 c9 50 ad 51 c9 50 e9
>3a5268	50 c9 50 51 51 c9 50 05 51 e9 51 ad 51 c9 50 e9
>3a5278	50 c9 50 25 51 cd 50 0d 52 cd 50 09 51 cd 50 ed
>3a5288	50 cd 50 35 51 cd 50 ed 50 cd 51 09 51 cd 50 ed
>3a5298	50 cd 50 8d 51 cd 50 cd 50 cd 50 09 51 cd 50 ed
>3a52a8	50 cd 50 55 51 cd 50 01 51 ed 51 09 51 cd 50 ed
>3a52b8	50 cd 50 29 51 d1 50 11 52 d1 50 25 52 d1 50 f1
>3a52c8	50 d1 50 39 51 d1 50 f1 50 d1 51 0d 51 d1 50 f1
>3a52d8	50 d1 50 91 51 d1 50 d1 50 d1 50 29 52 d1 50 f1
>3a52e8	50 d1 50 59 51 d1 50 b9 51 f1 51 35 52 d1 50 f1
>3a52f8	50 d1 50 2d 51 d5 50 15 52 d5 50 b1 51 d5 50 f5
>3a5308	50 d5 50 3d 51 d5 50 f5 50 d5 51 0d 51 d5 50 f5
>3a5318	50 d5 50 95 51 d5 50 d5 50 d5 50 b1 51 d5 50 f5
>3a5328	50 d5 50 5d 51 d5 50 bd 51 f5 51 0d 51 d5 50 f5
>3a5338	50 d5 50 b5 51 d9 50 19 52 d9 50 11 51 d9 50 f9
>3a5348	50 d9 50 41 51 09 51 71 51 d9 51 11 51 d9 50 f9
>3a5358	50 d9 50 99 51 d9 50 d9 50 d9 50 11 51 d9 50 f9
>3a5368	50 d9 50 61 51 d9 50 75 51 f9 51 b1 51 d9 50 b1
>3a5378	51 d9 50 15 51 dd 50 fd 50 dd 50 15 51 dd 50 fd
>3a5388	50 dd 50 45 51 dd 50 79 51 dd 51 15 51 dd 50 fd
>3a5398	50 dd 50 9d 51 dd 50 dd 50 dd 50 15 51 dd 50 fd
>3a53a8	50 dd 50 65 51 dd 50 7d 51 fd 51 15 51 dd 50 fd
>3a53b8	50 dd 50 19 51 e1 50 1d 52 e1 50 19 51 e1 50 01
>3a53c8	51 e1 50 49 51 e1 50 81 51 e1 51 19 51 e1 50 01
>3a53d8	51 e1 50 a1 51 e1 50 e1 50 e1 50 2d 52 e1 50 01
>3a53e8	51 e1 50 69 51 e1 50 c1 51 01 52 35 52 e1 50 01
>3a53f8	51 e1 50 1d 51 e5 50 21 52 e5 50 1d 51 e5 50 05
>3a5408	51 e5 50 4d 51 e5 50 85 51 e5 51 1d 51 e5 50 05
>3a5418	51 e5 50 a5 51 e5 50 e5 50 e5 50 31 52 e5 50 05
>3a5428	51 e5 50 6d 51 e5 50 c5 51 05 52 25 51 e5 50 05
>3a5438	51 e5 50 00 00 13 00 02 09 01 01 01 0a 13 82 08
>3a5448	13 03 03 03 0b 12 04 0f 0c 01 05 05 0d 13 06 08
>3a5458	13 03 07 07 0e 03 00 0b 09 01 01 01 0a 13 82 08
>3a5468	13 03 03 03 0b 12 04 0f 0c 05 05 05 0d 13 06 08
>3a5478	13 07 07 07 0e 13 00 13 09 14 01 01 0a 13 82 08
>3a5488	13 03 03 03 0b 12 04 0f 0c 14 05 05 0d 13 06 13
>3a5498	13 0b 07 07 0b 13 00 16 09 01 01 01 0a 13 82 08
>3a54a8	13 15 03 03 0b 12 04 0f 0c 05 05 05 0d 13 06 13
>3a54b8	13 10 07 07 0e 12 00 16 09 01 01 01 0a 13 82 13
>3a54c8	13 03 03 03 0b 12 04 0f 0c 05 05 11 0d 13 06 13
>3a54d8	13 03 07 07 0e 82 00 42 09 01 01 01 0a 13 82 13
>3a54e8	13 03 03 03 0b 12 04 0f 0c 05 05 11 0d 13 06 13
>3a54f8	13 07 07 06 0e 42 00 02 09 01 01 01 0a 13 82 13
>3a5508	13 03 03 03 0b 12 04 0f 0c 01 05 05 0d 13 06 13
>3a5518	13 17 07 07 0e 42 00 02 09 01 01 01 0f 13 82 13
>3a5528	13 03 03 03 0b 12 04 0f 0c 03 05 05 0d 13 06 13
>3a5538	13 10 07 07 0e 01 01 01 02 01 01 02 02 00 01 01
>3a5548	03 01 01 03 01 02 01 01 00 02 02 02 02 41 00 08
>3a5558	64 64 3a 64 64 64 64 2c 58 00 0e 64 64 3a 64 64
>3a5568	64 64 00 0b 64 64 64 64 2c 58 00 07 64 64 64 64
>3a5578	2c 59 00 06 64 64 64 64 00 03 64 64 2c 58 00 05
>3a5588	64 64 2c 59 00 11 64 64 2c 53 00 09 64 64 00 01
>3a5598	23 64 64 64 64 00 c2 23 64 64 2c 23 64 64 00 14
>3a55a8	23 64 64 00 02 28 64 64 2c 53 29 2c 59 00 0c 28
>3a55b8	64 64 64 64 2c 58 29 00 10 28 64 64 64 64 29 00
>3a55c8	10 28 64 64 2c 58 29 00 00 28 64 64 29 2c 59 00
>3a55d8	04 28 64 64 29 00 0f 5b 64 64 64 64 5d 00 17 5b
>3a55e8	64 64 5d 2c 59 00 0d 5b 64 64 5d 00 0a 00 00 08
>3a55f8	c2 20 48 18 af 78 08 00 69 01 00 8f 78 08 00 e2
>3a5608	20 af 7a 08 00 69 00 8f 7a 08 00 c2 20 68 28 6b
>3a5618	08 c2 10 e2 20 da a2 08 00 0a b0 08 48 a9 30 20
>3a5628	18 00 80 06 48 a9 31 20 18 00 68 ca d0 eb fa 28
>3a5638	6b 08 c2 20 48 a9 46 08 5b 68 28 e2 20 a7 32 f0
>3a5648	0a c9 20 d0 06 22 f7 55 3a 80 f2 6b 08 c2 20 48
>3a5658	a9 46 08 5b 68 28 e2 20 64 4a c2 20 64 50 64 52
>3a5668	e2 20 a7 32 c9 3a f0 0d 20 0a 04 90 0e 22 38 4b
>3a5678	3a a9 01 85 4a 22 f7 55 3a 80 e5 a5 4a f0 16 a5
>3a5688	31 c2 20 29 ff 00 0a 0a aa a5 50 95 0d a5 52 95
>3a5698	0f e2 20 e6 31 6b e2 20 64 31 22 39 56 3a a7 32
>3a56a8	f0 17 22 54 56 3a a5 31 c9 09 b0 0d a7 32 f0 09
>3a56b8	c9 20 f0 e6 20 0a 04 b0 e1 6b 08 0b 08 c2 20 48
>3a56c8	a9 46 08 5b 68 28 c2 10 e2 20 a2 31 00 74 00 ca
>3a56d8	d0 fb a9 00 85 02 85 34 c2 20 a9 00 4f 85 00 85
>3a56e8	32 e2 20 22 39 56 3a c9 00 f0 38 c2 20 a5 32 85
>3a56f8	08 e2 20 a5 34 85 0a a2 01 00 22 f7 55 3a a7 32
>3a5708	d0 06 86 0b 64 31 80 1b c9 20 f0 03 e8 80 eb 86
>3a5718	0b a9 00 87 32 22 f7 55 3a a7 08 c9 41 f0 07 22
>3a5728	9e 56 3a 2b 28 6b 22 39 56 3a a7 32 f0 f5 22 54
>3a5738	56 3a 22 39 56 3a a7 32 f0 e9 c2 20 a5 32 85 11
>3a5748	e2 20 a5 34 85 13 22 f7 55 3a a7 32 f0 26 c9 20
>3a5758	d0 f4 a9 00 87 32 e6 31 22 f7 55 3a 22 39 56 3a
>3a5768	a7 32 f0 bf c2 20 a5 32 85 15 e2 20 a5 34 85 17
>3a5778	e6 31 80 af e6 31 80 ab 5c 29 1f 3a 6b 00 00 00
>3a5788	00 00 00 42 61 64 20 61 72 67 75 6d 65 6e 74 73
>3a5798	0d 00 0d 20 20 50 43 20 20 20 20 20 41 20 20 20
>3a57a8	20 58 20 20 20 20 59 20 20 20 20 53 50 20 20 20
>3a57b8	44 42 52 20 44 50 20 20 20 4e 56 4d 58 44 49 5a
>3a57c8	43 0d 00 41 43 44 46 47 4a 48 4c 4d 52 3b 53 54
>3a57d8	56 57 58 3e 3f 00 18 fb 08 c2 20 48 a9 00 08 5b
>3a57e8	68 28 08 e2 20 48 a9 00 48 ab 68 28 c2 30 20 1d
>3a57f8	58 a9 ff fe 1b 08 e2 20 48 a9 3a 48 ab 68 28 a2
>3a5808	e2 61 20 8d 03 08 e2 20 48 a9 00 48 ab 68 28 4c
>3a5818	29 1f 4c 1a 58 08 20 00 03 20 65 38 28 60 00 00
>3a5828	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;	...repeated 124 times (1984 bytes)...
>3a5ff8	00 00 00 00 00 00 00 00 30 31 32 33 34 35 36 37
>3a6008	38 39 41 42 43 44 45 46 2b 00 2d 00 2a 00 2f 00
>3a6018	4d 4f 44 00 5e 00 3c 00 3d 00 3e 00 4e 4f 54 00
>3a6028	41 4e 44 00 4f 52 00 28 00 29 00 52 45 4d 00 50
>3a6038	52 49 4e 54 00 4c 45 54 00 47 4f 54 4f 00 45 4e
>3a6048	44 00 49 46 00 54 48 45 4e 00 45 4c 53 45 00 47
>3a6058	4f 53 55 42 00 52 45 54 55 52 4e 00 46 4f 52 00
>3a6068	54 4f 00 53 54 45 50 00 4e 45 58 54 00 44 4f 00
>3a6078	4c 4f 4f 50 00 57 48 49 4c 45 00 55 4e 54 49 4c
>3a6088	00 45 58 49 54 00 43 4c 52 00 53 54 4f 50 00 50
>3a6098	4f 4b 45 00 50 4f 4b 45 57 00 50 4f 4b 45 4c 00
>3a60a8	43 4c 53 00 52 45 41 44 00 44 41 54 41 00 52 45
>3a60b8	53 54 4f 52 45 00 44 49 4d 00 43 41 4c 4c 00 3c
>3a60c8	3d 00 3e 3d 00 3c 3e 00 2d 00 4c 45 4e 00 50 45
>3a60d8	45 4b 00 50 45 45 4b 57 00 50 45 45 4b 4c 00 43
>3a60e8	48 52 24 00 41 53 43 00 53 50 43 00 54 41 42 00
>3a60f8	41 42 53 00 53 47 4e 00 48 45 58 24 00 44 45 43
>3a6108	00 53 54 52 24 00 56 41 4c 00 4c 45 46 54 24 00
>3a6118	52 49 47 48 54 24 00 4d 49 44 24 00 52 55 4e 00
>3a6128	4e 45 57 00 4c 4f 41 44 00 4c 49 53 54 00 44 49
>3a6138	52 00 4d 4f 4e 49 54 4f 52 00 47 45 54 00 49 4e
>3a6148	50 55 54 00 53 45 54 42 4f 52 44 45 52 00 54 45
>3a6158	58 54 43 4f 4c 4f 52 00 53 45 54 42 47 43 4f 4c
>3a6168	4f 52 00 53 45 54 44 41 54 45 00 47 45 54 44 41
>3a6178	54 45 24 00 53 45 54 54 49 4d 45 00 47 45 54 54
>3a6188	49 4d 45 24 00 47 52 41 50 48 49 43 53 00 53 45
>3a6198	54 43 4f 4c 4f 52 00 50 49 58 4d 41 50 00 43 4c
>3a61a8	52 50 49 58 4d 41 50 00 50 4c 4f 54 00 4c 49 4e
>3a61b8	45 00 46 49 4c 4c 00 53 50 52 49 54 45 00 53 50
>3a61c8	52 49 54 45 41 54 00 53 50 52 49 54 45 53 48 4f
>3a61d8	57 00 0d 52 45 41 44 59 0d 00 43 32 35 36 20 46
>3a61e8	6f 65 6e 69 78 20 42 41 53 49 43 38 31 36 20 76
>3a61f8	30 30 2e 30 30 20 61 6c 70 68 61 20 28 32 30 32
>3a6208	30 2d 30 31 2d 30 37 29 0d 00
>3b0000					.align 256
.3b0000					CREDITS_TEXT
>3b0000	54 68 69 73 20 69 73 20		                .text "This is the credits screen!"
>3b0008	74 68 65 20 63 72 65 64 69 74 73 20 73 63 72 65
>3b0018	65 6e 21
>3b001b	20 20 20 20 20 20 20 20		                .fill 128 - len("This is the credits screen!"), $20
>3b0023	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
;	...repeated 4 times (64 bytes)...
>3b0073	20 20 20 20 20 20 20 20 20 20 20 20 20
>3b0080	49 20 77 6f 75 6c 64 20		                .text "I would like to thank the academy."
>3b0088	6c 69 6b 65 20 74 6f 20 74 68 61 6e 6b 20 74 68
>3b0098	65 20 61 63 61 64 65 6d 79 2e
>3b00a2	20 20 20 20 20 20 20 20		                .fill 128 - len("I would like to thank the academy."), $20
>3b00aa	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
;	...repeated 4 times (64 bytes)...
>3b00fa	20 20 20 20 20 20
>3b0100					                .text ""
>3b0100	20 20 20 20 20 20 20 20		                .fill 128 - len(""), $20
>3b0108	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
;	...repeated 6 times (96 bytes)...
>3b0178	20 20 20 20 20 20 20 20
>3b0180	50 72 65 73 73 20 61 6e		                .text "Press any key to go back..."
>3b0188	79 20 6b 65 79 20 74 6f 20 67 6f 20 62 61 63 6b
>3b0198	2e 2e 2e
>3b019b	20 20 20 20 20 20 20 20		                .fill 128 - len("Press any key to go back..."), $20
>3b01a3	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
;	...repeated 4 times (64 bytes)...
>3b01f3	20 20 20 20 20 20 20 20 20 20 20 20 20
>3b0200	20 20 20 20 20 20 20 20		                .fill 128 * 60,$20
>3b0208	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
;	...repeated 478 times (7648 bytes)...
>3b1ff8	20 20 20 20 20 20 20 20
>3b2000					.align 256
>3b2000	f3 f3 f3 f3 f3 f3 f3 f3		CREDITS_COLOR   .fill 128 * 64, $F3
>3b2008	f3 f3 f3 f3 f3 f3 f3 f3 f3 f3 f3 f3 f3 f3 f3 f3
;	...repeated 510 times (8160 bytes)...
>3b3ff8	f3 f3 f3 f3 f3 f3 f3 f3

;******  End of listing
